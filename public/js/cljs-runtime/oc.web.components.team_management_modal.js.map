{"version":3,"sources":["oc/web/components/team_management_modal.cljs"],"mappings":"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","names":["oc.web.components.team-management-modal/user-action","team-id","user","action","method","other-link-params","remove-cb","js/$","oc.web.actions.team.user_action","oc.web.components.team-management-modal/real-remove-fn","s","author","p1__44808#","cljs.core.swap_BANG_","cljs.core/set","cljs.core.conj","oc.web.actions.team/remove-author","oc.web.components.team-management-modal/alert-resend-done","oc.web.actions.notifications/show-notification","oc.web.components.team-management-modal/user-match","query","r","js/RegExp","or__4126__auto__","and__4115__auto__","rum.core/build-defcs","js/React.createElement","attrs44819","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","attrs44820","sablono.interpreter/create-element","cljs.core/deref","p1__44811#","cljs.core.into_array","iter__4529__auto__","s__44822","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__44824","cljs.core/chunk-buffer","i__44823","cljs.core/-nth","cljs.core/chunk-append","sablono.util/join-classes","p1__44815#","attrs44830","cljs.core/chunk-cons","cljs.core/chunk","iter__44821","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","oc.web.components.team-management-modal/team-management-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","org-data","org.martinklepsch.derivatives/get-ref","oc.web.actions.team/refresh-team-data","G__44842","invite-users-data","cljs.core/reset!","org.martinklepsch.derivatives/react","team-data","team-roster","cur-user-data","org-authors","all-users","cljs.core.filter","filtered-users","p1__44809#","splitted-users","p1__44810#","cljs.core/group-by","cljs.core._EQ_","self-user","cljs.core.get","other-users","other-sorted-users","cljs.core/reverse","cljs.core.sort_by","oc.lib.user/name-for","sorted-users","cljs.core.concat","is-admin-or-author?","G__44818","fexpr__44817","is-admin?","oc.web.lib.jwt/is-admin?","oc.web.actions.nav-sidebar/close-all-panels","oc.web.actions.nav-sidebar/show-org-settings","user-type","p1__44812#","cljs.core/some","pending?","cljs.core/contains?","current-user","display-name","oc.lib.user.name_for","removing?","G__44826","fexpr__44825","G__44833","fexpr__44832","remove-fn","alert-data","oc.web.components.ui.alert-modal/hide-alert","p__44827","map__44828","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","p__44834","map__44835","success","oc.web.components.ui.alert-modal/show-alert","roster-user","p1__44813#","cljs.core/filterv","resend-fn","invitation-type","inviting-user","cljs.core/select-keys","oc.web.dispatcher/dispatch!","oc.web.actions.team.invite_users","slack-display-name","p1__44814#","cljs.core/vals","fixed-display-name","cljs.core.not_EQ_","clojure.string/starts-with?","oc.web.components.ui.small-loading/small-loading","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.lib.utils/class-set","oc.web.utils.user.active_QMARK_","oc.web.lib.utils/event-stop","oc.web.actions.nav_sidebar.nav_to_author_BANG_","oc.web.urls.contributions","cljs.core/not","clojure.string/capitalize","G__44831","p1__44816#","G__44839","oc.web.components.ui.user-type-dropdown/user-type-dropdown","oc.web.actions.team.switch_user_type","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.team-management-modal\n  (:require [rum.core :as rum]\n            [clojure.string :as s]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.user :as uu]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.user-type-dropdown :refer (user-type-dropdown)]))\n\n(defn user-action [team-id user action method other-link-params remove-cb]\n  (.tooltip (js/$ \"[data-toggle=\\\"tooltip\\\"]\") \"hide\")\n  (team-actions/user-action team-id user action method other-link-params nil remove-cb))\n\n(defn real-remove-fn [s author user team-id remove-cb]\n  (swap! (::removing s) #(set (conj % (:user-id user))))\n  (when author\n    (team-actions/remove-author author))\n  (user-action team-id user \"remove\" \"DELETE\"  {:ref \"application/vnd.open-company.user.v1+json\"} remove-cb))\n\n(defn alert-resend-done []\n  (notification-actions/show-notification {:title \"Invitation resent\"\n                                           :primary-bt-title \"OK\"\n                                           :primary-bt-dismiss true\n                                           :expire 3\n                                           :id :invitation-resent}))\n\n(defn user-match [query user]\n  (let [r (js/RegExp (str \"^.*(\" query \").*$\") \"i\")]\n    (or (and (:name user) (.match (:name user) r))\n        (and (:first-name user) (.match (:first-name user) r))\n        (and (:last-name user) (.match (:last-name user) r))\n        (and (:email user) (.match (:email user) r)))))\n\n(rum/defcs team-management-modal <\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :invite-data)\n  ;; Locals\n  (rum/local false ::resending-invite)\n  (rum/local \"\" ::query)\n  (rum/local #{} ::removing)\n  {:will-mount (fn [s]\n    (let [org-data @(drv/get-ref s :org-data)]\n      (team-actions/refresh-team-data org-data))\n    s)\n   :after-render (fn [s]\n    (doto (js/$ \"[data-toggle=\\\"tooltip\\\"]\")\n     (.tooltip \"fixTitle\")\n     (.tooltip \"hide\"))\n    (when @(::resending-invite s)\n      (let [invite-users-data (:invite-users @(drv/get-ref s :invite-data))]\n        (when (zero? (count invite-users-data))\n          (alert-resend-done)\n          (reset! (::resending-invite s) false))))\n    s)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        invite-users-data (drv/react s :invite-data)\n        team-data (:team-data invite-users-data)\n        team-roster (:team-roster invite-users-data)\n        cur-user-data (:current-user-data invite-users-data)\n        org-authors (:authors org-data)\n        all-users (if team-data\n                    (:users team-data)\n                    (filter :user-id (:users team-roster)))\n        filtered-users (if (seq @(::query s))\n                         (filter #(user-match @(::query s) %) all-users)\n                         all-users)\n        splitted-users (group-by #(= (:user-id %) (:user-id cur-user-data)) filtered-users)\n        self-user (-> splitted-users (get true) first)\n        other-users (get splitted-users false)\n        other-sorted-users (reverse (sort-by user-lib/name-for other-users))\n        sorted-users (if self-user\n                       (concat [self-user] other-sorted-users)\n                       other-sorted-users)\n        is-admin-or-author? (#{:admin :author} (:role cur-user-data))\n        is-admin? (jwt/is-admin? (:team-id org-data))]\n    [:div.team-management-modal\n      [:button.mlb-reset.modal-close-bt\n        {:on-click nav-actions/close-all-panels}]\n      [:div.team-management\n        [:div.team-management-header\n          [:div.team-management-header-title\n            (if is-admin?\n              \"Manage team\"\n              \"View team\")]\n          (when is-admin-or-author?\n            [:button.mlb-reset.save-bt\n              {:on-click #(nav-actions/show-org-settings :invite-picker)}\n              \"Invite\"])\n          [:button.mlb-reset.cancel-bt\n            {:on-click #(nav-actions/show-org-settings nil)}\n            \"Back\"]]\n        [:div.team-management-body\n          [:div.team-management-body-title\n            (str (count all-users) \" member\" (when (> (count all-users) 1) \"s\"))]\n          [:div.team-management-search-users\n            [:input.org-settings-team-search-field.oc-input\n              {:value @(::query s)\n               :placeholder \"Search by name...\"\n               :on-change #(reset! (::query s) (.. % -target -value))}]]\n          [:div.team-management-users-list\n            (for [user sorted-users\n                  :let [user-type (:role user)\n                        author (some #(when (= (:user-id %) (:user-id user)) %) org-authors)\n                        pending? (and (= \"pending\" (:status user))\n                                      (or (contains? user :email)\n                                          (contains? user :slack-id)))\n                        current-user (= (:user-id user) (:user-id cur-user-data))\n                        display-name (user-lib/name-for user)\n                        removing? (@(::removing s) (:user-id user))\n                        remove-fn (fn []\n                                    (let [alert-data {:icon \"/img/ML/trash.svg\"\n                                                      :action\n                                                       (if pending?\n                                                        \"cancel-invitation\"\n                                                        \"remove-user\")\n                                                      :title (str \"Remove \" display-name \"?\")\n                                                      :message\n                                                       (if pending?\n                                                        \"Are you sure you want to cancel this invitation?\"\n                                                        [:span\n                                                          \"This user will no longer be able to access your team on Wut.\"\n                                                          [:br][:br]\n                                                          \"Are you sure you want to remove this user?\"])\n                                                      :link-button-title (if pending?\n                                                                           \"No, keep it\"\n                                                                           \"No, keep them\")\n                                                      :link-button-cb #(alert-modal/hide-alert)\n                                                      :solid-button-style :red\n                                                      :solid-button-title (if pending?\n                                                                            \"Yes, cancel\"\n                                                                            \"Yes, remove\")\n                                                      :solid-button-cb\n                                                       #(do\n                                                         (real-remove-fn s author user (:team-id team-data)\n                                                          (fn [{:keys [success]}]\n                                                            (when success\n                                                              (notification-actions/show-notification\n                                                               {:title (if pending?\n                                                                         \"Invitation cancelled\"\n                                                                         \"Member removed from team\")\n                                                                :primary-bt-title \"OK\"\n                                                                :primary-bt-dismiss true\n                                                                :expire 3\n                                                                :id (if pending?\n                                                                     :cancel-invitation\n                                                                     :member-removed-from-team)}))))\n                                                         (alert-modal/hide-alert))}]\n                                      (alert-modal/show-alert alert-data)))\n                        roster-user (first (filterv #(= (:user-id %) (:user-id user)) (:users team-roster)))\n                        resend-fn (fn []\n                                    (let [invitation-type (if (contains? roster-user :slack-id) \"slack\" \"email\")\n                                          inviting-user (if (= invitation-type \"email\")\n                                                         (:email user)\n                                                         (select-keys\n                                                          roster-user\n                                                          [:email :avatar-url :first-name :last-name :slack-id :slack-org-id]))]\n                                      (dis/dispatch! [:input [:invite-users]\n                                                       [{:user inviting-user\n                                                         :type invitation-type\n                                                         :role (:role user)\n                                                         :error nil}]])\n                                      (reset! (::resending-invite s) true)\n                                      (team-actions/invite-users (:invite-users @(drv/get-ref s :invite-data)) \"\")))\n                        ;; Retrieve the Slack display name for pending and active users\n                        slack-display-name (if (or (= (:status user) \"uninvited\")\n                                                   (= (:status user) \"pending\"))\n                                            (:slack-display-name roster-user)\n                                            (some #(when (seq (:display-name %)) (:display-name %)) (vals (:slack-users roster-user))))\n                        ;; Add @ in front of the slack display name if it's not there already\n                        fixed-display-name (if (and (seq slack-display-name)\n                                                    (not= slack-display-name \"-\")\n                                                    (not (s/starts-with? slack-display-name \"@\")))\n                                             (str \"@\" slack-display-name)\n                                             slack-display-name)]]\n              [:div.team-management-users-item.group\n                {:key (str \"org-settings-team-\" (:user-id user))\n                 :class (when pending? \"is-pending-user\")}\n                (if removing?\n                  (small-loading)\n                  (user-avatar-image user))\n                [:div.user-name\n                  [:button.mlb-reset.user-name-label\n                    {:title (str \"<span>\" (:email user)\n                              (when (seq fixed-display-name)\n                                (str \" | <i class=\\\"mdi mdi-slack\\\"></i>\" (when-not (= fixed-display-name \"-\") (str \" \" fixed-display-name))))\n                              \"</span>\")\n                     :class (utils/class-set {:pending pending?\n                                              :removing removing?})\n                     :on-click #(when (uu/active? user)\n                                  (utils/event-stop %)\n                                  (nav-actions/nav-to-author! % (:user-id user) (oc-urls/contributions (:user-id user))))\n                     :data-toggle \"tooltip\"\n                     :data-html \"true\"\n                     :data-placement \"top\"}\n                    display-name\n                    (when current-user\n                      [:span.current-user \" (you)\"])]\n                  (when pending?\n                    [:div.pending-user\n                      \" (pending\"\n                      (when is-admin?\n                        \": \")\n                      (when is-admin?\n                        [:button.mlb-reset.resend-pending-bt\n                          {:on-click resend-fn\n                           :data-toggle \"tooltip\"\n                           :data-placement \"top\"\n                           :data-container \"body\"\n                           :title (str \"Resend invitation via \" (if (seq fixed-display-name) \"slack\" \"email\"))}\n                          \"resend\"])\n                      (when is-admin?\n                        [:button.mlb-reset.remove-pending-bt\n                          {:on-click remove-fn\n                           :data-toggle \"tooltip\"\n                           :data-placement \"top\"\n                           :data-container \"body\"\n                           :title \"Cancel invitation\"}\n                          \"cancel\"])\n                      \")\"])]\n                [:div.user-role\n                  (if (or current-user\n                          (not is-admin?))\n                    [:span.self-user-type (s/capitalize (:role-string user))]\n                    (user-type-dropdown {:user-id (:user-id user)\n                                         :user-type (:role user)\n                                         :disabled? removing?\n                                         :on-change #(team-actions/switch-user-type user (:role user) % user author)\n                                         :hide-admin (not is-admin?)\n                                         :on-remove (if (and (not= \"pending\" (:status user))\n                                                             (not= (:user-id user) (:user-id cur-user-data)))\n                                                      remove-fn\n                                                      nil)}))]])]]]]))"]}