{"version":3,"sources":["oc/web/utils/medium_editor_media.cljs"],"mappings":"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","names":["oc.web.utils.medium-editor-media/get-media-picker-extension","s","body-el","rum.core/ref-node","editor","js/module$node_modules$medium_editor$dist$js$medium_editor","media-picker-ext","oc.web.utils.medium-editor-media/add-poll","options","editable","delay","cljs.core/deref","oc.web.dispatcher/app-state","oc.web.lib.utils/maybe-after","or__4126__auto__","poll-id","oc.web.utils.poll/new-poll-id","dispatch-input-key","oc.web.actions.poll/add-poll","oc.web.utils.medium-editor-media/add-gif","cljs.core/reset!","oc.web.utils.medium-editor-media/media-gif-add","gif-data","original","target-obj-44235","*runtime-state*-orig-val__44238","oops.state/*runtime-state*","*runtime-state*-temp-val__44239","oops.state/prepare-state","js/Error","next-obj-44236","oops.core/validate-object-access-dynamically","next-obj-44237","original-url","target-obj-44244","*runtime-state*-orig-val__44246","*runtime-state*-temp-val__44247","next-obj-44245","target-obj-44248","*runtime-state*-orig-val__44250","*runtime-state*-temp-val__44251","next-obj-44249","fixed-width-still","target-obj-44252","*runtime-state*-orig-val__44255","*runtime-state*-temp-val__44256","next-obj-44253","next-obj-44254","fixed-width-still-url","target-obj-44261","*runtime-state*-orig-val__44263","*runtime-state*-temp-val__44264","next-obj-44262","target-obj-44265","*runtime-state*-orig-val__44267","*runtime-state*-temp-val__44268","next-obj-44266","original-width","target-obj-44269","*runtime-state*-orig-val__44271","*runtime-state*-temp-val__44272","next-obj-44270","original-height","target-obj-44273","*runtime-state*-orig-val__44275","*runtime-state*-temp-val__44276","next-obj-44274","oc.web.utils.medium-editor-media/media-attachment-dismiss-picker","oc.web.utils.medium-editor-media/attachment-upload-failed-cb","state","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.lib.utils/after","oc.web.utils.medium-editor-media/attachment-upload-success-cb","res","url","target-obj-44277","*runtime-state*-orig-val__44279","*runtime-state*-temp-val__44280","next-obj-44278","cljs.core/not","size","target-obj-44281","*runtime-state*-orig-val__44283","*runtime-state*-temp-val__44284","next-obj-44282","mimetype","target-obj-44285","*runtime-state*-orig-val__44287","*runtime-state*-temp-val__44288","next-obj-44286","filename","target-obj-44289","*runtime-state*-orig-val__44291","*runtime-state*-temp-val__44292","next-obj-44290","createdat","oc.web.lib.utils/js-date","prefix","oc.web.lib.jwt/get-key","oc.web.lib.utils.date_string","subtitle","clojure.contrib.humanize.filesize","icon","oc.web.utils.activity/icon-for-mimetype","attachment-data","oc.web.actions.activity/add-attachment","oc.web.utils.medium-editor-media/attachment-upload-error-cb","error","oc.web.utils.medium-editor-media/add-attachment","oc.web.lib.image_upload.upload_BANG_","cljs.core.partial","oc.web.utils.medium-editor-media/add-video","oc.web.dispatcher/dispatch!","oc.web.utils.medium-editor-media/get-video-thumbnail","video","cljs.core._EQ_","oc.web.utils.medium-editor-media/get-video-src","oc.web.utils.medium-editor-media/media-video-add","video-data","cljs.core/name","oc.web.utils.medium-editor-media/media-photo-add-error","upload-progress-cb","cljs.core/fn?","oc.web.utils.medium-editor-media/media-photo-add-if-finished","image","cljs.core/contains?","oc.web.utils.medium-editor-media/img-on-load","img","and__4115__auto__","cljs.core.merge","goog.dom/removeNode","oc.web.utils.medium-editor-media/media-photo-dismiss-picker","oc.web.utils.medium-editor-media/add-photo","target-obj-44293","*runtime-state*-orig-val__44295","*runtime-state*-temp-val__44296","next-obj-44294","goog.dom/createDom","goog.dom/append","js/document","cuerdas.core/lower","target-obj-44305","*runtime-state*-orig-val__44307","*runtime-state*-temp-val__44308","next-obj-44306","cuerdas.core/ends-with?","target-obj-44309","*runtime-state*-orig-val__44311","*runtime-state*-temp-val__44312","next-obj-44310","cljs.core.assoc","oc.web.lib.image_upload.thumbnail_BANG_","thumbnail-url","progress","err","oc.web.utils.medium-editor-media/on-picker-click","type","oc.web.utils.medium-editor-media/file-dnd-handler","editor-ext","file","target-obj-44313","*runtime-state*-orig-val__44315","*runtime-state*-temp-val__44316","next-obj-44314","oc.web.local-settings/file-upload-size","cmail-state","oc.web.actions.cmail.cmail_show","oc.web.actions.cmail/get-board-for-edit","oc.web.lib.image_upload.upload_file_BANG_","oc.web.lib.utils/to-end-of-content-editable","progress-percentage","target-obj-44317","*runtime-state*-orig-val__44319","*runtime-state*-temp-val__44320","next-obj-44318","target-obj-44321","*runtime-state*-orig-val__44323","*runtime-state*-temp-val__44324","next-obj-44322","target-obj-44325","*runtime-state*-orig-val__44327","*runtime-state*-temp-val__44328","next-obj-44326","oc.web.utils.medium-editor-media/setup-editor","body-on-change","users-list","org.martinklepsch.derivatives/get-ref","cljs.core/seq","mobile-editor","oc.web.lib.responsive/is-tablet-or-mobile?","media-config","placeholder","media-picker-opts","cljs.core/clj->js","js/MediaPicker","file-dragging-ext","js/CarrotFileDragging","buttons","paste-ext-options","cljs.core.remove","cljs.core/nil?","extensions","G__44329","js/AutoList","oc.web.utils.mention/mention-ext","js/AutoQuote","js/AutoCode","js/AutoInlinecode","js/InlineCodeButton","js/HighlighterButton","body-editor","event","e","fexpr__44330","classes","cuerdas.core/includes?","js/emojiAutocomplete"],"sourcesContent":["(ns oc.web.utils.medium-editor-media\n  (:require [rum.core :as rum]\n            [goog.dom :as gdom]\n            [goog.Uri :as guri]\n            [cuerdas.core :as string]\n            [oops.core :refer (oget)]\n            [org.martinklepsch.derivatives :as drv]\n            [clojure.contrib.humanize :refer (filesize)]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.poll :as poll-utils]\n            [oc.web.actions.poll :as poll-actions]\n            [oc.web.utils.activity :as au]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.image-upload :as iu]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.utils.mention :as mention-utils]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [\"medium-editor\" :as medium-editor]))\n\n(defn get-media-picker-extension [s]\n  (let [body-el (rum/ref-node s \"editor-node\")\n        editor (.getEditorFromElement medium-editor body-el)\n        media-picker-ext (.getExtensionByName editor \"media-picker\")]\n    media-picker-ext))\n\n;; Polls\n\n(defn add-poll [s options editable]\n  (let [delay (if (:collapsed (:cmail-state @dis/app-state)) 500 0)]\n    (utils/maybe-after delay #(do\n     (when-not (:use-inline-media-picker options)\n       (let [editable (or editable (get-media-picker-extension s))]\n         (.saveSelection editable)))\n       (let [poll-id (poll-utils/new-poll-id)\n             dispatch-input-key (:dispatch-input-key options)]\n         (.addPoll editable poll-id)\n         (poll-actions/add-poll dispatch-input-key poll-id))))))\n\n;; Gif handling\n\n(defn add-gif [s editable]\n  (reset! (::showing-gif-selector s) true))\n\n(defn media-gif-add [s editable gif-data]\n  (if (nil? gif-data)\n    (.addGIF editable nil nil nil nil)\n    (let [original (oget gif-data [\"images\" \"original\"])\n          original-url (or (oget original \"?url\")\n                           (oget original \"?gif_url\"))\n          fixed-width-still (oget gif-data [\"images\" \"fixed_width_still\"])\n          fixed-width-still-url (or (oget fixed-width-still \"?url\")\n                                    (oget fixed-width-still \"?gif_url\"))\n          original-width (oget original \"width\")\n          original-height (oget original \"height\")]\n      (.addGIF\n       editable\n       original-url\n       fixed-width-still-url\n       original-width\n       original-height))))\n\n;; Attachment\n\n(defn media-attachment-dismiss-picker\n  \"Called every time the image picke close, reset to inital state.\"\n  [s editable]\n  (when-not @(::media-attachment-did-success s)\n    (reset! (::media-attachment s) false)))\n\n(defn attachment-upload-failed-cb [state editable]\n  (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                    :action \"attachment-upload-error\"\n                    :title \"Sorry!\"\n                    :message \"An error occurred with your file.\"\n                    :solid-button-title \"OK\"\n                    :solid-button-cb #(alert-modal/hide-alert)}]\n    (alert-modal/show-alert alert-data)\n    (utils/after 10 #(do\n                       (reset! (::media-attachment-did-success state) false)\n                       (media-attachment-dismiss-picker state editable)))))\n\n(defn attachment-upload-success-cb [state options editable res]\n  (reset! (::media-attachment-did-success state) true)\n  (let [url (oget res :url)]\n    (if-not url\n      (attachment-upload-failed-cb state editable)\n      (let [size (oget res :size)\n            mimetype (oget res :mimetype)\n            filename (oget res :filename)\n            createdat (utils/js-date)\n            prefix (str \"Uploaded by \" (jwt/get-key :name) \" on \" (utils/date-string createdat [:year]) \" - \")\n            subtitle (str prefix (filesize size :binary false :format \"%.2f\" ))\n            icon (au/icon-for-mimetype mimetype)\n            attachment-data {:file-name filename\n                             :file-type mimetype\n                             :file-size size\n                             :file-url url}\n            dispatch-input-key (:dispatch-input-key options)]\n        (reset! (::media-attachment state) false)\n        (activity-actions/add-attachment dispatch-input-key attachment-data)\n        (utils/after 1000 #(reset! (::media-attachment-did-success state) false))))))\n\n(defn attachment-upload-error-cb [state editable res error]\n  (attachment-upload-failed-cb state editable))\n\n(defn add-attachment [s options editable]\n  (let [editable (or editable (get-media-picker-extension s))]\n    (.saveSelection editable)\n    (reset! (::media-attachment s) true)\n    (iu/upload!\n     nil\n     (partial attachment-upload-success-cb s options editable)\n     nil\n     (partial attachment-upload-error-cb s editable)\n     (fn []\n       (utils/after 400 #(media-attachment-dismiss-picker s editable))))))\n\n;; Video\n\n(defn add-video [s options editable]\n  (when-not (:use-inline-media-picker options)\n    (let [editable (or editable (get-media-picker-extension s))]\n      (.saveSelection editable)))\n  (dis/dispatch! [:input [:media-input :media-video] true])\n  (reset! (::media-video s) true)\n  (when (:use-inline-media-picker options)\n    (reset! (::showing-media-video-modal s) true)))\n\n(defn get-video-thumbnail [video]\n  (cond\n   (= (:type video) :loom)\n   (str \"https://cdn.loom.com/sessions/thumbnails/\" (:id video) \"-00001.jpg\")\n   (= (:type video) :youtube)\n   (str \"https://img.youtube.com/vi/\" (:id video) \"/0.jpg\")\n   (= (:type video) :vimeo)\n   (:thumbnail video)))\n\n(defn get-video-src [video]\n  (cond\n   (= (:type video) :loom)\n   (str \"https://www.loom.com/embed/\" (:id video))\n   (= (:type video) :youtube)\n   (str \"https://www.youtube.com/embed/\" (:id video))\n   (= (:type video) :vimeo)\n   (str \"https://player.vimeo.com/video/\" (:id video))))\n\n(defn media-video-add [s editable video-data]\n  (if (nil? video-data)\n    (.addVideo editable nil nil nil nil)\n    (.addVideo\n     editable\n     (get-video-src video-data)\n     (name (:type video-data))\n     (:id video-data)\n     (get-video-thumbnail video-data))))\n\n;; Photo\n\n(defn media-photo-add-error\n  \"Show an error alert view for failed uploads.\"\n  [s options]\n  (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                    :action \"media-photo-upload-error\"\n                    :title \"Sorry!\"\n                    :message \"An error occurred with your image.\"\n                    :solid-button-title \"OK\"\n                    :solid-button-cb #(alert-modal/hide-alert)}\n        upload-progress-cb (:upload-progress-cb options)]\n    (when (fn? upload-progress-cb)\n      (upload-progress-cb false))\n    (reset! (::upload-lock s) false)\n    (alert-modal/show-alert alert-data)))\n\n(defn media-photo-add-if-finished [s options editable]\n  (let [image @(::media-photo s)\n        upload-progress-cb (:upload-progress-cb options)]\n    (when (and (contains? image :url)\n               (contains? image :width)\n               (contains? image :height)\n               (contains? image :thumbnail))\n      (.addPhoto editable (:url image) (:thumbnail image) (:width image) (:height image))\n      (reset! (::media-photo s) nil)\n      (reset! (::media-photo-did-success s) false)\n      (reset! (::upload-lock s) false)\n      (when (fn? upload-progress-cb)\n        (upload-progress-cb false)))))\n\n(defn img-on-load [s options editable url img]\n  (if (and url img)\n    (do\n      (reset! (::media-photo s) (merge @(::media-photo s) {:width (.-width img) :height (.-height img)}))\n      (gdom/removeNode img)\n      (media-photo-add-if-finished s options editable))\n    (media-photo-add-error s options)))\n\n(defn media-photo-dismiss-picker\n  \"Called every time the image picke close, reset to inital state.\"\n  [s editable]\n  (when-not @(::media-photo-did-success s)\n    (reset! (::media-photo s) false)\n    (.addPhoto editable nil nil nil nil)))\n\n(defn add-photo [s options editable]\n  (let [editable (or editable (get-media-picker-extension s))]\n    (.saveSelection editable)\n    (reset! (::media-photo s) true)\n    (let [upload-progress-cb (:upload-progress-cb options)]\n      (iu/upload! {:accept \"image/*\"}\n       ;; success-cb\n       (fn [res]\n         (reset! (::media-photo-did-success s) true)\n         (let [url (oget res :url)\n               img   (gdom/createDom \"img\")]\n           (set! (.-onload img) #(img-on-load s options editable url img))\n           (set! (.-onerror img) #(img-on-load s options editable nil nil))\n           (set! (.-className img) \"hidden\")\n           (gdom/append (.-body js/document) img)\n           (set! (.-src img) url)\n           (reset! (::media-photo s) {:res res :url url})\n           ;; if the image is a vector image\n           (if (or (= (string/lower (oget res :mimetype)) \"image/svg+xml\")\n                   (string/ends-with? (string/lower (oget res :filename)) \".svg\"))\n             ;l use the same url for the thumbnail since the size doesn't matter\n             (do\n               (reset! (::media-photo s) (assoc @(::media-photo s) :thumbnail url))\n               (media-photo-add-if-finished s options editable))\n             ;; else create the thumbnail\n             (iu/thumbnail! url\n              (fn [thumbnail-url]\n                (reset! (::media-photo s) (assoc @(::media-photo s) :thumbnail thumbnail-url))\n                (media-photo-add-if-finished s options editable))\n              (fn [res progress])\n              (fn [res err]\n                (media-photo-add-error s options))))))\n       ;; progress-cb\n       (fn [res progress])\n       ;; error-cb\n       (fn [err]\n         (media-photo-add-error s options))\n       ;; close-cb\n       (fn []\n         ;; Delay the check because this is called on cancel but also on success\n         (utils/after 1000 #(media-photo-dismiss-picker s editable)))\n       ;; finished-cb\n       (fn [res])\n       ;; selected-cb\n       (fn [res]\n         (reset! (::upload-lock s) true)\n         (when (fn? upload-progress-cb)\n           (upload-progress-cb true)))\n       ;; started-cb\n       (fn [res]\n         (reset! (::upload-lock s) true)\n         (when (fn? upload-progress-cb)\n           (upload-progress-cb true)))))))\n\n;; Picker cb\n\n(defn on-picker-click [s options editable type]\n  (cond\n    (= type \"poll\")\n    (add-poll s options editable)\n    (= type \"gif\")\n    (add-gif s editable)\n    (= type \"photo\")\n    (add-photo s options editable)\n    (= type \"video\")\n    (add-video s options editable)\n    (= type \"attachment\")\n    (add-attachment s options editable)))\n\n;; DND\n\n(defn file-dnd-handler [s options editor-ext file]\n  (if (< (oget file :size) ls/file-upload-size)\n    (if (:attachment-uploading @dis/app-state)\n      (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                      :action \"dnd-already-running\"\n                      :title \"Sorry!\"\n                      :message \"You are already uploading a file, wait until it finishes to add another.\"\n                      :solid-button-title \"OK\"\n                      :solid-button-cb #(alert-modal/hide-alert)}]\n                  (alert-modal/show-alert alert-data))\n      (let [cmail-state (:cmail-state @dis/app-state)]\n        ;; If Quick Post is still collapsed expand it\n        (when (:collapsed cmail-state)\n          (cmail-actions/cmail-show (cmail-actions/get-board-for-edit) {:collapsed false\n                                                                        :fullscreen false\n                                                                        :key (:key cmail-state)}))\n        (if (.match (.-type file) \"image\")\n          (do\n            (.hide @(::media-picker-ext s))\n            (dis/dispatch! [:input [:attachment-uploading]\n             {:progress \"0\"\n              :comment-parent-uuid (:comment-parent-uuid options)}])\n            (iu/upload-file! file\n              (fn [url]\n                (.insertImageFile editor-ext file url nil)\n                (utils/after 500\n                 (fn []\n                   (dis/dispatch! [:input [:attachment-uploading] nil])\n                   (utils/to-end-of-content-editable (rum/ref-node s \"editor-node\"))\n                   (utils/after 500 #(.togglePicker @(::media-picker-ext s))))))\n              (fn []\n               (dis/dispatch! [:input [:attachment-uploading] nil])\n               (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                      :action \"dnd-image-upload-error\"\n                      :title \"Sorry!\"\n                      :message \"An error occurred while uploading your file.\"\n                      :solid-button-title \"OK\"\n                      :solid-button-cb #(alert-modal/hide-alert)}]\n                  (alert-modal/show-alert alert-data)))\n              (fn [progress-percentage]\n               (dis/dispatch! [:input [:attachment-uploading]\n                {:progress progress-percentage\n                 :comment-parent-uuid (:comment-parent-uuid options)}]))))\n          (when (:attachments-enabled options)\n            (do\n              (dis/dispatch! [:input [:attachment-uploading]\n               {:progress \"0\"\n                :comment-parent-uuid (:comment-parent-uuid options)}])\n              (iu/upload-file! file\n                (fn [url]\n                  (let [size (oget file :size)\n                        mimetype (oget file :type)\n                        filename (oget file :name)\n                        createdat (utils/js-date)\n                        prefix (str \"Uploaded by \" (jwt/get-key :name) \" on \" (utils/date-string createdat [:year]) \" - \")\n                        subtitle (str prefix (filesize size :binary false :format \"%.2f\" ))\n                        icon (au/icon-for-mimetype mimetype)\n                        attachment-data {:file-name filename\n                                         :file-type mimetype\n                                         :file-size size\n                                         :file-url url}\n                        dispatch-input-key (:dispatch-input-key options)]\n                    (activity-actions/add-attachment dispatch-input-key attachment-data)\n                    (dis/dispatch! [:input [:attachment-uploading] nil])))\n                (fn []\n                 (dis/dispatch! [:input [:attachment-uploading] nil])\n                 (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                      :action \"dnd-attachment-upload-error\"\n                      :title \"Sorry!\"\n                      :message \"An error occurred while uploading your file.\"\n                      :solid-button-title \"OK\"\n                      :solid-button-cb #(alert-modal/hide-alert)}]\n                  (alert-modal/show-alert alert-data)))\n                (fn [progress-percentage]\n                 (dis/dispatch! [:input [:attachment-uploading]\n                  {:progress progress-percentage\n                   :comment-parent-uuid (:comment-parent-uuid options)}]))))))))\n    (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                    :action \"dnd-file-too-big\"\n                    :title \"Sorry!\"\n                    :message \"Error, please use files smaller than 20MB.\"\n                    :solid-button-title \"OK\"\n                    :solid-button-cb #(alert-modal/hide-alert)}]\n      (alert-modal/show-alert alert-data))))\n\n;; Setup ME\n\n(defn setup-editor [s body-on-change options]\n  (let [users-list @(drv/get-ref s :mention-users)]\n    (when (and (seq users-list)\n               (nil? @(::editor s)))\n      (let [mobile-editor (responsive/is-tablet-or-mobile?)\n            media-config (:media-config options)\n            placeholder (or (:placeholder options) \"What would you like to share?\")\n            body-el (rum/ref-node s \"editor-node\")\n            media-picker-opts {:buttons (clj->js media-config)\n                               :hidePlaceholderOnExpand false\n                               :inlinePlusButtonOptions #js {:inlineButtons (:use-inline-media-picker options)\n                                                             :staticPositioning (:static-positioned-media-picker options)\n                                                             :mediaPickerContainerSelector (:media-picker-container-selector options)\n                                                             :alwaysExpanded (:use-inline-media-picker options)\n                                                             :initiallyVisible (:media-picker-initially-visible options)\n                                                             :disableButtons (:paywall? options)\n                                                             }\n                               ; :saveSelectionClickElementId default-mutli-picker-button-id\n                               :delegateMethods #js {:onPickerClick (partial on-picker-click s options)}}\n            media-picker-ext (when-not mobile-editor (js/MediaPicker. (clj->js media-picker-opts)))\n            file-dragging-ext (when-not mobile-editor\n                                (js/CarrotFileDragging. (clj->js {:uploadHandler (partial file-dnd-handler s options)})))\n            buttons [\"bold\" \"italic\" \"unorderedlist\" \"anchor\" \"quote\" \"highlighter\" \"h1\" \"h2\"]\n            paste-ext-options #js {:forcePlainText false\n                                   :cleanPastedHTML true\n                                   :cleanAttrs #js [\"style\" \"alt\" \"dir\" \"size\" \"face\" \"color\" \"itemprop\" \"name\" \"id\"]\n                                   :cleanTags #js [\"meta\" \"video\" \"audio\" \"img\" \"button\" \"svg\" \"canvas\" \"figure\" \"input\"\n                                                   \"textarea\" \"style\" \"javascript\"]\n                                   :unwrapTags (clj->js (remove nil?\n                                                [\"!doctype\" \"abbr\" \"acronym\" \"address\" \"applet\" \"area\" \"article\"\n                                                 \"aside\" \"base\" \"basefont\" \"bb\" \"bdo\" \"big\" \"body\" \"br\" \"caption\"\n                                                 \"center\" \"cite\" \"col\" \"colgroup\" \"command\" \"datagrid\" \"datalist\"\n                                                 \"dd\" \"del\" \"details\" \"dfn\" \"dialog\" \"dir\" \"div\" \"dl\" \"dt\" \"em\"\n                                                 \"embed\" \"eventsource\" \"fieldset\" \"figcaption\" \"font\" \"footer\" \"form\"\n                                                 \"frame\" \"frameset\" \"h3\" \"h4\" \"h5\"\n                                                 \"h6\" \"head\" \"header\" \"hgroup\" \"hr\" \"html\" \"iframe\" \"ins\" \"isindex\"\n                                                 \"kbd\" \"keygen\" \"label\" \"legend\" \"link\"  \"main\" \"map\" \"mark\" \"menu\" \"meter\"\n                                                 \"nav\" \"noframes\" \"noscript\" \"object\" \"ol\" \"optgroup\" \"option\"\n                                                 \"output\" \"p\" \"param\" \"progress\" \"q\" \"rp\" \"rt\" \"ruby\" \"s\" \"samp\"\n                                                 \"script\" \"section\" \"select\" \"small\" \"source\" \"span\" \"strike\"\n                                                 \"strong\" \"sub\" \"summary\" \"sup\" \"table\" \"tbody\" \"td\" \"tfoot\" \"th\"\n                                                 \"thead\" \"time\" \"title\" \"tr\" \"track\" \"tt\" \"u\" \"var\" \"wbr\"]))}\n            extensions (cond-> {\"autolist\" (js/AutoList.)\n                                \"mention\" (mention-utils/mention-ext users-list)\n                                \"fileDragging\" false}\n                         (not mobile-editor) (assoc \"media-picker\" media-picker-ext\n                                                    \"autoquote\" (js/AutoQuote.)\n                                                    \"autocode\" (js/AutoCode.)\n                                                    \"autoinlinecode\" (js/AutoInlinecode.)\n                                                    \"inlinecode\" (js/InlineCodeButton.)\n                                                    \"highlighter\" (js/HighlighterButton.)\n                                                    \"carrotFileDragging\" file-dragging-ext)\n                         true clj->js)\n            options {:toolbar (if mobile-editor false #js {:buttons (clj->js buttons)\n                                                           :allowMultiParagraphSelection false})\n                     :buttonLabels \"fontawesome\"\n                     :anchorPreview (if mobile-editor false #js {:hideDelay 500, :previewValueSelector \"a\"})\n                     :extensions extensions\n                     :disableEditing (:paywall? options)\n                     :imageDragging false\n                     :targetBlank true\n                     :autoLink true\n                     :spellcheck false\n                     :anchor #js {:customClassOption nil\n                                  :customClassOptionText \"Button\"\n                                  :linkValidation true\n                                  :placeholderText \"Paste or type a link\"\n                                  :targetCheckbox false\n                                  :targetCheckboxText \"Open in new window\"}\n                     :placeholder #js {:text placeholder\n                                       :hideOnClick false\n                                       :hide-on-click false}\n                     :paste paste-ext-options\n                     :keyboardCommands #js {:commands #js [\n                                        #js {\n                                          :command \"bold\"\n                                          :key \"B\"\n                                          :meta true\n                                          :shift false\n                                          :alt false\n                                        }\n                                        #js {\n                                          :command \"italic\"\n                                          :key \"I\"\n                                          :meta true\n                                          :shift false\n                                          :alt false\n                                        }\n                                        #js {\n                                          :command false\n                                          :key \"U\"\n                                          :meta true\n                                          :shift false\n                                          :alt false\n                                        }]}}\n            body-editor  (new medium-editor body-el (clj->js options))]\n        (reset! (::media-picker-ext s) media-picker-ext)\n        (.subscribe body-editor\n                    \"editableInput\"\n                    (fn [event editable]\n                      (body-on-change s)))\n        (.subscribe body-editor\n                    \"editableKeydown\"\n                    (fn [e editable]\n                      (when (and (fn? (:cmd-enter-cb options))\n                                   (.-metaKey e)\n                                   (= \"Enter\" (.-key e)))\n                          ((:cmd-enter-cb options) e))))\n        (reset! (::editor s) body-editor)\n        ;; Setup autocomplete\n        (let [classes (:classes options)]\n          (when (and (string/includes? classes \"emoji-autocomplete\")\n                     (not (:paywall? options)))\n            (js/emojiAutocomplete)))))))"]}