{"version":3,"sources":["oc/web/components/stream_comments.cljs"],"mappings":"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","names":["oc.web.components.stream-comments/stop-editing","s","comment-data","cljs.core/reset!","oc.web.components.stream-comments/cancel-edit","oc.web.components.stream-comments/finish-edit","cancel?","oc.web.components.stream-comments/start-editing","comment-node","rum.core/ref-node","activity-data","cljs.core/first","oc.web.actions.comment/edit-comment","oc.web.components.stream-comments/delete-clicked","e","alert-data","cljs.core/seq","oc.web.components.ui.alert-modal/hide-alert","_","oc.web.actions.comment/delete-comment","oc.web.components.ui.alert-modal/show-alert","oc.web.components.stream-comments/scroll-to-bottom","scrolling-node","rum.core/dom-node","oc.web.components.stream-comments/emoji-picked-cb","emoji","oc.web.actions.comment/react-from-picker","cljs.core.get","oc.web.components.stream-comments/add-comment-prefix","oc.web.components.stream-comments/copy-comment-url","comment-url","input-field","js/document","oc.web.lib.utils/copy-to-clipboard","oc.web.components.stream-comments/comment-mark-read","comment-uuid","cljs.core/deref","threads","idx","p1__46070#","oc.web.lib.utils/index-of","cljs.core._EQ_","cljs.core.swap_BANG_","cljs.core/assoc-in","rum.core/build-defc","p__46071","map__46072","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","js/React.createElement","sablono.interpreter/interpret","oc.web.components.stream-comments/emoji-picker","oc.web.lib.responsive/is-mobile-size?","oc.web.mixins.ui/no-scroll-mixin","add-emoji-cb","dismiss-cb","oc.web.lib.react-utils/build","js/module$node_modules$emoji_mart$dist$index","oc.web.components.stream-comments/emoji-picker-container","showing-picker?","G__46076","oc.web.utils.reaction/can-pick-reaction?","goog.object/get","p__46077","map__46078","attrs46080","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","oc.web.components.stream-comments/edit-comment","rum.core/static","dismiss-reply-cb","edit-comment-key","add-comment-cb","add-comment-did-change","rum.core/with-key","G__46081","oc.web.components.ui.add-comment/add-comment","p__46082","map__46083","sablono.util/join-classes","attrs46085","attrs46097","attrs46098","attrs46099","attrs46100","attrs46101","attrs46120","attrs46140","attrs46141","attrs46142","attrs46143","attrs46144","attrs46148","oc.web.components.stream-comments/read-comment","editing?","mouse-leave-cb","edit-cb","delete-cb","react-cb","reply-cb","emoji-picker","is-mobile?","can-show-edit-bt?","can-show-delete-bt?","member?","show-more-menu","did-react-cb","current-user-id","oc.web.lib.utils/class-set","G__46086","oc.web.components.ui.more-menu/more-menu","oc.web.lib.utils/hide-class","G__46102","G__46145","oc.web.components.ui.info-hover-views/user-info-hover","G__46103","G__46110","G__46146","G__46147","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.lib.utils/activity-date-tooltip","oc.web.lib.utils/foc-date-time","G__46121","G__46122","G__46123","G__46149","G__46150","G__46151","or__4126__auto__","oc.web.lib.utils/emojify","G__46135","G__46153","oc.web.components.reactions/reactions","cljs.core/count","rum.core/build-defcs","p__46162","map__46163","attrs46172","cljs.core.into_array","iter__4529__auto__","s__46178","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46180","cljs.core/chunk-buffer","i__46179","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46177","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","s__46202","b__46204","i__46203","iter__46201","oc.web.components.stream-comments/stream-comments","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.mention.oc_mentions_hover","oc.web.mixins.ui/refresh-tooltips-mixin","oc.web.mixins.ui/interactive-images-mixin","oc.web.mixins.ui/on-window-click-mixin","and__4115__auto__","cljs.core/not","oc.web.lib.utils/event-inside?","js/$","activity-uuid","focused-uuid","org.martinklepsch.derivatives/get-ref","current-local-state","is-self-focused?","cljs.core.not_EQ_","map__46230","last-read-at","comments-data","oc.web.utils.comment.collapse_comments","fixed-threads","p1__46154#","cljs.core/filterv","oc.web.utils.activity.resource_type_QMARK_","e46232","js/emojiAutocomplete","o","map__46237","comments-diff","clojure.data/diff","cljs.core/second","all-comments","cljs.core/vec","p1__46155#","cljs.core.mapcat","cljs.core.concat","collapsed-map","cljs.core/zipmap","cljs.core.map","p1__46156#","cljs.core/select-keys","updated-threads","fixed-updated-threads","p1__46157#","e46242","reply-add-comment-prefix","loading-comments-count","_users-info-hover","org.martinklepsch.derivatives/react","_current-user-data","_follow-publishers-list","_followers-publishers-count","add-comment-force-update*","cljs.core.filter","oc.web.utils.activity/comment?","p1__46158#","reply-focus-value","oc.web.utils.comment.add_comment_focus_value","oc.web.components.ui.small-loading/small-loading","cljs.core.range","root-comment-data","cljs.core.nth","is-editing?","add-comment-string-key","oc.web.dispatcher.add_comment_string_key","cljs.core.get_in","G__46186","G__46189","G__46211","G__46220","cljs.core.partial","G__46187","G__46190","G__46212","G__46225","cljs.core/compare-and-set!","oc.web.actions.comment.reply_to","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.stream-comments\n  (:require [rum.core :as rum]\n            [clojure.data :refer (diff)]\n            [goog.object :as gobj]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.comment :as cu]\n            [oc.web.utils.activity :as au]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.lib.react-utils :as react-utils]\n            [oc.web.mixins.mention :as mention-mixins]\n            [oc.web.utils.reaction :as reaction-utils]\n            [oc.web.actions.comment :as comment-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.reactions :refer (reactions)]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.more-menu :refer (more-menu)]\n            [oc.web.components.ui.add-comment :refer (add-comment)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.info-hover-views :refer (user-info-hover)]\n            [\"emoji-mart\" :as emoji-mart]))\n\n(defn stop-editing [s comment-data]\n  (reset! (::editing? s) nil))\n\n(defn cancel-edit\n  [s comment-data]\n  (stop-editing s comment-data))\n\n(defn finish-edit [s comment-data cancel?]\n  (if cancel?\n    (cancel-edit s comment-data)\n    (stop-editing s comment-data)))\n\n(defn start-editing [s comment-data]\n  (let [comment-node (rum/ref-node s (str \"comment-body-\" (:uuid comment-data)))\n        activity-data (-> s :rum/args first :activity-data)]\n    (comment-actions/edit-comment (:uuid activity-data) comment-data)\n    (reset! (::show-more-menu s) nil)\n    (reset! (::editing? s) (:uuid comment-data))))\n\n(defn delete-clicked [e activity-data comment-data]\n  (let [alert-data {:icon \"/img/ML/trash.svg\"\n                    :action \"delete-comment\"\n                    :message (if (seq (:thread-children comment-data))\n                               \"Delete this comment thread?\"\n                               \"Delete this comment?\")\n                    :link-button-title \"No\"\n                    :link-button-cb #(alert-modal/hide-alert)\n                    :solid-button-style :red\n                    :solid-button-title \"Yes\"\n                    :solid-button-cb (fn [_]\n                                       (comment-actions/delete-comment activity-data comment-data)\n                                       (alert-modal/hide-alert))\n                    }]\n    (alert-modal/show-alert alert-data)))\n\n(defn scroll-to-bottom [s]\n  (let [scrolling-node (rum/dom-node s)]\n    (set! (.-scrollTop scrolling-node) (.-scrollHeight scrolling-node))))\n\n(defn emoji-picked-cb [s comment-data emoji]\n  (comment-actions/react-from-picker (-> s :rum/args first :activity-data) comment-data (get emoji \"native\")))\n\n(def add-comment-prefix \"edit-comment\")\n\n(defn- copy-comment-url [comment-url]\n  (let [input-field (.createElement js/document \"input\")]\n    (set! (.-style input-field) \"position:absolute;top:-999999px;left:-999999px;\")\n    (set! (.-value input-field) comment-url)\n    (.appendChild (.-body js/document) input-field)\n    (.select input-field)\n    (utils/copy-to-clipboard input-field)\n    (.removeChild (.-body js/document) input-field)))\n\n(defn- comment-mark-read [s comment-uuid]\n  (let [threads @(::threads s)\n        idx (utils/index-of threads #(= (:uuid %) comment-uuid))]\n    (swap! (::threads s) (fn [threads]\n                           (assoc-in threads [idx :unread] false)))))\n\n(rum/defc emoji-picker < (when (responsive/is-mobile-size?)\n                           ui-mixins/no-scroll-mixin)\n  [{:keys [add-emoji-cb dismiss-cb]}]\n  [:div.emoji-picker-container\n    [:button.mlb-reset.close-bt\n      {:on-click dismiss-cb}\n      \"Cancel\"]\n    (react-utils/build (.-Picker emoji-mart)\n      {:native true\n       :autoFocus true\n       :onClick (fn [emoji _]\n                  (add-emoji-cb emoji))})])\n\n(defn- emoji-picker-container [s comment-data]\n  (let [activity-data (-> s :rum/args first :activity-data)\n        showing-picker? (and (seq @(::show-picker s))\n                             (= @(::show-picker s) (:uuid comment-data)))]\n    (when showing-picker?\n      (emoji-picker {:dismiss-cb #(reset! (::show-picker s) nil)\n                     :add-emoji-cb (fn [emoji]\n       (when (reaction-utils/can-pick-reaction? (gobj/get emoji \"native\") (:reactions comment-data))\n         (comment-mark-read s (:uuid comment-data))\n         (comment-actions/react-from-picker activity-data comment-data\n          (gobj/get emoji \"native\")))\n       (reset! (::show-picker s) nil))}))))\n\n(rum/defc edit-comment < rum/static\n  [{:keys [activity-data comment-data dismiss-reply-cb\n           edit-comment-key add-comment-cb add-comment-did-change]}]\n  [:div.stream-comment-outer.open-thread\n    {:key (str \"stream-comment-\" (:created-at comment-data))\n     :data-comment-uuid (:uuid comment-data)}\n    [:div.stream-comment\n      (rum/with-key\n       (add-comment {:activity-data activity-data\n                     :parent-comment-uuid (:reply-parent comment-data)\n                     :dismiss-reply-cb dismiss-reply-cb\n                     :add-comment-cb add-comment-cb\n                     :add-comment-did-change add-comment-did-change\n                     :edit-comment-data comment-data\n                     :add-comment-focus-prefix add-comment-prefix})\n       (str \"edit-comment-\" edit-comment-key))]])\n\n\n(rum/defc read-comment < rum/static\n  [{:keys [activity-data comment-data editing?\n           edit-comment-key mouse-leave-cb\n           edit-cb delete-cb react-cb reply-cb emoji-picker\n           is-mobile? can-show-edit-bt? can-show-delete-bt? member?\n           show-more-menu showing-picker? did-react-cb\n           current-user-id]}]\n  [:div.stream-comment-outer.open-thread\n    {:key (str \"stream-comment-\" (:created-at comment-data))\n     :data-comment-uuid (:uuid comment-data)\n     :class (utils/class-set {:new-comment (:unread comment-data)\n                              :showing-picker showing-picker?})}\n    [:div.stream-comment\n      {:ref (str \"stream-comment-\" (:uuid comment-data))\n       :class (utils/class-set {:editing-other-comment editing?})\n       :on-mouse-leave mouse-leave-cb}\n      [:div.stream-comment-inner\n        (when is-mobile?\n          [:div.stream-comment-mobile-menu\n            (more-menu {:entity-data comment-data\n                        :entity-type \"comment\"\n                        :show-edit? true\n                        :edit-cb edit-cb\n                        :show-delete? true\n                        :delete-cb delete-cb\n                        :can-react? true\n                        :react-cb react-cb\n                        :can-reply? true\n                        :reply-cb reply-cb})\n            emoji-picker])\n        [:div.stream-comment-right\n          [:div.stream-comment-header.group\n            {:class utils/hide-class}\n            [:div.stream-comment-author-right\n              [:div.stream-comment-author-right-group\n                {:class (when (:unread comment-data) \"new-comment\")}\n                [:div.stream-comment-author-name-container\n                  (user-info-hover {:user-data (:author comment-data) :current-user-id current-user-id :leave-delay? true})\n                  [:div.stream-comment-author-avatar\n                    (user-avatar-image (:author comment-data))]\n                  [:div.stream-comment-author-name\n                    (:name (:author comment-data))]]\n                [:div.stream-comment-author-timestamp\n                  [:time\n                    {:date-time (:created-at comment-data)\n                     :data-toggle (when-not is-mobile? \"tooltip\")\n                     :data-placement \"top\"\n                     :data-container \"body\"\n                     :data-delay \"{\\\"show\\\":\\\"1000\\\", \\\"hide\\\":\\\"0\\\"}\"\n                     :data-title (utils/activity-date-tooltip comment-data)}\n                    (utils/foc-date-time (:created-at comment-data))]]]\n              (when (:unread comment-data)\n                [:div.new-comment-tag])\n              (if (responsive/is-mobile-size?)\n                [:div.stream-comment-mobile-menu\n                  (more-menu comment-data nil {:entity-type \"comment\"\n                                               :show-edit? true\n                                               :edit-cb edit-cb\n                                               :show-delete? true\n                                               :delete-cb delete-cb\n                                               :can-react? true\n                                               :react-cb react-cb\n                                               :can-reply? true\n                                               :reply-cb reply-cb})\n                  emoji-picker]\n                [:div.stream-comment-floating-buttons\n                  {:key (str \"stream-comment-floating-buttons\"\n                         (when can-show-edit-bt?\n                           \"-edit\")\n                         (when can-show-delete-bt?\n                           \"-delete\"))}\n                  (when (or can-show-delete-bt?\n                            can-show-edit-bt?)\n                    [:div.more-bt-container\n                      [:button.mlb-reset.floating-bt.more-bt\n                        {:on-click #(reset! show-more-menu (:uuid comment-data))}]\n                      (when (= @show-more-menu (:uuid comment-data))\n                        [:div.comment-more-menu-container\n                          (when can-show-delete-bt?\n                            [:button.mlb-reset.delete-bt\n                              {:on-click #(delete-cb comment-data)}\n                              \"Delete\"])\n                          (when can-show-edit-bt?\n                            [:button.mlb-reset.edit-bt\n                              {:on-click #(edit-cb comment-data)}\n                              \"Edit\"])])])\n                  ;; Reply to comment\n                  (when (:reply-parent comment-data)\n                    [:button.mlb-reset.floating-bt.reply-bt\n                      {:data-toggle \"tooltip\"\n                       :data-placement \"top\"\n                       :on-click reply-cb\n                       :title \"Reply\"}])\n                  ;; React container\n                  [:div.react-bt-container\n                    [:button.mlb-reset.floating-bt.react-bt\n                      {:data-toggle \"tooltip\"\n                       :data-placement \"top\"\n                       :title \"Add reaction\"\n                       :on-click react-cb}]\n                    emoji-picker]])]]\n          [:div.stream-comment-content\n            [:div.stream-comment-body.oc-mentions.oc-mentions-hover\n              {:dangerouslySetInnerHTML (utils/emojify (:body comment-data))\n               :ref (str \"comment-body-\" (:uuid comment-data))\n               :class (utils/class-set {:emoji-comment (:is-emoji comment-data)\n                                        utils/hide-class true})}]]\n          (when (seq (:reactions comment-data))\n            [:div.stream-comment-reactions-footer.group\n              (reactions {:entity-data comment-data\n                          :hide-picker (zero? (count (:reactions comment-data)))\n                          :did-react-cb did-react-cb\n                          :optional-activity-data activity-data})])]]]])\n\n(rum/defcs stream-comments < rum/reactive\n                             (drv/drv :add-comment-focus)\n                             (drv/drv :add-comment-data)\n                             (drv/drv :users-info-hover)\n                             (drv/drv :current-user-data)\n                             (drv/drv :follow-publishers-list)\n                             (drv/drv :followers-publishers-count)\n                             (rum/local false ::last-focused-state)\n                             (rum/local nil ::editing?)\n                             (rum/local nil ::show-picker)\n                             (rum/local {} ::comment-url-copy)\n                             (rum/local false ::initial-comment-scroll)\n                             (rum/local nil ::show-more-menu)\n                             (rum/local [] ::threads)\n                             (drv/drv :add-comment-force-update)\n                             ;; Mixins\n                             (mention-mixins/oc-mentions-hover {:click? true})\n                             ui-mixins/refresh-tooltips-mixin\n                             (ui-mixins/interactive-images-mixin \"div.stream-comment-body\")\n                             (ui-mixins/on-window-click-mixin (fn [s e]\n                              (when (and @(::show-picker s)\n                                         (not (utils/event-inside? e\n                                          (.get (js/$ \"div.emoji-mart\" (rum/dom-node s)) 0))))\n                                (reset! (::show-picker s) nil))))\n                             {:after-render (fn [s]\n                               (let [activity-uuid (-> s :rum/args first :activity-data :uuid)\n                                     focused-uuid @(drv/get-ref s :add-comment-focus)\n                                     current-local-state @(::last-focused-state s)\n                                     is-self-focused? (= focused-uuid activity-uuid)]\n                                  (when (not= current-local-state is-self-focused?)\n                                    (reset! (::last-focused-state s) is-self-focused?)\n                                    (when is-self-focused?\n                                      (scroll-to-bottom s))))\n                               s)\n                             :will-mount (fn [s]\n                              (let [{:keys [last-read-at comments-data]} (-> s :rum/args first)\n                                    threads (cu/collapse-comments comments-data last-read-at)\n                                    fixed-threads (filterv #(not (au/resource-type? % :collapsed-comments)) threads)]\n                                (reset! (::threads s) fixed-threads))\n                              s)\n                             :did-mount (fn [s]\n                              (try (js/emojiAutocomplete)\n                                (catch :default e false))\n                              s)\n                             :did-remount (fn [o s]\n                              (let [{:keys [comments-data last-read-at]} (-> s :rum/args first)\n                                    comments-diff (diff (-> o :rum/args first :comments-data) comments-data)]\n                                (when (or (seq (first comments-diff))\n                                          (seq (second comments-diff))\n                                          (not= last-read-at (-> o :rum/args first :last-read-at)))\n                                  (let [all-comments (vec (mapcat #(concat [%] (:thread-children %)) @(::threads s)))\n                                        collapsed-map (zipmap (map :uuid all-comments) (map #(select-keys % [:expanded :unread]) all-comments))\n                                        updated-threads (cu/collapse-comments comments-data last-read-at)\n                                        fixed-updated-threads (filterv #(not (au/resource-type? % :collapsed-comments)) updated-threads)]\n                                    (reset! (::threads s) fixed-updated-threads))))\n                              (try (js/emojiAutocomplete)\n                                (catch :default e false))\n                              s)}\n  [s {:keys [activity-data comments-data last-read-at current-user-id member? reply-add-comment-prefix loading-comments-count]}]\n  (let [_users-info-hover (drv/react s :users-info-hover)\n        _current-user-data (drv/react s :current-user-data)\n        _follow-publishers-list (drv/react s :follow-publishers-list)\n        _followers-publishers-count (drv/react s :followers-publishers-count)\n        add-comment-force-update* (drv/react s :add-comment-force-update)\n        is-mobile? (responsive/is-mobile-size?)\n        threads (filter au/comment? @(::threads s))\n        all-comments (vec (mapcat #(concat [%] (:thread-children %)) threads))\n        reply-focus-value (cu/add-comment-focus-value reply-add-comment-prefix (:uuid activity-data))]\n    [:div.stream-comments\n      {:class (when (seq @(::editing? s)) \"editing\")}\n      (if (pos? (count threads))\n        [:div.stream-comments-list\n          (when (pos? loading-comments-count)\n            [:div.stream-comments-list-loading\n              (small-loading)\n              [:span.span.stream-comments-loading-inner\n                \"Loading \" loading-comments-count \" more comments...\"]])\n          (for [idx (range (count threads))\n                :let [root-comment-data (nth threads idx)\n                      is-editing? (and (seq @(::editing? s))\n                                       (= @(::editing? s) (:uuid root-comment-data)))\n                      add-comment-string-key (dis/add-comment-string-key (:uuid activity-data) (:reply-parent root-comment-data)\n                                              (:uuid root-comment-data))\n                      edit-comment-key (get-in add-comment-force-update* add-comment-string-key)\n                      showing-picker? (and (seq @(::show-picker s))\n                                           (= @(::show-picker s) (:uuid root-comment-data)))]]\n            [:div.stream-comment-thread\n              {:key (str \"stream-comments-thread-\" (:uuid root-comment-data))}\n              (if is-editing?\n                (edit-comment {:activity-data activity-data\n                               :comment-data root-comment-data\n                               :dismiss-reply-cb (partial finish-edit s root-comment-data)\n                               :edit-comment-key edit-comment-key})\n                (read-comment {:activity-data activity-data\n                               :comment-data root-comment-data\n                               :editing? (not (nil? @(::editing? s)))\n                               :mouse-leave-cb #(compare-and-set! (::show-more-menu s) (:uuid root-comment-data) nil)\n                               :is-mobile? is-mobile?\n                               :can-show-edit-bt? (and (:can-edit root-comment-data)\n                                                       (not (:is-emoji root-comment-data)))\n                               :can-show-delete-bt? (:can-delete root-comment-data)\n                               :edit-cb (partial start-editing s)\n                               :delete-cb (partial delete-clicked s activity-data)\n                               :react-cb #(reset! (::show-picker s) (:uuid root-comment-data))\n                               :reply-cb #(comment-actions/reply-to reply-focus-value (:body root-comment-data) true)\n                               :did-react-cb #(comment-mark-read s (:uuid root-comment-data))\n                               :emoji-picker (when showing-picker?\n                                               (emoji-picker-container s root-comment-data))\n                               :showing-picker? showing-picker?\n                               :show-more-menu (::show-more-menu s)\n                               :dismiss-reply-cb (partial finish-edit s root-comment-data)\n                               :edit-comment-key edit-comment-key\n                               :member? member?\n                               :current-user-id current-user-id}))])])]))"]}