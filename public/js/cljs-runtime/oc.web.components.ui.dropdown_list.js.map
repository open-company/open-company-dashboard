{"version":3,"sources":["oc/web/components/ui/dropdown_list.cljs"],"mappings":"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","names":["rum.core/build-defc","p__45716","map__45717","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","cljs.core.into_array","iter__4529__auto__","s__45722","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__45724","cljs.core/chunk-buffer","i__45723","cljs.core/-nth","cljs.core/chunk-append","p1__45715#","sablono.interpreter/attributes","sablono.util/join-classes","sablono.interpreter/interpret","cljs.core/chunk-cons","cljs.core/chunk","iter__45721","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","oc.web.components.ui.dropdown-list/dropdown-list","rum.core/static","oc.web.mixins.ui.on_click_out","s","e","on-blur","cljs.core/fn?","oc.web.mixins.ui/refresh-tooltips-mixin","items","value","on-change","selected-icon","unselected-icon","placeholder","fixed-items","p1__45714#","cljs.core.map","cljs.core/contains?","cljs.core.assoc","item","cljs.core._EQ_","oc.web.lib.utils/event-stop","and__4115__auto__","oc.web.lib.utils/class-set","or__4126__auto__","G__45756","G__45759","oc.web.components.ui.user-avatar/user-avatar-image","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.dropdown-list\n  (:require [rum.core :as rum]\n            [dommy.core :refer-macros (sel1)]\n            [oc.web.lib.utils :as utils]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.mixins.ui :as ui-mixins]))\n\n(rum/defc dropdown-list\n  \"Component to create a dropdown list. Accept a map with these keys:\n   :items - the list of items map to render, see below for the format to use\n   :value - current value, add the class selected to the corresponing value li\n   :on-change - fn callback for changes\n   :on-blur - fn called on click out of the dropdown cb\n   :selected-icon - full url of an icon to show besides the selected item, ignored if empty\n   :unselected-icon - full url of an icon to show besides the unselected item, ignored if empty\n  Elements should be passed in a vector with this format:\n  {:value \\\"the value\\\"\n   :label \\\"The label to show, optional\\\"\n   :color \\\"optional\\\"\n   :user-map \\\"optional: to user the user avatars\\\"\n   :disabled \\\"optional: not usable\\\"\n   :tooltip  \\\"optional: tooltip to show on the row\\\"}.\n  Elements with this format will be transfomed into a divider line:\n  {:value nil :label :divider-line}.\"\n  < rum/static\n    ;; Mixins\n    (ui-mixins/on-click-out :dropdown-list (fn [s e]\n     (let [on-blur (:on-blur (first (:rum/args s)))]\n       (when (fn? on-blur)\n         (on-blur)))))\n    ui-mixins/refresh-tooltips-mixin\n  [{:keys [items value on-change on-blur selected-icon unselected-icon placeholder]}]\n  (let [fixed-items (map #(if-not (contains? % :label)\n                            (assoc % :label (:value %))\n                            %) items)]\n    [:div.dropdown-list-container\n      {:ref :dropdown-list}\n      [:div.triangle]\n      [:div.dropdown-list-content\n        [:ul.dropdown-list\n          (for [item fixed-items]\n            [:li.dropdown-list-item\n              {:key (str \"dropdown-list-item-\" (if (= (:label item) :divider-line) \"divider\" (:value item)))\n               :on-click #(if (:disabled item)\n                            (utils/event-stop %)\n                            (when (and (:value item) (fn? on-change))\n                              (on-change item %)))\n               :style (when (seq (:color item)) {:color (:color item)})\n               :title (:tooltip item)\n               :data-toggle (when (:tooltip item)\n                              \"tooltip\")\n               :data-placement \"top\"\n               :data-container \"body\"\n               :class (utils/class-set {:select (and (:value item) (= value (:value item)))\n                                        :divider-line (= (:label item) :divider-line)\n                                        :user-avatar-icons (:user-map item)\n                                        :disabled (:disabled item)\n                                        (str (:class item)) (seq (:class item))})}\n              (when (and (string? (:label item))\n                         (or selected-icon\n                            unselected-icon))\n                (if (and selected-icon (= (:value item) value))\n                  [:img.dropdown-list-item-icon {:src selected-icon}]\n                  (when unselected-icon\n                    [:img.dropdown-list-item-icon {:src unselected-icon}])))\n              (when (and (string? (:label item))\n                         (:user-map item)\n                         (:avatar-url (:user-map item)))\n                (user-avatar-image (:user-map item)))\n              (when (string? (:label item))\n                [:span.dropdown-list-item-label\n                  (:label item)])])]\n        (when placeholder\n          placeholder)]]))"]}