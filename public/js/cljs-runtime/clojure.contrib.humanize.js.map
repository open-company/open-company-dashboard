{"version":3,"sources":["clojure/contrib/humanize.cljc"],"mappings":"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","names":["p1__51989#","p2__51990#","clojure.contrib.humanize/num-format","goog.string/format","clojure.contrib.humanize/expt","js/Math","clojure.contrib.humanize/floor","clojure.contrib.humanize/round","clojure.contrib.humanize/abs","clojure.contrib.humanize/log","clojure.contrib.humanize/rounding-const","clojure.contrib.humanize/log10","or__4126__auto__","p1__51993#","js/Math.LN10","p1__51995#","clojure.contrib.humanize/char->int","clojure.contrib.humanize/intcomma","num","decimal","sign","repr","repr-len","partitioned","cljs.core.subs","cljs.core/rem","p1__51996#","cljs.core.map","cljs.core.apply","cljs.core/str","cljs.core.partition","cljs.core.remove","cljs.core/empty?","cljs.core/flatten","cljs.core.interpose","clojure.contrib.humanize/ordinal","ordinals","remainder-100","remainder-10","clojure.contrib.inflect/in?","clojure.contrib.humanize/logn","base","clojure.contrib.humanize/human-pows","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","clojure.contrib.humanize/intword","p__52002","map__52003","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","seq52000","G__52001","cljs.core/first","cljs.core/next","self__4723__auto__","format","vec__52005","cljs.core.nth","base-pow","suffix","cljs.core.filter","p__52008","vec__52009","_","value","clojure.contrib.humanize/numap","clojure.contrib.humanize/numberword","digitcnt","divisible?","div","n-digit","n","clojure.string.join","G__52012","G__52013","G__52014","G__52015","G__52016","G__52017","G__52019","G__52022","G__52023","clojure.contrib.humanize/filesize","p__52026","map__52027","seq52024","G__52025","bytes","binary","decimal-sizes","binary-sizes","units","cljs.core/count","cljs.core/name","G__52030","clojure.contrib.humanize/truncate","js/Error","string","length","string-len","suffix-len","clojure.contrib.humanize.truncate","clojure.contrib.humanize/oxford","p__52033","map__52034","seq52031","G__52032","coll","maximum-display","truncate-noun","coll-length","before-last","cljs.core.take","last-item","cljs.core/last","display-coll","remaining","clojure.contrib.inflect/pluralize-noun","clojure.contrib.humanize/in-decades","diff","cljs-time.core/in-years","clojure.contrib.humanize/in-centuries","clojure.contrib.humanize/in-millennia","clojure.contrib.humanize/datetime","p__52038","map__52039","seq52036","G__52037","then-dt","now-dt","prefix","cljs-time.local/local-now","cljs-time.coerce/to-date-time","future-time?","cljs-time.core/after?","cljs-time.core/interval","d__51982__auto__","t__51983__auto__","cljs-time.core/in-months","cljs-time.core/in-weeks","cljs-time.core/in-days","cljs-time.core/in-hours","cljs-time.core/in-minutes","cljs-time.core/in-seconds","clojure.contrib.humanize/duration-periods","clojure.contrib.humanize/duration-terms","duration-ms","G__52047","vec__52048","seq__52049","cljs.core/seq","first__52050","vec__52051","vec__52060","seq__52061","first__52062","vec__52063","remainder","period-ms","period-name","more-periods","terms","period-count","next-remainder","cljs.core/mod","cljs.core.conj","G__52068","clojure.contrib.humanize/duration","clojure.contrib.humanize.duration","options","map__52069","p1__52066#","number-format","list-format","short-text","G__52071","p__52072","vec__52073"],"sourcesContent":["(ns clojure.contrib.humanize\n  (:require #?(:clj  [clojure.math.numeric-tower :refer [expt floor round abs]])\n            [clojure.contrib.inflect :refer [pluralize-noun in?]]\n            [clojure.string :refer [join]]\n            #?(:clj  [clojure.contrib.macros :refer [with-dt-diff]])\n            #?(:clj  [clj-time.core  :refer [after? date-time interval in-seconds\n                                             in-minutes in-hours in-days\n                                             in-weeks in-months in-years]]\n               :cljs [cljs-time.core :refer [after? date-time interval in-seconds\n                                             in-minutes in-hours in-days\n                                             in-weeks in-months in-years]])\n            #?(:cljs [goog.string :as gstring])\n            #?(:cljs [goog.string.format])\n            #?(:clj  [clj-time.local  :refer [local-now]]\n               :cljs [cljs-time.local :refer [local-now]])\n            #?(:clj  [clj-time.coerce  :refer [to-date-time to-string]]\n               :cljs [cljs-time.coerce :refer [to-date-time to-string]]))\n  #?(:cljs (:require-macros [clojure.contrib.macros :refer [with-dt-diff]])))\n\n#?(:clj  (def ^:private num-format format)\n   :cljs (def ^:private num-format #(gstring/format %1 %2)))\n\n#?(:cljs (def ^:private expt (.-pow js/Math)))\n#?(:cljs (def ^:private floor (.-floor js/Math)))\n#?(:cljs (def ^:private round (.-round js/Math)))\n#?(:cljs (def ^:private abs (.-abs js/Math)))\n\n#?(:clj  (def ^:private log #(java.lang.Math/log %))\n   :cljs (def ^:private log (.-log js/Math)))\n\n#?(:cljs (def ^:private rounding-const 1000000))\n\n#?(:clj  (def ^:private log10 #(java.lang.Math/log10 %))\n   :cljs (def ^:private log10 (or (.-log10 js/Math)                   ;; prefer native implementation\n                        #(/ (.round js/Math\n                                    (* rounding-const\n                                       (/ (.log js/Math %)\n                                          js/Math.LN10)))\n                            rounding-const))))              ;; FIXME rounding\n\n#?(:clj  (def ^:private char->int #(Character/getNumericValue %))\n   :cljs (def ^:private char->int #(int %)))\n\n(defn intcomma\n  \"Converts an integer to a string containing commas. every three digits.\n   For example, 3000 becomes '3,000' and 45000 becomes '45,000'. \"\n  [num]\n  (let [\n        decimal (abs (int num)) ;;  FIXME: (abs )\n        sign (if (< num 0) \"-\" \"\")\n\n        ;; convert into string representation\n        repr (str decimal)\n        repr-len (count repr)\n\n        ;; right-aligned 3 elements partition\n        partitioned [(subs repr 0 (rem repr-len 3))\n                     (map #(apply str %)\n                          (partition 3 (subs repr\n                                             (rem repr-len 3))))]\n\n        ;; flatten, and remove empty string\n        partitioned (remove empty? (flatten partitioned))]\n\n    (apply str sign (interpose \",\" partitioned))))\n\n\n(defn ordinal\n  \"Converts an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',\n   3 is '3rd', etc.\"\n  [num]\n    (let [ordinals [\"th\", \"st\", \"nd\", \"rd\", \"th\",\n                    \"th\", \"th\", \"th\", \"th\", \"th\"]\n          remainder-100 (rem num 100)\n          remainder-10  (rem num 10)]\n\n      (if (in? remainder-100 [11 12 13])\n        ;; special case for *11, *12, *13\n        (str num (ordinals 0))\n        (str num (ordinals remainder-10)))))\n\n(defn logn [num base]\n  (/ (round (log num))\n     (round (log base))))\n\n\n(def ^:private human-pows [[100 \" googol\"]\n                           [33 \" decillion\"]\n                           [30 \" nonillion\"]\n                           [27 \" octillion\"]\n                           [24 \" septillion\"]\n                           [21 \" sextillion\"]\n                           [18 \" quintillion\"]\n                           [15 \" quadrillion\"]\n                           [12 \" trillion\"]\n                           [9 \" billion\"]\n                           [6 \" million\"]\n                           [0 \"\"]])\n\n(defn intword\n  \"Converts a large integer to a friendly text representation. Works best for\n   numbers over 1 million. For example, 1000000 becomes '1.0 million', 1200000\n   becomes '1.2 million' and '1200000000' becomes '1.2 billion'.  Supports up to\n   decillion (33 digits) and googol (100 digits).\"\n  [num & {:keys [format] :or {format \"%.1f\"}}]\n  (let [base-pow (int (floor (log10 num)))\n        [base-pow suffix] (first (filter (fn [[base _]] (>= base-pow base)) human-pows))\n        value (float (/ num (expt 10 base-pow)))]\n    (str (num-format format value) suffix)))\n\n\n(def ^:private numap\n  {0 \"\",1 \"one\",2 \"two\",3 \"three\",4 \"four\",5 \"five\",\n   6 \"six\",7 \"seven\",8 \"eight\",9 \"nine\",10 \"ten\",\n   11 \"eleven\",12 \"twelve\",13 \"thirteen\",14 \"fourteen\",\n   15 \"fifteen\",16 \"sixteen\",17 \"seventeen\",18 \"eighteen\",\n   19 \"nineteen\",20 \"twenty\",30 \"thirty\",40 \"forty\",\n   50 \"fifty\",60 \"sixty\",70 \"seventy\",80 \"eighty\",90 \"ninety\"})\n\n(defn numberword\n  \"Takes a number and return a full written string form. For example,\n   23237897 will be written as \\\"twenty-three million two hundred and\n   thirty-seven thousand eight hundred and ninety-seven\\\".  \"\n  [num]\n\n  ;; special case for zero\n  (if (zero? num)\n    \"zero\"\n\n  (let [digitcnt (int (log10 num))\n        divisible? (fn [num div] (zero? (rem num div)))\n        n-digit (fn [num n] (char->int (.charAt (str num) n)))] ;; TODO rename\n\n    (cond\n     ;; handle million part\n     (>= digitcnt 6)    (join \" \" [(numberword (int (/ num 1000000)))\n                                  \"million\"\n                                  (numberword (rem num 1000000))])\n\n     ;; handle thousand part\n     (>= digitcnt 3)    (join \" \" [(numberword (int (/ num 1000)))\n                                   \"thousand\"\n                                   (numberword (rem num 1000))])\n\n     ;; handle hundred part\n     (>= digitcnt 2)    (if (divisible? num 100)\n                          (join \" \" [(numap (int (/ num 100)))\n                                     \"hundred\"])\n                          (join \" \" [(numap (int (/ num 100)))\n                                     \"hundred\"\n                                     \"and\"\n                                     (numberword (rem num 100))]))\n\n     ;; handle the last two digits\n     (< num 20)                 (numap num)\n     (divisible? num 10)        (numap num)\n     :else                      (join \"-\" [(numap (* 10 (n-digit num 0)))\n                                           (numap (n-digit num 1))])))))\n\n(defn filesize\n  \"Format a number of bytes as a human readable filesize (eg. 10 kB). By\n   default, decimal suffixes (kB, MB) are used.  Passing :binary true will use\n   binary suffixes (KiB, MiB) instead.\"\n  [bytes & {:keys [binary format]\n            :or {binary false\n                 format \"%.1f\"}}]\n\n  (if (zero? bytes)\n    ;; special case for zero\n    \"0\"\n\n  (let [decimal-sizes  [:B, :KB, :MB, :GB, :TB,\n                        :PB, :EB, :ZB, :YB]\n        binary-sizes [:B, :KiB, :MiB, :GiB, :TiB,\n                      :PiB, :EiB, :ZiB, :YiB]\n\n        units (if binary binary-sizes decimal-sizes)\n        base  (if binary 1024 1000)\n\n        base-pow  (int (floor (logn bytes base)))\n        ;; if base power shouldn't be larger than biggest unit\n        base-pow  (if (< base-pow (count units))\n                    base-pow\n                    (dec (count units)))\n        suffix (name (get units base-pow))\n        value (float (/ bytes (expt base base-pow)))\n        ]\n\n    (str (num-format format value) suffix))))\n\n(defn truncate\n  \"Truncate a string with suffix (ellipsis by default) if it is\n   longer than specified length.\"\n\n  ([string length suffix]\n     (let [string-len (count string)\n           suffix-len (count suffix)]\n\n       (if (<= string-len length)\n         string\n         (str (subs string 0 (- length suffix-len)) suffix))))\n\n  ([string length]\n     (truncate string length \"...\")))\n\n(defn oxford\n  \"Converts a list of items to a human readable string\n   with an optional limit.\"\n  [coll  & {:keys [maximum-display truncate-noun]\n            :or {maximum-display 4\n                 truncate-noun nil}}]\n\n  (let [coll-length (count coll)]\n    (cond\n     ;; if coll has one or zero items\n     (< coll-length 2) (join coll)\n\n     ;; if the number of items doesn't exceed maximum display size\n     (<= coll-length maximum-display) (let [before-last (take (dec coll-length) coll)\n                                            last-item (last coll)]\n                                        (str (join (interpose \", \" before-last))\n                                             \", and \" last-item))\n\n     (> coll-length maximum-display) (let [display-coll (take maximum-display coll)\n                                           remaining (- coll-length maximum-display)\n                                           last-item (if (empty? truncate-noun)\n                                                       (str remaining \" \" (pluralize-noun remaining \"other\"))\n                                                       (str remaining \" other \" (pluralize-noun remaining\n                                                                                                truncate-noun)))\n                                           ]\n                                       (str (join (interpose \", \" display-coll))\n                                            \", and \" last-item))\n\n     ;; TODO: shouldn't reach here, throw exception\n     :else coll-length)))\n\n(defn- in-decades [diff]\n  (/ (in-years diff) 10))\n\n(defn- in-centuries [diff]\n  (/ (in-years diff) 100))\n\n(defn- in-millennia [diff]\n  (/ (in-years diff) 1000))\n\n(defn datetime\n  \"Given a datetime or date, return a human-friendly representation\n   of the amount of time elapsed. \"\n  [then-dt & {:keys [now-dt suffix prefix]\n              :or {now-dt (local-now)\n                   suffix  \"ago\"\n                   prefix \"in\"}}]\n  (let [then-dt (to-date-time then-dt)\n        now-dt  (to-date-time now-dt)\n        future-time? (after? then-dt now-dt)\n        diff (if future-time?\n               (interval now-dt then-dt)\n               (interval then-dt now-dt))]\n    (cond\n\n      ;; if the diff is greater than a millennium\n      (>= (in-millennia diff) 1) (with-dt-diff in-millennia diff \"millenium\" future-time? prefix suffix)\n\n      ;; if the diff is less than a millennium\n      (>= (in-centuries diff) 1) (with-dt-diff in-centuries diff \"century\" future-time? prefix suffix)\n\n      ;; if the diff is less than a century\n      (>= (in-decades diff) 1) (with-dt-diff in-decades diff \"decade\" future-time? prefix suffix)\n\n      ;; if the diff is less than a decade\n      (>= (in-years diff) 1) (with-dt-diff in-years diff \"year\" future-time? prefix suffix)\n\n      ;; if the diff is less than a year\n      (>= (in-months diff) 1) (with-dt-diff in-months diff \"month\" future-time? prefix suffix)\n\n      ;; if the diff is less than a month\n      (>= (in-weeks diff) 1) (with-dt-diff in-weeks diff \"week\" future-time? prefix suffix)\n\n      ;; if the diff is less than a week\n      (>= (in-days diff) 1) (with-dt-diff in-days diff \"day\" future-time? prefix suffix)\n\n      ;; if the diff is less than a day\n      (>= (in-hours diff) 1) (with-dt-diff in-hours diff \"hour\" future-time? prefix suffix)\n\n      ;; if the diff is less than an hour\n      (>= (in-minutes diff) 1) (with-dt-diff in-minutes diff \"minute\" future-time? prefix suffix)\n\n      ;; if the diff is less than a minute\n      (>= (in-seconds diff) 1) (with-dt-diff in-seconds diff \"second\" future-time? prefix suffix)\n\n      ;; if the diff is less than a second\n      :else  (if future-time?\n               (str prefix \" a moment\")\n               (str \"a moment \" suffix))\n      )))\n\n(def ^:private duration-periods\n  [[(* 1000 60 60 24 365) \"year\"]\n   [(* 1000 60 60 24 31) \"month\"]\n   [(* 1000 60 60 24 7) \"week\"]\n   [(* 1000 60 60 24) \"day\"]\n   [(* 1000 60 60) \"hour\"]\n   [(* 1000 60) \"minute\"]\n   [1000 \"second\"]])\n\n(defn- duration-terms\n  \"Converts a duration, in milliseconds, to a set of terms describing the duration.\n  The terms are in descending order, largest period to smallest.\n\n  Each term is a tuple of count and period name, e.g., `[5 \\\"second\\\"]`.\n\n  After seconds are accounted for, remaining milliseconds are ignored.\"\n  [duration-ms]\n  {:pre [(<= 0 duration-ms)]}\n  (loop [remainder duration-ms\n         [[period-ms period-name] & more-periods] duration-periods\n         terms []]\n    (cond\n      (nil? period-ms)\n      terms\n\n      (< remainder period-ms)\n      (recur remainder more-periods terms)\n\n      :else\n      (let [period-count (int (/ remainder period-ms))\n            next-remainder (mod remainder period-ms)]\n        (recur next-remainder more-periods\n               (conj terms [period-count period-name]))))))\n\n(defn duration\n  \"Converts duration, in milliseconds, into a string describing it in terms\n  of years, months, weeks, days, hours, minutes, and seconds.\n\n  Ex:\n\n     (duration 325100) => \\\"five minutes, twenty-five seconds\\\"\n\n  The months and years periods are not based on actual calendar, so are approximate; this\n  function works best for shorter periods of time.\n\n  The optional options map allow some control over the result.\n\n  :list-format (default: a function) can be set to a function such as oxford\n\n  :number-format (default: numberword) function used to format period counts\n\n  :short-text (default: \\\"less than a second\\\") \"\n  {:added \"0.2.1\"}\n  ([duration-ms]\n   (duration duration-ms nil))\n  ([duration-ms options]\n   (let [terms (duration-terms duration-ms)\n         {:keys [number-format list-format short-text]\n          :or {number-format numberword\n               short-text \"less than a second\"\n               ;; This default, instead of oxford, because the entire string is a single \"value\"\n               list-format #(join \", \" %)}} options]\n     (if (seq terms)\n       (->> terms\n            (map (fn [[period-count period-name]]\n                   (str (number-format period-count)\n                        \" \"\n                        (pluralize-noun period-count period-name))))\n            list-format)\n       short-text))))\n"]}