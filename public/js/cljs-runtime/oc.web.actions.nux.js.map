{"version":3,"sources":["oc/web/actions/nux.cljs"],"mappings":"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","names":["oc.web.actions.nux/get-nux-cookie","cookie-name","oc.web.router/nux-cookie","oc.web.lib.jwt/user-id","cookie-value","oc.web.lib.cookies/get-cookie","oc.web.lib.json/json->cljs","oc.web.actions.nux/set-nux-cookie","user-type","value-map","old-nux-cookie","cljs.core.merge","json-map","oc.web.lib.json/cljs->json","json-string","js/JSON","oc.web.lib.cookies.set_cookie_BANG_","oc.web.actions.nux/new-user-registered","oc.web.router/first-ever-landing-cookie","oc.web.router/show-invite-box-cookie","oc.web.actions.nux/nux-end","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.actions.nux/default-tooltip-done","oc.web.actions.nux/parse-nux-cookie-value","v","cljs.core._EQ_","oc.web.actions.nux/mark-nux-step-done","nux-step-key","temp__5735__auto__","nux-cookie","oc.web.actions.nux/check-nux","temp__33774__auto__","nv","org-data","oc.web.dispatcher.org_data","team-data","oc.web.dispatcher.team_data","is-admin?","oc.web.lib.jwt/is-admin?","add-post-tooltip","post-added-tooltip","fixed-post-added-tooltip","edit-tooltip","team-has-bot?","oc.web.lib.jwt/team-has-bot?","fixed-add-post-tooltip","cljs.core.not_EQ_","oc.web.dispatcher/dispatch!","oc.web.actions.nux/dismiss-add-post-tooltip","oc.web.actions.nux/show-post-added-tooltip","post-uuid","or__4126__auto__","oc.web.actions.nux/dismiss-post-added-tooltip","oc.web.actions.nux/dismiss-edit-tooltip"],"sourcesContent":["(ns oc.web.actions.nux\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [oc.web.lib.jwt :as jwt]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.utils.org :as org-utils]\n            [oc.web.lib.json :refer (json->cljs cljs->json)]))\n\n(defn get-nux-cookie\n  \"Read the cookie from the document only if the nux-cookie-value atom is nil.\n  In all the other cases return the read value in the atom.\"\n  []\n  (let [cookie-name (router/nux-cookie (jwt/user-id))\n        cookie-value (cook/get-cookie cookie-name)]\n    (when cookie-value\n      (json->cljs cookie-value))))\n\n(defn set-nux-cookie\n  \"Create a map for the new user cookie and save it. Also update the value of\n  the nux-cookie-value atom.\"\n  [user-type value-map]\n  (let [old-nux-cookie (get-nux-cookie)\n        value-map (merge {:user-type user-type} old-nux-cookie value-map)\n        json-map (cljs->json value-map)\n        json-string (.stringify js/JSON json-map)]\n    (cook/set-cookie!\n     (router/nux-cookie (jwt/user-id))\n      json-string\n      (* 60 60 24 7))))\n\n(defn new-user-registered [user-type]\n  (cook/set-cookie! (router/first-ever-landing-cookie (jwt/user-id))\n   true (* 60 60 24 7))\n  (cook/set-cookie! (router/show-invite-box-cookie (jwt/user-id)) true)\n  (set-nux-cookie user-type\n    {:show-add-post-tooltip true\n     :show-post-added-tooltip false\n     :show-edit-tooltip true}))\n\n(defn nux-end\n  \"NUX completed for the current user, remove the cookie and update the nux-cookie-value.\"\n  []\n  (cook/remove-cookie! (router/nux-cookie (jwt/user-id))))\n\n;; Value used to save an already shown tooltip, use a string since keyword\n;; will be lost during json read/write\n(def default-tooltip-done \"done\")\n\n(defn- parse-nux-cookie-value [v]\n  (if (= v default-tooltip-done)\n    false\n    v))\n\n(defn mark-nux-step-done [nux-step-key]\n  (when-let [nux-cookie (get-nux-cookie)]\n    (set-nux-cookie (:user-type nux-cookie)\n     {nux-step-key default-tooltip-done})))\n\n(defn check-nux\n  []\n  (when-let* [nv (get-nux-cookie)\n              org-data (dis/org-data)]\n    (let [team-data (dis/team-data)\n          ; can-edit? (utils/is-admin-or-author? org-data)\n          is-admin? (jwt/is-admin? (:team-id org-data))\n          add-post-tooltip (:show-add-post-tooltip nv)\n          post-added-tooltip (:show-post-added-tooltip nv)\n          fixed-post-added-tooltip (parse-nux-cookie-value post-added-tooltip)\n          edit-tooltip (:show-edit-tooltip nv)\n          user-type (:user-type nv)\n          team-has-bot? (jwt/team-has-bot? (:team-id org-data))\n          ;; Show add post tooltip if\n          fixed-add-post-tooltip (and ;; it has not been done already\n                                      (not= add-post-tooltip default-tooltip-done)\n                                      ;; we are not showing the next tooltip (post added)\n                                      (not (true? post-added-tooltip)))\n          ;; Show the tooltip inside editing\n          ; fixed-edit-tooltip (and ;; has not been done already\n          ;                         (not= edit-tooltip default-tooltip-done)\n          ;                         ;; user is not a viewer\n          ;                         can-edit?)\n          ]\n      ;; If we don't need to show the first tooltip but it's\n      ;; not marked as done let's mark it to remember\n      (when (and (not fixed-add-post-tooltip)\n                 (true? post-added-tooltip))\n        (mark-nux-step-done :show-add-post-tooltip))\n      ; (when (and (not fixed-post-added-tooltip)\n      ;            (not can-edit?))\n      ;   (mark-nux-step-done :show-post-added-tooltip))\n      ; (when (and (not fixed-edit-tooltip)\n      ;            (not can-edit?))\n      ;   (mark-nux-step-done :show-edit-tooltip))\n      ; (when (and (not fixed-edit-tooltip)\n      ;            (not can-edit?))\n      ;   (mark-nux-step-done :show-edit-tooltip))\n      (dis/dispatch! [:input [:nux]\n       {:show-add-post-tooltip (if fixed-add-post-tooltip\n                                 (if (:author? org-data)\n                                  true\n                                  :is-second-user)\n                                 false)\n        :show-post-added-tooltip fixed-post-added-tooltip\n        ; :show-edit-tooltip fixed-edit-tooltip\n        :user-type user-type}])\n\n      ;; Check if we need to remove the nux cookie\n      (when (and (= (:show-add-post-tooltip nv) default-tooltip-done)\n                 (= (:show-post-added-tooltip nv) default-tooltip-done)\n                 (= (:show-edit-tooltip nv) default-tooltip-done))\n        (nux-end)))))\n\n(defn dismiss-add-post-tooltip []\n  (mark-nux-step-done :show-add-post-tooltip)\n  (check-nux))\n\n(defn show-post-added-tooltip [post-uuid]\n  (when-let [nux-cookie (get-nux-cookie)]\n    (set-nux-cookie (:user-type nux-cookie)\n     {:show-add-post-tooltip default-tooltip-done\n      :show-post-added-tooltip (or (:show-post-added-tooltip nux-cookie) post-uuid)}))\n  (check-nux))\n\n(defn dismiss-post-added-tooltip []\n  (mark-nux-step-done :show-post-added-tooltip)\n  (check-nux))\n\n(defn dismiss-edit-tooltip []\n  (mark-nux-step-done :show-edit-tooltip)\n  (check-nux))"]}