{"version":3,"sources":["oc/web/components/rich_body_editor.cljs"],"mappings":"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","names":["oc.web.components.rich-body-editor/body-on-change","state","cljs.core/deref","cljs.core/reset!","options","cljs.core/first","on-change","rum.core/build-defcs","p__45823","map__45824","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.rich-body-editor/rich-body-editor","rum.core/reactive","rum.core.local","org.martinklepsch.derivatives.drv","oc.web.mixins.mention/oc-mentions-hover","oc.web.mixins.ui/on-window-click-mixin","s","e","and__4115__auto__","cljs.core/not","oc.web.lib.utils/event-inside?","js/document","rum.core/ref-node","oc.web.utils.medium-editor-media/media-video-add","oc.web.utils.medium-editor-media/media-gif-add","props","oc.web.lib.utils/after","oc.web.utils.medium-editor-media/setup-editor","o","cljs.core.not_EQ_","data","org.martinklepsch.derivatives/get-ref","video-data","cljs.core._EQ_","cljs.core/map?","p1__45822#","oc.web.dispatcher/dispatch!","cljs.core.dissoc","initial-body","classes","show-placeholder","upload-progress-cb","dispatch-input-key","attachment-dom-selector","fullscreen","cmail-key","paywall?","_mention-users","org.martinklepsch.derivatives/react","_media-input","_users-info-hover","_current-user-data","_follow-publishers-list","_followers-publishers-count","hide-placeholder?","or__4126__auto__","oc.web.lib.utils/class-set","oc.web.lib.utils/emojify","G__45826","oc.web.components.ui.media-video-modal/media-video-modal","G__45827","oc.web.components.ui.giphy-picker/giphy-picker","gif-obj"],"sourcesContent":["(ns oc.web.components.rich-body-editor\n  (:require [rum.core :as rum]\n            [dommy.core :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.mention :as mention-mixins]\n            [oc.web.mixins.ui :refer (on-window-click-mixin)]\n            [oc.web.utils.medium-editor-media :as me-media-utils]\n            [oc.web.components.ui.giphy-picker :refer (giphy-picker)]\n            [oc.web.components.ui.media-video-modal :refer (media-video-modal)]))\n\n\n(defn body-on-change [state]\n  (when-not @(::did-change state)\n    (reset! (::did-change state) true))\n  (let [options (first (:rum/args state))\n        on-change (:on-change options)]\n    (on-change)))\n\n(rum/defcs rich-body-editor  < rum/reactive\n                               ;; Locals\n                               (rum/local false ::did-change)\n                               (rum/local nil ::me-media-utils/editor)\n                               (rum/local nil ::me-media-utils/media-picker-ext)\n                               (rum/local false ::me-media-utils/media-photo)\n                               (rum/local false ::me-media-utils/media-video)\n                               (rum/local false ::me-media-utils/media-attachment)\n                               (rum/local false ::me-media-utils/media-photo-did-success)\n                               (rum/local false ::me-media-utils/media-attachment-did-success)\n                               (rum/local false ::me-media-utils/showing-media-video-modal)\n                               (rum/local false ::me-media-utils/showing-gif-selector)\n                               ;; Image upload lock\n                               (rum/local false ::me-media-utils/upload-lock)\n                               ;; Derivatives\n                               (drv/drv :media-input)\n                               (drv/drv :mention-users)\n                               (drv/drv :users-info-hover)\n                               (drv/drv :current-user-data)\n                               (drv/drv :follow-publishers-list)\n                               (drv/drv :followers-publishers-count)\n                               ;; Mixins\n                               (mention-mixins/oc-mentions-hover)\n                               (on-window-click-mixin (fn [s e]\n                                (when (and @(::me-media-utils/showing-media-video-modal s)\n                                           (not (utils/event-inside? e (sel1 [:button.media.media-video])))\n                                           (not (utils/event-inside? e (rum/ref-node s :video-container))))\n                                  (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil)\n                                  (reset! (::me-media-utils/showing-media-video-modal s) false))\n                                (when (and @(::me-media-utils/showing-gif-selector s)\n                                           (not (utils/event-inside? e (sel1 [:button.media.media-gif])))\n                                           (not (utils/event-inside? e (sel1 [:div.giphy-picker]))))\n                                  (me-media-utils/media-gif-add s @(::me-media-utils/media-picker-ext s) nil)\n                                  (reset! (::me-media-utils/showing-gif-selector s) false))))\n                               {:did-mount (fn [s]\n                                 (let [props (first (:rum/args s))]\n                                   (utils/after 300 #(me-media-utils/setup-editor s body-on-change (first (:rum/args s)))))\n                                 s)\n                                :did-remount (fn [o s]\n                                 (me-media-utils/setup-editor s body-on-change (first (:rum/args s)))\n                                 (when (not= (:cmail-key (first (:rum/args o))) (:cmail-key (first (:rum/args s))))\n                                   (when @(::me-media-utils/editor s)\n                                     (.destroy @(::me-media-utils/editor s)))\n                                   (reset! (::me-media-utils/editor s) nil)\n                                   (reset! (::me-media-utils/media-picker-ext s) nil)\n                                   (reset! (::did-change s) false)\n                                   (utils/after 10 #(me-media-utils/setup-editor s body-on-change (first (:rum/args s)))))\n                                 s)\n                                :will-update (fn [s]\n                                 (let [data @(drv/get-ref s :media-input)\n                                       video-data (:media-video data)]\n                                    (when (and @(::me-media-utils/media-video s)\n                                               (or (= video-data :dismiss)\n                                                   (map? video-data)))\n                                      (when (or (= video-data :dismiss)\n                                                (map? video-data))\n                                        (reset! (::me-media-utils/media-video s) false)\n                                        (dis/dispatch! [:update [:media-input] #(dissoc % :media-video)]))\n                                      (if (map? video-data)\n                                        (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) video-data)\n                                        (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil))))\n                                 s)\n                                :will-unmount (fn [s]\n                                 (when @(::me-media-utils/editor s)\n                                   (.destroy @(::me-media-utils/editor s)))\n                                 s)}\n  [s {:keys [initial-body\n             on-change\n             classes\n             show-placeholder\n             upload-progress-cb\n             dispatch-input-key\n             attachment-dom-selector\n             fullscreen\n             cmail-key\n             paywall?]}]\n  (let [_mention-users (drv/react s :mention-users)\n        _media-input (drv/react s :media-input)\n        _users-info-hover (drv/react s :users-info-hover)\n        _current-user-data (drv/react s :current-user-data)\n        _follow-publishers-list (drv/react s :follow-publishers-list)\n        _followers-publishers-count (drv/react s :followers-publishers-count)\n        hide-placeholder? (or (not show-placeholder) @(::did-change s))]\n    [:div.rich-body-editor-outer-container\n      {:key (str \"rich-body-editor-\" cmail-key)\n       :class (when paywall? \"block-edit\")}\n      [:div.rich-body-editor-container\n        [:div.rich-body-editor.oc-mentions.oc-mentions-hover.editing\n          {:ref \"editor-node\"\n           :content-editable (not paywall?)\n           :class (str classes\n                   (utils/class-set {:medium-editor-placeholder-hidden hide-placeholder?\n                                     :medium-editor-placeholder-relative (not hide-placeholder?)\n                                     :medium-editor-element true\n                                     :uploading @(::me-media-utils/upload-lock s)}))\n           :dangerouslySetInnerHTML (utils/emojify initial-body)}]]\n      (when @(::me-media-utils/showing-media-video-modal s)\n        [:div.video-container\n          {:ref :video-container}\n          (media-video-modal {:fullscreen fullscreen\n                              :dismiss-cb #(do\n                                            (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil)\n                                            (reset! (::me-media-utils/showing-media-video-modal s) false))\n                              :offset-element-selector [:div.rich-body-editor-outer-container]\n                              :outer-container-selector [:div.cmail-content-outer]})])\n      (when @(::me-media-utils/showing-gif-selector s)\n        (giphy-picker {:fullscreen fullscreen\n                       :pick-emoji-cb (fn [gif-obj]\n                                       (reset! (::me-media-utils/showing-gif-selector s) false)\n                                       (me-media-utils/media-gif-add s @(::me-media-utils/media-picker-ext s) gif-obj))\n                       :offset-element-selector [:div.rich-body-editor-outer-container]\n                       :outer-container-selector [:div.cmail-content-outer]}))]))\n"]}