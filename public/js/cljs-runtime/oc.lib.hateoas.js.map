{"version":3,"sources":["oc/lib/hateoas.cljc"],"mappings":"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","names":["oc.lib.hateoas/OPTIONS","oc.lib.hateoas/HEAD","oc.lib.hateoas/GET","oc.lib.hateoas/POST","oc.lib.hateoas/PUT","oc.lib.hateoas/PATCH","oc.lib.hateoas/DELETE","oc.lib.hateoas/http-methods","oc.lib.hateoas/json-collection-version","oc.lib.hateoas/media-types?","media-types","cljs.core/map?","clojure.set/subset?","cljs.core/keys","var_args","G__41442","oc.lib.hateoas/link-map","js/Error","rel","method","url","oc.lib.hateoas.link_map","others","link-map","cljs.core.merge","accept","accept-link-map","cljs.core.assoc","content-type","G__41448","oc.lib.hateoas/self-link","media-type","oc.lib.hateoas.self_link","G__41452","oc.lib.hateoas/collection-link","oc.lib.hateoas.collection_link","G__41454","oc.lib.hateoas/item-link","oc.lib.hateoas.item_link","G__41458","oc.lib.hateoas/up-link","oc.lib.hateoas.up_link","G__41460","oc.lib.hateoas/add-link","oc.lib.hateoas.add_link","G__41462","oc.lib.hateoas/remove-link","oc.lib.hateoas.remove_link","G__41466","oc.lib.hateoas/create-link","oc.lib.hateoas.create_link","G__41468","oc.lib.hateoas/update-link","oc.lib.hateoas.update_link","G__41470","oc.lib.hateoas/partial-update-link","oc.lib.hateoas.partial_update_link","G__41472","oc.lib.hateoas/delete-link","oc.lib.hateoas.delete_link","G__41474","oc.lib.hateoas/archive-link","oc.lib.hateoas.archive_link","oc.lib.hateoas/link-replace-href","link","replacements","p1__41475#","cljs.core.update","cljs.core.reduce","p__41476","vec__41477","cljs.core.nth","href","k","v","cuerdas.core/replace","cljs.core.get","oc.lib.hateoas/s-or-k?","value","cljs.core/Keyword","oc.lib.hateoas/nil-or-map?","oc.lib.hateoas/check-params","params","p1__41480#","cljs.core/every?","cljs.core._EQ_","args__41272__auto__","ocr-41488","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-41488_left__41500","cljs.core.subvec","ocr-41488_left__41500_0__41502","cljs.core.match/backtrack","e41658","e__40179__auto__","e41656","e41557","ocr-41488_0__41503","ocr-41488_1__41504","ocr-41488_2__41505","e41653","e41652","e41649","e41558","ocr-41488_0__41506","ocr-41488_1__41507","ocr-41488_2__41508","ocr-41488_3__41509","ocr-41488_4__41510","e41646","e41644","e41642","e41641","e41639","e41559","ocr-41488_0__41511","ocr-41488_1__41512","ocr-41488_2__41513","ocr-41488_3__41514","e41635","e41634","e41632","e41630","e41560","ocr-41488_0__41515","ocr-41488_1__41516","ocr-41488_2__41517","p1__41481#","e41627","e41626","e41623","e41561","ocr-41488_0__41518","ocr-41488_1__41519","ocr-41488_2__41520","ocr-41488_3__41521","ocr-41488_4__41522","e41620","e41619","e41618","e41616","e41614","e41562","ocr-41488_0__41523","ocr-41488_1__41524","ocr-41488_2__41525","ocr-41488_3__41526","p1__41482#","e41611","e41610","e41609","e41608","e41563","ocr-41488_0__41527","ocr-41488_1__41528","ocr-41488_2__41529","p1__41483#","e41602","e41601","e41600","e41564","ocr-41488_0__41530","ocr-41488_1__41531","ocr-41488_2__41532","ocr-41488_3__41533","ocr-41488_4__41534","e41599","e41598","e41597","e41596","e41595","e41565","ocr-41488_0__41535","ocr-41488_1__41536","ocr-41488_2__41537","ocr-41488_3__41538","p1__41484#","e41594","e41593","e41592","e41591","e41566","ocr-41488_0__41539","ocr-41488_1__41540","p1__41485#","e41590","e41589","e41567","ocr-41488_0__41541","ocr-41488_1__41542","ocr-41488_2__41543","ocr-41488_3__41544","e41588","e41587","e41586","e41585","e41568","ocr-41488_0__41545","ocr-41488_1__41546","ocr-41488_2__41547","e41583","e41584","e41582","e41581","e41569","ocr-41488_0__41548","ocr-41488_1__41549","ocr-41488_2__41550","ocr-41488_3__41551","ocr-41488_4__41552","e41580","e41579","e41578","e41577","e41576","e41570","ocr-41488_0__41553","ocr-41488_1__41554","ocr-41488_2__41555","ocr-41488_3__41556","e41575","e41574","e41573","e41572","e41571","oc.lib.hateoas/link-for","rest","links","cljs.core/sequential?","rels","methods","cljs.core/some"],"sourcesContent":["(ns oc.lib.hateoas\n  \"Namespace of helpers for creating HATEOAS links.\"\n  (:require [defun.core :refer (defun)]\n            [cuerdas.core :as string]))\n\n(def OPTIONS \"OPTIONS\")\n(def HEAD \"HEAD\")\n(def GET \"GET\")\n(def POST \"POST\")\n(def PUT \"PUT\")\n(def PATCH \"PATCH\")\n(def DELETE \"DELETE\")\n(def http-methods #{OPTIONS HEAD GET POST PUT PATCH DELETE})\n\n(def json-collection-version \"1.0\")\n\n(defn- media-types?\n  \"Ensure media types is either a map with :accept and/or :content-type keys, or nothing\"\n  [media-types]\n  (and (or (nil? media-types) (map? media-types))\n       (clojure.set/subset? (keys media-types) #{:accept :content-type})))\n\n(defn link-map\n  \"\n  Create a HATEOAS link for the specified relation, HTTP method, URL, and media-type.\n\n  Any additional key/values will be included as additional properties of the link.\n  \"\n  ([rel method url media-types] (link-map rel method url media-types {}))\n  \n  ([rel method url media-types others]\n  {:pre [(string? rel)\n         (http-methods method)\n         (string? url)\n         (media-types? media-types)\n         (map? others)]}\n  (let [link-map (merge {:rel rel :method method :href url} others)\n        accept (:accept media-types)\n        accept-link-map (if accept (assoc link-map :accept accept) link-map)\n        content-type (:content-type media-types)]\n    (if content-type\n      (assoc accept-link-map :content-type content-type)\n      accept-link-map))))\n\n(defn self-link \n  \"Link that points back to the resource itself.\"\n  ([url media-type]\n  (self-link url media-type {}))\n  \n  ([url media-type others]\n  (link-map \"self\" GET url media-type others)))\n\n(defn collection-link\n  \"Link that points to a collection (list) of items.\"\n  ([url media-type]\n  (collection-link url media-type {}))\n  \n  ([url media-type others]\n  (link-map \"collection\" GET url media-type others)))\n\n(defn item-link\n  \"Link that points to an individual item in a collection.\"\n  ([url media-type]\n  (item-link url media-type {}))\n  \n  ([url media-type others]\n  (link-map \"item\" GET url media-type)))\n\n(defn up-link \n  \"Link that points to the parent collection that contains this item.\"\n  ([url media-type]\n  (up-link url media-type {}))\n  \n  ([url media-type others]\n  (link-map \"up\" GET url media-type others)))\n\n(defn add-link\n  \"Link to add an existing item to a collection.\"\n  ([method url media-type]\n  (add-link method url media-type {}))\n  \n  ([method url media-type others]\n  (link-map \"add\" method url media-type others)))\n\n(defn remove-link\n  \"Link to remove an item from a collection.\"\n  ([url]\n  (remove-link url {} {}))\n  \n  ([url media-type]\n  (remove-link url media-type {}))\n  \n  ([url media-type others]\n  (link-map \"remove\" DELETE url media-type others)))\n\n(defn create-link \n  \"Link to create a new resource.\"\n  ([url media-type]\n  (create-link url media-type {}))\n\n  ([url media-type others]\n  (link-map \"create\" POST url media-type others)))\n\n(defn update-link\n  \"Link to replace an existing resource with new content.\"\n  ([url media-types]\n  (update-link url media-types {}))\n\n  ([url media-types others]\n  (link-map \"update\" PUT url media-types others)))\n\n(defn partial-update-link\n  \"Link to update an existing resource with a fragment of content that's merged into the existing content.\"\n  ([url media-types]\n  (partial-update-link url media-types {}))\n  \n  ([url media-types others]\n  (link-map \"partial-update\" PATCH url media-types others)))\n\n(defn delete-link\n  \"Link to delete an existing resource.\"\n  ([url]\n  (delete-link url {}))\n  ([url others]\n  (link-map \"delete\" DELETE url {} others)))\n\n(defn archive-link\n  \"Link to archive an existing resource.\"\n  ([url]\n  (archive-link url {}))\n  ([url others]\n  (link-map \"archive\" DELETE url {} others)))\n\n;; Href formatter\n\n(defn link-replace-href\n  \"Given a link with an :href and a :replace map,\n   and given a replacements map, apply the replacements to the link.\"\n  [link replacements]\n  (update link :href\n   #(reduce (fn [href [k v]]\n              (string/replace href v (get replacements k)))\n     %\n     (:replace link))))\n\n;; Retrieve link: mostly used by the client\n\n(defn- s-or-k?\n  \"Truthy if the provided value is a string or a keyword.\"\n  [value]\n  (or (string? value)\n      (keyword? value)))\n\n(defn- nil-or-map?\n  [v]\n  (or (nil? v)\n      (map? v)))\n\n(defn- check-params [link params]\n  (or (nil? params)\n      (every? #(or (= % :replace)\n                   (= (get link %) (get params %)))\n       (keys params))))\n\n(defun link-for\n\n  ([nil & rest]\n   false)\n\n  ([links :guard sequential? rels :guard sequential? methods :guard sequential?]\n   (some (fn [rel] (link-for links rel methods)) rels))\n\n  ([links :guard sequential? rels :guard sequential? methods :guard sequential? params :guard nil-or-map? replacements :guard map?]\n   (let [link (link-for links rels methods params)]\n     (link-replace-href link replacements)))\n\n  ([links :guard sequential? rels :guard sequential? methods :guard sequential? params :guard nil-or-map?]\n   (some (fn [rel] (link-for links rel methods params)) rels))\n\n  ([links :guard sequential? rels :guard sequential? method :guard string?]\n   (some #(link-for links % method) rels))\n\n  ([links :guard sequential? rels :guard sequential? method :guard string? params :guard nil-or-map? replacements :guard map?]\n   (let [link (link-for links rels method params)]\n     (link-replace-href link replacements)))\n\n  ([links :guard sequential? rels :guard sequential? method :guard string? params :guard nil-or-map?]\n   (some #(link-for links % method params) rels))\n\n  ([links :guard sequential? rel :guard string? methods :guard sequential?]\n   (some #(link-for links rel %) methods))\n\n  ([links :guard sequential? rel :guard string? methods :guard sequential? params :guard nil-or-map? replacements :guard map?]\n   (let [link (link-for links rel methods params)]\n     (link-replace-href link replacements)))\n\n  ([links :guard sequential? rel :guard string? methods :guard sequential? params :guard nil-or-map?]\n   (some #(link-for links rel % params) methods))\n\n  ([links :guard sequential? rel :guard string?]\n   (some #(when (= (:rel %) rel) %) links))\n\n  ([links :guard sequential? rel :guard string? params :guard nil-or-map? replacements :guard map?]\n   (let [link (link-for links rel params)]\n     (link-replace-href link replacements)))\n\n  ([links :guard sequential? rel :guard string? params :guard nil-or-map?]\n   (some (fn [link]\n           (when (and (= (:rel link) rel)\n                      (check-params link params))\n             link))\n    links))\n\n  ([links :guard sequential? rel :guard string? method :guard string?]\n   (some (fn [link]\n           (when (and (= (:rel link) rel)\n                     (= (:method link) method))\n             link))\n    links))\n\n  ([links :guard sequential? rel :guard string? method :guard string? params :guard nil-or-map? replacements :guard map?]\n   (let [link (link-for links rel method params)]\n     (link-replace-href link replacements)))\n\n  ([links :guard sequential? rel :guard string? method :guard string? params :guard nil-or-map?]\n   (some (fn [link]\n           (when (and (= (:rel link) rel)\n                      (= (:method link) method)\n                      (check-params link params))\n             link))\n    links)))"]}