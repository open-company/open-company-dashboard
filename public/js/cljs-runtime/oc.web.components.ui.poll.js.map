{"version":3,"sources":["oc/web/components/ui/poll.cljs"],"mappings":"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","names":["oc.web.components.ui.poll/get-dispatch-key","poll-key","cljs.core.subvec","cljs.core/count","rum.core/build-defcs","p__38863","map__38864","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","attrs38867","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","attrs38868","cljs.core.into_array","iter__4529__auto__","s__38873","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__38875","cljs.core/chunk-buffer","i__38874","cljs.core/-nth","cljs.core/chunk-append","attrs38877","attrs38876","cljs.core/chunk-cons","cljs.core/chunk","iter__38872","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","oc.web.components.ui.poll/poll-read","rum.core/static","rum.core.local","s","oc.web.lib.utils/after","cljs.core/reset!","poll-data","current-user-id","can-vote?","cljs.core/not","user-voted?","cljs.core/deref","p1__38858#","cljs.core.map","cljs.core._EQ_","cljs.core.mapcat","total-votes-count","p1__38860#","p2__38859#","cljs.core.reduce","cljs.core/vals","oc.web.lib.utils/class-set","cljs.core.not_EQ_","reply","oc.web.utils.poll.sorted_replies","cuerdas.core.trim","votes-percent","rounded-votes-percent","js/isNaN","js/Math","reply-voted?","p1__38861#","cljs.core/some","oc.web.actions.poll/unvote-reply","oc.web.actions.poll/vote-reply","or__4126__auto__","and__4115__auto__","p1__38862#","oc.web.utils.poll/max-reply-length","e","oc.web.actions.poll/add-new-reply","new-input","rum.core/ref-node","oc.web.actions.poll/hide-preview","oc.web.components.ui.poll/add-option","oc.web.actions.poll/add-reply","last-option","p__38884","map__38885","p1__38881#","sablono.interpreter/create-element","p1__38882#","s__38893","b__38895","i__38894","attrs38896","p1__38883#","iter__38892","oc.web.components.ui.poll/poll-edit","cljs.core.rand","q-el","props","should-show-delete-reply?","oc.web.utils.poll/min-poll-replies","is-mobile?","oc.web.lib.responsive/is-mobile-size?","tab-index-base","oc.web.lib.utils/event-stop","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.actions.poll/remove-poll","oc.web.components.ui.alert-modal/show-alert","oc.web.utils.poll/max-question-length","oc.web.actions.poll/update-question","idx","cljs.core.atom","cljs.core.swap_BANG_","cljs.core/inc","last-option?","oc.web.actions.poll/update-reply","oc.web.actions.poll/delete-reply","cljs.core.partial","oc.web.actions.poll/show-preview","p__38905","map__38906","oc.web.components.ui.poll/poll","args","js/$","editing?","js/oc","js/oc.web","js/oc.web.components","js/oc.web.components.ui","js/oc.web.components.ui.poll","js/oc.web.components.ui.poll.max-mount-retry","oc.web.components.ui.poll/max-mount-retry","p__38910","map__38911","oc.web.components.ui.poll/poll-portal","retry","retry?","rum.core/dom-node","oc.web.utils.poll/report-unmounted-poll","_","poll-portal-selector","container-selector","activity-data","portal-element","js/document","dommy.core/selector","rum.core/portal","rum.core/build-defc","p__38913","map__38914","s__38917","b__38919","i__38918","vec__38920","cljs.core.nth","iter__38916","vec__38924","oc.web.components.ui.poll/polls-wrapper","polls-data","dispatch-key","poll-uuid-k","poll","poll-uuid","cljs.core/name","poll-selector","oc.web.utils.poll/poll-selector-prefix","rum.core/with-key","G__38923","G__38927","cljs.core/vec","cljs.core.concat","cljs.core/coll?","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.poll\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.poll :as poll-utils]\n            [oc.web.actions.poll :as poll-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.components.ui.alert-modal :as alert-modal]))\n\n(defn- get-dispatch-key [poll-key]\n  (subvec poll-key 0 (- (count poll-key) 2)))\n\n(rum/defcs poll-read < rum/static\n                       (rum/local false ::animate)\n                       (rum/local \"\" ::new-reply)\n                       (rum/local false ::adding-reply)\n                       {:did-mount (fn [s]\n                        (utils/after 180 #(reset! (::animate s) true))\n                        s)}\n  [s {:keys [poll-data poll-key current-user-id]}]\n  (let [can-vote? (and (seq current-user-id)\n                       (not (:preview poll-data)))\n        user-voted? (and (not @(::adding-reply s))\n                         (seq (map #(= current-user-id %) (mapcat :votes (:replies poll-data)))))\n        total-votes-count (reduce #(-> %2 :votes count (+ %1)) 0 (-> poll-data :replies vals))]\n    [:div.poll.poll-read\n      {:class (utils/class-set {:voted user-voted?})}\n      [:div.poll-question\n        [:div.poll-question-body\n          (:question poll-data)]\n        [:div.poll-total-count\n          (str total-votes-count \" vote\" (when (not= total-votes-count 1) \"s\"))]]\n      [:div.poll-replies\n        {:class (utils/class-set {:can-vote can-vote?\n                                  :animate @(::animate s)})}\n        (for [reply (poll-utils/sorted-replies poll-data)\n              :when (seq (string/trim (:body reply)))\n              :let [votes-percent (-> reply :votes count (/ total-votes-count) (* 100))\n                    rounded-votes-percent (if (js/isNaN votes-percent)\n                                            0\n                                            (/ (.round js/Math (* 10 votes-percent)) 10))\n                    reply-voted? (and can-vote?\n                                      (some #(when (= % current-user-id) %) (:votes reply)))]]\n          [:div.poll-reply-outer.group\n            {:key (str \"poll-\" (:poll-uuid poll-data) \"-reply-\" (:reply-id reply))\n             :class (utils/class-set {(str \"percent-\" (.round js/Math rounded-votes-percent)) true\n                                      :voted (and (not @(::adding-reply s))\n                                                  reply-voted?)})}\n            [:button.mlb-reset.poll-reply\n              {:type \"button\"\n               :on-click (when can-vote?\n                           #(if reply-voted?\n                              (poll-actions/unvote-reply poll-data poll-key (:reply-id reply))\n                              (poll-actions/vote-reply poll-data poll-key (:reply-id reply))))}\n              [:div.poll-reply-body\n                (:body reply)]]\n            [:div.poll-reply-count\n              (str rounded-votes-percent \"%\")]])]\n      (when (or (and (:can-add-reply poll-data)\n                     can-vote?)\n                (:preview poll-data))\n          (if @(::adding-reply s)\n            [:div.poll-reply-new\n              [:div.poll-reply.group\n                [:input.poll-reply-body\n                  {:type \"text\"\n                   :ref :new-reply\n                   :value @(::new-reply s)\n                   :max-length poll-utils/max-reply-length\n                   :placeholder \"Press Enter to add or Escape to cancel\"\n                   :on-change #(reset! (::new-reply s) (.. % -target -value))\n                   :on-key-up (fn [e]\n                               (when (and (or (= (.-key e) \"Enter\")\n                                              (= (.-keyCode e) 13))\n                                          (seq @(::new-reply s)))\n                                 (poll-actions/add-new-reply poll-data poll-key @(::new-reply s))\n                                 (reset! (::new-reply s) \"\")\n                                 (reset! (::adding-reply s) false))\n                               (when (or (= (.-key e) \"Escape\")\n                                         (= (.-keyCode e) 27))\n                                 (reset! (::new-reply s) \"\")\n                                 (reset! (::adding-reply s) false)))}]\n                [:button.mlb-reset.delete-reply.read-poll\n                  {:type \"button\"\n                   :on-click #(reset! (::adding-reply s) false)}]]]\n            [:div.poll-reply-new\n              (when (:can-add-reply poll-data)\n                [:button.mlb-reset.poll-reply-new\n                  {:type \"button\"\n                   :on-click (fn [e]\n                              (reset! (::adding-reply s) true)\n                              (utils/after 800\n                               #(when-let [new-input (rum/ref-node s :new-reply)]\n                                  (.focus new-input))))}\n                  \"Add option\"])\n              (when (:preview poll-data)\n                [:button.mlb-reset.poll-preview-bt\n                  {:type \"button\"\n                   :on-click #(poll-actions/hide-preview poll-key)}\n                  \"Edit poll\"])]))]))\n\n(defn- add-option [s poll-key poll-data]\n  (poll-actions/add-reply poll-key)\n  (utils/after 400\n   #(when-let [last-option (rum/ref-node s (str \"choice-\" (inc (count (:replies poll-data)))))]\n      (.focus last-option))))\n\n(rum/defcs poll-edit < rum/static\n                       (rum/local \"\" ::new-reply)\n                       (rum/local nil ::tab-index-base)\n                       {:will-mount (fn [s]\n                        (reset! (::tab-index-base s) (int (rand 1000)))\n                        s)\n                        :did-mount (fn [s]\n                          (when-let [q-el (rum/ref-node s :question)]\n                            (.focus q-el))\n                        s)}\n  [s {:keys [poll-data poll-key current-user-id] :as props}]\n  (let [should-show-delete-reply? (-> poll-data :replies count (> poll-utils/min-poll-replies))\n        is-mobile? (responsive/is-mobile-size?)\n        tab-index-base @(::tab-index-base s)]\n    (if (:preview poll-data)\n      (poll-read props)\n      [:div.poll\n        [:form\n          {:on-submit #(utils/event-stop %)\n           :action \".\"}\n          [:button.mlb-reset.delete-poll-bt\n            {:type \"button\"\n             :on-click (fn [e]\n                         (let [alert-data {:icon \"/img/ML/trash.svg\"\n                                           :action \"delete-poll\"\n                                           :message \"Are you sure you want to delete this poll? This can\u2019t be undone.\"\n                                           :link-button-title \"Keep\"\n                                           :link-button-cb #(alert-modal/hide-alert)\n                                           :solid-button-style :red\n                                           :solid-button-title \"Yes\"\n                                           :solid-button-cb (fn []\n                                                             (poll-actions/remove-poll (get-dispatch-key poll-key) poll-data)\n                                                             (alert-modal/hide-alert))}]\n                           (alert-modal/show-alert alert-data)))\n             :data-toggle (when-not is-mobile? \"tooltip\")\n             :data-placement \"top\"\n             :data-container \"body\"\n             :title \"Remove poll\"}]\n          [:div.poll-question-label\n            \"What would you like to ask?\"]\n          [:input.poll-question\n            {:type \"text\"\n             :ref :question\n             :max-length poll-utils/max-question-length\n             :tab-index tab-index-base\n             :placeholder \"Ask your question...\"\n             :value (:question poll-data)\n             :on-change #(poll-actions/update-question poll-key poll-data (.. % -target -value))}]\n          (let [idx (atom 0)]\n            (for [reply (poll-utils/sorted-replies poll-data)\n                  :let [idx (swap! idx inc)\n                        last-option? (= idx (count (:replies poll-data)))]]\n              [:div.poll-reply.group\n                {:key (str \"poll-\" (:poll-uuid poll-data) \"-reply-\" (:reply-id reply))}\n                [:div.poll-reply-label\n                  (str \"Choice \" idx)]\n                [:input.poll-reply-body\n                  {:type \"text\"\n                   :tab-index (+ tab-index-base idx)\n                   :value (:body reply)\n                   :ref (str \"choice-\" idx)\n                   :max-length poll-utils/max-reply-length\n                   :placeholder (str \"Choice \" idx)\n                   :on-key-down (fn [e]\n                                   (when (and last-option?\n                                              (= (.-keyCode e) 9)\n                                              (not (.-shiftKey e)))\n                                     (utils/event-stop e)\n                                     (add-option s poll-key poll-data)))\n                   :on-key-press (fn [e]\n                                   (when (or (= (.-key e) \"Enter\")\n                                             (= (.-keyCode e) 13))\n                                     (utils/event-stop e)))\n                   :on-change #(poll-actions/update-reply poll-key (:reply-id reply) (.. % -target -value))}]\n                (when should-show-delete-reply?\n                  [:button.mlb-reset.delete-reply\n                    {:type \"button\"\n                     :on-click #(poll-actions/delete-reply poll-key (:reply-id reply))}])]))]\n        [:div.poll-reply-new\n          [:button.mlb-reset.poll-reply-new\n            {:type \"button\"\n             :on-click (partial add-option s poll-key poll-data)}\n            \"Add option\"]\n          [:button.mlb-reset.poll-preview-bt\n            {:type \"button\"\n             :on-click #(poll-actions/show-preview poll-key)}\n            \"Show preview\"]]])))\n\n(rum/defcs poll < rum/static\n                  {:will-mount (fn [s]\n                   ;; Remove every previous poll with this same ID\n                   (let [args (-> s :rum/args first)]\n                    (.remove (js/$ (str (:container-selector args) \" .oc-poll-\" (-> args :poll-data :poll-uuid)))))\n                   s)}\n  [s {:keys [editing? poll-data] :as props}]\n  [:div.oc-poll-container\n    {:class (str \"oc-poll-\" (:poll-uuid poll-data))\n     :key (str \"oc-poll-\" (:poll-uuid poll-data))\n     :content-editable false}\n    (if editing?\n      (poll-edit props)\n      (poll-read props))])\n\n(defonce max-mount-retry 5)\n\n(rum/defcs poll-portal < rum/static\n                         (rum/local 0 ::retry)\n                         (rum/local false ::mounted)\n                         {:will-mount (fn [s]\n                           ;; Set mounted true in will-mount since the first\n                           ;; after-render is called before did-mount\n                           (reset! (::mounted s) true)\n                           s)\n                          :after-render (fn [s]\n                          (let [retry @(::retry s)]\n                            (utils/after (* 180 (inc retry))\n                             #(let [retry? (when @(::mounted s)\n                                             (not (rum/dom-node s)))]\n                                (when (and retry?\n                                           (< retry max-mount-retry))\n                                  (swap! (::retry s) inc))\n                                (when (= retry max-mount-retry)\n                                  ;; Removing poll from activity\n                                  (let [props (-> s :rum/args first)]\n                                    ;; There is a poll in the activity but not an element to be mounted to...\n                                    (poll-utils/report-unmounted-poll props)\n                                    ;; Should remove poll from entry?\n                                    ; (poll-actions/remove-poll-for-max-retry (:poll-key props) (:poll-data props))\n                                    )))))\n                          s)\n                          :did-remount (fn [_ s]\n                           (reset! (::retry s) 0)\n                           s)\n                          :will-unmount (fn [s]\n                           (reset! (::mounted s) false)\n                           s)}\n  [s {:keys [poll-portal-selector poll-data poll-key container-selector activity-data] :as props}]\n  (when-let [portal-element (sel1 [container-selector poll-portal-selector])]\n    (rum/portal (poll props) portal-element)))\n\n(rum/defc polls-wrapper < rum/static\n  [{:keys [polls-data editing? dispatch-key current-user-id container-selector activity-data]}]\n  (for [[poll-uuid-k poll] polls-data\n        :let [poll-uuid (name poll-uuid-k)\n              poll-selector (str \".\" poll-utils/poll-selector-prefix poll-uuid)]]\n    (rum/with-key\n     (poll-portal {:poll-data poll\n                   :editing? editing?\n                   :container-selector container-selector\n                   :current-user-id current-user-id\n                   :poll-key (vec (concat (if (coll? dispatch-key) dispatch-key [dispatch-key]) [:polls poll-uuid-k]))\n                   :poll-portal-selector poll-selector\n                   :activity-data activity-data})\n     (str poll-utils/poll-selector-prefix poll-uuid))))\n"]}