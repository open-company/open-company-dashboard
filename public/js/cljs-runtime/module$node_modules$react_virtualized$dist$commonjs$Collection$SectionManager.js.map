{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Section = require('./Section');\n\nvar _Section2 = _interopRequireDefault(_Section);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SECTION_SIZE = 100; /**\n                         * Window Sections are used to group nearby cells.\n                         * This enables us to more quickly determine which cells to display in a given region of the Window.\n                         * \n                         */\n\n/**\n * Contains 0 to many Sections.\n * Grows (and adds Sections) dynamically as cells are registered.\n * Automatically adds cells to the appropriate Section(s).\n */\nvar SectionManager = function () {\n  function SectionManager() {\n    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;\n    (0, _classCallCheck3.default)(this, SectionManager);\n\n    this._sectionSize = sectionSize;\n\n    this._cellMetadata = [];\n    this._sections = {};\n  }\n\n  /**\n   * Gets all cell indices contained in the specified region.\n   * A region may encompass 1 or more Sections.\n   */\n\n\n  (0, _createClass3.default)(SectionManager, [{\n    key: 'getCellIndices',\n    value: function getCellIndices(_ref) {\n      var height = _ref.height,\n          width = _ref.width,\n          x = _ref.x,\n          y = _ref.y;\n\n      var indices = {};\n\n      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {\n        return section.getCellIndices().forEach(function (index) {\n          indices[index] = index;\n        });\n      });\n\n      // Object keys are strings; this function returns numbers\n      return (0, _keys2.default)(indices).map(function (index) {\n        return indices[index];\n      });\n    }\n\n    /** Get size and position information for the cell specified. */\n\n  }, {\n    key: 'getCellMetadata',\n    value: function getCellMetadata(_ref2) {\n      var index = _ref2.index;\n\n      return this._cellMetadata[index];\n    }\n\n    /** Get all Sections overlapping the specified region. */\n\n  }, {\n    key: 'getSections',\n    value: function getSections(_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width,\n          x = _ref3.x,\n          y = _ref3.y;\n\n      var sectionXStart = Math.floor(x / this._sectionSize);\n      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);\n      var sectionYStart = Math.floor(y / this._sectionSize);\n      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);\n\n      var sections = [];\n\n      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {\n        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {\n          var key = sectionX + '.' + sectionY;\n\n          if (!this._sections[key]) {\n            this._sections[key] = new _Section2.default({\n              height: this._sectionSize,\n              width: this._sectionSize,\n              x: sectionX * this._sectionSize,\n              y: sectionY * this._sectionSize\n            });\n          }\n\n          sections.push(this._sections[key]);\n        }\n      }\n\n      return sections;\n    }\n\n    /** Total number of Sections based on the currently registered cells. */\n\n  }, {\n    key: 'getTotalSectionCount',\n    value: function getTotalSectionCount() {\n      return (0, _keys2.default)(this._sections).length;\n    }\n\n    /** Intended for debugger/test purposes only */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var _this = this;\n\n      return (0, _keys2.default)(this._sections).map(function (index) {\n        return _this._sections[index].toString();\n      });\n    }\n\n    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */\n\n  }, {\n    key: 'registerCell',\n    value: function registerCell(_ref4) {\n      var cellMetadatum = _ref4.cellMetadatum,\n          index = _ref4.index;\n\n      this._cellMetadata[index] = cellMetadatum;\n\n      this.getSections(cellMetadatum).forEach(function (section) {\n        return section.addCellIndex({ index: index });\n      });\n    }\n  }]);\n  return SectionManager;\n}();\n\nexports.default = SectionManager;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_keys","_keys2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_Section","_Section2","SectionManager","sectionSize","arguments","length","undefined","SECTION_SIZE","_sectionSize","_cellMetadata","_sections","key","getCellIndices","_ref","indices","getSections","height","width","x","y","forEach","section","index","map","getCellMetadata","_ref2","_ref3","sectionXStop","Math","floor","sectionYStart","sectionYStop","sections","sectionX","sectionXStart","sectionY","push","getTotalSectionCount","toString","_this","registerCell","_ref4","cellMetadatum","addCellIndex"]
}
