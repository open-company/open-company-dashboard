{"version":3,"sources":["oc/web/components/ui/user_avatar.cljs"],"mappings":";AAUA,AAAA,AAAAA,AAAA,AAAAC,AAAWS,AAGRI,AAAEC;AAHL,AAAA,AAAAb,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAA,AAGuBc;AAHvB,AAAAV,AAAAJ,AAAA,AAG6Ce;AAH7C,AAAA,AAAA,AAAA,AAAAV,AAIQW,AAAa,AAAA,AAAeJ;AAC5BK,AAAe,AAACC,AAAgB,AAAA,AAAUL;AAC1CM,AAAgB,AACC,AAAAC,AAAIJ;AAAJ,AAAA,AAAAI;AAAAA;;AAAgB,AAACC,AAAO,AAAA,AAAaR;;AADtC,AAAA,AAEC,AAACS,AAAUL,AACX,AAAA,AAAMH,AACFD,AAAsB,AAAA,AAAA,AAACU,AAA6BT,AAExD,AAAA,AAAaD;;AAZtC,AAAA,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAcqB,AAAA,AAAUO,AAEjBW,AAGAL;AAnBd,AAoBoB,AAAA,AAACM,AAAO,AAAA,AAAeb;AApB3C,AAAA,AAAA,AAAA,AAqBsB,AAAA,AAAA,AAAIG,AAIV,AAAA,AAAIA,AAAS,AAAA,AAAOF;AAzBpC,AAAA,AAA+BJ,AACA,AAAA,AAAA,AAACC,AACDC;AAyB/B,AAAA,AAAAb,AAAA,AAAA4B,AAAWG,AAGRjB;AAHH,AAAA,AAAAe,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAA,AAAAvB,AAAAuB,AAAA,AAGaK;AAHb,AAAA,AAAA,AAIQC,AAAW,AAACC;AACZrB,AAAU,AAAA,AAACsB,AAAUvB;AAL7B,AAAA,AAAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAQkB,AAAM,AAAC8B,AAAIJ;AAAX,AAAqB,AAACA,AAAAA,AAAAA;;AAAtB;;AARlB,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAA,AAWM,AAACpB,AAAAA,AAAAA,AAAkBK,AAAAA,AACnB,AAAA,AAAA,AAAA,AAAA,AAAUoB,AAEN,AAAA,AAAOpB;AAdjB,AAAA,AAAyBJ,AACAqB,AACA,AAAA,AAACC","names":["rum.core/build-defcs","p__45692","map__45693","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","js/React.createElement","sablono.util/join-classes","oc.web.components.ui.user-avatar/user-avatar-image","rum.core/static","rum.core.local","oc.web.mixins.ui/refresh-tooltips-mixin","s","user-data","preferred-avatar-size","tooltip?","use-default","default-avatar","oc.web.stores.user/user-icon","user-avatar-url","or__4126__auto__","cljs.core/empty?","oc.web.lib.utils/cdn","oc.web.images/optimize-user-avatar-url","oc.web.lib.utils/hide-class","cljs.core/reset!","p__45704","map__45705","sablono.interpreter/interpret","oc.web.components.ui.user-avatar/user-avatar","rum.core/reactive","org.martinklepsch.derivatives.drv","click-cb","is-mobile?","oc.web.lib.responsive/is-mobile-size?","org.martinklepsch.derivatives/react","cljs.core/fn?"],"sourcesContent":["(ns oc.web.components.ui.user-avatar\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.utils :as utils]\n            [oc.web.stores.user :as store]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.images :as img]))\n\n(rum/defcs user-avatar-image < rum/static\n                               (rum/local false ::use-default)\n                               ui-mixins/refresh-tooltips-mixin\n  [s user-data {:keys [preferred-avatar-size tooltip?] :or {preferred-avatar-size 72}}]\n  (let [use-default @(::use-default s)\n        default-avatar (store/user-icon (:user-id user-data))\n        user-avatar-url (cond\n                         (or use-default (empty? (:avatar-url user-data)))\n                         (utils/cdn default-avatar)\n                         (pos? preferred-avatar-size)\n                         (-> user-data :avatar-url (img/optimize-user-avatar-url preferred-avatar-size))\n                         :else\n                         (:avatar-url user-data))]\n    [:div.user-avatar-img-container\n      {:data-user-id (:user-id user-data)\n       :data-intercom-target \"User avatar dropdown\"\n       :class utils/hide-class}\n      [:div.user-avatar-img-helper]\n      [:img.user-avatar-img\n        {:src user-avatar-url\n         :on-error #(reset! (::use-default s) true)\n         :data-toggle (if tooltip? \"tooltip\" \"\")\n         :data-placement \"top\"\n         :data-container \"body\"\n         :data-delay \"{\\\"show\\\":\\\"500\\\", \\\"hide\\\":\\\"0\\\"}\"\n         :title (if tooltip? (:name user-data) \"\")}]]))\n\n(rum/defcs user-avatar < rum/static\n                         rum/reactive\n                         (drv/drv :current-user-data)\n  [s {:keys [click-cb]}]\n  (let [is-mobile? (responsive/is-mobile-size?)\n        user-data (drv/react s :current-user-data)]\n    [:button.mlb-reset.user-avatar-button.group\n      {:type \"button\"\n       :on-click #(when (fn? click-cb) (click-cb))\n       :aria-haspopup true\n       :aria-expanded false}\n      (user-avatar-image user-data)\n      (when-not is-mobile?\n        [:span.user-name\n          (:name user-data)])]))\n"]}