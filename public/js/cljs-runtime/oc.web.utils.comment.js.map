{"version":3,"sources":["oc/web/utils/comment.cljs"],"mappings":"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","names":["oc.web.utils.comment/setup-medium-editor","comment-node","users-list","extentions","cljs.core/seq","oc.web.utils.mention/mention-ext","config","js/module$node_modules$medium_editor$dist$js$medium_editor","cljs.core/clj->js","oc.web.utils.comment/add-comment-content","comment-html","$comment-node","js/$","_remove-mentions-popup","oc.web.lib.utils/clean-body-html","oc.web.utils.comment/ungroup-comments","comments","p1__41612#","cljs.core/filterv","G__41614","fexpr__41613","args__33705__auto__","ocr-41617","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-41617_0__41619","cljs.core.nth","cljs.core.match/backtrack","e41625","js/Error","e__32662__auto__","G__41629","e41626","e41628","e41622","ocr-41617_0__41620","p1__41615#","e41624","e41623","oc.web.utils.comment/sort-comments","cljs.core/map?","cljs.core/vals","cljs.core/coll?","cljs.core.sort_by","parent-uuid","check-fn","cljs.core._EQ_","cljs.core.comp","cljs.core/empty?","filtered-comments","sorted-comments","cljs.core/reverse","oc.web.utils.comment/get-collapsed-item","item","collapsed-map","cljs.core.merge","cljs.core.get","oc.web.utils.comment/is-collapsed?","ocr-41632","ocr-41632_0__41634","G__41639","G__41640","e41637","ocr-41632_1__41635","p1__41631#","e41638","e41636","oc.web.utils.comment/comment-unread?","comment-data","last-read-at","created-at","cljs.core/compare","oc.web.utils.comment/is-unseen?","cljs.core/not","ocr-41642","ocr-41642_0__41644","G__41649","G__41650","e41647","ocr-41642_1__41645","p1__41641#","e41648","e41646","oc.web.utils.comment/comment-unseen?","container-seen-at","oc.web.utils.comment/default-expanded-comments-count","ocr-41657","ocr-41657_0__41659","e41662","p1__41651#","ocr-41657_1__41660","p1__41652#","p1__41653#","e41666","e41663","p1__41654#","x__4217__auto__","y__4218__auto__","p1__41655#","p1__41656#","e41665","e41664","e41661","oc.web.utils.comment/collapse-comments","_comments","_container-seen-at","cljs.core.map","cljs.core.assoc","cs","comments-count","min-expanded-index","min-unseen-index","oc.web.lib.utils/index-of","first-expanded-index","collapsed-comments","cljs.core.subvec","expanded-comments","cljs.core.concat","ocr-41667","ocr-41667_0__41669","ocr-41667_1__41670","G__41688","G__41689","G__41690","G__41691","e41686","e41687","e41685","e41678","ocr-41667_0__41671","ocr-41667_1__41672","e41684","e41683","e41679","ocr-41667_0__41674","ocr-41667_1__41675","e41682","e41681","e41680","oc.web.utils.comment/add-comment-focus-value","prefix","entry-uuid","parent-comment-uuid","edit-comment-uuid","oc.web.dispatcher.add_comment_string_key"],"sourcesContent":["(ns oc.web.utils.comment\n  (:require [defun.core :refer (defun defun-)]\n            [goog.object :as gobj]\n            [cuerdas.core :as string]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.mention :as mention-utils]\n            [\"medium-editor\" :as medium-editor]))\n\n(defn setup-medium-editor [comment-node users-list]\n  (let [extentions (if (seq users-list)\n                     #js {\"mention\" (mention-utils/mention-ext users-list)}\n                     #js {})\n        config {:toolbar false\n                :anchorPreview false\n                :imageDragging false\n                :extensions extentions\n                :autoLink true\n                :anchor false\n                :targetBlank true\n                :paste #js {:forcePlainText false\n                            :cleanPastedHTML true\n                            :cleanAttrs #js [\"style\" \"alt\" \"dir\" \"size\" \"face\" \"color\" \"itemprop\" \"name\" \"id\"]\n                            :cleanTags #js [\"meta\" \"video\" \"audio\" \"img\" \"button\" \"svg\" \"canvas\"\n                                            \"figure\" \"input\" \"textarea\"]\n                            :unwrapTags #js [\"div\" \"label\" \"font\" \"h1\" \"h2\" \"h3\" \"h4\" \"h5\" \"div\" \"p\" \"ul\" \"ol\" \"li\"\n                                             \"h6\" \"strong\" \"section\" \"time\" \"em\" \"main\" \"u\" \"form\" \"header\" \"footer\"\n                                             \"details\" \"summary\" \"nav\" \"abbr\" \"a\"]}\n                :placeholder #js {:text \"Add a reply\u2026\"\n                                  :hideOnClick true}\n               :keyboardCommands #js {:commands #js [\n                                  #js {\n                                    :command false\n                                    :key \"B\"\n                                    :meta true\n                                    :shift false\n                                    :alt false\n                                  }\n                                  #js {\n                                    :command false\n                                    :key \"I\"\n                                    :meta true\n                                    :shift false\n                                    :alt false\n                                  }\n                                  #js {\n                                    :command false\n                                    :key \"U\"\n                                    :meta true\n                                    :shift false\n                                    :alt false\n                                  }]}}]\n    (new medium-editor comment-node (clj->js config))))\n\n(defn add-comment-content [comment-node]\n  (let [comment-html (.-innerHTML comment-node)\n        $comment-node (.html (js/$ \"<div/>\") comment-html)\n        _remove-mentions-popup (.remove $comment-node \".oc-mention-popup\")]\n    (utils/clean-body-html (.html $comment-node))))\n\n(defn ungroup-comments [comments]\n  (filterv #(#{:thread :comment} (:resource-type %)) comments))\n\n(defun sort-comments\n  ([comments :guard nil?]\n   [])\n  ([comments :guard map?]\n   (sort-comments (vals comments)))\n  ([comments :guard coll?]\n   (vec (sort-by :created-at comments)))\n  ([comments :guard coll? parent-uuid]\n   (let [check-fn (if parent-uuid #(-> % :parent-uuid (= parent-uuid)) (comp empty? :parent-uuid))\n         filtered-comments (filterv check-fn comments)\n         sorted-comments (sort-by :created-at filtered-comments)]\n     (if (nil? parent-uuid)\n      (vec (reverse sorted-comments))\n      (vec sorted-comments)))))\n\n(defn- get-collapsed-item [item collapsed-map]\n  (merge item (get collapsed-map (:uuid item))))\n\n(defn is-collapsed? [item collapsed-map]\n  (:collapsed (get-collapsed-item item collapsed-map)))\n\n; (defn is-unread? [item collapsed-map]\n;   (not (:unread (get-collapsed-item item collapsed-map))))\n\n; (defn unread?\n;   \"If unread was already set let's reuse it.\"\n;   [last-read-at comment-data]\n;   (if (contains? comment-data :unread)\n;     (:unread comment-data)\n;     (and (not (:author? comment-data))\n;          (< (.getTime (utils/js-date last-read-at))\n;             (.getTime (utils/js-date (:created-at comment-data)))))))\n\n; (defn- unread-comment [comment-data last-read-at collapsed-map]\n;   (if-not last-read-at\n;     ;; User has never read the post, so comment is new\n;     (assoc comment-data :unread true)\n;     (assoc comment-data :unread\n;      (unread? last-read-at (get-collapsed-item comment-data collapsed-map)))))\n\n(defun comment-unread?\n  \"A comment is unread if it's created-at is past the last seen-at of the contianer it belongs to.\"\n\n  ([comment-data :guard map? last-read-at]\n   (comment-unread? (:created-at comment-data) last-read-at))\n\n  ([created-at last-read-at :guard #(or (nil? %) (string? %))]\n   (pos? (compare created-at last-read-at))))\n\n(defn is-unseen? [item collapsed-map]\n  (not (:unseen (get-collapsed-item item collapsed-map))))\n\n(defun comment-unseen?\n  \"A comment is unseen if it's created-at is later than the last seen-at of the container it belongs to.\"\n\n  ([comment-data :guard map? container-seen-at]\n   (comment-unseen? (:created-at comment-data) container-seen-at))\n\n  ([created-at container-seen-at :guard #(or (nil? %) (string? %))]\n   (pos? (compare created-at container-seen-at))))\n\n(def default-expanded-comments-count 3)\n\n(defun collapse-comments\n  \"Add a collapsed flag to every comment that is a reply and is not unseen.\n   Also add unseen? flag to every unseen one. Add a count of the collapsed\n   comments to each root comment.\"\n\n   ([_comments :guard empty?\n     _container-seen-at]\n    [])\n  ([comments :guard #(and (coll? %)\n                          (<= (count %) default-expanded-comments-count))\n    container-seen-at :guard #(or (nil? %) (string? %))]\n   (map #(assoc % :collapsed false) comments))\n  ;; When we have more than default-expanded-comments-count comments we always show the last default-expanded-comments-count plus all the unseen\n  ([comments :guard (fn [cs] (and (coll? cs)\n                                  (> (count cs) default-expanded-comments-count)))\n    container-seen-at :guard #(or (nil? %) (string? %))]\n   (let [comments-count (count comments)\n         min-expanded-index (- comments-count default-expanded-comments-count)\n         min-unseen-index (utils/index-of comments :unseen)\n         first-expanded-index (if (number? min-unseen-index)\n                                (min min-unseen-index min-expanded-index)\n                                min-expanded-index)\n         collapsed-comments (subvec (vec comments) 0 first-expanded-index)\n         expanded-comments (subvec (vec comments) first-expanded-index comments-count)]\n     (vec (concat\n      (map #(assoc % :collapsed true) collapsed-comments)\n      (map #(assoc % :collapsed false) expanded-comments))))))\n\n(defun add-comment-focus-value\n  ([prefix :guard string? comment-data :guard map?]\n   (add-comment-focus-value prefix (:resource-uuid comment-data) (:parent-uuid comment-data) (:uuid comment-data)))\n\n  ([prefix :guard string? entry-uuid :guard string?]\n   (add-comment-focus-value prefix entry-uuid nil nil))\n\n  ([prefix :guard string? entry-uuid :guard string? parent-comment-uuid]\n   (add-comment-focus-value prefix entry-uuid parent-comment-uuid nil))\n\n  ([prefix :guard string? entry-uuid :guard string? parent-comment-uuid edit-comment-uuid]\n   (str prefix \"-\" (dis/add-comment-string-key entry-uuid parent-comment-uuid edit-comment-uuid))))"]}