{"version":3,"sources":["oc/web/components/ui/emoji_picker.cljs"],"mappings":"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","names":["oc.web.components.ui.emoji-picker/emojiable-class","oc.web.components.ui.emoji-picker/emojiable-active?","js/document","oc.web.components.ui.emoji-picker/remove-markers","s","temp__5735__auto__","cljs.core/deref","caret-pos","cljs.core._EQ_","js/rangy","oc.web.components.ui.emoji-picker/on-click-out","e","oc.web.lib.utils/event-inside?","rum.core/ref-node","will-close-picker","cljs.core/first","cljs.core/fn?","oc.shared.useragent/mobile?","oc.web.utils.dom/unlock-page-scroll","cljs.core/reset!","oc.web.components.ui.emoji-picker/save-caret-position","emojiable-active","active-element","G__45765","fexpr__45764","js/OCStaticTextareaSaveSelection","js/window","oc.web.components.ui.emoji-picker/replace-with-emoji","emoji","js/pasteHtmlAtCaret","goog.object/get","js/OCStaticTextareaRestoreSelection","js/pasteTextAtSelection","oc.web.components.ui.emoji-picker/check-focus","_","container-selector","or__4126__auto__","container-node","cljs.core/not","rum.core/build-defcs","p__45766","map__45767","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.interpreter/interpret","oc.web.components.ui.emoji-picker/emoji-picker","rum.core.local","oc.web.mixins.ui/on-window-click-mixin","p","js/rangy.init","focusin","goog.events/listen","goog.events.EventType/FOCUSIN","cljs.core.partial","focusout","goog.events.EventType/FOCUSOUT","ff-click","oc.shared.useragent/firefox?","goog.events.EventType/CLICK","ff-keypress","goog.events.EventType/KEYPRESS","cljs.core.merge","oc.web.lib.utils/after","goog.events/unlistenByKey","cljs.core.dissoc","add-emoji-cb","position","width","height","force-enabled","default-field-selector","will-open-picker","tooltip-position","arg","visible","last-active-element","disabled","vis","and__4115__auto__","oc.web.utils.dom/lock-page-scroll","oc.web.lib.utils/class-set","oc.web.lib.utils/is-test-env?","oc.web.lib.react-utils/build","js/EmojiMart","event","oc.web.lib.utils/to-end-of-content-editable","add-emoji?","cljs.core/boolean","G__45778","G__45779","G__45780"],"sourcesContent":["(ns oc.web.components.ui.emoji-picker\n  (:require [rum.core :as rum]\n            [dommy.core :refer-macros (sel1)]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.react-utils :as react-utils]\n            [oc.web.mixins.ui :refer (on-window-click-mixin)]\n            [oc.shared.useragent :as ua]\n            [oc.web.utils.dom :as dom-utils]\n            [goog.events :as events]\n            [goog.object :as gobj]\n            [goog.events.EventType :as EventType]\n            [oc.shared.useragent :as ua]))\n\n(def emojiable-class \"emojiable\")\n\n(defn emojiable-active?\n  []\n  (>= (.indexOf (.-className (.-activeElement js/document)) emojiable-class) 0))\n\n(defn remove-markers [s]\n  (when-let  [caret-pos @(::caret-pos s)]\n    (when (= (:type caret-pos) \"rangy\")\n      (.removeMarkers js/rangy (:selection caret-pos)))))\n\n(defn on-click-out [s e]\n  (when-not (utils/event-inside? e (rum/ref-node s \"emoji-picker\"))\n    (remove-markers s)\n    (when @(::visible s)\n      (let [will-close-picker (:will-close-picker (first (:rum/args s)))]\n        (when (fn? will-close-picker)\n          (will-close-picker))))\n    (when ua/mobile?\n      (dom-utils/unlock-page-scroll))\n    (reset! (::visible s) false)))\n\n(defn save-caret-position [s]\n  (remove-markers s)\n  (let [caret-pos (::caret-pos s)\n        emojiable-active (emojiable-active?)\n        active-element (.-activeElement js/document)]\n    (if emojiable-active\n      (do\n        (reset! (::last-active-element s) active-element)\n        (reset! caret-pos\n         (if (#{\"TEXTAREA\" \"INPUT\"} (.-tagName active-element))\n           {:type \"default\" :selection (js/OCStaticTextareaSaveSelection)}\n           {:type \"rangy\" :selection (.saveSelection js/rangy js/window)})))\n      (reset! caret-pos nil))))\n\n(defn replace-with-emoji [s emoji]\n  (when-let [caret-pos @(::caret-pos s)]\n    (if (= (:type caret-pos) \"rangy\")\n      (do (.restoreSelection js/rangy (:selection caret-pos))\n          (js/pasteHtmlAtCaret (gobj/get emoji \"native\") (.getSelection js/rangy js/window) false))\n      (do (js/OCStaticTextareaRestoreSelection (:selection caret-pos))\n          (js/pasteTextAtSelection @(::last-active-element s) (gobj/get emoji \"native\"))))))\n\n(defn check-focus [s _]\n  (let [container-selector (or (:container-selector (first (:rum/args s))) \"document.body\")\n        container-node (.querySelector js/document container-selector)\n        active-element (.-activeElement js/document)]\n    ;; Enabled when:\n    ;; active element is emojiable and active element is descendant of container\n    (reset! (::disabled s)\n     (or (not (emojiable-active?))\n         (not container-node)\n         (not (.contains container-node active-element))))))\n\n;; ===== D3 Chart Component =====\n\n;; Render an emoji button that reveal a picker for emoji.\n;; It will add the selected emoji in place of the current selection if\n;; the current activeElement has the class `emojiable`.\n\n(rum/defcs emoji-picker <\n  (rum/local false ::visible)\n  (rum/local false ::caret-pos)\n  (rum/local false ::last-active-element)\n  (rum/local false ::disabled)\n  (on-window-click-mixin on-click-out)\n  {:init (fn [s p] (js/rangy.init) s)\n   :will-mount (fn [s]\n                 (check-focus s nil)\n                 (let [focusin (events/listen\n                                js/document\n                                EventType/FOCUSIN\n                                (partial check-focus s))\n                       focusout (events/listen\n                                 js/document\n                                 EventType/FOCUSOUT\n                                 (partial check-focus s))\n                       ff-click (when ua/firefox?\n                                  (events/listen\n                                   js/window\n                                   EventType/CLICK\n                                   (partial check-focus s)))\n                       ff-keypress (when ua/firefox?\n                                     (events/listen\n                                      js/window\n                                      EventType/KEYPRESS\n                                      (partial check-focus s)))]\n                   (merge s {::focusin-listener focusin\n                             ::focusout-listener focusout\n                             ::ff-window-click ff-click\n                             ::ff-keypress ff-keypress})))\n   :did-mount (fn [s]\n                (utils/after 100 #(check-focus s nil))\n                s)\n   :will-unmount (fn [s] (events/unlistenByKey (::focusin-listener s))\n                         (events/unlistenByKey (::focusout-listener s))\n                         (when (::ff-window-click s)\n                           (events/unlistenByKey (::ff-window-click s)))\n                         (when (::ff-keypress s)\n                           (events/unlistenByKey (::ff-keypress s)))\n                         (dissoc s\n                          ::focusin-listener\n                          ::focusout-listener\n                          ::ff-window-click\n                          ::ff-keypress))}\n  [s {:keys [add-emoji-cb position width height container-selector force-enabled default-field-selector\n             will-open-picker will-close-picker tooltip-position]\n      :as arg\n      :or {position \"top\"\n           width 25\n           height 25}}]\n  (let [visible (::visible s)\n        caret-pos (::caret-pos s)\n        last-active-element (::last-active-element s)\n        disabled (::disabled s)]\n    [:div.emoji-picker.group\n      {:ref \"emoji-picker\"\n       :style {:width (str width \"px\")\n               :height (str height \"px\")}}\n      [:button.emoji-button.btn-reset\n        {:type \"button\"\n         :title \"Insert emoji\"\n         :data-placement (or tooltip-position \"top\")\n         :data-container \"body\"\n         :data-toggle \"tooltip\"\n         :disabled (and (not default-field-selector) (not force-enabled) @(::disabled s))\n         :on-mouse-down #(when (or default-field-selector force-enabled (not @(::disabled s)))\n                           (save-caret-position s)\n                           (let [vis (and (or default-field-selector\n                                              force-enabled\n                                              @caret-pos)\n                                          (not @visible))]\n                             (if vis\n                               (do\n                                (when ua/mobile?\n                                  (dom-utils/lock-page-scroll))\n                                (when (fn? will-open-picker)\n                                  (will-open-picker vis)))\n                               (do\n                                 (when (fn? will-close-picker)\n                                   (will-close-picker vis))\n                                 (when ua/mobile?\n                                   (dom-utils/unlock-page-scroll))))\n                             (reset! visible vis)))}]\n     (when @visible\n       [:div.picker-container\n         {:class (utils/class-set {position true})}\n         [:button.mlb-reset.mobile-cancel-bt\n          {:on-click #(do\n                        (remove-markers s)\n                        (when (fn? will-close-picker)\n                          (will-close-picker))\n                        (reset! visible false))}\n          \"Cancel\"]\n         (when-not (utils/is-test-env?)\n           (react-utils/build (.-Picker js/EmojiMart)\n             {:native true\n              :autoFocus true\n              :onClick (fn [emoji event]\n                         (when (and default-field-selector\n                                    (not @(::caret-pos s)))\n                           (utils/to-end-of-content-editable (.querySelector js/document default-field-selector))\n                           (save-caret-position s))\n                         (let [add-emoji? (boolean @(::caret-pos s))]\n                           (when add-emoji?\n                             (replace-with-emoji s emoji)\n                             (remove-markers s)\n                             (.focus @last-active-element))\n                           (when (fn? will-close-picker)\n                             (will-close-picker))\n                           (reset! visible false)\n                           (when (fn? add-emoji-cb)\n                             (add-emoji-cb @last-active-element emoji add-emoji?))))}))])]))\n"]}