{"version":3,"sources":["oc/web/lib/whats_new.cljs"],"mappings":";AAIA,AAAKA,AAAY,AAAA,AAACC;AAClB,AAAKC,AAAe,AAAA,AAACD;AAErB,AAAA,AAAKE;AAEL;;;AAAA,AAAMC;AAAN,AAGE,AAAA,AAACC,AAAOH;;AACR,AAAMI,AAAI,AAAA,AAAKH;AACTI,AAAI,AAACC,AAAKF;AACVG,AAAW,AAAA,AAAA,AAAU,AAAA,AAAO,AAAUF,AACzB,AAAA,AAACG,AAAY,AAAOH;AAHvC,AAIE,AAAI,AAAAI,AAAI,AAAA,AAAMF;AAAV,AAAA,AAAAE;AAAAA;;AACI,AAACC,AAASH;;;AAChB,AAACJ,AAAOH,AAAe,AAAA,AAACW,AAAiBT;;AACzC,AAAA,AAAA,AAAA,AAAA,AAACU,AAAkD,AAAA,AAAML;;;AAE/D;;;;AAAA,AAAOM;AAAP,AAIE,AAAA,AAACV,AAAOH;;AACR,AAAI,AAAK,AAAA,AAAAc,AAACC,AAAKjB,AACJ,AAAA,AAAM,AAAU,AAACQ,AAAKL;AAC/B,AACE,AAAA,AAACE,AAAOL;;AACR,AAAMkB,AAAe,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACUhB;AADhC,AAME,AAAOiB,AAAWF;;AAClB,AAACb,AAAOH,AAAe,AAAA,AAACW,AAAiBT;;AAC7C,AAACC,AAAOH,AAAe,AAAA,AAAA,AAACW;AAAD,AAAmB,AAACE,AAAAA,AAAAA,AAAWZ,AAAAA;;;;AAE1D;;;AAAA,AAAMkB;AAAN,AAGE,AAAA,AAAChB,AAAOL;;AACR,AAAA,AAAAgB,AAAOd;AAAP,AACE,AAAA,AAAAc,AAACM,AAAiBpB;;AAClB,AAAA,AAACG,AAAOH;;AAFV;;AAGA,AAACa;;AAEH,AAAA,AAAMQ;AAAN,AACE,AAAA,AAAAP,AAAOhB;AAAP,AACE,AAAOoB;;AACP,AAAA,AAACP,AAAiBT;;AAFpB","names":["oc.web.lib.whats-new/initialized","cljs.core.atom","oc.web.lib.whats-new/latest-timeout","oc.web.lib.whats-new/whats-new-selector","oc.web.lib.whats-new/check-whats-new-badge","cljs.core/reset!","sel","$el","js/$","parsed-val","js/parseInt","or__4126__auto__","js/isNaN","oc.web.lib.utils/after","oc.web.dispatcher/dispatch!","oc.web.lib.whats-new/initialize","cljs.core/deref","cljs.core/not","headway-config","cljs.core/clj->js","js/Headway","oc.web.lib.whats-new/init","js/clearTimeout","oc.web.lib.whats-new/show"],"sourcesContent":["(ns oc.web.lib.whats-new\n  (:require [oc.web.lib.utils :as utils]\n            [oc.web.dispatcher :as dis]))\n\n(def initialized (atom false))\n(def latest-timeout (atom nil))\n\n(def whats-new-selector \".whats-new\")\n\n(defn check-whats-new-badge\n  \"Once the number of new items is available turn on a flag in the app state if it's more than 0.\"\n  []\n  (reset! latest-timeout nil)\n  (let [sel (str whats-new-selector \" #HW_badge\")\n        $el (js/$ sel)\n        parsed-val (when-not (zero? (.-length $el))\n                     (js/parseInt (.text $el) 10))]\n    (if (or (nil? parsed-val)\n            (js/isNaN parsed-val)) ;; whatsnew not yet initialized, retry\n      (reset! latest-timeout (utils/after 1000 check-whats-new-badge))\n      (dis/dispatch! [:input [:show-whats-new-green-dot] (pos? parsed-val)]))))\n\n(defn- initialize\n  \"Until it's found look for the selector. When found wait for the headway internal\n   initialization to read the number of new items.\"\n  []\n  (reset! latest-timeout nil)\n  (if (and (not @initialized)\n             (pos? (.-length (js/$ whats-new-selector))))\n    (do\n      (reset! initialized true)\n      (let [headway-config (clj->js {\n                            :selector whats-new-selector\n                            :account \"xGYD6J\"\n                            :position {:y \"bottom\"}\n                            :translations {:title \"What's New\"\n                                           :footer \"\ud83d\udc49 Show me more new stuff\"}})]\n        (.init js/Headway headway-config)\n        (reset! latest-timeout (utils/after 1000 check-whats-new-badge))))\n    (reset! latest-timeout (utils/after 1000 #(initialize whats-new-selector)))))\n\n(defn init\n  \"Reset the initializations vars and start looking for the selector.\"\n  []\n  (reset! initialized false)\n  (when @latest-timeout\n    (js/clearTimeout @latest-timeout)\n    (reset! latest-timeout nil))\n  (initialize))\n\n(defn show []\n  (when @initialized\n    (.show js/Headway)\n    (utils/after 1000 check-whats-new-badge)))\n"]}