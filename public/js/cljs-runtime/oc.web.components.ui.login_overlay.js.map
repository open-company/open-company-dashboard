{"version":3,"sources":["oc/web/components/ui/login_overlay.cljs"],"mappings":"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","names":["oc.web.components.ui.login-overlay/close-overlay","e","oc.web.lib.utils/event-stop","oc.web.actions.user/show-login","oc.web.components.ui.login-overlay/dont-scroll","s","oc.web.stores.user/auth-settings?","oc.web.lib.utils/after","oc.web.actions.user/auth-settings-get","oc.web.lib.responsive/is-mobile-size?","display-none","js/document","goog.style/setStyle","display-block","rum.core/build-defcs","p1__45956#","js/React.createElement","p1__45957#","sablono.util/join-classes","p1__45958#","p1__45959#","attrs45964","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/create-element","p1__45960#","p1__45961#","sablono.interpreter/interpret","oc.web.components.ui.login-overlay/login-with-email","rum.core/reactive","oc.web.mixins.ui/no-scroll-mixin","org.martinklepsch.derivatives.drv","oc.web.dispatcher/dispatch!","state","auth-settings","org.martinklepsch.derivatives/react","login-enabled","and__4115__auto__","oc.web.lib.utils.link_for","login-action","login-with-email","cljs.core/deref","oc.web.dispatcher/app-state","email","pswd","oc.web.actions.user/maybe-save-login-redirect","oc.web.actions.user/login-with-email","cljs.core.partial","cljs.core/identity","temp__5735__auto__","auth-link","oc.web.actions.user/login-with-slack","oc.web.actions.user/login-with-google","rum.core/react","cljs.core._EQ_","oc.web.urls/contact-mail-to","oc.web.lib.utils/hide-class","cljs.core/not","cljs.core/seq","oc.web.urls/sign-up","oc.web.router/nav!","p1__45979#","attrs45981","p1__45980#","oc.web.components.ui.login-overlay/password-reset","oc.web.components.ui.small-loading/small-loading","cljs.core/contains?","oc.web.actions.user/password-reset","oc.web.lib.utils/valid-email?","p1__45982#","attrs45985","p1__45983#","p1__45984#","oc.web.components.ui.login-overlay/collect-password","or__4126__auto__","pswd-el","cljs.core/count","oc.web.actions.user/pswd-collect","oc.web.components.ui.login-overlay/login-overlays-handler","rum.core/static","oc.web.stores.user/show-login-overlay?","oc.web.dispatcher/show-login-overlay-key"],"sourcesContent":["(ns oc.web.components.ui.login-overlay\n  (:require [rum.core :as rum]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [clojure.string :as s]\n            [taoensso.timbre :as timbre]\n            [goog.object :as gobj]\n            [goog.style :as gstyle]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.stores.user :as user-store]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.mixins.ui :refer (no-scroll-mixin)]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.small-loading :refer (small-loading)]))\n\n(defn close-overlay [e]\n  (utils/event-stop e)\n  (user-actions/show-login false))\n\n(def dont-scroll\n  {:will-mount (fn [s]\n                 (when-not (user-store/auth-settings?)\n                   (utils/after 100 #(user-actions/auth-settings-get)))\n                s)\n   :before-render (fn [s]\n                    (if (responsive/is-mobile-size?)\n                      (let [display-none #js {:display \"none\"}]\n                        (when (sel1 [:div.main])\n                          (gstyle/setStyle (sel1 [:div.main]) display-none))\n                        (when (sel1 [:nav.navbar-bottom])\n                          (gstyle/setStyle (sel1 [:nav.navbar-bottom]) display-none))\n                        (when (sel1 [:div.fullscreen-page])\n                          (gstyle/setStyle (sel1 [:div.fullscreen-page]) display-none))))\n                    s)\n   :will-unmount (fn [s]\n                   (if (responsive/is-mobile-size?)\n                    (let [display-block #js {:display \"block\"}]\n                      (when (sel1 [:div.main])\n                        (gstyle/setStyle (sel1 [:div.main]) display-block))\n                      (when (sel1 [:nav.navbar-bottom])\n                        (gstyle/setStyle (sel1 [:nav.navbar-bottom]) display-block))\n                      (when (sel1 [:div.fullscreen-page])\n                          (gstyle/setStyle (sel1 [:div.fullscreen-page]) display-block))))\n                   s)})\n\n(rum/defcs login-with-email < rum/reactive\n                              dont-scroll\n                              no-scroll-mixin\n                              (drv/drv :auth-settings)\n                              (drv/drv :login-with-email)\n                              {:will-mount (fn [s]\n                                (dis/dispatch! [:input [:login-with-email] {:email \"\" :pswd \"\"}])\n                                s)\n                               :did-mount (fn [s]\n                                (.focus (sel1 [:input.email]))\n                                s)}\n  [state]\n  (let [auth-settings (drv/react state :auth-settings)\n        login-enabled (and auth-settings\n                           (not (nil?\n                            (utils/link-for\n                             (:links auth-settings)\n                             \"authenticate\"\n                             \"GET\"\n                             {:auth-source \"email\"}))))\n        login-action #(when login-enabled\n                        (let [login-with-email (:login-with-email @dis/app-state)\n                              email (:email login-with-email)\n                              pswd (:pswd login-with-email)]\n                          (.preventDefault %)\n                          (user-actions/maybe-save-login-redirect)\n                          (user-actions/login-with-email email pswd)))\n        login-with-email (drv/react state :login-with-email)]\n    [:div.login-overlay-container.group\n      {:on-click (partial close-overlay)}\n      ;; Close X button\n      [:button.settings-modal-close.mlb-reset\n        {:on-click (partial close-overlay)}]\n      ;; Modal container\n      [:div.login-overlay.login-with-email.group\n        {:on-click #(utils/event-stop %)}\n        [:div.login-overlay-cta.group\n          [:button.mlb-reset.top-back-button\n            {:on-touch-start identity\n             :on-click #(user-actions/show-login nil)\n             :aria-label \"Back\"}]\n          [:div.sign-in-cta \"Sign In\"]\n          [:button.mlb-reset.top-continue\n            {:aria-label \"Login\"\n             :class (when-not login-enabled \"disabled\")\n             :on-click login-action}]]\n        ;; Slack button\n        [:button.mlb-reset.signin-with-slack\n          {:on-click #(do\n                       (.preventDefault %)\n                       (when-let [auth-link (utils/link-for (:links auth-settings) \"authenticate\" \"GET\"\n                                             {:auth-source \"slack\"})]\n                         (user-actions/maybe-save-login-redirect)\n                         (user-actions/login-with-slack auth-link)))\n           :on-touch-start identity}\n          [:div.signin-with-slack-content\n            [:div.slack-icon\n              {:aria-label \"slack\"}]\n            \"Continue with Slack\"]]\n        ;; Google button\n        [:button.mlb-reset.signin-with-google\n          {:on-click #(do\n                       (.preventDefault %)\n                       (when-let [auth-link (utils/link-for (:links auth-settings) \"authenticate\" \"GET\"\n                                                            {:auth-source \"google\"})]\n                         (user-actions/maybe-save-login-redirect)\n                         (user-actions/login-with-google auth-link)))\n           :on-touch-start identity}\n          [:div.signin-with-google-content\n            [:div.google-icon\n              {:aria-label \"google\"}]\n            \"Continue with Google\"]]\n        ;; Or with email\n        [:div.or-with-email\n          [:div.or-with-email-copy\n            \"Or, sign in with email\"]]\n        ;; Email fields\n        [:div.group\n          ;; Error messages\n          (when-not (nil? (:login-with-email-error (rum/react dis/app-state)))\n            (cond\n              (= (:login-with-email-error (rum/react dis/app-state)) :verify-email)\n              [:span.small-caps.green\n                \"Hey buddy, go verify your email, again, eh?\"]\n              (= (:login-with-email-error (rum/react dis/app-state)) 401)\n              [:span.small-caps.red\n                \"The email or password you entered is incorrect.\"\n                [:br]\n                \"Please try again, or \"\n                [:a.underline.red\n                  {:on-click #(user-actions/show-login :password-reset)}\n                  \"reset your password\"]\n                \".\"]\n              :else\n              [:span.small-caps.red\n                \"System troubles logging in.\"\n                [:br]\n                \"Please try again, then \"\n                [:a.underline.red {:href oc-urls/contact-mail-to} \"contact support\"]\n                \".\"]))\n          [:form.sign-in-form {:class utils/hide-class}\n            ;; Email label\n            [:div.sign-in-label-container\n              [:label.sign-in-label \"Work Email\"]]\n            ;; Email field\n            [:div.sign-in-field-container\n              [:input.sign-in-field.email.oc-input\n                {:value (:email login-with-email)\n                 :on-change #(dis/dispatch! [:input [:login-with-email :email] (.. % -target -value)])\n                 :type \"email\"\n                 :auto-focus true\n                 :tabIndex 1\n                 :autoCapitalize \"none\"\n                 :name \"email\"}]]\n            [:div.sign-in-label-container\n              [:label.sign-in-label \"Password\"]]\n            [:div.sign-in-field-container\n              [:input.sign-in-field.pswd.oc-input\n                {:value (:pswd login-with-email)\n                 :on-change #(dis/dispatch! [:input [:login-with-email :pswd] (.. % -target -value)])\n                 :type \"password\"\n                 :tabIndex 2\n                 :name \"pswd\"}]\n              [:div.forgot-password\n                [:a {:on-click #(user-actions/show-login :password-reset)} \"Forgot Password?\"]]]\n            ;; Login button\n            [:button.mlb-reset.mlb-default.continue\n              {:class (when-not login-enabled \"disabled\")\n               :on-touch-start identity\n               :on-click login-action\n               :disabled (or (not (seq (:email login-with-email)))\n                             (not (seq (:pswd login-with-email))))}\n              \"Sign In\"]]]\n        ;; Link to signup\n        [:div.footer-link\n          \"Don't have an account yet?\"\n          [:a\n            {:href oc-urls/sign-up\n             :on-click (fn [e]\n                         (utils/event-stop e)\n                         (router/nav! oc-urls/sign-up))}\n            \"Sign up here\"]]]]))\n\n(rum/defcs password-reset < rum/reactive\n                            dont-scroll\n                            no-scroll-mixin\n                            (drv/drv :auth-settings)\n                            {:will-mount (fn [s]\n                              (dis/dispatch! [:input [:password-reset] {:email \"\"}])\n                              s)\n                             :did-mount (fn [s]\n                              (.focus (sel1 [:div.sign-in-field-container.email]))\n                              s)}\n  [state]\n  (let [auth-settings (drv/react state :auth-settings)]\n    [:div.login-overlay-container.group\n      {:on-click (partial close-overlay)}\n      [:button.settings-modal-close.mlb-reset\n          {:on-click (partial close-overlay)}]\n      [:div.login-overlay.password-reset\n        {:on-click #(utils/event-stop %)}\n        [:div.login-overlay-cta.group\n          [:div.sign-in-cta \"Password Reset\"\n            (when-not auth-settings\n              (small-loading))]]\n        [:div.pt2.pl3.pr3.pb2.group\n          (when (contains? (:password-reset (rum/react dis/app-state)) :success)\n            (cond\n              (:success (:password-reset (rum/react dis/app-state)))\n              [:div.sent-email-copy \"We sent you an email with the instructions to reset your account password.\"]\n              :else\n              [:div.error-copy \"An error occurred, please try again.\"]))\n          [:form.sign-in-form\n            ; [:div.sign-in-label-container\n            ;   [:label.sign-in-label ]]\n            [:div.sign-in-field-container.email\n              [:input.sign-in-field.oc-input\n                {:class utils/hide-class\n                 :value (:email (:password-reset (rum/react dis/app-state)))\n                 :tabIndex 1\n                 :type \"email\"\n                 :placeholder \"Please enter your email address\"\n                 :autoCapitalize \"none\"\n                 :auto-focus true\n                 :on-change #(dis/dispatch! [:input [:password-reset :email] (.. % -target -value )])\n                 :name \"email\"}]]\n            (if (:success (:password-reset (rum/react dis/app-state)))\n              [:div.group.pb3.mt1\n                [:button.mlb-reset.continue\n                  {:on-click #(user-actions/show-login nil)}\n                  \"Done\"]]\n              [:div.group\n                [:button.mlb-reset.continue\n                  {:on-click #(user-actions/password-reset (:email (:password-reset @dis/app-state)))\n                   :disabled (not (utils/valid-email? (:email (:password-reset @dis/app-state))))\n                   :on-touch-start identity}\n                  \"Reset Password\"]\n                [:button.mlb-reset.cancel-bt\n                  {:on-click #(user-actions/show-login nil)\n                   :disabled (not auth-settings)\n                   :on-touch-start identity}\n                  \"Cancel\"]])]]]]))\n\n(rum/defcs collect-password < rum/reactive\n                              dont-scroll\n                              no-scroll-mixin\n                              (drv/drv :auth-settings)\n                              {:will-mount (fn [s]\n                                (dis/dispatch! [:input [:collect-pswd] {:pswd \"\"}])\n                                s)\n                               :did-mount (fn [s]\n                                ; initialise the keys to string to avoid jumps in UI focus\n                                (utils/after 500\n                                 #(dis/dispatch!\n                                   [:input\n                                    [:collect-pswd]\n                                    {:pswd (or (:pswd (:collect-pswd @dis/app-state)) \"\")}]))\n                                (utils/after 1000 #(when-let [pswd-el (sel1 [:input.sign-in-field.pswd])]\n                                                     (.focus pswd-el)))\n                                s)}\n  [state]\n  (let [auth-settings (drv/react state :auth-settings)]\n    [:div.login-overlay-container.group\n      {:on-click #(utils/event-stop %)}\n      [:div.login-overlay.collect-pswd.group\n        [:div.login-overlay-cta.pl2.pr2.group\n          [:div.sign-in-cta \"Enter your new password\"\n            (when-not auth-settings\n              (small-loading))]]\n        [:div.pt2.pl3.pr3.pb2.group\n          (when-not (nil? (:collect-password-error (rum/react dis/app-state)))\n            [:span.small-caps.red\n              \"System troubles logging in.\"\n              [:br]\n              \"Please try again, then \"\n              [:a.underline.red {:href oc-urls/contact-mail-to} \"contact support\"]\n              \".\"])\n          [:form.sign-in-form\n            [:div.sign-in-label-container\n              [:label.sign-in-label {:for \"signup-pswd\"} \"Password\"]]\n            [:div.sign-in-field-container\n              [:input.sign-in-field.pswd.oc-input\n                {:value (:pswd (:collect-pswd (rum/react dis/app-state)))\n                 :id \"collect-pswd-pswd\"\n                 :on-change #(dis/dispatch! [:input [:collect-pswd :pswd] (.. % -target -value)])\n                 :pattern \".{8,}\"\n                 :placeholder \"Minimum 8 characters\"\n                 :type \"password\"\n                 :tabIndex 4\n                 :name \"pswd\"}]]\n            [:button.mlb-reset.mlb-default.continue\n              {:disabled (< (count (:pswd (:collect-pswd (rum/react dis/app-state)))) 8)\n               :on-click #(do\n                            (utils/event-stop %)\n                            (user-actions/pswd-collect (:collect-pswd @dis/app-state) true))\n               :on-touch-start identity}\n              \"Let Me In\"]]]]]))\n\n(rum/defcs login-overlays-handler < rum/static\n                                    rum/reactive\n                                    (drv/drv user-store/show-login-overlay?)\n  [s]\n  (cond\n    ; login via email\n    (or (= (drv/react s dis/show-login-overlay-key) :login-with-email)\n        (= (drv/react s dis/show-login-overlay-key) :login-with-slack))\n    (login-with-email)\n    ; signup via email\n    (or (= (drv/react s dis/show-login-overlay-key) :signup-with-email)\n        (= (drv/react s dis/show-login-overlay-key) :signup-with-slack))\n    (do\n      (utils/after 150 #(router/nav! oc-urls/sign-up))\n      [:div])\n    ; password reset\n    (= (drv/react s dis/show-login-overlay-key) :password-reset)\n    (password-reset)\n    ; form to insert a new password\n    (= (drv/react s dis/show-login-overlay-key) :collect-password)\n    (collect-password)\n    ; show nothing\n    :else\n    [:div.hidden]))"]}