{"version":3,"sources":["oc/shared/interval.cljs"],"mappings":";AAKA,AAAA,AAAAA,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AACcO;AADd,AAEE,AAAA,AAAA,AAAA,AAACC,AAAWF,AACAC;;AAOd,AAAA,AAAAE,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AACmCG;AADnC,AAAAT,AAAAM,AAAA,AACYJ;AADZ,AAAAF,AAAAM,AAAA,AACeH;AADf,AAAAH,AAAAM,AAAA,AACkBE;AADlB,AAEE,AAAMA;AAAN,AACE,AAACE,AAAiBF;;AADpB;;AAEA,AAAA,AAACG,AAAOF;;AAEV,AAAA,AAAAG,AAAOE;AAAP,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAc,AAAAA;AAAAA,AACmCJ;AADnC,AAAAT,AAAAa,AAAA,AACYX;AADZ,AAAAF,AAAAa,AAAA,AACeV;AADf,AAAAH,AAAAa,AAAA,AACkBL;AADlB,AAEE,AAAA,AAAAO,AAAQP;AACN,AAAMQ,AAAgB,AAACC,AAAef,AAAGC;AAAzC,AACE,AAAA,AAACe,AAAMT,AAAuBO;;AAChCP;;;AAKJ,AAAA,AAAMU,AACHC;AADH,AAEE,AAACC,AAAMD,AAAcN;;AAEvB,AAAA,AAAMQ,AACHF;AADH,AAEE,AAACC,AAAMD,AAAcb;;AAEvB,AAAA,AAAA,AAAAgB,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFL;AADJ,AAEG,AAACO,AAAkBP,AAAc,AAAA,AAAA,AAAAQ,AAAOR;;;AAF3C,AAAA,AAAA,AAAMK,AAGFL,AAAcS;AAHlB,AAIG,AAACP,AAAeF;;AAChB,AAAA,AAAAU,AAACT,AAAMD;AAAP,AAAsB,AAACN,AAAgB,AAAAgB,AAAA,AAACZ,AAAaW;;;;AALxD,AAAA,AAAA,AAAMJ;;AAAN","names":["p__51316","map__51317","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.shared.interval/make-interval","fn","ms","cljs.core.atom","p__51319","map__51320","oc.shared.interval/stop-interval*","js-interval","interval","js/clearInterval","cljs.core.dissoc","p__51322","map__51324","oc.shared.interval/start-interval*","cljs.core/not","new-js-interval","js/setInterval","cljs.core.assoc","oc.shared.interval/start-interval!","interval-atom","cljs.core.swap_BANG_","oc.shared.interval/stop-interval!","var_args","G__51330","oc.shared.interval/restart-interval!","js/Error","oc.shared.interval.restart_interval_BANG_","cljs.core/deref","new-ms","p1__51328#"],"sourcesContent":["(ns oc.shared.interval)\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Constructor\n\n(defn make-interval\n  [{:keys [fn ms]}]\n  (atom {::fn fn\n         ::ms ms\n         ;; ::js-interval  <-- the result of js/setInterval\n         }))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Internal implementation\n\n(defn- stop-interval*\n  [{::keys [fn ms js-interval] :as interval}]\n  (when js-interval\n    (js/clearInterval js-interval))\n  (dissoc interval ::js-interval))\n\n(defn- start-interval*\n  [{::keys [fn ms js-interval] :as interval}]\n  (if-not js-interval\n    (let [new-js-interval (js/setInterval fn ms)]\n      (assoc interval ::js-interval new-js-interval))\n    interval))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n\n(defn start-interval!\n  [interval-atom]\n  (swap! interval-atom start-interval*))\n\n(defn stop-interval!\n  [interval-atom]\n  (swap! interval-atom stop-interval*))\n\n(defn restart-interval!\n  ([interval-atom]\n   (restart-interval! interval-atom (::ms @interval-atom)))\n  ([interval-atom new-ms]\n   (stop-interval! interval-atom)\n   (swap! interval-atom #(start-interval* (assoc % ::ms new-ms)))))\n"]}