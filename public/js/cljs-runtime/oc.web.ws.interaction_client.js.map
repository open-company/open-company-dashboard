{"version":3,"sources":["oc/web/ws/interaction_client.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.ws","js/oc.web.ws.interaction-client","js/oc.web.ws.interaction-client.current-board-path","oc.web.ws.interaction-client/current-board-path","cljs.core.atom","js/oc.web.ws.interaction-client.channelsk","oc.web.ws.interaction-client/channelsk","js/oc.web.ws.interaction-client.ch-chsk","oc.web.ws.interaction-client/ch-chsk","js/oc.web.ws.interaction-client.ch-state","oc.web.ws.interaction-client/ch-state","js/oc.web.ws.interaction-client.chsk-send!","oc.web.ws.interaction-client/chsk-send!","js/oc.web.ws.interaction-client.last-ws-link","oc.web.ws.interaction-client/last-ws-link","js/oc.web.ws.interaction-client.last-board-uuids","oc.web.ws.interaction-client/last-board-uuids","js/oc.web.ws.interaction-client.ch-pub","oc.web.ws.interaction-client/ch-pub","cljs.core.async.chan","js/oc.web.ws.interaction-client.last-interval","oc.web.ws.interaction-client/last-interval","js/oc.web.ws.interaction-client.publication","oc.web.ws.interaction-client/publication","cljs.core.async.pub","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.ws.interaction-client/send!","seq41977","G__41978","cljs.core/first","cljs.core/next","self__4723__auto__","chsk-send!","args","oc.web.ws.utils/send!","G__41981","oc.web.ws.interaction-client/boards-watch","js/Error","board-uuids","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/reset!","oc.web.ws.interaction_client.boards_watch","and__4115__auto__","cljs.core/deref","cljs.core/fn?","seq__41982","cljs.core/seq","chunk__41983","count__41984","i__41985","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","board-uuid","oc.web.ws.interaction_client.send_BANG_","oc.web.ws.interaction-client/board-unwatch","callback","oc.web.ws.interaction-client/subscribe","topic","handler-fn","ws-ic-chan","cljs.core.async.sub","c__27167__auto__","cljs.core.async.impl.dispatch/run","f__27168__auto__","switch__27075__auto__","state_42014","state_val_42015","statearr-42016","cljs.core.async.impl.ioc-helpers/take!","inst_42012","cljs.core.async.impl.ioc-helpers/return-chan","inst_42008","inst_42009","statearr-42017","statearr-42018","statearr-42019","state-machine__27076__auto__","ret-value__27077__auto__","result__27078__auto__","cljs.core/keyword-identical?","ex__27079__auto__","e42020","statearr-42021","statearr-42022","state__27169__auto__","statearr-42023","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/oc.web.ws.interaction-client.event-handler","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__42024","cljs.core/MultiFn","cljs.core.symbol","oc.web.ws.interaction-client/event-handler","event","_","r","state_42031","state_val_42032","inst_42025","inst_42026","inst_42027","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_42029","statearr-42041","e42042","statearr-42043","statearr-42044","statearr-42045","body","state_42052","state_val_42053","inst_42046","inst_42047","inst_42048","inst_42050","statearr-42059","e42060","statearr-42062","statearr-42069","statearr-42071","state_42078","state_val_42079","inst_42072","inst_42073","inst_42074","inst_42076","statearr-42080","e42081","statearr-42082","statearr-42083","statearr-42084","state_42091","state_val_42092","inst_42085","inst_42086","inst_42087","inst_42089","statearr-42098","e42099","statearr-42101","statearr-42106","statearr-42120","state_42127","state_val_42128","inst_42121","inst_42122","inst_42123","inst_42125","statearr-42129","e42130","statearr-42131","statearr-42132","statearr-42133","state_42140","state_val_42141","inst_42134","inst_42135","inst_42136","inst_42138","statearr-42142","e42144","statearr-42145","statearr-42146","statearr-42147","js/oc.web.ws.interaction-client.-event-msg-handler","fexpr__42148","oc.web.ws.interaction-client/-event-msg-handler","p__42149","map__42150","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","oc.web.ws.interaction-client/event-msg-handler","ev-msg","id","?data","p__42152","map__42153","p__42155","map__42156","vec__42158","cljs.core.nth","old-state-map","new-state-map","e","taoensso.truss.impl/-dummy-error","e42173","taoensso.truss.impl/-invar-violation!","cljs.core/vector?","p__42176","map__42177","p__42182","map__42183","auth-cb","cljs.core.partial","oc.web.ws.utils/auth-check","oc.web.actions.jwt/jwt-refresh","G__42185","G__42186","oc.web.ws.interaction-client/reconnect","oc.web.lib.jwt/user-id","oc.web.ws.utils/post-handshake-auth","oc.web.lib.jwt/jwt","vec__42187","?uid","?csrf-token","?handshake-data","oc.web.ws.interaction-client/test-session","oc.web.ws.interaction-client/stop-router!","taoensso.sente/chsk-disconnect!","oc.web.ws.interaction-client/start-router!","taoensso.sente/start-client-chsk-router!","oc.web.ws.utils/reconnected","G__42192","G__42193","ws-link","uid","ws-uri","goog.Uri/parse","ws-domain","ws-board-path","cljs.core/not","cljs.core.not_EQ_","map__42199","chsk","ch-recv","send-fn","state","x","G__42200","G__42201","taoensso.sente/make-channel-socket!","oc.web.local-settings/jwt-cookie-secure","cljs.core/remove-watch","cljs.core/add-watch","key","a","old-state","new-state","oc.web.utils.ws-client-ids/interaction-client-id"],"sourcesContent":["(ns oc.web.ws.interaction-client\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]])\n  (:require [sablono.core :as html :refer-macros [html]]\n            [taoensso.sente :as s]\n            [taoensso.timbre :as timbre]\n            [cljs.core.async :refer [chan <! >! timeout pub sub unsub unsub-all]]\n            [taoensso.encore :as encore :refer-macros (have)]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.jwt :as j]\n            [oc.web.actions.jwt :as ja]\n            [oc.web.local-settings :as ls]\n            [oc.web.ws.utils :as ws-utils]\n            [oc.web.utils.ws-client-ids :as ws-client-ids]\n            [goog.Uri :as guri]))\n\n(defonce current-board-path (atom nil))\n\n;; Sente WebSocket atoms\n(defonce channelsk (atom nil))\n(defonce ch-chsk (atom nil))\n(defonce ch-state (atom nil))\n(defonce chsk-send! (atom nil))\n\n(defonce last-ws-link (atom nil))\n(defonce last-board-uuids (atom []))\n\n(defonce ch-pub (chan))\n\n(defonce last-interval (atom nil))\n\n;; Publication that handlers will subscribe to\n(defonce publication\n  (pub ch-pub :topic))\n\n;; Send wrapper\n\n(defn- send! [chsk-send! & args]\n  (ws-utils/send! \"Interaction\" chsk-send! ch-state args))\n\n;; Actions\n(defn boards-watch\n  ([board-uuids]\n    (timbre/debug \"Watching boards: \" board-uuids)\n    (reset! last-board-uuids board-uuids)\n    (boards-watch))\n  ([]\n    (when (and (fn? @chsk-send!)\n               @ch-state\n               (:open? @@ch-state))\n      (doseq [board-uuid @last-board-uuids]\n        (send! chsk-send! [:watch/board {:board-uuid board-uuid}])))))\n\n(defn board-unwatch [callback]\n  (timbre/debug \"Unwatching all boards.\")\n  (reset! last-board-uuids [])\n  (send! chsk-send! [:unwatch/board] 10000 callback))\n\n(defn subscribe\n  [topic handler-fn]\n  (let [ws-ic-chan (chan)]\n    (sub publication topic ws-ic-chan)\n    (go-loop []\n      (handler-fn (<! ws-ic-chan))\n      (recur))))\n;; Event handler\n\n(defmulti event-handler\n  \"Multimethod to handle our internal events\"\n  (fn [event & _]\n    (timbre/debug \"event-handler\" event)\n    event))\n\n(defmethod event-handler :default\n  [_ & r]\n  (timbre/info \"No event handler defined for\" _))\n\n(defmethod event-handler :chsk/ws-ping\n  [_ & r]\n  (go (>! ch-pub { :topic :chsk/ws-ping })))\n\n(defmethod event-handler :interaction-comment/add\n  [_ body]\n  (timbre/debug \"Comment add event\" body)\n  (go (>! ch-pub { :topic :interaction-comment/add :data body })))\n\n(defmethod event-handler :interaction-comment/update\n  [_ body]\n  (timbre/debug \"Comment update event\" body)\n  (go (>! ch-pub { :topic :interaction-comment/update :data body })))\n\n(defmethod event-handler :interaction-comment/delete\n  [_ body]\n  (timbre/debug \"Comment delete event\" body)\n  (go (>! ch-pub { :topic :interaction-comment/delete :data body })))\n\n(defmethod event-handler :interaction-reaction/add\n  [_ body]\n  (timbre/debug \"Reaction add event\" body)\n  (go (>! ch-pub { :topic :interaction-reaction/add :data body })))\n\n(defmethod event-handler :interaction-reaction/delete\n  [_ body]\n  (timbre/debug \"Reaction delete event\" body)\n  (go (>! ch-pub { :topic :interaction-reaction/delete :data body })))\n\n\n;; Sente events handlers\n\n(defmulti -event-msg-handler\n  \"Multimethod to handle Sente `event-msg`s\"\n  :id ; Dispatch on event-id\n  )\n\n(defn event-msg-handler\n  \"Wraps `-event-msg-handler` with logging, error catching, etc.\"\n  [{:as ev-msg :keys [id ?data event]}]\n  (-event-msg-handler ev-msg))\n\n(defmethod -event-msg-handler :default\n  [{:as ev-msg :keys [event]}]\n  ; Default/fallback case (no other matching handler)\n  (timbre/warn \"Unhandled event: \" event))\n\n(defmethod -event-msg-handler :chsk/state\n  [{:as ev-msg :keys [?data]}]\n  (let [[old-state-map new-state-map] (have vector? ?data)]\n    (if (:first-open? new-state-map)\n      (timbre/debug \"Channel socket successfully established!: \" new-state-map)\n      (timbre/debug \"Channel socket state change: \" new-state-map))))\n\n(defmethod -event-msg-handler :chsk/recv\n  [{:as ev-msg :keys [?data]}]\n  (timbre/debug \"Push event from server: \" ?data)\n  (apply event-handler ?data))\n\n(declare reconnect)\n\n(defmethod -event-msg-handler :chsk/handshake\n  [{:as ev-msg :keys [?data]}]\n  (let [auth-cb (partial ws-utils/auth-check \"Interaction\" ch-state chsk-send!\n                 channelsk ja/jwt-refresh #(reconnect @last-ws-link (j/user-id)) boards-watch)]\n    (ws-utils/post-handshake-auth ja/jwt-refresh\n     #(send! chsk-send! [:auth/jwt {:jwt (j/jwt)}] 60000 auth-cb)))\n  (let [[?uid ?csrf-token ?handshake-data] ?data]\n    (timbre/debug \"Handshake:\" ?uid ?csrf-token ?handshake-data)))\n\n;; Session test\n(defn test-session\n  \"Ping the server to update the sesssion state.\"\n  []\n  (send! chsk-send! [:session/status]))\n\n;;;; Sente event router (our `event-msg-handler` loop)\n\n(defn  stop-router! []\n  (when @channelsk\n    (s/chsk-disconnect! @channelsk)\n    (timbre/info \"Connection closed\")))\n\n(defn start-router! []\n  (s/start-client-chsk-router! @ch-chsk event-msg-handler)\n  (timbre/info \"Connection established\")\n  (ws-utils/reconnected last-interval \"Interaction\" chsk-send! ch-state\n   #(reconnect @last-ws-link (j/user-id))))\n\n(defn reconnect [ws-link uid]\n  (let [ws-uri (guri/parse (:href ws-link))\n        ws-domain (str (.getDomain ws-uri) (when (.getPort ws-uri) (str \":\" (.getPort ws-uri))))\n        ws-board-path (.getPath ws-uri)]\n    (reset! last-ws-link ws-link)\n    (if (or (not @ch-state)\n            (not (:open? @@ch-state))\n            (not= @current-board-path ws-board-path))\n      (do\n        (timbre/debug \"Reconnect for\" (:href ws-link) \"and\" uid \"current state:\" @ch-state\n         \"current board:\" @current-board-path)\n        ; if the path is different it means\n        (when (and @ch-state\n                   (:open? @@ch-state))\n          (timbre/info \"Closing previous connection for\" @current-board-path)\n          (stop-router!))\n        (timbre/info \"Attempting interaction service connection to\" ws-domain \"for board\" ws-board-path)\n        (let [{:keys [chsk ch-recv send-fn state] :as x} (s/make-channel-socket! ws-board-path\n                                                          {:type :auto\n                                                           :host ws-domain\n                                                           :protocol (if ls/jwt-cookie-secure :https :http)\n                                                           :packer :edn\n                                                           :uid uid\n                                                           :params {:user-id uid}})]\n            (reset! current-board-path ws-board-path)\n            (reset! channelsk chsk)\n            (reset! ch-chsk ch-recv)\n            (reset! chsk-send! send-fn)\n            (when @ch-state\n              (remove-watch @ch-state :interaction-client-state-watcher))\n            (reset! ch-state state)\n            (add-watch @ch-state :interaction-client-state-watcher\n             (fn [key a old-state new-state]\n               (reset! ws-client-ids/interaction-client-id (:uid new-state))))\n            (start-router!)))\n      (when (pos? (count @last-board-uuids))\n        (boards-watch)))))"]}