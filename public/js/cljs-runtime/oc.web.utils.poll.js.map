{"version":3,"sources":["oc/web/utils/poll.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.utils","js/oc.web.utils.poll","js/oc.web.utils.poll.poll-selector-prefix","oc.web.utils.poll/poll-selector-prefix","js/oc.web.utils.poll.min-poll-replies","oc.web.utils.poll/min-poll-replies","js/oc.web.utils.poll.max-question-length","oc.web.utils.poll/max-question-length","js/oc.web.utils.poll.max-reply-length","oc.web.utils.poll/max-reply-length","oc.web.utils.poll/created-at","oc.web.lib.utils/as-of-now","oc.web.utils.poll/new-poll-id","oc.web.lib.utils/activity-uuid","oc.web.utils.poll/new-reply-id","oc.web.utils.poll/author-for-user","user-data","oc.lib.user.name_for","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.utils.poll/poll-reply","p__37245","vec__37246","cljs.core.nth","seq37242","G__37243","cljs.core/first","cljs.core/next","G__37244","self__4723__auto__","body","ts","or__4126__auto__","oc.web.utils.poll/poll-default-replies","oc.web.lib.utils/js-date","reps","p1__37249#","cljs.core.map","oc.web.utils.poll.poll_reply","js/Date","cljs.core.range","cljs.core/zipmap","cljs.core.comp","cljs.core/keyword","oc.web.utils.poll/poll-data","poll-id","cljs.core/boolean","oc.web.local-settings/poll-can-add-reply","oc.web.utils.poll/clean-poll-reply","poll-reply-data","cljs.core.dissoc","oc.web.utils.poll/clean-poll","poll-data","cljs.core.update","replies","cljs.core.mapv","cljs.core/vals","oc.web.utils.poll/clean-polls","activity-data","cljs.core/seq","polls","oc.web.utils.poll/get-poll-portal-element","poll-uuid","js/document","dommy.core/selector","oc.web.utils.poll/set-poll-element-question!","question-string","temp__5735__auto__","portal-el","target-obj-37250","*runtime-state*-orig-val__37253","oops.state/*runtime-state*","*runtime-state*-temp-val__37254","oops.state/prepare-state","js/Error","parent-obj-37251","next-obj-37252","oops.core/validate-object-access-dynamically","p__37255","map__37256","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.web.utils.poll/report-unmounted-poll","container-selector","_props","oc.web.lib.sentry/capture-message-with-extra-context!","oc.web.dispatcher.current_org_slug","js/window","args__33708__auto__","ocr-37260","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-37260_0__37262","p1__37258#","G__37270","cljs.core.match/backtrack","e37264","e__32662__auto__","G__37269","e37265","p1__37259#","e37266","e37263","oc.web.utils.poll/sorted-replies","cljs.core/map?","cljs.core/contains?","replies-map","replies-coll","cljs.core/coll?","cljs.core.sort_by","oc.web.lib.utils.js_date"],"sourcesContent":["(ns oc.web.utils.poll\n  (:require [defun.core :refer (defun)]\n            [oops.core :refer (oget oset!)]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.sentry :as sentry]))\n\n(defonce ^:export poll-selector-prefix \"oc-poll-portal-\")\n\n(defonce min-poll-replies 2)\n(defonce max-question-length 128)\n(defonce max-reply-length 64)\n\n(defn created-at []\n  (utils/as-of-now))\n\n(defn new-poll-id []\n  (utils/activity-uuid))\n\n(defn new-reply-id []\n  (utils/activity-uuid))\n\n(defn- author-for-user [user-data]\n  {:name (user-lib/name-for user-data)\n   :avatar-url (:avatar-url user-data)\n   :user-id (:user-id user-data)})\n\n(defn poll-reply [user-data body & [ts]]\n  {:created-at (or ts (created-at))\n   :body (or body \"\")\n   :author (author-for-user user-data)\n   :reply-id (new-reply-id)\n   :votes []})\n\n(defn- poll-default-replies [user-data]\n  (let [ts (.getTime (utils/js-date))\n        reps (map\n              #(poll-reply user-data \"\" (.toISOString (js/Date. (+ ts %))))\n              (range min-poll-replies))]\n    (zipmap (map (comp keyword :reply-id) reps) reps)))\n\n(defn poll-data [user-data poll-id]\n  {:question \"\"\n   :poll-uuid poll-id\n   :can-add-reply (boolean ls/poll-can-add-reply)\n   :created-at (created-at)\n   :updated-at (created-at)\n   :author (author-for-user user-data)\n   :replies (poll-default-replies user-data)})\n\n(defn clean-poll-reply [poll-reply-data]\n  (dissoc poll-reply-data :links))\n\n(defn clean-poll [poll-data]\n  (-> poll-data\n   (dissoc :links :preview)\n   (update :replies (fn [replies]\n                      (zipmap\n                       (mapv (comp keyword :reply-id) (vals replies))\n                       (mapv clean-poll-reply (vals replies)))))))\n\n(defn clean-polls\n  \"Clean not needed keys from poll maps.\"\n  [activity-data]\n  (if (seq (:polls activity-data))\n    (update activity-data :polls (fn [polls]\n                                   (zipmap\n                                    (mapv (comp keyword :poll-uuid) (vals polls))\n                                    (mapv clean-poll (vals polls)))))\n    activity-data))\n\n;; Dom manipulation\n\n(defn get-poll-portal-element [poll-uuid]\n  (sel1 (str \".\" poll-selector-prefix poll-uuid)))\n\n(defn set-poll-element-question! [poll-uuid question-string]\n  (when-let [portal-el (get-poll-portal-element poll-uuid)]\n    (oset! portal-el \"dataset.!question\" question-string)))\n\n;; Poll helpers\n\n(defn report-unmounted-poll\n  [{:keys [activity-data poll-data container-selector] :as _props}]\n  (sentry/capture-message-with-extra-context! {:poll-uuid (:poll-uuid poll-data)\n                                               :activity-uuid (:uuid activity-data)\n                                               :revision-id (:revision-id activity-data)\n                                               :poll-updated-at (:updated-at poll-data)\n                                               :org-slug (dis/current-org-slug)\n                                               :container-selector container-selector\n                                               :win-url (.. js/window -location -href)}\n   \"Failed creating portal for poll\"))\n\n;; Replies\n\n(defun sorted-replies\n  ([poll-data :guard #(and (map? %) (contains? % :replies))]\n   (sorted-replies (-> poll-data :replies vals)))\n\n  ([replies-map :guard map?]\n   (sorted-replies (vals replies-map)))\n\n  ([replies-coll :guard coll?]\n   (sort-by #(.getTime (utils/js-date (:created-at %))) replies-coll)))"]}