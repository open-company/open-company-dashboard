shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Grid$utils$CellSizeAndPositionManager=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var _classCallCheck3=(global=require("module$node_modules$babel_runtime$helpers$classCallCheck"))&&global.__esModule?global:{default:global},_createClass3=(global=require("module$node_modules$babel_runtime$helpers$createClass"))&&global.__esModule?global:{default:global};require("module$node_modules$react_virtualized$dist$commonjs$Grid$types");
require=function(){function CellSizeAndPositionManager(_ref){var cellCount=_ref.cellCount,cellSizeGetter=_ref.cellSizeGetter;_ref=_ref.estimatedCellSize;(0,_classCallCheck3.default)(this,CellSizeAndPositionManager);this._cellSizeAndPositionData={};this._lastBatchedIndex=this._lastMeasuredIndex=-1;this._cellSizeGetter=cellSizeGetter;this._cellCount=cellCount;this._estimatedCellSize=_ref}(0,_createClass3.default)(CellSizeAndPositionManager,[{key:"areOffsetsAdjusted",value:function(){return!1}},{key:"configure",
value:function(_ref2){var estimatedCellSize=_ref2.estimatedCellSize,cellSizeGetter=_ref2.cellSizeGetter;this._cellCount=_ref2.cellCount;this._estimatedCellSize=estimatedCellSize;this._cellSizeGetter=cellSizeGetter}},{key:"getCellCount",value:function(){return this._cellCount}},{key:"getEstimatedCellSize",value:function(){return this._estimatedCellSize}},{key:"getLastMeasuredIndex",value:function(){return this._lastMeasuredIndex}},{key:"getOffsetAdjustment",value:function(){return 0}},{key:"getSizeAndPositionOfCell",
value:function(index){if(0>index||index>=this._cellCount)throw Error("Requested index "+index+" is outside of range 0.."+this._cellCount);if(index>this._lastMeasuredIndex){var lastMeasuredCellSizeAndPosition=this.getSizeAndPositionOfLastMeasuredCell();lastMeasuredCellSizeAndPosition=lastMeasuredCellSizeAndPosition.offset+lastMeasuredCellSizeAndPosition.size;for(var i=this._lastMeasuredIndex+1;i<=index;i++){var _size=this._cellSizeGetter({index:i});if(void 0===_size||isNaN(_size))throw Error("Invalid size returned for cell "+
i+" of value "+_size);null===_size?(this._cellSizeAndPositionData[i]={offset:lastMeasuredCellSizeAndPosition,size:0},this._lastBatchedIndex=index):(this._cellSizeAndPositionData[i]={offset:lastMeasuredCellSizeAndPosition,size:_size},lastMeasuredCellSizeAndPosition+=_size,this._lastMeasuredIndex=index)}}return this._cellSizeAndPositionData[index]}},{key:"getSizeAndPositionOfLastMeasuredCell",value:function(){return 0<=this._lastMeasuredIndex?this._cellSizeAndPositionData[this._lastMeasuredIndex]:{offset:0,
size:0}}},{key:"getTotalSize",value:function(){var lastMeasuredCellSizeAndPosition=this.getSizeAndPositionOfLastMeasuredCell();return lastMeasuredCellSizeAndPosition.offset+lastMeasuredCellSizeAndPosition.size+(this._cellCount-this._lastMeasuredIndex-1)*this._estimatedCellSize}},{key:"getUpdatedOffsetForIndex",value:function(_ref3){var _ref3$align=_ref3.align,align=void 0===_ref3$align?"auto":_ref3$align;_ref3$align=_ref3.containerSize;var currentOffset=_ref3.currentOffset;if(0>=_ref3$align)return 0;
_ref3=this.getSizeAndPositionOfCell(_ref3.targetIndex);var maxOffset=_ref3.offset,minOffset=maxOffset-_ref3$align+_ref3.size;switch(align){case "start":align=maxOffset;break;case "end":align=minOffset;break;case "center":align=maxOffset-(_ref3$align-_ref3.size)/2;break;default:align=Math.max(minOffset,Math.min(maxOffset,currentOffset))}currentOffset=this.getTotalSize();return Math.max(0,Math.min(currentOffset-_ref3$align,align))}},{key:"getVisibleCellRange",value:function(params){var containerSize=
params.containerSize;params=params.offset;if(0===this.getTotalSize())return{};containerSize=params+containerSize;var start=this._findNearestCell(params);params=this.getSizeAndPositionOfCell(start);params=params.offset+params.size;for(var stop=start;params<containerSize&&stop<this._cellCount-1;)stop++,params+=this.getSizeAndPositionOfCell(stop).size;return{start:start,stop:stop}}},{key:"resetCell",value:function(index){this._lastMeasuredIndex=Math.min(this._lastMeasuredIndex,index-1)}},{key:"_binarySearch",
value:function(high,low,offset){for(;low<=high;){var middle=low+Math.floor((high-low)/2),_currentOffset=this.getSizeAndPositionOfCell(middle).offset;if(_currentOffset===offset)return middle;_currentOffset<offset?low=middle+1:_currentOffset>offset&&(high=middle-1)}return 0<low?low-1:0}},{key:"_exponentialSearch",value:function(index,offset){for(var interval=1;index<this._cellCount&&this.getSizeAndPositionOfCell(index).offset<offset;)index+=interval,interval*=2;return this._binarySearch(Math.min(index,
this._cellCount-1),Math.floor(index/2),offset)}},{key:"_findNearestCell",value:function(offset){if(isNaN(offset))throw Error("Invalid offset "+offset+" specified");offset=Math.max(0,offset);var lastMeasuredCellSizeAndPosition=this.getSizeAndPositionOfLastMeasuredCell(),lastMeasuredIndex=Math.max(0,this._lastMeasuredIndex);return lastMeasuredCellSizeAndPosition.offset>=offset?this._binarySearch(lastMeasuredIndex,0,offset):this._exponentialSearch(lastMeasuredIndex,offset)}}]);return CellSizeAndPositionManager}();
exports.default=require}
//# sourceMappingURL=module$node_modules$react_virtualized$dist$commonjs$Grid$utils$CellSizeAndPositionManager.js.map
