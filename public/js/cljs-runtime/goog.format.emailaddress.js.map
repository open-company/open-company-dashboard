{
"version":3,
"file":"goog.format.emailaddress.js",
"lineCount":160,
"mappings":"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",
"sources":["goog/format/emailaddress.js"],
"sourcesContent":["// Copyright 2010 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Provides functions to parse and manipulate email addresses.\n *\n */\n\ngoog.provide('goog.format.EmailAddress');\n\ngoog.require('goog.string');\n\n\n\n/**\n * Formats an email address string for display, and allows for extraction of\n * the individual components of the address.\n * @param {string=} opt_address The email address.\n * @param {string=} opt_name The name associated with the email address.\n * @constructor\n */\ngoog.format.EmailAddress = function(opt_address, opt_name) {\n  /**\n   * The name or personal string associated with the address.\n   * @type {string}\n   * @private\n   */\n  this.name_ = opt_name || '';\n\n  /**\n   * The email address.\n   * @type {string}\n   * @protected\n   */\n  this.address = opt_address || '';\n};\n\n\n/**\n * Match string for opening tokens.\n * @type {string}\n * @private\n */\ngoog.format.EmailAddress.OPENERS_ = '\"<([';\n\n\n/**\n * Match string for closing tokens.\n * @type {string}\n * @private\n */\ngoog.format.EmailAddress.CLOSERS_ = '\">)]';\n\n\n/**\n * Match string for characters that require display names to be quoted and are\n * not address separators.\n * @type {string}\n * @const\n * @package\n */\ngoog.format.EmailAddress.SPECIAL_CHARS = '()<>@:\\\\\\\".[]';\n\n\n/**\n * Match string for address separators.\n * @type {string}\n * @const\n * @private\n */\ngoog.format.EmailAddress.ADDRESS_SEPARATORS_ = ',;';\n\n\n/**\n * Match string for characters that, when in a display name, require it to be\n * quoted.\n * @type {string}\n * @const\n * @private\n */\ngoog.format.EmailAddress.CHARS_REQUIRE_QUOTES_ =\n    goog.format.EmailAddress.SPECIAL_CHARS +\n    goog.format.EmailAddress.ADDRESS_SEPARATORS_;\n\n\n/**\n * A RegExp to match all double quotes.  Used in cleanAddress().\n * @type {RegExp}\n * @private\n */\ngoog.format.EmailAddress.ALL_DOUBLE_QUOTES_ = /\\\"/g;\n\n\n/**\n * A RegExp to match escaped double quotes.  Used in parse().\n * @type {RegExp}\n * @private\n */\ngoog.format.EmailAddress.ESCAPED_DOUBLE_QUOTES_ = /\\\\\\\"/g;\n\n\n/**\n * A RegExp to match all backslashes.  Used in cleanAddress().\n * @type {RegExp}\n * @private\n */\ngoog.format.EmailAddress.ALL_BACKSLASHES_ = /\\\\/g;\n\n\n/**\n * A RegExp to match escaped backslashes.  Used in parse().\n * @type {RegExp}\n * @private\n */\ngoog.format.EmailAddress.ESCAPED_BACKSLASHES_ = /\\\\\\\\/g;\n\n\n/**\n * A string representing the RegExp for the local part of an email address.\n * @private {string}\n */\ngoog.format.EmailAddress.LOCAL_PART_REGEXP_STR_ =\n    '[+a-zA-Z0-9_.!#$%&\\'*\\\\/=?^`{|}~-]+';\n\n\n/**\n * A string representing the RegExp for the domain part of an email address.\n * @private {string}\n */\ngoog.format.EmailAddress.DOMAIN_PART_REGEXP_STR_ =\n    '([a-zA-Z0-9-]+\\\\.)+[a-zA-Z0-9]{2,63}';\n\n\n/**\n * A RegExp to match the local part of an email address.\n * @private {!RegExp}\n */\ngoog.format.EmailAddress.LOCAL_PART_ =\n    new RegExp('^' + goog.format.EmailAddress.LOCAL_PART_REGEXP_STR_ + '$');\n\n\n/**\n * A RegExp to match the domain part of an email address.\n * @private {!RegExp}\n */\ngoog.format.EmailAddress.DOMAIN_PART_ =\n    new RegExp('^' + goog.format.EmailAddress.DOMAIN_PART_REGEXP_STR_ + '$');\n\n\n/**\n * A RegExp to match an email address.\n * @private {!RegExp}\n */\ngoog.format.EmailAddress.EMAIL_ADDRESS_ = new RegExp(\n    '^' + goog.format.EmailAddress.LOCAL_PART_REGEXP_STR_ + '@' +\n    goog.format.EmailAddress.DOMAIN_PART_REGEXP_STR_ + '$');\n\n\n/**\n * Get the name associated with the email address.\n * @return {string} The name or personal portion of the address.\n * @final\n */\ngoog.format.EmailAddress.prototype.getName = function() {\n  return this.name_;\n};\n\n\n/**\n * Get the email address.\n * @return {string} The email address.\n * @final\n */\ngoog.format.EmailAddress.prototype.getAddress = function() {\n  return this.address;\n};\n\n\n/**\n * Set the name associated with the email address.\n * @param {string} name The name to associate.\n * @final\n */\ngoog.format.EmailAddress.prototype.setName = function(name) {\n  this.name_ = name;\n};\n\n\n/**\n * Set the email address.\n * @param {string} address The email address.\n * @final\n */\ngoog.format.EmailAddress.prototype.setAddress = function(address) {\n  this.address = address;\n};\n\n\n/**\n * Return the address in a standard format:\n *  - remove extra spaces.\n *  - Surround name with quotes if it contains special characters.\n * @return {string} The cleaned address.\n * @override\n */\ngoog.format.EmailAddress.prototype.toString = function() {\n  return this.toStringInternal(goog.format.EmailAddress.CHARS_REQUIRE_QUOTES_);\n};\n\n\n/**\n * Check if a display name requires quoting.\n * @param {string} name The display name\n * @param {string} specialChars String that contains the characters that require\n *  the display name to be quoted. This may change based in whereas we are\n *  in EAI context or not.\n * @return {boolean}\n * @private\n */\ngoog.format.EmailAddress.isQuoteNeeded_ = function(name, specialChars) {\n  for (var i = 0; i < specialChars.length; i++) {\n    var specialChar = specialChars[i];\n    if (goog.string.contains(name, specialChar)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Return the address in a standard format:\n *  - remove extra spaces.\n *  - Surround name with quotes if it contains special characters.\n * @param {string} specialChars String that contains the characters that require\n *  the display name to be quoted.\n * @return {string} The cleaned address.\n * @protected\n */\ngoog.format.EmailAddress.prototype.toStringInternal = function(specialChars) {\n  var name = this.getName();\n\n  // We intentionally remove double quotes in the name because escaping\n  // them to \\\" looks ugly.\n  name = name.replace(goog.format.EmailAddress.ALL_DOUBLE_QUOTES_, '');\n\n  // If the name has special characters, we need to quote it and escape \\'s.\n  if (goog.format.EmailAddress.isQuoteNeeded_(name, specialChars)) {\n    name = '\"' +\n        name.replace(goog.format.EmailAddress.ALL_BACKSLASHES_, '\\\\\\\\') + '\"';\n  }\n\n  if (name == '') {\n    return this.address;\n  }\n  if (this.address == '') {\n    return name;\n  }\n  return name + ' <' + this.address + '>';\n};\n\n\n/**\n * Determines if the current object is a valid email address.\n * @return {boolean} Whether the email address is valid.\n */\ngoog.format.EmailAddress.prototype.isValid = function() {\n  return goog.format.EmailAddress.isValidAddrSpec(this.address);\n};\n\n\n/**\n * Checks if the provided string is a valid email address. Supports both\n * simple email addresses (address specs) and addresses that contain display\n * names.\n * @param {string} str The email address to check.\n * @return {boolean} Whether the provided string is a valid address.\n */\ngoog.format.EmailAddress.isValidAddress = function(str) {\n  return goog.format.EmailAddress.parse(str).isValid();\n};\n\n\n/**\n * Checks if the provided string is a valid address spec (local@domain.com).\n * @param {string} str The email address to check.\n * @return {boolean} Whether the provided string is a valid address spec.\n */\ngoog.format.EmailAddress.isValidAddrSpec = function(str) {\n  // This is a fairly naive implementation, but it covers 99% of use cases.\n  // For more details, see http://en.wikipedia.org/wiki/Email_address#Syntax\n  return goog.format.EmailAddress.EMAIL_ADDRESS_.test(str);\n};\n\n\n/**\n * Checks if the provided string is a valid local part (part before the '@') of\n * an email address.\n * @param {string} str The local part to check.\n * @return {boolean} Whether the provided string is a valid local part.\n */\ngoog.format.EmailAddress.isValidLocalPartSpec = function(str) {\n  return goog.format.EmailAddress.LOCAL_PART_.test(str);\n};\n\n\n/**\n * Checks if the provided string is a valid domain part (part after the '@') of\n * an email address.\n * @param {string} str The domain part to check.\n * @return {boolean} Whether the provided string is a valid domain part.\n */\ngoog.format.EmailAddress.isValidDomainPartSpec = function(str) {\n  return goog.format.EmailAddress.DOMAIN_PART_.test(str);\n};\n\n\n/**\n * Parses an email address of the form \"name\" &lt;address&gt; (\"name\" is\n * optional) into an email address.\n * @param {string} addr The address string.\n * @param {function(new: goog.format.EmailAddress, string=,string=)} ctor\n *     EmailAddress constructor to instantiate the output address.\n * @return {!goog.format.EmailAddress} The parsed address.\n * @protected\n */\ngoog.format.EmailAddress.parseInternal = function(addr, ctor) {\n  // TODO(ecattell): Strip bidi markers.\n  var name = '';\n  var address = '';\n  for (var i = 0; i < addr.length;) {\n    var token = goog.format.EmailAddress.getToken_(addr, i);\n    if (token.charAt(0) == '<' && token.indexOf('>') != -1) {\n      var end = token.indexOf('>');\n      address = token.substring(1, end);\n    } else if (address == '') {\n      name += token;\n    }\n    i += token.length;\n  }\n\n  // Check if it's a simple email address of the form \"jlim@google.com\".\n  if (address == '' && name.indexOf('@') != -1) {\n    address = name;\n    name = '';\n  }\n\n  name = goog.string.collapseWhitespace(name);\n  name = goog.string.stripQuotes(name, '\\'');\n  name = goog.string.stripQuotes(name, '\"');\n  // Replace escaped quotes and slashes.\n  name = name.replace(goog.format.EmailAddress.ESCAPED_DOUBLE_QUOTES_, '\"');\n  name = name.replace(goog.format.EmailAddress.ESCAPED_BACKSLASHES_, '\\\\');\n  address = goog.string.collapseWhitespace(address);\n  return new ctor(address, name);\n};\n\n\n/**\n * Parses an email address of the form \"name\" &lt;address&gt; into\n * an email address.\n * @param {string} addr The address string.\n * @return {!goog.format.EmailAddress} The parsed address.\n */\ngoog.format.EmailAddress.parse = function(addr) {\n  return goog.format.EmailAddress.parseInternal(addr, goog.format.EmailAddress);\n};\n\n\n/**\n * Parse a string containing email addresses of the form\n * \"name\" &lt;address&gt; into an array of email addresses.\n * @param {string} str The address list.\n * @param {function(string)} parser The parser to employ.\n * @param {function(string):boolean} separatorChecker Accepts a character and\n *    returns whether it should be considered an address separator.\n * @return {!Array<!goog.format.EmailAddress>} The parsed emails.\n * @protected\n */\ngoog.format.EmailAddress.parseListInternal = function(\n    str, parser, separatorChecker) {\n  var result = [];\n  var email = '';\n  var token;\n\n  // Remove non-UNIX-style newlines that would otherwise cause getToken_ to\n  // choke. Remove multiple consecutive whitespace characters for the same\n  // reason.\n  str = goog.string.collapseWhitespace(str);\n\n  for (var i = 0; i < str.length;) {\n    token = goog.format.EmailAddress.getToken_(str, i);\n    if (separatorChecker(token) || (token == ' ' && parser(email).isValid())) {\n      if (!goog.string.isEmptyOrWhitespace(email)) {\n        result.push(parser(email));\n      }\n      email = '';\n      i++;\n      continue;\n    }\n    email += token;\n    i += token.length;\n  }\n\n  // Add the final token.\n  if (!goog.string.isEmptyOrWhitespace(email)) {\n    result.push(parser(email));\n  }\n  return result;\n};\n\n\n/**\n * Parses a string containing email addresses of the form\n * \"name\" &lt;address&gt; into an array of email addresses.\n * @param {string} str The address list.\n * @return {!Array<!goog.format.EmailAddress>} The parsed emails.\n */\ngoog.format.EmailAddress.parseList = function(str) {\n  return goog.format.EmailAddress.parseListInternal(\n      str, goog.format.EmailAddress.parse,\n      goog.format.EmailAddress.isAddressSeparator);\n};\n\n\n/**\n * Get the next token from a position in an address string.\n * @param {string} str the string.\n * @param {number} pos the position.\n * @return {string} the token.\n * @private\n */\ngoog.format.EmailAddress.getToken_ = function(str, pos) {\n  var ch = str.charAt(pos);\n  var p = goog.format.EmailAddress.OPENERS_.indexOf(ch);\n  if (p == -1) {\n    return ch;\n  }\n  if (goog.format.EmailAddress.isEscapedDlQuote_(str, pos)) {\n    // If an opener is an escaped quote we do not treat it as a real opener\n    // and keep accumulating the token.\n    return ch;\n  }\n  var closerChar = goog.format.EmailAddress.CLOSERS_.charAt(p);\n  var endPos = str.indexOf(closerChar, pos + 1);\n\n  // If the closer is a quote we go forward skipping escaped quotes until we\n  // hit the real closing one.\n  while (endPos >= 0 &&\n         goog.format.EmailAddress.isEscapedDlQuote_(str, endPos)) {\n    endPos = str.indexOf(closerChar, endPos + 1);\n  }\n  var token = (endPos >= 0) ? str.substring(pos, endPos + 1) : ch;\n  return token;\n};\n\n\n/**\n * Checks if the character in the current position is an escaped double quote\n * ( \\\" ).\n * @param {string} str the string.\n * @param {number} pos the position.\n * @return {boolean} true if the char is escaped double quote.\n * @private\n */\ngoog.format.EmailAddress.isEscapedDlQuote_ = function(str, pos) {\n  if (str.charAt(pos) != '\"') {\n    return false;\n  }\n  var slashCount = 0;\n  for (var idx = pos - 1; idx >= 0 && str.charAt(idx) == '\\\\'; idx--) {\n    slashCount++;\n  }\n  return ((slashCount % 2) != 0);\n};\n\n\n/**\n * @param {string} ch The character to test.\n * @return {boolean} Whether the provided character is an address separator.\n */\ngoog.format.EmailAddress.isAddressSeparator = function(ch) {\n  return goog.string.contains(goog.format.EmailAddress.ADDRESS_SEPARATORS_, ch);\n};\n"],
"names":["goog","provide","require","format","EmailAddress","goog.format.EmailAddress","opt_address","opt_name","name_","address","OPENERS_","CLOSERS_","SPECIAL_CHARS","ADDRESS_SEPARATORS_","CHARS_REQUIRE_QUOTES_","ALL_DOUBLE_QUOTES_","ESCAPED_DOUBLE_QUOTES_","ALL_BACKSLASHES_","ESCAPED_BACKSLASHES_","LOCAL_PART_REGEXP_STR_","DOMAIN_PART_REGEXP_STR_","LOCAL_PART_","RegExp","DOMAIN_PART_","EMAIL_ADDRESS_","prototype","getName","goog.format.EmailAddress.prototype.getName","getAddress","goog.format.EmailAddress.prototype.getAddress","setName","goog.format.EmailAddress.prototype.setName","name","setAddress","goog.format.EmailAddress.prototype.setAddress","toString","goog.format.EmailAddress.prototype.toString","toStringInternal","isQuoteNeeded_","goog.format.EmailAddress.isQuoteNeeded_","specialChars","i","length","specialChar","string","contains","goog.format.EmailAddress.prototype.toStringInternal","replace","isValid","goog.format.EmailAddress.prototype.isValid","isValidAddrSpec","isValidAddress","goog.format.EmailAddress.isValidAddress","str","parse","goog.format.EmailAddress.isValidAddrSpec","test","isValidLocalPartSpec","goog.format.EmailAddress.isValidLocalPartSpec","isValidDomainPartSpec","goog.format.EmailAddress.isValidDomainPartSpec","parseInternal","goog.format.EmailAddress.parseInternal","addr","ctor","token","getToken_","charAt","indexOf","end","substring","collapseWhitespace","stripQuotes","goog.format.EmailAddress.parse","parseListInternal","goog.format.EmailAddress.parseListInternal","parser","separatorChecker","result","email","isEmptyOrWhitespace","push","parseList","goog.format.EmailAddress.parseList","isAddressSeparator","goog.format.EmailAddress.getToken_","pos","ch","p","isEscapedDlQuote_","closerChar","endPos","goog.format.EmailAddress.isEscapedDlQuote_","slashCount","idx","goog.format.EmailAddress.isAddressSeparator"]
}
