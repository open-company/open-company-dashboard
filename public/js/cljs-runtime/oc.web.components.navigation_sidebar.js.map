{"version":3,"sources":["oc/web/components/navigation_sidebar.cljs"],"mappings":"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","names":["oc.web.components.navigation-sidebar/drafts-board-prefix","oc.web.lib.utils/default-drafts-board","rum.core/build-defcs","js/React.createElement","p1__45932#","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.navigation-sidebar/navigation-sidebar","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/first-render-mixin","s","oc.web.actions.nux/check-nux","oc.web.lib.responsive/is-mobile-size?","mobile-navigation-panel","cljs.core/deref","cljs.core/boolean","org.martinklepsch.derivatives/get-ref","last-mobile-navigation-panel","cljs.core.not_EQ_","oc.web.utils.dom/lock-page-scroll","cljs.core/reset!","oc.web.utils.dom/unlock-page-scroll","org-data","org.martinklepsch.derivatives/react","board-data","current-user-data","change-data","org-slug","current-board-slug","current-contributions-id","show-invite-box","filtered-change-data","cljs.core.into","p1__45930#","cljs.core.filter","cljs.core/first","clojure.string/starts-with?","left-navigation-sidebar-width","oc.web.lib.responsive/left-navigation-sidebar-width","all-boards","user-is-part-of-the-team?","is-replies","cljs.core._EQ_","cljs.core.keyword","is-following","is-drafts-board","oc.web.lib.utils/default-drafts-board-slug","is-topics","or__4126__auto__","and__4115__auto__","cljs.core/not","oc.web.dispatcher/is-container?","is-bookmarks","is-contributions","cljs.core/seq","is-self-profile?","create-link","oc.web.lib.utils.link_for","drafts-board","p1__45931#","drafts-link","show-following","show-bookmarks","show-drafts","show-replies","show-profile","is-mobile?","drafts-data","all-unread-items","cljs.core.mapcat","cljs.core/vals","following-badge","replies-badge","is-admin-or-author?","G__45938","fexpr__45937","show-invite-people?","show-topics","show-add-post-tooltip","cmail-state","show-plus-button?","oc.web.lib.utils/class-set","oc.web.lib.utils/event-inside?","rum.core/ref-node","oc.web.dispatcher/dispatch!","oc.web.components.ui.orgs-dropdown/orgs-dropdown","p1__45933#","oc.web.urls.following","oc.web.actions.nav_sidebar.nav_to_url_BANG_","p1__45934#","oc.web.urls.unfollowing","oc.web.urls.topics","oc.web.urls.replies","e","oc.web.lib.utils/event-stop","contrib-user-id","oc.web.urls.contributions","oc.web.actions.nav_sidebar.nav_to_author_BANG_","p1__45935#","oc.web.urls.bookmarks","p1__45936#","board-url","oc.web.urls.board","draft-count","cljs.core/count","cljs.core/name","oc.web.actions.cmail/cmail-fullscreen","oc.web.actions.user.dismiss_invite_box","oc.web.actions.nav-sidebar/show-org-settings"],"sourcesContent":["(ns oc.web.components.navigation-sidebar\n  (:require [rum.core :as rum]\n            [clojure.string :as s]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.lib.user :as lib-user]\n            [oc.web.urls :as oc-urls]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.components.ui.menu :as menu]\n            [oc.web.utils.ui :refer (ui-compose)]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.trial-expired-banner :refer (trial-expired-alert)]\n            [oc.web.components.ui.orgs-dropdown :refer (orgs-dropdown)]))\n\n(def drafts-board-prefix (-> utils/default-drafts-board :uuid (str \"-\")))\n\n(rum/defcs navigation-sidebar < rum/reactive\n                                ;; Derivatives\n                                (drv/drv :org-data)\n                                (drv/drv :board-data)\n                                (drv/drv :org-slug)\n                                (drv/drv :board-slug)\n                                (drv/drv :contributions-id)\n                                (drv/drv :change-data)\n                                (drv/drv :current-user-data)\n                                (drv/drv :replies-badge)\n                                (drv/drv :following-badge)\n                                (drv/drv :mobile-navigation-sidebar)\n                                (drv/drv :drafts-data)\n                                (drv/drv :cmail-state)\n                                (drv/drv :show-add-post-tooltip)\n                                (drv/drv :show-invite-box)\n                                ;; Locals\n                                (rum/local nil ::last-mobile-navigation-panel)\n                                (rum/local true ::show-invite-people?)\n                                ;; Mixins\n                                ui-mixins/first-render-mixin\n\n                                {:before-render (fn [s]\n                                  (nux-actions/check-nux)\n                                  s)\n                                 :will-update (fn [s]\n                                  (when (responsive/is-mobile-size?)\n                                    (let [mobile-navigation-panel (boolean @(drv/get-ref s :mobile-navigation-sidebar))\n                                          last-mobile-navigation-panel (boolean @(::last-mobile-navigation-panel s))]\n                                      (when (not= mobile-navigation-panel last-mobile-navigation-panel)\n                                        (if mobile-navigation-panel\n                                          ;; Will open panel, let's block page scroll\n                                          (do\n                                            (dom-utils/lock-page-scroll)\n                                            (reset! (::last-mobile-navigation-panel s) true))\n                                          ;; Will close panel, let's unblock page scroll\n                                          (do\n                                            (dom-utils/unlock-page-scroll)\n                                            (reset! (::last-mobile-navigation-panel s) false))))))\n                                  s)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        board-data (drv/react s :board-data)\n        current-user-data (drv/react s :current-user-data)\n        change-data (drv/react s :change-data)\n        org-slug (drv/react s :org-slug)\n        current-board-slug (drv/react s :board-slug)\n        current-contributions-id (drv/react s :contributions-id)\n        show-invite-box (drv/react s :show-invite-box)\n        filtered-change-data (into {} (filter #(and (-> % first (s/starts-with? drafts-board-prefix) not)\n                                                    (not= % (:uuid org-data))) change-data))\n        left-navigation-sidebar-width (- responsive/left-navigation-sidebar-width 20)\n        all-boards (:boards org-data)\n        user-is-part-of-the-team? (:member? org-data)\n        is-replies (= (keyword current-board-slug) :replies)\n        is-following (= (keyword current-board-slug) :following)\n        is-drafts-board (= current-board-slug utils/default-drafts-board-slug)\n        is-topics (or (= (keyword current-board-slug) :topics)\n                      (and current-board-slug\n                           (not (dis/is-container? current-board-slug))\n                           (not is-drafts-board)))\n        is-bookmarks (= (keyword current-board-slug) :bookmarks)\n        is-contributions (seq current-contributions-id)\n        is-self-profile? (and is-contributions\n                              (= current-contributions-id (:user-id current-user-data)))\n        create-link (utils/link-for (:links org-data) \"create\")\n        ; show-boards (or create-link (pos? (count boards)))\n        drafts-board (first (filter #(= (:slug %) utils/default-drafts-board-slug) all-boards))\n        drafts-link (utils/link-for (:links drafts-board) \"self\")\n        show-following (and user-is-part-of-the-team?\n                            (utils/link-for (:links org-data) \"following\"))\n        show-bookmarks (and user-is-part-of-the-team?\n                            (utils/link-for (:links org-data) \"bookmarks\"))\n        show-drafts (and user-is-part-of-the-team?\n                         drafts-link)\n        show-replies (and user-is-part-of-the-team?\n                          (utils/link-for (:links org-data) \"replies\"))\n        show-profile (or user-is-part-of-the-team?\n                         is-contributions)\n        is-mobile? (responsive/is-mobile-size?)\n        drafts-data (drv/react s :drafts-data)\n        all-unread-items (mapcat :unread (vals filtered-change-data))\n        following-badge (drv/react s :following-badge)\n        replies-badge (drv/react s :replies-badge)\n        ; show-you (and user-is-part-of-the-team?\n        ;               (pos? (:contributions-count org-data)))\n        is-admin-or-author? (#{:admin :author} (:role current-user-data))\n        show-invite-people? (and org-slug\n                                 is-admin-or-author?\n                                 show-invite-box)\n        show-topics user-is-part-of-the-team?\n        show-add-post-tooltip (drv/react s :show-add-post-tooltip)\n        cmail-state (drv/react s :cmail-state)\n        show-plus-button? (and (not is-mobile?)\n                               (:can-compose? org-data))]\n    [:div.left-navigation-sidebar.group\n      {:class (utils/class-set {:mobile-show-side-panel (drv/react s :mobile-navigation-sidebar)})\n       :on-click #(when-not (utils/event-inside? % (rum/ref-node s :left-navigation-sidebar-content))\n                    (dis/dispatch! [:input [:mobile-navigation-sidebar] false]))\n       :ref :left-navigation-sidebar}\n      [:div.left-navigation-sidebar-content\n        {:ref :left-navigation-sidebar-content}\n        (when is-mobile?\n          [:div.left-navigation-sidebar-mobile-header\n            [:button.mlb-reset.mobile-close-bt\n              {:on-click #(dis/dispatch! [:input [:mobile-navigation-sidebar] false])}]\n            (orgs-dropdown)])\n        ;; All posts\n        (when show-following\n          [:div.left-navigation-sidebar-top\n            [:a.nav-link.home.hover-item.group\n              {:class (utils/class-set {:item-selected is-following\n                                        :new following-badge})\n               :href (oc-urls/following)\n               :on-click #(nav-actions/nav-to-url! % \"following\" (oc-urls/following))}\n              [:div.nav-link-icon]\n              [:div.nav-link-label\n                ; {:class (utils/class-set {:new (seq all-unread-items)})}\n                \"Home\"]\n              (when following-badge\n                ; [:span.count (count all-unread-items)]\n                [:span.unread-dot])]])\n        (when show-topics\n          [:div.left-navigation-sidebar-top\n            [:a.nav-link.topics.hover-item.group\n              {:class (utils/class-set {:item-selected is-topics})\n               :href (oc-urls/unfollowing)\n               :on-click #(nav-actions/nav-to-url! % \"topics\" (oc-urls/topics))}\n              [:div.nav-link-icon]\n              [:div.nav-link-label\n                ; {:class (utils/class-set {:new (seq all-unread-items)})}\n                \"Explore\"]\n              ; (when (pos? (count all-unread-items))\n              ;   [:span.count (count all-unread-items)])\n              ]])\n        (when show-replies\n          [:div.left-navigation-sidebar-top\n            {:class (when (or show-following show-topics)\n                      \"top-border\")}\n            [:a.nav-link.replies-view.hover-item.group\n              {:class (utils/class-set {:item-selected is-replies\n                                        :new replies-badge})\n               :href (oc-urls/replies)\n               :on-click (fn [e]\n                           (utils/event-stop e)\n                           (nav-actions/nav-to-url! e \"replies\" (oc-urls/replies)))}\n              [:div.nav-link-icon]\n              [:div.nav-link-label\n                ; {:class (utils/class-set {:new (seq all-unread-items)})}\n                \"For you\"]\n                (when replies-badge\n                  [:span.unread-dot])]])\n        (when show-profile\n          (let [contrib-user-id (if is-contributions current-contributions-id (:user-id current-user-data))]\n            [:div.left-navigation-sidebar-top\n              {:class (when (and (or show-following show-topics)\n                                 (not show-replies))\n                        \"top-border\")}\n              [:a.nav-link.profile.hover-item.group\n                {:class (utils/class-set {:item-selected is-contributions})\n                 :href (oc-urls/contributions (:user-id current-user-data))\n                 :on-click (fn [e]\n                             (utils/event-stop e)\n                             (nav-actions/nav-to-author! e (:user-id current-user-data) (oc-urls/contributions (:user-id current-user-data))))}\n                [:div.nav-link-icon]\n                [:div.nav-link-label\n                  ; {:class (utils/class-set {:new (seq all-unread-items)})}\n                  \"Profile\"]]]))\n        ;; You\n        ; (when show-you\n        ;   [:div.left-navigation-sidebar-top.top-border\n        ;     [:a.nav-link.my-posts.hover-item.group\n        ;       {:class (utils/class-set {:item-selected is-my-posts})\n        ;        :href (oc-urls/contributions (:user-id current-user-data))\n        ;        :on-click (fn [e]\n        ;                    (utils/event-stop e)\n        ;                    (nav-actions/nav-to-author! e (:user-id current-user-data) (oc-urls/contributions (:user-id current-user-data))))}\n        ;       [:div.nav-link-icon]\n        ;       [:div.nav-link-label\n        ;         ; {:class (utils/class-set {:new (seq all-unread-items)})}\n        ;         \"You\"]\n        ;         ; (when (pos? (:contributions-count org-data))\n        ;         ;   [:span.count (:contributions-count org-data)])\n        ;         ]])\n        ;; Bookmarks\n        (when show-bookmarks\n          [:div.left-navigation-sidebar-top\n            {:class (when (and (or show-following show-topics show-replies)\n                               (not show-replies)\n                               (not show-profile))\n                        \"top-border\")}\n            [:a.nav-link.bookmarks.hover-item.group\n              {:class (utils/class-set {:item-selected is-bookmarks})\n               :href (oc-urls/bookmarks)\n               :on-click #(nav-actions/nav-to-url! % \"bookmarks\" (oc-urls/bookmarks))}\n              [:div.nav-link-icon]\n              [:div.nav-link-label\n                \"Bookmarks\"]\n              (when (pos? (:bookmarks-count org-data))\n                [:span.count (:bookmarks-count org-data)])]])\n        ;; Drafts\n        (when show-drafts\n          (let [board-url (oc-urls/board (:slug drafts-board))\n                draft-count (if drafts-data (count (:posts-list drafts-data)) (:count drafts-link))]\n            [:div.left-navigation-sidebar-top\n              {:class (when (and (or show-following show-topics)\n                                 (not show-replies)\n                                 (not show-profile)\n                                 (not show-bookmarks))\n                        \"top-border\")}\n              [:a.nav-link.drafts.hover-item.group\n                {:class (utils/class-set {:item-selected (and (not is-following)\n                                                              (not is-topics)\n                                                              (not is-bookmarks)\n                                                              (= current-board-slug (:slug drafts-board)))})\n                 :data-board (name (:slug drafts-board))\n                 :key (str \"board-list-\" (name (:slug drafts-board)))\n                 :href board-url\n                 :on-click #(nav-actions/nav-to-url! % (:slug drafts-board) board-url)}\n                [:div.nav-link-icon]\n                [:div.nav-link-label.group\n                  \"Drafts\"]\n                (when (pos? draft-count)\n                  [:span.count draft-count])]]))\n        (when show-plus-button?\n          [:button.mlb-reset.create-bt\n            {:on-click #(cmail-actions/cmail-fullscreen)\n             :disabled (not (:collapsed cmail-state))}\n            ; [:span.plus-icon]\n            [:span.copy-text\n              \"New update\"]])\n        (when show-invite-people?\n          [:div.invite-people-box\n            [:button.mlb-reset.invite-people-close\n              {:on-click #(user-actions/dismiss-invite-box (:user-id current-user-data) true)}]\n            [:label.explore-label\n              \"Explore Wut together\"]\n            [:button.mlb-reset.invite-people-bt\n              {:on-click #(nav-actions/show-org-settings :invite-picker)}\n              \"Invite teammates\"]])]]))"]}