{"version":3,"sources":["oc/web/components/ui/add_comment.cljs"],"mappings":"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","names":["oc.web.components.ui.add-comment/focus-value","s","map__46040","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","activity-data","parent-comment-uuid","add-comment-focus-prefix","edit-comment-data","cljs.core/first","oc.web.utils.comment.add_comment_focus_value","oc.web.components.ui.add-comment/add-comment-field","rum.core/ref-node","oc.web.components.ui.add-comment/add-comment-body","temp__5735__auto__","field","var_args","G__46043","oc.web.components.ui.add-comment/add-comment-data","js/Error","cljs.core/deref","oc.web.components.ui.add_comment.add_comment_data","add-comment-key","add-comment-data","org.martinklepsch.derivatives/get-ref","oc.web.components.ui.add-comment/enable-post-button?","map__46044","activity-add-comment-data","comment-text","cljs.core/boolean","cljs.core.not_EQ_","oc.web.utils.activity/empty-body?","oc.web.components.ui.add-comment/toggle-post-button","enabled?","cljs.core/compare-and-set!","oc.web.components.ui.add-comment/maybe-expand","oc.web.components.ui.add-comment/multiple-lines?","cljs.core/not","f","cljs.core/reset!","oc.web.components.ui.add-comment/fix-selection","el","sel","js/OCStaticTextareaSaveSelection","and__4115__auto__","cljs.core._EQ_","js/Range","oc.web.components.ui.add-comment/focus","oc.web.components.ui.add-comment/blur","oc.web.actions.comment/add-comment-blur","toggle","oc.web.components.ui.add-comment/send-clicked","event","map__46047","add-comment-div","comment-body","oc.web.utils.comment/add-comment-content","dismiss-reply-cb","scroll-after-posting?","add-comment-cb","save-done-cb","success","oc.web.actions.notifications/show-notification","p1__46046#","cljs.core.swap_BANG_","oc.web.utils.activity/empty-body-html","updated-comment","oc.web.actions.comment/save-comment","oc.web.actions.comment/add-comment","oc.web.lib.responsive/is-mobile-size?","oc.web.utils.dom.is_element_top_in_viewport_QMARK_","js/document","vertical-offset","rum.core/dom-node","oc.web.lib.utils/after","js/window","cljs.core/fn?","oc.web.components.ui.add-comment/add-comment-unique-class","oc.web.components.ui.add-comment/me-options","parent-uuid","placeholder","or__4126__auto__","oc.web.components.ui.add-comment/did-change","map__46049","post-enabled","oc.web.actions.comment/add-comment-change","throttled-did-change","oc.web.components.ui.add-comment/should-focus?","add-comment-focus","component-focus-id","oc.web.components.ui.add-comment/focus!","oc.web.lib.utils/to-end-of-content-editable","oc.web.components.ui.add-comment/maybe-focus","oc.web.components.ui.add-comment/close-reply-clicked","map__46051","dismiss-fn","oc.web.actions.comment/add-comment-reset","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","rum.core/build-defcs","p__46055","map__46056","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","p1__46054#","oc.web.components.ui.add-comment/add-comment","rum.core/static","rum.core/reactive","rum.core.local","org.martinklepsch.derivatives.drv","oc.web.mixins.ui/first-render-mixin","oc.web.mixins.mention/oc-mentions-hover","oc.web.mixins.ui/on-window-click-mixin","e","oc.web.lib.utils/event-inside?","oc.web.utils.medium-editor-media/media-video-add","oc.web.utils.medium-editor-media/media-gif-add","oc.web.lib.utils/activity-uuid","map__46063","collapse?","add-comment-did-change","oc.web.dispatcher.add_comment_string_key","initial-body","cljs.core/seq","js/goog.async.Throttle","props","me-opts","add-comment-internal","bounding-box","computed-style","max-width","oc.web.utils.medium-editor-media/setup-editor","js/emojiAutocomplete","map__46065","reply-to","focus-val","focus","body","r","body-field","current-body","is-empty?","quoted-body","last-element","last-element-tag","next-body","oc.web.actions.comment/reset-reply-to","data","video-data","cljs.core/map?","p1__46053#","oc.web.dispatcher/dispatch!","cljs.core.dissoc","o","internal-max-width","row-index","_add-comment-data","org.martinklepsch.derivatives/react","_media-input","_mention-users","_users-info-hover","_current-user-data","_follow-publishers-list","_followers-publishers-count","_reply-to","current-user-data","container-class","is-mobile?","attachment-uploading","uploading?","add-comment-class","multiple-lines","collapsed?","oc.web.lib.utils/class-set","oc.web.lib.utils/hide-class","oc.web.utils.dom/onload-recalc-measure-class","add-comment-node","oc.web.lib.responsive/is-tablet-or-mobile?","oc.web.components.ui.small-loading/small-loading","G__46060","oc.web.components.ui.emoji-picker/emoji-picker","G__46061","oc.web.components.ui.giphy-picker/giphy-picker","gif-obj","G__46062","oc.web.components.ui.media-video-modal/media-video-modal","cljs.core.keyword"],"sourcesContent":["(ns oc.web.components.ui.add-comment\n  (:require [rum.core :as rum]\n            [dommy.core :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.shared.useragent :as ua]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.comment :as cu]\n            [oc.web.utils.activity :as au]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.utils.mention :as mention-utils]\n            [oc.web.mixins.mention :as mention-mixins]\n            [oc.web.actions.comment :as comment-actions]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.utils.medium-editor-media :as me-media-utils]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.emoji-picker :refer (emoji-picker)]\n            [oc.web.components.ui.giphy-picker :refer (giphy-picker)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.media-video-modal :refer (media-video-modal)]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.ui.carrot-checkbox :refer (carrot-checkbox)])\n  (:import [goog.async Throttle]))\n\n(defn- focus-value [s]\n  (let [{:keys [activity-data parent-comment-uuid\n         add-comment-focus-prefix edit-comment-data]} (-> s :rum/args first)]\n    (cu/add-comment-focus-value add-comment-focus-prefix (:uuid activity-data) parent-comment-uuid (:uuid edit-comment-data))))\n\n(defn- add-comment-field [s]\n  (rum/ref-node s \"editor-node\"))\n\n(defn- add-comment-body [s]\n  (when-let [field (add-comment-field s)]\n    (.-innerHTML field)))\n\n(defn- add-comment-data\n  ([s]\n   (add-comment-data s @(::add-comment-key s)))\n  ([s add-comment-key]\n   (let [add-comment-data @(drv/get-ref s :add-comment-data)]\n     (get add-comment-data add-comment-key))))\n\n(defn- enable-post-button? [s]\n  (let [{:keys [edit-comment-data]} (first (:rum/args s))\n        activity-add-comment-data (add-comment-data s)\n        comment-text (add-comment-body s)]\n    (boolean (and (not= comment-text (:body edit-comment-data))\n                  (not (au/empty-body? comment-text))))))\n\n(defn- toggle-post-button [s]\n  (let [enabled? (enable-post-button? s)]\n    (compare-and-set! (::post-enabled s) (not enabled?) enabled?)\n    enabled?))\n\n;; Add commnet handling\n(defn- maybe-expand [s]\n  (when @(::collapsed s)\n    (when (add-comment-field s)\n      (compare-and-set! (::collapsed s) true false))))\n\n(defn- multiple-lines? [s]\n  (when (and (not @(::collapsed s))\n             (not @(::multiple-lines s)))\n    (when-let [f (add-comment-field s)]\n      (reset! (::multiple-lines s) (or (> (.-scrollWidth f) @(::inline-reply-max-width s))\n                                       (> (.-scrollHeight f) 20))))))\n\n(defn- fix-selection [s]\n  (let [el (add-comment-field s)\n        sel (js/OCStaticTextareaSaveSelection)]\n    (when (and el sel\n               (= (.-anchorTarget sel) el)\n               (.-firstElementChild el)\n               (.. el -firstElementChild -firstElementChild)\n               (au/empty-body? (.-innerHTML el)))\n      (.removeAllRanges sel)\n      (.addRange sel (js/Range. (.-firstElementChild el) 0)))))\n\n(defn- focus [s]\n  ; (when (and @(::collapsed s)\n  ;            ua/safari?)\n  ;   ; (utils/after 10 #)\n  ;   (fix-selection s))\n  (maybe-expand s)\n  (multiple-lines? s)\n  (toggle-post-button s))\n\n(defn- blur [s]\n  (comment-actions/add-comment-blur (focus-value s))\n  (let [toggle (toggle-post-button s)]\n    ;; In case post button is being disabled let's collapse\n    (when (and (not toggle)\n               (-> s :rum/args first :collapse?))\n      (reset! (::collapsed s) true)\n      (reset! (::multiple-lines s) false))))\n\n(defn- send-clicked [event s]\n  (reset! (::collapsed s) true)\n  (reset! (::multiple-lines s) false)\n  (let [add-comment-div (add-comment-field s)\n        comment-body (cu/add-comment-content add-comment-div)\n        {:keys [activity-data parent-comment-uuid dismiss-reply-cb\n         edit-comment-data scroll-after-posting? add-comment-cb]} (first (:rum/args s))\n        save-done-cb (fn [success]\n                      (if success\n                        (when-let [el (add-comment-field s)]\n                          (set! (.-innerHTML el) @(::initial-add-comment s)))\n                        (notification-actions/show-notification\n                         {:title \"An error occurred while saving your comment.\"\n                          :description \"Please try again\"\n                          :dismiss true\n                          :expire 3\n                          :id (if edit-comment-data :update-comment-error :add-comment-error)})))]\n    (swap! (::initial-add-comment s) #(if edit-comment-data % au/empty-body-html))\n    (when add-comment-div\n      (set! (.-innerHTML add-comment-div) @(::initial-add-comment s)))\n    (let [updated-comment (if edit-comment-data\n                            (comment-actions/save-comment activity-data edit-comment-data comment-body save-done-cb)\n                            (comment-actions/add-comment activity-data comment-body parent-comment-uuid save-done-cb))]\n      (when (and (not (responsive/is-mobile-size?))\n                 (not edit-comment-data)\n                 (not dismiss-reply-cb)\n                 scroll-after-posting?\n                 (not (dom-utils/is-element-top-in-viewport? (sel1 [:div.stream-comments]) -40)))\n        (when-let [vertical-offset (-> s (rum/dom-node) (.-offsetTop) (- 72))]\n          (utils/after 10\n           #(.scrollTo js/window 0 vertical-offset))))\n      (when (fn? dismiss-reply-cb)\n        (dismiss-reply-cb false))\n      (when (fn? add-comment-cb)\n        (add-comment-cb updated-comment)))))\n\n(defn- add-comment-unique-class [s]\n  (str \"add-comment-box-container-\" @(::add-comment-id s)))\n\n(defn- me-options [s parent-uuid placeholder]\n  {:media-config [\"gif\"]\n   :comment-parent-uuid parent-uuid\n   :placeholder (or placeholder (if parent-uuid \"Reply\u2026\" \"Add a comment\u2026\"))\n   :use-inline-media-picker true\n   :static-positioned-media-picker true\n   :media-picker-initially-visible false\n   :media-picker-container-selector (str \"div.\" (add-comment-unique-class s) \" div.add-comment-box div.add-comment-internal div.add-comment-footer-media-picker\")})\n\n(defn- did-change [s]\n  (let [post-enabled (enable-post-button? s)\n        {:keys [activity-data parent-comment-uuid edit-comment-data]} (-> s :rum/args first)]\n    (multiple-lines? s)\n    (comment-actions/add-comment-change activity-data parent-comment-uuid (:uuid edit-comment-data) (add-comment-body s))\n    (compare-and-set! (::post-enabled s) (not post-enabled) post-enabled)\n    (when-let [throttled-did-change @(::did-change-throttled s)]\n      (.fire throttled-did-change))))\n\n(defn- should-focus? [s]\n  (let [add-comment-focus @(drv/get-ref s :add-comment-focus)\n        component-focus-id (focus-value s)]\n    (= add-comment-focus component-focus-id)))\n\n(defn- focus! [s]\n  (when-let [field (add-comment-field s)]\n    (.focus field)\n    (utils/after 0 #(utils/to-end-of-content-editable field))))\n\n(defn- maybe-focus [s]\n  (when (should-focus? s)\n    (focus! s)))\n\n(defn- close-reply-clicked [s]\n  (let [{:keys [activity-data parent-comment-uuid add-comment-focus-prefix\n         dismiss-reply-cb edit-comment-data]} (-> s :rum/args first)\n        dismiss-fn (fn []\n                    (comment-actions/add-comment-reset add-comment-focus-prefix (:uuid activity-data) parent-comment-uuid (:uuid edit-comment-data))\n                    (when-let [el (add-comment-field s)]\n                      (set! (.-innerHTML el)\n                       (or (-> s :rum/args first :edit-comment-data :body) au/empty-body-html)))\n                    (reset! (::collapsed s) true)\n                    (reset! (::multiple-lines s) false)\n                    (when (fn? dismiss-reply-cb)\n                      (dismiss-reply-cb true)))]\n    (if @(::post-enabled s)\n      (let [alert-data {:icon \"/img/ML/trash.svg\"\n                        :action \"cancel-comment-edit\"\n                        :message \"Are you sure you want to cancel? Your comment will be lost.\"\n                        :link-button-title \"Keep\"\n                        :link-button-cb #(alert-modal/hide-alert)\n                        :solid-button-style :red\n                        :solid-button-title \"Yes\"\n                        :solid-button-cb (fn []\n                                          (dismiss-fn)\n                                          (alert-modal/hide-alert))}]\n        (alert-modal/show-alert alert-data))\n      (dismiss-fn))))\n\n(rum/defcs add-comment < rum/static\n                         rum/reactive\n                         ;; Locals\n                         (rum/local nil ::me-media-utils/editor)\n                         (rum/local nil ::me-media-utils/media-picker-ext)\n                         (rum/local false ::me-media-utils/media-photo)\n                         (rum/local false ::me-media-utils/media-video)\n                         (rum/local false ::me-media-utils/media-attachment)\n                         (rum/local false ::me-media-utils/media-photo-did-success)\n                         (rum/local false ::me-media-utils/media-attachment-did-success)\n                         (rum/local false ::me-media-utils/showing-media-video-modal)\n                         (rum/local false ::me-media-utils/showing-gif-selector)\n                         ;; Image upload lock\n                         (rum/local false ::me-media-utils/upload-lock)\n                         (rum/local \"\" ::add-comment-id)\n                         (rum/local false ::comment-reply-to-reset)\n                         ;; Derivatives\n                         (drv/drv :media-input)\n                         (drv/drv :add-comment-focus)\n                         (drv/drv :add-comment-data)\n                         (drv/drv :mention-users)\n                         (drv/drv :attachment-uploading)\n                         (drv/drv :users-info-hover)\n                         (drv/drv :current-user-data)\n                         (drv/drv :follow-publishers-list)\n                         (drv/drv :followers-publishers-count)\n                         (drv/drv :comment-reply-to)\n                         ;; Locals\n                         (rum/local nil ::add-comment-key)\n                         (rum/local true ::collapsed)\n                         (rum/local false ::multiple-lines)\n                         (rum/local false ::post-enabled)\n                         (rum/local au/empty-body-html ::initial-add-comment)\n                         ; (rum/local false ::did-change)\n                         (rum/local false ::last-add-comment-focus)\n                         (rum/local 10000 ::inline-reply-max-width)\n                         (rum/local nil ::did-change-throttled)\n                         ;; Mixins\n                         ui-mixins/first-render-mixin\n                         (mention-mixins/oc-mentions-hover)\n\n                         (ui-mixins/on-window-click-mixin (fn [s e]\n                          (when (and @(::me-media-utils/showing-media-video-modal s)\n                                     (not (.contains (.-classList (.-target e)) \"media-video\"))\n                                     (not (utils/event-inside? e (rum/ref-node s :video-container))))\n                            (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil)\n                            (reset! (::me-media-utils/showing-media-video-modal s) false))\n                          (when (and @(::me-media-utils/showing-gif-selector s)\n                                     (not (.contains (.-classList (.-target e)) \"media-gif\"))\n                                     (not (utils/event-inside? e (sel1 [:div.giphy-picker]))))\n                            (me-media-utils/media-gif-add s @(::me-media-utils/media-picker-ext s) nil)\n                            (reset! (::me-media-utils/showing-gif-selector s) false))))\n                         {:will-mount (fn [s]\n                          (reset! (::add-comment-id s) (utils/activity-uuid))\n                          (let [{:keys [activity-data parent-comment-uuid edit-comment-data collapse? add-comment-did-change]} (first (:rum/args s))\n                                add-comment-key (dis/add-comment-string-key (:uuid activity-data) parent-comment-uuid (:uuid edit-comment-data))\n                                activity-add-comment-data (add-comment-data s add-comment-key)\n                                initial-body (or activity-add-comment-data\n                                                 (:body edit-comment-data)\n                                                 au/empty-body-html)]\n                            (reset! (::add-comment-key s) add-comment-key)\n                            (reset! (::initial-add-comment s) initial-body)\n                            (reset! (::collapsed s) (and collapse?\n                                                         (au/empty-body? initial-body)))\n                            (reset! (::post-enabled s) (boolean (and (seq activity-add-comment-data)\n                                                                     (not= activity-add-comment-data (:body edit-comment-data))\n                                                                     (not (au/empty-body? activity-add-comment-data)))))\n                            (when (fn? add-comment-did-change)\n                              (reset! (::did-change-throttled s) (Throttle. add-comment-did-change 2000))))\n                          s)\n                          :did-mount (fn [s]\n                           (let [props (first (:rum/args s))\n                                 me-opts (me-options s (:parent-comment-uuid props) (:add-comment-placeholder props))\n                                 add-comment-internal (rum/ref-node s :add-comment-internal)\n                                 bounding-box (.getBoundingClientRect add-comment-internal)\n                                 computed-style (.getComputedStyle js/window add-comment-internal)\n                                 max-width (- (:internal-max-width props) 140)]\n                             (me-media-utils/setup-editor s did-change me-opts)\n                             (reset! (::inline-reply-max-width s) max-width))\n                           (maybe-focus s)\n                           (multiple-lines? s)\n                           (utils/after 2500 #(js/emojiAutocomplete))\n                           s)\n                          :will-update (fn [s]\n                           (let [props (-> s :rum/args first)\n                                 reply-to @(drv/get-ref s :comment-reply-to)\n                                 focus-val (focus-value s)\n                                 {:keys [focus body] :as r} (get reply-to focus-val)]\n                             (when (string? body)\n                               (let [body-field (add-comment-field s)\n                                     current-body (.-innerHTML body-field)\n                                     is-empty? (au/empty-body? current-body)\n                                     quoted-body (str \"<blockquote>\" body \"</blockquote>\" au/empty-body-html)\n                                     last-element (when-not is-empty?\n                                                    (.-lastElementChild body-field))\n                                     last-element-tag (when last-element\n                                                        (.toLowerCase (.-nodeName last-element)))\n                                     next-body (cond is-empty?\n                                                     quoted-body\n                                                     (and last-element\n                                                          (or (= last-element-tag \"blockquote\")\n                                                              (and (= last-element-tag \"blockquote\")\n                                                                   (not (.-isContentEditable last-element)))))\n                                                     (str current-body au/empty-body-html quoted-body)\n                                                     :else\n                                                     (str current-body quoted-body))]\n                                 ;; If focus is required let's make sure the component force the focus\n                                 ;; in did-update\n                                 (when focus\n                                   (reset! (::last-add-comment-focus s) nil))\n                                 (set! (.-innerHTML body-field) next-body)\n                                 (multiple-lines? s)\n                                 (comment-actions/add-comment-change (:activity-data props) (:parent-comment-uuid props) (:uuid (:edit-comment-data props)) (add-comment-body s))\n                                 (reset! (::collapsed s) false)\n                                 (reset! (::post-enabled s) true)\n                                 (comment-actions/reset-reply-to focus-val))))\n                           (let [props (first (:rum/args s))]\n                             (let [data @(drv/get-ref s :media-input)\n                                   video-data (:media-video data)]\n                                (when (and @(::me-media-utils/media-video s)\n                                           (or (= video-data :dismiss)\n                                               (map? video-data)))\n                                  (when (or (= video-data :dismiss)\n                                            (map? video-data))\n                                    (reset! (::me-media-utils/media-video s) false)\n                                    (dis/dispatch! [:update [:media-input] #(dissoc % :media-video)]))\n                                  (if (map? video-data)\n                                    (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) video-data)\n                                    (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil)))))\n                           s)\n                          :did-update (fn [s]\n                           (let [add-comment-focus @(drv/get-ref s :add-comment-focus)]\n                             (when (not= @(::last-add-comment-focus s) add-comment-focus)\n                               (maybe-focus s)\n                               (reset! (::last-add-comment-focus s) add-comment-focus)))\n                           s)\n                          :did-remount (fn [o s]\n                           (let [props (first (:rum/args s))\n                                 me-opts (me-options s (:parent-comment-uuid props) (:add-comment-placeholder props))]\n                             (me-media-utils/setup-editor s did-change me-opts))\n                           s)\n                          :will-unmount (fn [s]\n                           (when @(::me-media-utils/editor s)\n                             (.destroy @(::me-media-utils/editor s))\n                             (reset! (::me-media-utils/editor s) nil))\n                           (when-let [throttled-did-change @(::did-change-throttled s)]\n                             (.dispose throttled-did-change))\n                           s)}\n  [s {:keys [activity-data parent-comment-uuid dismiss-reply-cb add-comment-focus-prefix internal-max-width\n             edit-comment-data scroll-after-posting? add-comment-cb collapse? add-comment-did-change row-index]}]\n  (let [_add-comment-data (drv/react s :add-comment-data)\n        _media-input (drv/react s :media-input)\n        _mention-users (drv/react s :mention-users)\n        _users-info-hover (drv/react s :users-info-hover)\n        _current-user-data (drv/react s :current-user-data)\n        _follow-publishers-list (drv/react s :follow-publishers-list)\n        _followers-publishers-count (drv/react s :followers-publishers-count)\n        _reply-to (drv/react s :comment-reply-to)\n        current-user-data (drv/react s :current-user-data)\n        container-class (add-comment-unique-class s)\n        is-mobile? (responsive/is-mobile-size?)\n        attachment-uploading (drv/react s :attachment-uploading)\n        uploading? (and attachment-uploading\n                        (= (:comment-parent-uuid attachment-uploading) parent-comment-uuid))\n        add-comment-class (str \"add-comment-\" @(::add-comment-id s))\n        multiple-lines @(::multiple-lines s)\n        collapsed? (and @(::collapsed s)\n                        (not multiple-lines))]\n    [:div.add-comment-box-container\n      {:class (utils/class-set {container-class true\n                                (str \"add-comment-box-\" add-comment-focus-prefix) true\n                                :collapsed-box collapsed?\n                                :inline-reply (not multiple-lines)})\n       :on-click (when (or collapsed?\n                           (not multiple-lines))\n                   #(when-not (= (rum/ref-node s \"editor-node\") (.-activeElement js/document))\n                      (focus! s)))}\n      [:div.add-comment-box\n        [:div.add-comment-internal\n          {:ref :add-comment-internal\n           :on-click #(when ())}\n          [:div.add-comment.emoji-autocomplete.emojiable.oc-mentions.oc-mentions-hover.editing\n           {:ref \"editor-node\"\n            :data-row-index row-index\n            :class (utils/class-set {add-comment-class true\n                                     :medium-editor-placeholder-hidden (and collapse?\n                                                                            (not collapsed?))\n                                     :medium-editor-placeholder-relative true\n                                     :medium-editor-element true\n                                     utils/hide-class true\n                                     dom-utils/onload-recalc-measure-class true})\n            :on-focus #(focus s)\n            :on-blur #(blur s)\n            :on-key-down (fn [e]\n                          (let [add-comment-node (rum/ref-node s \"editor-node\")]\n                            (when (and (= (.-key e) \"Escape\")\n                                       (= (.-activeElement js/document) add-comment-node))\n                              (if edit-comment-data\n                                (when (fn? dismiss-reply-cb)\n                                  (dismiss-reply-cb true))\n                                (.blur add-comment-node)))\n                            (when (and (= (.-activeElement js/document) add-comment-node)\n                                       (= (.-key e) \"Enter\"))\n                              (if (.-metaKey e)\n                                (send-clicked e s)\n                                (compare-and-set! (::multiple-lines s) false true)))))\n            :content-editable true\n            :dangerouslySetInnerHTML #js {\"__html\" @(::initial-add-comment s)}}]\n          [:div.add-comment-footer.group\n            [:button.mlb-reset.close-reply-bt\n              {:on-click #(close-reply-clicked s)\n               :data-toggle (if (responsive/is-tablet-or-mobile?) \"\" \"tooltip\")\n               :data-placement \"top\"\n               :data-container \"body\"\n               :title (if edit-comment-data \"Cancel edit\" \"Cancel\")}]\n            (when uploading?\n              [:div.upload-progress\n                (small-loading)\n                [:span.attachment-uploading\n                  (str \"Uploading \" (or (:progress attachment-uploading) 0) \"%...\")]])\n            (emoji-picker {:add-emoji-cb #(did-change s)\n                           :width 24\n                           :height 24\n                           :position \"bottom\"\n                           :default-field-selector (str \"div.\" add-comment-class)\n                           :container-selector (str \"div.\" add-comment-class)})\n            (when @(::me-media-utils/showing-gif-selector s)\n              (giphy-picker {:fullscreen false\n                             :pick-emoji-cb (fn [gif-obj]\n                                             (reset! (::me-media-utils/showing-gif-selector s) false)\n                                             (me-media-utils/media-gif-add s @(::me-media-utils/media-picker-ext s) gif-obj))}))\n            (when @(::me-media-utils/showing-media-video-modal s)\n              [:div.video-container\n                {:ref :video-container}\n                (media-video-modal {:fullscreen false\n                                    :dismiss-cb #(do\n                                                  (me-media-utils/media-video-add s @(::me-media-utils/media-picker-ext s) nil)\n                                                  (reset! (::me-media-utils/showing-media-video-modal s) false))\n                                    :offset-element-selector [(keyword (str \"div.\" container-class \" div.add-comment-box\"))]\n                                    :outer-container-selector [(keyword (str \"div.\" container-class))]})])\n            [:div.add-comment-footer-media-picker.group]\n            [:button.mlb-reset.send-btn\n              {:on-click #(send-clicked % s)\n               :disabled (not @(::post-enabled s))\n               :class (when uploading? \"separator-line\")}\n              (if edit-comment-data\n                \"Save\"\n                \"Reply\")]]]]]))\n"]}