{"version":3,"sources":["oc/web/actions/contributions.cljs"],"mappings":";AAeA,AAAA,AAAOA,AAAcC;AAArB,AACE,AAAM,AAACC;AAAP,AACE,AAAMC,AAAY,AAACC,AAAS,AAAA,AAACC,AAAgBJ;AACvCK,AAAS,AAACC;AACVC,AAAW,AAAA,AAASF;AACpBG,AAAc,AAACC,AAAO,AAAA,AAACL,AAAUG,AAAY,AAAA,AAACH,AAAUG;AAH9D,AAIE,AAACG,AAAoB,AAAKC;AAAL,AACnB,AAAMC,AAAY,AAACR,AAAII,AAAcN;AAArC,AACE,AAAAW,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAoCb,AAAYU;AAAhD,AAAA,AAAA;;AACA,AAACI,AAAmBJ;;;AAR5B;;;AAUF,AAAA,AAAOK,AAAqBC;AAA5B,AACE,AAACC,AAAE,AAACC,AAA8BF;;AAEpC;;;AAAA,AAAOG,AAEJH,AAAYI;AAFf,AAGE,AAAMC,AAAQ,AAAA,AAAU,AAACjB;AAAzB,AACE,AAAM,AAAAkB,AAAKD;AAAL,AAAA,AAAAC;AACK,AAACC,AAAI,AAAA,AAAQH;;AADlBE;;;AAAN,AAEE,AAAME,AAAS,AAAA,AAACtB,AAAU,AAAA,AAAQkB;AAC5BK,AAAY,AAACC,AAA6BF,AAAS,AAACG;AAD1D,AAEE,AAAM,AAACJ,AAAIE;AAAX,AACE,AAACG,AAAwBH;;AAD3B;;;AAJJ;;;AAOJ,AAAA,AAAOI,AAA2BC,AAASd,AAAYe,AAAUX;AAAjE,AACE,AAAMY,AAAmB,AAACjB,AAAoBC;AACxCK,AAAQ,AAAA,AAAU,AAACjB;AADzB,AAEE,AAAM4B;AAAN,AACE,AAAMX;AAAN,AAEE,AAAM,AAACJ,AAAE,AAACC,AAA8B,AAAA,AAAY,AAAA,AAAaE;AAAjE,AAEE,AAACvB,AAAa,AAAA,AAAQ,AAAA,AAAauB;;AAFrC;;AAIA,AAACD,AAAoBH,AAAY,AAAA,AAAaI;;AANhD;;AADF;;AAQA,AAAA,AAAA,AAACa,AAAyCH,AAASd,AAAYe,AAAUX;;AAE7E,AAAA,AAAAc,AAAOM,AAA0BV,AAASd,AAAYe;AAAtD,AAAA,AAAAI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAwEM;AAAxE,AAAAF,AAAAJ,AAAA,AAA+EO;AAA/E,AAAAH,AAAAJ,AAAA,AAAoFQ;AAApF,AACE,AAAI,AAAA,AAAC1B,AAAEwB;AACL,AAACG;;AACD,AAACf,AAA0BC,AAASd,AAAYe,AAAU,AAAA,AAAIY,AAAQ,AAACE,AAAWH;;;AAEtF,AAAA,AAAOI,AAAwB3C,AAASa,AAAY+B;AAApD,AACE,AAACC,AAAsBD,AACtB,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAd,AAAA,AAAAc,AAAA,AAAA,AAAA,AAAA,AAAAb,AAAAC,AAAAY,AAAAA;AAAAA,AAAsCC;AAAtC,AAAAZ,AAAAW,AAAA,AAAaT;AAAb,AAAAF,AAAAW,AAAA,AAAoBR;AAApB,AAAAH,AAAAW,AAAA,AAAyBP;AAAzB,AACE,AAACH,AAAyB,AAAA,AAAOrC,AAAUa,AAAYoC,AAAyBD;;;AAErF,AAAA,AAAOE,AAAoBlD,AAASa;AAApC,AACE,AAAA,AAAA,AAAA,AAAA,AAACsC,AAAe,AAAA,AAAQnD,AAAmDa;;AAE7E,AAAA,AAAA,AAAAuC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFzC;AADJ,AACiB,AAAC2C,AAAkB,AAACvD,AAAcY;;;AADnD,AAAA,AAAA,AAAMyC,AAGFtD,AAASa;AAHb,AAIE,AAAA4C,AAAwB,AAACP,AAAmBlD,AAASa;AAArD,AAAA,AAAA4C;AAAA,AAAA,AAAAA,AAAWb;AAAX,AACE,AAACD,AAAuB3C,AAASa,AAAY+B;;AAD/C;;;;AAJF,AAAA,AAAA,AAAMU;;AAAN,AAOA,AAAA;;;;AAAA,AAAAF,AAAMO;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMI,AAGH9C;AAHH,AAGgB,AAAC+C,AAAsB,AAAC3D,AAAcY;;;AAHtD,AAAA,AAAA,AAAM8C,AAIH3D,AAASa;AAJZ,AAKE,AAAAgD,AAAuB,AAACC,AAAuBjD;AAA/C,AAAA,AAAAgD;AAAA,AAAAA,AAAU5C;AAAV,AAAA,AAAA4C,AACuB,AAAA,AAACV,AAAe,AAAA,AAAQlC;AAD/C,AAAA,AAAA4C;AAAA,AAAAA,AACUE;AADV,AAEE,AAACpB,AAAuB3C,AAASa,AAAYkD;;AAC7C,AAACP,AAAkBxD,AAASa;;;AAA5B,AAAC2C,AAAkBxD,AAASa;;;;AARhC,AAAA,AAAA,AAAM8C;;AAAN,AAUA,AAAA,AAAAK,AAAOE,AAA2BvC,AAASd,AAAYe,AAAUuC;AAAjE,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAA,AAAA7B,AAAA6B,AAAA,AAAmFzB;AAAnF,AAAAJ,AAAA6B,AAAA,AAA2F1B;AAA3F,AACE,AAAMtB,AAAa,AAAA,AAAA,AAAMuB,AAAQ,AAACE,AAAWH;AAA7C,AACE,AAAMC;AAAN,AACE,AAAM,AAAC1B,AAAE,AAACC,AAA8B,AAAA,AAAY,AAAA,AAAaE;AAAjE,AAEE,AAACvB,AAAa,AAAA,AAAQ,AAAA,AAAauB;;AAFrC;;AAIA,AAACD,AAAoBH,AAAY,AAAA,AAAaI;;AALhD;;AAMA,AAAA,AAAA,AAACa,AAA0CH,AAASd,AAAYe,AAC/DuC,AAAU,AAAA,AAAA,AAAM3B,AAAQ,AAAA,AAAavB;;AAE1C,AAAA,AAAMmD,AAAoBC,AAAUF;AAApC,AACE,AAAMxC,AAAS,AAAC2C;AACVzD,AAAY,AAACE;AADnB,AAEE,AAACwD,AAAoBF,AAAUF,AAAU,AAACK,AAAQN,AAA0BvC,AAASd,AAAYoC,AAAyBkB;;AAC1H,AAAA,AAAA,AAACrC,AAAmCH,AAASd,AAAYoC;;AAI7D,AAAA,AAAMwB;AAAN,AACE,AAAA,AAACC,AACC,AAAKC;AAAL,AACE,AAAM,AAAC5D;AAAP,AACE,AAAM6D,AAAY,AAAA,AAAOD;AACnBE,AAAc,AAAA,AAAUD;AACxBE,AAAY,AAAA,AAAcF;AAC1BG,AAAc,AAACC,AAAkB,AAACV,AAAsBO;AAH9D,AAKE,AAAM,AAAAI,AAAI,AAAA,AAACnE,AAAEgE;AAAP,AAAA,AAAAG;AAAAA;;AACI,AAAA9D,AAAK,AAAA+D,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAoBJ,AAAAA;;AAAzB,AAAA,AAAA3D;AACK,AAACL,AAAE,AAACC,AACD,AAAA,AAAA,AAAA,AAAIgE;;AAFZ5D;;;;AADV,AAIE,AAACqC,AAAkB,AAACzC;;AAJtB;;;AANJ","names":["oc.web.actions.contributions/watch-boards","posts-data","oc.web.lib.jwt/jwt","board-slugs","cljs.core.distinct","cljs.core.map","org-data","oc.web.dispatcher.org_data","org-boards","org-board-map","cljs.core/zipmap","oc.web.ws.interaction-client/board-unwatch","rep","board-uuids","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.ws.interaction_client.boards_watch","oc.web.actions.contributions/is-currently-shown?","author-uuid","cljs.core._EQ_","oc.web.dispatcher.current_contributions_id","oc.web.actions.contributions/request-reads-count","contrib-data","member?","and__4115__auto__","cljs.core/seq","item-ids","cleaned-ids","oc.web.utils.activity/clean-who-reads-count-ids","oc.web.dispatcher/activity-read-data","oc.web.api/request-reads-count","oc.web.actions.contributions/contributions-get-success","org-slug","sort-type","is-currently-shown","oc.web.dispatcher/dispatch!","p__42470","map__42471","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.web.actions.contributions/contributions-get-finish","status","body","success","oc.web.router/redirect-404!","oc.web.lib.json/json->cljs","oc.web.actions.contributions/contributions-real-get","contrib-link","oc.web.api/get-contributions","p__42473","map__42474","resp","oc.web.dispatcher/recently-posted-sort","oc.web.actions.contributions/contributions-link","oc.web.lib.utils.link_for","var_args","G__42477","oc.web.actions.contributions/contributions-get","js/Error","oc.web.actions.contributions.contributions_get","temp__5735__auto__","G__42479","oc.web.actions.contributions/contributions-refresh","oc.web.actions.contributions.contributions_refresh","temp__33762__auto__","oc.web.dispatcher.contributions_data","refresh-link","p__42480","map__42481","oc.web.actions.contributions/contributions-more-finish","direction","oc.web.actions.contributions/contributions-more","more-link","oc.web.dispatcher.current_org_slug","oc.web.api/load-more-items","cljs.core.partial","oc.web.actions.contributions/subscribe","oc.web.ws.change-client/subscribe","data","change-data","activity-uuid","change-type","activity-data","oc.web.dispatcher.activity_data","or__4126__auto__","fexpr__42488"],"sourcesContent":["(ns oc.web.actions.contributions\n  (:require-macros [if-let.core :refer (if-let* when-let*)])\n  (:require [clojure.string :as s]\n            [defun.core :refer (defun)]\n            [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.activity :as au]\n            [oc.web.ws.change-client :as ws-cc]\n            [oc.web.ws.interaction-client :as ws-ic]\n            [oc.web.lib.json :refer (json->cljs cljs->json)]))\n\n(defn- watch-boards [posts-data]\n  (when (jwt/jwt) ; only for logged in users\n    (let [board-slugs (distinct (map :board-slug posts-data))\n          org-data (dis/org-data)\n          org-boards (:boards org-data)\n          org-board-map (zipmap (map :slug org-boards) (map :uuid org-boards))]\n      (ws-ic/board-unwatch (fn [rep]\n        (let [board-uuids (map org-board-map board-slugs)]\n          (timbre/debug \"Watching on socket \" board-slugs board-uuids)\n          (ws-ic/boards-watch board-uuids)))))))\n\n(defn- is-currently-shown? [author-uuid]\n  (= (dis/current-contributions-id) author-uuid))\n\n(defn- request-reads-count\n  \"Request the reads count data only for the items we don't have already.\"\n  [author-uuid contrib-data]\n  (let [member? (:member? (dis/org-data))]\n    (when (and member?\n               (seq (:items contrib-data)))\n      (let [item-ids (map :uuid (:items contrib-data))\n            cleaned-ids (au/clean-who-reads-count-ids item-ids (dis/activity-read-data))]\n        (when (seq cleaned-ids)\n          (api/request-reads-count cleaned-ids))))))\n\n(defn- contributions-get-success [org-slug author-uuid sort-type contrib-data]\n  (let [is-currently-shown (is-currently-shown? author-uuid)\n        member? (:member? (dis/org-data))]\n    (when is-currently-shown\n      (when member?\n        ;; only watch the boards of the posts of the contributor\n        (when (= (dis/current-contributions-id) (:author-id (:collection contrib-data)))\n          ; (request-reads-count (->> contrib-data :collection :items (map :uuid)))\n          (watch-boards (:items (:collection contrib-data))))\n        ;; Retrieve reads count if there are items in the loaded section\n        (request-reads-count author-uuid (:collection contrib-data))))\n    (dis/dispatch! [:contributions-get/finish org-slug author-uuid sort-type contrib-data])))\n\n(defn- contributions-get-finish [org-slug author-uuid sort-type {:keys [status body success]}]\n  (if (= status 404)\n    (router/redirect-404!)\n    (contributions-get-success org-slug author-uuid sort-type (if success (json->cljs body) {}))))\n\n(defn- contributions-real-get [org-data author-uuid contrib-link]\n  (api/get-contributions contrib-link\n   (fn [{:keys [status body success] :as resp}]\n     (contributions-get-finish (:slug org-data) author-uuid dis/recently-posted-sort resp))))\n\n(defn- contributions-link [org-data author-uuid]\n  (utils/link-for (:links org-data) \"partial-contributions\" {} {:author-uuid author-uuid}))\n\n(defn contributions-get\n  ([author-uuid] (contributions-get (dis/org-data) author-uuid))\n\n  ([org-data author-uuid]\n  (when-let [contrib-link (contributions-link org-data author-uuid)]\n    (contributions-real-get org-data author-uuid contrib-link))))\n\n(defn contributions-refresh\n \"If the user is looking at a contributions view we need to reload all the items that are visible right now.\n  Instead, if the user is looking at another view we can just reload the first page.\"\n ([author-uuid] (contributions-refresh (dis/org-data) author-uuid))\n ([org-data author-uuid]\n  (if-let* [contrib-data (dis/contributions-data author-uuid)\n            refresh-link (utils/link-for (:links contrib-data) \"refresh\")]\n    (contributions-real-get org-data author-uuid refresh-link)\n    (contributions-get org-data author-uuid))))\n\n(defn- contributions-more-finish [org-slug author-uuid sort-type direction {:keys [success body]}]\n  (let [contrib-data (when success (json->cljs body))]\n    (when success\n      (when (= (dis/current-contributions-id) (:author-id (:collection contrib-data)))\n        ;; only watch the boards of the posts of the contributor\n        (watch-boards (:items (:collection contrib-data))))\n      ;; Retrieve reads count if there are items in the loaded section\n      (request-reads-count author-uuid (:collection contrib-data)))\n    (dis/dispatch! [:contributions-more/finish org-slug author-uuid sort-type\n     direction (when success (:collection contrib-data))])))\n\n(defn contributions-more [more-link direction]\n  (let [org-slug (dis/current-org-slug)\n        author-uuid (dis/current-contributions-id)]\n    (api/load-more-items more-link direction (partial contributions-more-finish org-slug author-uuid dis/recently-posted-sort direction))\n    (dis/dispatch! [:contributions-more org-slug author-uuid dis/recently-posted-sort])))\n\n;; Change service actions\n\n(defn subscribe []\n  (ws-cc/subscribe :item/change\n    (fn [data]\n      (when (dis/current-contributions-id)\n        (let [change-data (:data data)\n              activity-uuid (:item-id change-data)\n              change-type (:change-type change-data)\n              activity-data (dis/activity-data (dis/current-org-slug) activity-uuid)]\n          ;; On update or delete of a post from the currently shown user\n          (when (or (= change-type :add)\n                    (and (#{:update :delete} change-type)\n                         (= (dis/current-contributions-id)\n                            (-> activity-data :publisher :user-id))))\n            (contributions-get (dis/current-contributions-id))))))))"]}