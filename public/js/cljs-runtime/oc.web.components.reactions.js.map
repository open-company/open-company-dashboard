{"version":3,"sources":["oc/web/components/reactions.cljs"],"mappings":"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","names":["oc.web.components.reactions/default-reaction-number","rum.core/build-defcs","p__45992","map__45993","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sablono.interpreter/interpret","oc.web.components.reactions/reactions","rum.core.local","oc.web.mixins.ui/refresh-tooltips-mixin","p1__45990#","oc.web.mixins.ui.on_click_out","cljs.core/reset!","s","entity-data","hide-picker","optional-activity-data","max-reactions","did-react-cb","only-thumb?","filtered-reactions","p1__45991#","cljs.core.filter","cljs.core._EQ_","reactions-max-count","or__4126__auto__","reactions-data","cljs.core/vec","cljs.core.take","reactions-loading","react-link","oc.web.lib.utils.link_for","should-show-picker?","and__4115__auto__","cljs.core/not","cljs.core/count","is-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","cljs.core/seq","iter__4529__auto__","s__45998","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46000","cljs.core/chunk-buffer","i__45999","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45997","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","cljs.core.range","reaction-data","is-loading","oc.web.lib.utils/in?","reacted","reaction-authors","multiple-reaction-authors?","attribution-start","attribution-end","clojure.string.join","cljs.core/butlast","cljs.core/last","reaction-attribution","cljs.core/empty?","read-only-reaction","r","cljs.core.merge","oc.web.lib.utils/class-set","oc.web.lib.utils/hide-class","this","oc.web.lib.utils/remove-tooltips","js/$","e","cljs.core/fn?","oc.web.actions.comment/comment-reaction-toggle","oc.web.actions.reaction/reaction-toggle","oc.shared.useragent/safari?","cljs.core/deref","oc.web.lib.utils/is-test-env?","oc.web.lib.react-utils/build","js/module$node_modules$emoji_mart$dist$index","emoji","event","oc.web.utils.reaction/can-pick-reaction?","goog.object/get","oc.web.actions.comment/react-from-picker","oc.web.actions.reaction/react-from-picker","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.reactions\n  (:require-macros [dommy.core :refer (sel1)]\n                   [if-let.core :refer (when-let*)])\n  (:require [rum.core :as rum]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.shared.useragent  :as ua]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.lib.react-utils :as react-utils]\n            [oc.web.utils.reaction :as reaction-utils]\n            [oc.web.actions.comment :as comment-actions]\n            [oc.web.actions.reaction :as reaction-actions]\n            [oc.web.mixins.ui :as ui-mixins]\n            [goog.object :as gobj]\n            [\"emoji-mart\" :as emoji-mart]))\n\n(def default-reaction-number 3)\n\n(rum/defcs reactions < (rum/local false ::show-picker)\n                       (rum/local false ::mounted)\n                       ui-mixins/refresh-tooltips-mixin\n                       (ui-mixins/on-click-out #(reset! (::show-picker %1) false))\n  [s {:keys [entity-data hide-picker optional-activity-data max-reactions did-react-cb only-thumb?]}]\n  ;; optional-activity-data: is passed only when rendering the list of reactions for a comment\n  ;; in that case entity-data is the comment-data. When optional-activity-data is nil it means\n  ;; entity-data is the activity-data\n  (let [filtered-reactions (if only-thumb?\n                             (filter #(= (:reaction %) \"\ud83d\udc4d\") (:reactions entity-data))\n                             (:reactions entity-data))\n        reactions-max-count (if only-thumb? 1 (or max-reactions default-reaction-number))\n        reactions-data (vec (take reactions-max-count filtered-reactions))\n        reactions-loading (:reactions-loading entity-data)\n        react-link (utils/link-for (:links entity-data) \"react\")\n        should-show-picker? (and (not only-thumb?)\n                                 (not hide-picker)\n                                 react-link\n                                 (< (count reactions-data) reactions-max-count))\n        is-mobile? (responsive/is-tablet-or-mobile?)]\n    ;; If there are reactions to render or there is at least the link to add a reaction from the picker\n    (when (or (seq reactions-data)\n              should-show-picker?)\n      [:div.reactions\n        [:div.reactions-list.group\n          (when (seq reactions-data)\n            (for [idx (range (count reactions-data))\n                  :let [reaction-data (get reactions-data idx)\n                        is-loading (utils/in? reactions-loading (:reaction reaction-data))\n                        reacted (:reacted reaction-data)\n                        reaction-authors (:authors reaction-data)\n                        multiple-reaction-authors? (> (count reaction-authors) 1)\n                        attribution-start (if multiple-reaction-authors? \"Reactions\" \"Reaction\")\n                        attribution-end (if multiple-reaction-authors?\n                                          (str (clojure.string/join \", \" (butlast reaction-authors))\n                                               \" and \"\n                                               (last reaction-authors))\n                                          (first reaction-authors))\n                        reaction-attribution (if (empty? reaction-authors)\n                                                \"\"\n                                                (str attribution-start \" by \" attribution-end))\n                        read-only-reaction (not (utils/link-for\n                                                 (:links reaction-data)\n                                                 \"react\"\n                                                 (if reacted \"DELETE\" \"PUT\")))\n                        r (if is-loading\n                            (merge reaction-data {:count (if reacted\n                                                          (dec (:count reaction-data))\n                                                          (inc (:count reaction-data)))\n                                                  :reacted (not reacted)})\n                            reaction-data)]]\n\n              [:button.reaction-btn.btn-reset\n                {:key (str \"reaction-\" (:uuid entity-data) \"-\" idx)\n                 :class (utils/class-set {:reacted (:reacted r)\n                                          :can-react (not read-only-reaction)\n                                          :has-reactions (pos? (:count r))\n                                          :only-thumb only-thumb?\n                                          utils/hide-class true})\n                 :on-mouse-leave (when-not is-mobile?\n                                   #(this-as this\n                                     (utils/remove-tooltips)\n                                     (.tooltip (js/$ this))))\n                 :title reaction-attribution\n                 :data-placement \"top\"\n                 :data-container \"body\"\n                 :data-toggle (when-not is-mobile? \"tooltip\")\n                 :on-click (fn [e]\n                             (when (and (not is-loading) (not read-only-reaction))\n                               (when (fn? did-react-cb)\n                                 (did-react-cb))\n                               (if optional-activity-data\n                                (comment-actions/comment-reaction-toggle optional-activity-data entity-data r (not reacted))\n                                (reaction-actions/reaction-toggle entity-data r (not reacted)))))}\n                [:span.reaction\n                  {:class (utils/class-set {:has-count (pos? (:count r))\n                                            :safari ua/safari?})}\n                  (if only-thumb?\n                    [:span.thumb-up-icon]\n                    (:reaction r))]\n                [:div.count\n                  (:count r)]]))\n          (when should-show-picker?\n            [:button.reaction-btn.btn-reset.can-react.reaction-picker\n              {:key (str \"reaction-\" (:uuid entity-data) \"-picker\")\n               :on-click #(reset! (::show-picker s) (not @(::show-picker s)))\n               :data-toggle (when-not is-mobile? \"tooltip\")\n               :data-placement \"top\"\n               :data-container \"body\"\n               :title \"Pick a reaction\"}\n              [:span.reaction]])]\n       (when @(::show-picker s)\n         [:div.reactions-picker-container\n           (when (responsive/is-tablet-or-mobile?)\n             [:button.mlb-reset.dismiss-mobile-picker\n               {:on-click #(reset! (::show-picker s) false)}\n               \"Cancel\"])\n           (when-not (utils/is-test-env?)\n             (react-utils/build (.-Picker emoji-mart)\n               {:native true\n                :autoFocus true\n                :onClick (fn [emoji event]\n                           (when (reaction-utils/can-pick-reaction? (gobj/get emoji \"native\") reactions-data)\n                             (when (fn? did-react-cb)\n                               (did-react-cb))\n                             (if optional-activity-data\n                               (comment-actions/react-from-picker optional-activity-data entity-data (gobj/get emoji \"native\"))\n                               (reaction-actions/react-from-picker entity-data (gobj/get emoji \"native\"))))\n                           (reset! (::show-picker s) false))}))])])))\n"]}