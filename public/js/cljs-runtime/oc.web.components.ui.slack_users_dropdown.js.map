{"version":3,"sources":["oc/web/components/ui/slack_users_dropdown.cljs"],"mappings":"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","names":["oc.web.components.ui.slack-users-dropdown/check-user","user","s","or__4126__auto__","cuerdas.core/includes?","cuerdas.core/lower","oc.web.components.ui.slack-users-dropdown/filter-users","users","look-for","p1__46771#","cljs.core/filterv","oc.web.components.ui.slack-users-dropdown/setup-sorted-users","cljs.core/deref","roster-data","org.martinklepsch.derivatives/get-ref","all-users","p1__46772#","cljs.core._EQ_","team-roster","cljs.core/vals","cljs.core/group-by","sorted-team-roster","cljs.core.map","team","p1__46773#","cljs.core.sort_by","all-sorted-users","cljs.core/vec","cljs.core.apply","cljs.core/concat","cljs.core.not_EQ_","cljs.core/reset!","oc.web.components.ui.slack-users-dropdown/get-filtered-sorted-users","filter-fn","cljs.core/first","cljs.core/fn?","cljs.core.filter","rum.core/build-defcs","p__46786","map__46788","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/create-element","p1__46783#","sablono.interpreter/interpret","oc.web.components.ui.slack-users-dropdown/slack-users-dropdown","rum.core.local","rum.core/reactive","oc.web.mixins.ui/on-window-click-mixin","e","and__4115__auto__","cljs.core/not","oc.web.lib.utils/event-inside?","js/document","map__46802","on-blur","org.martinklepsch.derivatives.drv","initial-value","oc.web.actions.team/teams-get-if-needed","disabled","on-change","on-intermediate-change","on-focus","data","_","org.martinklepsch.derivatives/react","slack-orgs","slack-orgs-map","cljs.core/zipmap","cljs.core/count","oc.web.lib.utils/after","G__46792","p1__46784#","next-value","oc.web.lib.utils/event-stop","iter__4529__auto__","s__46798","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46800","cljs.core/chunk-buffer","i__46799","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46797","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","oc.lib.user.name_for","oc.web.components.ui.user-avatar/user-avatar-image","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.slack-users-dropdown\n  (:require [rum.core :as rum]\n            [dommy.core :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [cuerdas.core :as string]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.mixins.ui :refer (on-window-click-mixin)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(defn check-user [user s]\n  (or (string/includes? (string/lower (:name user)) s)\n      (string/includes? (string/lower (:first-name user)) s)\n      (string/includes? (string/lower (:last-name user)) s)\n      (string/includes? (string/lower (:email user)) s)))\n\n(defn filter-users [users s]\n  (let [look-for (string/lower s)]\n    (filterv #(check-user % look-for) users)))\n\n(defn- setup-sorted-users\n  \"Read the roster users, group them by slack org and sort by slack org and name/email.\n   Save the result in the local component state to be used during render.\"\n  [s]\n  (let [roster-data @(drv/get-ref s :team-roster)\n        all-users (filterv #(= (:status %) \"uninvited\") (:users roster-data))\n        team-roster (vals (group-by :slack-org-id all-users))\n        sorted-team-roster (map\n                              (fn [team]\n                                (sort-by #(str (:first-name %) \" \" (:last-name %)) team)) team-roster)\n        all-sorted-users (vec (apply concat sorted-team-roster))]\n    (when (not= @(::all-sorted-users s) all-sorted-users)\n      (reset! (::all-sorted-users s) all-sorted-users))))\n\n(defn- get-filtered-sorted-users\n  \"Filter ::all-sorted-users on the fly with the passed filter-fn if present.\"\n  [s]\n  (let [filter-fn (:filter-fn (first (:rum/args s)))\n        all-sorted-users @(::all-sorted-users s)]\n    (if (fn? filter-fn)\n      (filter filter-fn all-sorted-users)\n      all-sorted-users)))\n\n(rum/defcs slack-users-dropdown   <  (rum/local nil ::show-users-dropdown)\n                                     (rum/local nil ::field-value)\n                                     (rum/local \"\" ::slack-user)\n                                     (rum/local false ::typing)\n                                     (rum/local [] ::all-sorted-users)\n                                     rum/reactive\n                                     (on-window-click-mixin (fn [s e]\n                                      (when (and @(::show-users-dropdown s)\n                                                ; (not (utils/event-inside? e\n                                                ;       (sel1 [:div.board-edit-slack-channels-dropdown])))\n                                                (not (utils/event-inside? e\n                                                      (.-parentElement (sel1 [:input.slack-users-dropdown])))))\n                                       (reset! (::show-users-dropdown s) false)\n                                       (let [{:keys [on-blur]} (first (:rum/args s))]\n                                         (when (fn? on-blur)\n                                           (on-blur))))))\n                                     (drv/drv :team-data)\n                                     (drv/drv :team-roster)\n                                     {:will-mount (fn [s]\n                                       (let [initial-value (:initial-value (first (:rum/args s)))]\n                                         (reset! (::slack-user s) (or initial-value \"\")))\n                                       (setup-sorted-users s)\n                                       s)\n                                      :will-update (fn [s]\n                                       (setup-sorted-users s)\n                                       s)\n                                      :before-render (fn [s]\n                                       (team-actions/teams-get-if-needed)\n                                       s)}\n  [s {:keys [disabled initial-value on-change on-intermediate-change on-focus on-blur filter-fn] :as data}]\n  (let [_ (drv/react s :team-roster) ; Make sure the component is re-rendered when roster changes\n        all-sorted-users (get-filtered-sorted-users s)\n        slack-orgs (:slack-orgs (drv/react s :team-data))\n        slack-orgs-map (zipmap (map :slack-org-id slack-orgs) (map :name slack-orgs))]\n    [:div.slack-users-dropdown\n      {:class (if disabled \"disabled\" \"\")\n       :key (str \"slack-users-dropdown-\" (count all-sorted-users))}\n      [:input.slack-users-dropdown.oc-input\n        {:value @(::slack-user s)\n         :on-focus (fn []\n                      (when (fn? on-focus) (on-focus))\n                      (utils/after\n                       100\n                       #(do (reset! (::typing s) false) (reset! (::show-users-dropdown s) true))))\n         :on-blur #(when (fn? on-blur) (on-blur))\n         :on-change #(do\n                       (reset! (::typing s) true)\n                       (when (fn? on-intermediate-change)\n                         (on-intermediate-change (.. % -target -value)))\n                       (reset! (::slack-user s) (.. % -target -value)))\n         :disabled disabled\n         :placeholder (if (pos? (count all-sorted-users)) \"Select a person to invite...\" \"No more members to add\")}]\n      (when-not disabled\n        [:div.arrows\n          {:on-click #(when-not disabled\n                        (let [next-value (not @(::show-users-dropdown s))]\n                          (reset! (::typing s) false)\n                          (reset! (::show-users-dropdown s) next-value)\n                          (when (and next-value\n                                     (fn? on-focus))\n                            (on-focus))\n                          (when (and (not next-value)\n                                     (fn? on-blur))\n                            (on-blur)))\n                        (utils/event-stop %))}])\n      (when @(::show-users-dropdown s)\n        [:div.slack-users-dropdown-list\n          (for [user (if (and @(::typing s) @(::slack-user s))\n                        (filter-users all-sorted-users @(::slack-user s))\n                        all-sorted-users)]\n            [:div.user.group\n              {:key (str \"slack-users-dd-\" (:slack-org-id user) \"-\" (:slack-id user))\n               :on-click #(do\n                           (on-change user)\n                           (reset! (::slack-user s) (user-lib/name-for user))\n                           (reset! (::show-users-dropdown s) false)\n                           (when (fn? on-blur)\n                              (on-blur))\n                           (reset! (::typing s) false))}\n              (user-avatar-image user)\n              [:div.user-name\n                (user-lib/name-for user)\n                [:span.slack-org (get slack-orgs-map (:slack-org-id user))]]])])]))"]}