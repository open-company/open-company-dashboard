{"version":3,"sources":["oc/web/components/stream_item.cljs"],"mappings":";;AA0BA,AAAA,AAAOA,AAAqBC;AAA5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEoB,AAAA,AAAOA,AAEY,AAAA,AAAOA;;AAE9C,AAAA,AAAOC,AAA8BC,AAAWC;AAAhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGK,AAAA,AAAQA,AAGO,AAAA,AAAA,AAAA,AAAUD,AAIX,AAACE,AAA4B,AAAA,AAAYD,AAExC,AAAA,AAAYA,AACxB,AAAA,AAAA,AAAA,AAACE,AAAiB,AAAA,AAAYF;;AAEtC,AAAA,AAAMG;AAAN,AACE,AAAAC,AAAI,AAAe,AAAmBC;AAAtC,AAAA,AAAAD;AAAAA;;AACI,AAAcE;;;AAEpB,AAAA,AAAMC,AAAmBC;AAAzB,AACE,AAAM,AAACC;AAAP,AACE,AAACC,AAAO,AAAA,AAAuBF,AAAG,AAACG,AAAwB,AAACR;;AAD9D;;;AAGF,AAAA,AAAOS,AAAkBJ;AAAzB,AACE,AAAA,AAACE,AAAO,AAAA,AAAmBF;;AAE7B,AAAA,AAAOK,AAAmBL,AAAEM;AAA5B,AACE,AAAA,AAAA,AAAA,AAAA,AAACC,AAA2C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIP,AAAYQ;;AAC5D,AAAI,AAAA,AAACC,AAAEH;AACL,AACE,AAAA,AAAA,AAACI,AAAiB,AAAA,AAAuBV;;AACzC,AAACW,AAAM,AAAA,AAA0BX,AAAGY;;AACtC,AACE,AAAA,AAAA,AAACF,AAAiB,AAAA,AAA0BV;;AAC5C,AAACW,AAAM,AAAA,AAAuBX,AAAGY;;;AAEvC,AAAA,AAAA,AAAAC,AAAOM;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAOD,AAAsBnB;AAA7B,AAAA,AAAAqB,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAkCM;AAAlC,AAAAL,AAAAD,AAAA,AAAA,AAAoCf;AAApC,AACE,AAAMqB;AAAN,AACE,AAACC,AAAiBD;;AADpB;;AAEA,AAAM,AAAI,AAACf,AAAIN,AACL,AAAA,AAACG,AAAEH;AADb,AAEE,AAAA,AAACJ,AAAO,AAAA,AAAuBF;;AAFjC;;AAGA,AAAM,AAAI,AAACY,AAAIN,AACL,AAAA,AAACG,AAAEH;AADb,AAEE,AAAA,AAACJ,AAAO,AAAA,AAA0BF;;AAFpC;;AAGA,AAAA,AAACE,AAAO,AAAA,AAA0BF;;AAClC,AAAA,AAAA,AAAA,AAAA,AAAA,AAACO;;;AAVH,AAAA,AAAA,AAAOY;;AAAP;AAAA,AAAA,AAAA,AAAAI,AAAOJ;AAAP,AAAA,AAAAK,AAAA,AAAAhB,AAAAe;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAD;;;AAAA,AAYA,AAAA,AAAOM,AAAoB7B,AAAE8B;AAA7B,AACE,AAAA,AAACzB,AAAkBL;;AAErB,AAAA,AAAO+B,AAAqB/B,AAAE8B;AAA9B,AACE,AAAA,AAACzB,AAAkBL;;AAErB,AAAA,AAAOgC,AAAoBhC,AAAE8B;AAA7B,AACE,AAACX,AAAqBnB;;AACtB,AAAA,AAAA,AAACiC;AAAD,AAAkB,AAAC7B,AAAiBJ;;;AAEtC,AAAA,AAAAkC,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsFU;AAAtF,AAAAN,AAAAJ,AAAA,AAAsCM;AAAtC,AAAAF,AAAAJ,AAAA,AAAiDO;AAAjD,AAAAH,AAAAJ,AAAA,AAA6DQ;AAA7D,AAAAJ,AAAAJ,AAAA,AAAwES;AAAxE,AAAA,AAAA,AACc,AAAK5C;AAAL,AACV,AAAM,AAAK,AAAC8C,AAAIF,AACL,AAAChC,AAAI,AAACgC,AAAAA,AAAAA,AAAS5C,AAAAA;AAD1B,AAEE,AAAMgD,AAAG,AAACC,AAAajD;AACjBkD,AAAG,AAAAC,AAASH;AADlB,AAAAD,AAEMK,AAAoB,AAAA,AAACC,AAAYrD;AAFvC,AAGE,AAAM,AAAK,AAAC8C,AAAIL,AACL,AAAA,AAAChC,AAAE2C;AADd,AAEE,AAAA,AAAKF,AAAe,AAACI,AAAQb,AAAWzC;;AAF1C;;AAGA,AAAM,AAAC8C,AAAIJ;AAAX,AACE,AAAA,AAAKQ,AAAgB,AAACI,AAAQZ,AAAY1C;;AAD5C;;AAEA,AAAM,AAAC8C,AAAIH;AAAX,AACE,AAAA,AAAKO,AAAW,AAACI,AAAQX,AAAW3C;;AADtC;;AAEA,AAACE,AAAO,AAAA,AAAqBF,AAAGkD;;AAZpC;;AAaAlD;AAfJ,AAgBiB,AAAKA;AAAL,AACb,AAAA,AAAA+C,AAAO,AAAA,AAAqB/C;AAA5B,AACE,AAAA,AAAA+C,AAAA,AAAU,AAAA,AAAqB/C;;AAC/B,AAAA,AAAA+C,AAAA,AAAU,AAAA,AAAqB/C;;AAC/B,AAAA,AAAA+C,AAAA,AAAU,AAAA,AAAqB/C;;AAC/B,AAAA,AAAA+C,AAAW,AAAA,AAAqB/C;;AAJlC;;AAKAA;;;AAEJ,AAAA,AAAOuD,AAAWvD;AAAlB,AACE,AAAA,AAACE,AAAO,AAAA,AAA0BF;;AAClC,AAAA,AAACE,AAAO,AAAA,AAAuBF;;AAEjC,AAAA,AAAAwD,AAAA,AAAAC,AAAWS,AA6CRlE;AA7CH,AAAA,AAAA0D,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAA,AAAAnB,AAAAmB,AAAA,AA8CiEiC;AA9CjE,AAAApD,AAAAmB,AAAA,AA6CqCyB;AA7CrC,AAAA5C,AAAAmB,AAAA,AA8Ca8B;AA9Cb,AAAAjD,AAAAmB,AAAA,AA6CuE4B;AA7CvE,AAAA/C,AAAAmB,AAAA,AA6C+D2B;AA7C/D,AAAA9C,AAAAmB,AAAA,AA8C8CgC;AA9C9C,AAAAnD,AAAAmB,AAAA,AA8C+B+B;AA9C/B,AAAAlD,AAAAmB,AAAA,AA6CarE;AA7Cb,AAAAkD,AAAAmB,AAAA,AA6C+C0B;AA7C/C,AAAA7C,AAAAmB,AAAA,AA6CoF6B;AA7CpF,AAAAhD,AAAAmB,AAAA,AA6C2BwB;AA7C3B,AAAA,AAAA,AA+CQ3F,AAAW,AAACqG;AACZC,AAAgB,AAAA,AAAUL;AAC1BM,AAAqB,AAAA,AAAczG;AACnC+D,AAAmB,AAAA,AAAC2C,AAAU/F;AAC9BgG,AAAoB,AAAA,AAACD,AAAU/F;AAC/BiG,AAAe,AAAA,AAAoB,AAAA,AAAO5G;AAC1C6G,AAAc,AAACxB,AAAiBrF;AAChC8G,AAAU,AAAID,AACF,AAAA,AAAY7G,AACZ,AAACmB,AAAM,AAAA,AAASnB;AAC5B+G,AAAe,AAAA,AAAoB,AAAA,AAAO/G;AAC1CgH,AAAU,AAACC,AAAI,AAAA,AAAiBjH;AAChCkH,AAAgB,AAACC,AAAyB,AAAA,AAAWnH;AACrDoH,AAAkB,AAAAC,AAAK,AAAA,AAAarH;AAAlB,AAAA,AAAAqH;AAAiCH;;AAAjCG;;;AAClBC,AAAW,AAAA,AAAA,AAAMN,AACJ,AAAA,AAAA,AAAA,AAAA,AAAAtD,AAAA,AAAA,AAAA,AAAA,AAAIxD,AACM,AAACI,AACC,AAAA,AAAuBK,AAExB,AAAA,AAACG;AAIzByG,AAAoB,AAAA/G,AAAA;AACpBgH,AAAkB,AAAAH,AAAKnH;AAAL,AAAA,AAAAmH;AACKE;;AADLF;;;AAvE1B,AAyEQI;AAzER,AAyEwB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAImB,AAACnG,AAAIrB,AAMT;AAAA,AAAO,AAAA,AAACW,AAAO,AAAA,AAAmBF;AAVjD,AAAA+C,AACgB1D,AACO4G,AACHb,AAEE,AAACxE,AAAIrB,AACP,AAACqB,AAAIrB,AAGV,AAACqB,AAAIrB,AAEC,AAAA,AAAmBS,AACnB6G;AAZrB,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAajBC,AAAuB,AAAA,AAAClB,AAAU/F;AAClCkH,AAAazB,AAAe0B,AAAQ,AAAA,AAAA,AAAC1G;AACrC2G,AAAkB,AAAA,AAAAV,AAAKQ,AACA,AAAA,AAAS7H;AADd,AAAA,AAAAqH;AAEK,AAAC9F,AAAI,AAAA,AAAavB;;AAFvBqH;;AAAA;AAGlBW,AAAqB,AAAA,AAAK,AAACzG,AAAI+E,AAAU,AAAA,AAAiBtG;AA3FlE,AAAA,AAAAsE,AAAA,AAAA,AAsG8B,AAAA,AAAoBtE,AACxB,AAAA,AAAeA,AAExB,AAAKsC;AAAL,AACE,AAAA,AAAQ,AAAA,AAAMsF;AACZ,AAACO,AAAqBxH,AAAE2B;;AACxB,AAAA,AAAAf,AAAQsF;AACN,AAACuB,AAA+BpI;;AAChC,AAAMqI,AAAa,AAAA,AAAM,AAACC,AAAK,AAAA,AAAA,AAAS1B;AAClC2B,AAAoB,AAAA,AAAM,AAACD,AAAK,AAAA,AAAA,AAAS1B;AACzC4B,AAAmB,AAAA,AAACC,AAAa9H;AACjC+H,AAAa,AAAA,AAAM,AAACJ,AAAK,AAAA,AAAA,AAAS1B;AAClC+B,AAAe,AAAA,AAACF,AAAa9H;AAJnC,AAKE,AAAM,AACK,AAACY,AAAI,AAACqH,AAAoBtG,AAAE+F,AAE5B,AAAC9G,AAAI,AAACqH,AAAoBtG,AAAEiG,AAE5B,AAAChH,AAAI,AAACqH,AAAoBtG,AAAEkG,AAE5B,AAACjH,AAAI,AAACqH,AAAoBtG,AAAEqG,AAE5B,AAACpH,AAAI,AAACqH,AAAoBtG,AAAEoG,AAE5B,AAACnH,AAAI,AAACsH,AAAsBvG,AAE5B,AAACf,AAAI,AAACuH,AAAqBxG,AAE3B,AAACf,AAAI,AAACwH,AAAsBzG;AAfvC,AAgBE,AAAC0G;;AACD,AAAA,AAACC,AAA4BjJ;;AAjB/B;;;;AAnHzB,AAAAuE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AA6Fc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC2D,AAAiBlB,AACO,AAACxF,AAAIsF,AACG,AAAA,AAAgB7G,AAClB,AAAA,AAASA,AACV6G,AACA,AAAA,AAACqB,AAAe,AAAA,AAAQlI,AAGrB,AAACoB,AAAE,AAAA,AAACsF,AAAU/F,AAA6BiG,AAgC/EA,AAGQ,AAAKtE;AAAL,AACC,AAAA,AAAC6F,AAAqBxH,AAAE2B;;AACxB,AAACvB,AAAiBJ;AA1ItC,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAuIgB,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAO,AAAA,AAAuB/C,AAO3B,AAAK2B;AAAL,AACC,AAAA,AAAC6F,AAAqBxH,AAAE2B;;AACxB,AAAC4G,AAA+B,AAAA,AAAOlJ;AAhJ3D,AAAAuE,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AA6IgB,AAAA,AAAAd,AAAA,AAAA,AAAA,AAAO,AAAA,AAA0B/C,AAOvC,AAAAwI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAiCnJ,AAKE,AAAK,AAACuB,AAAI,AAAA,AAAkBvB,AACvB,AAAC2F,AAAK,AAAA,AAAa3F,AAAe+D,AAClC,AAAA,AAAGkC,AACRO;AARnC,AAAA,AAAA2C,AAAAA,AAACC,AAAAA,AAAAA;;AApJX,AAAA,AAAApG,AAAAsB,AAAA,AAAA,AAAA,AAAAG,AAAAD,AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AA8JgB+E,AAAE,AAAA9I,AAAI,AAAA,AAAeP;AAAnB,AAAA,AAAAO;AAAAA;;AAAkC,AAAA,AAAaP;;;AA9JjE,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAM,AAgK4B,AAAA,AAAA,AAAA,AAAU1E,AAIX,AAACE,AAA4BJ,AAE5BqJ,AACZ,AAAA,AAAA,AAAA,AAAChJ,AAAiBgJ;AAvKlC,AAAA/E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAAJ,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AA8JgB+E,AAAE,AAAA9I,AAAI,AAAA,AAAeP,AAWX,AAAA,AAAA,AAAA,AAAUE,AAG1B,AAAA,AAAA,AAAA,AAAA,AAAM6H;AAdE,AAAA,AAAAxH;AAAAA;;AAAkC,AAAA,AAAaP;;;AA9JjE,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAM,AAgK4B,AAAA,AAAA,AAAA,AAAU1E,AAIX,AAACE,AAA4BJ,AAE5BqJ,AACZ,AAAA,AAAA,AAAA,AAAChJ,AAAiBgJ;AAvKlC,AAAA/E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAyK0B,AAAA,AAAA,AAAA,AAAUpE,AAG1B,AAAA,AAAA,AAAA,AAAA,AAAM6H;AA5KhB,AAAAnD,AAgLQ,AAAA,AAAMiC,AACJ,AAAI,AAAAQ,AAAKnH;AAAL,AAAA,AAAAmH;AACKE;;AADLF;;AAjLd,AAAA/C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAK,AAAA,AAAAN,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAgLQ,AAGI,AAAC+E,AAAW,AAAC7B,AAAgBF,AAC7B,AAACE,AAIK,AAAA,AAAA,AAAA,AAAMO,AACd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMA,AAEM,AAAA,AAAO,AAAA,AAAiBhI,AAEjB,AAAA,AAAY,AAAA,AAAiBA,AAChCA,AAGA,AAAA,AAAA,AAAA,AAAA,AAACuJ,AAAuB,AAAA,AAAA,AAE9B,AAAA,AAAA,AAACtB,AAAgC,AAAAZ,AAAKW;AAAL,AAAA,AAAAX;AACK,AAAC9F,AAAI,AAAA,AAAiBvB;;AAD3BqH;;AAAjC,AAE6B,AAAAA,AAAKW;AAAL,AAAA,AAAAX;AACK,AAAA,AAAiBrH;;AADtBqH;;AArMjD,AAAA/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAAA,AAAA,AAAAA,AAmMoB,AAIkB4E,AAGR,AAAA,AAAOxJ,AACG,AAACyJ,AAAc,AAAA,AAAWzJ,AAClDsG,AACF,AAACrG,AAA6BC,AAAW,AAAA,AAAkBF,AAC3D,AAACD,AAAoBC,AACzB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAQsF;AAAR,AAIoB,AAACuB,AAA+BpI;AAJpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA0J;AAAA,AAQoB,AAAAA,AAACC,AAAiC3J;AARtD,AAAA,AAAA,AAAA,AAAA,AAAA,AAYI,AAAA,AAAMgG,AACJ,AAAA4D,AAAA,AAAA,AAAA,AAAA,AAAyB5J;AAAzB,AAAA,AAAA4J,AAAAA,AAACC,AAAAA,AAAAA;AAbP,AAAA,AAYI,AAIE,AAAA,AAAA,AAAA,AAAM7D,AAGF,AAAA8D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAmC9J,AAES2G,AACD,AAAA,AAAA,AAAMN,AAAmB,AAAC2D,AAAM,AAAA,AAACC,AAAe,AAAA,AAAejK;AAH1G,AAAA,AAAA8J,AAAAA,AAACC,AAAAA,AAAAA;AAHL,AAOA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMjE,AAcF,AAAAoE,AAAA,AAAA,AAAA,AAA2BlK,AACJ6F;AADvB,AAAA,AAAAqE,AAAAA,AAACC,AAAAA,AAAAA;AAdL,AAgBA,AAAA,AAAM,AAAClD,AAAIR,AACT,AAAA,AAAAlF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAQrB,AAIY,AAAA,AAAA,AAAA,AAAUA,AAGhB,AAAA,AAAK,AAAC8J,AAAMvD,AAAoC,AAAA,AAAA,AAAA,AAAM,AAAA,AAAG,AAACuD,AAAMvD,AACxE,AAACuD,AAAMvD,AAEP,AAAA2D,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAtD,AAAAoD;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AA8kE2B,AAAAe,AAAAnB;AA9kE3BK,AAAA,AAAAV,AAAAS;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMS;AAAN,AAAA,AAAA,AAAAP,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAAA,AAAWW,AAId,AAAA,AAAYA,AAEZ,AAAA,AAAA,AAAS,AAAA,AAAA,AAAA,AAAA,AAACC,AAAS,AAAA,AAAYD;;AARvC,AAAA,AAAAT,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAd;;AAAA,AAAAW,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAxJ,AAAAkJ,AAAMiB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAG,AAAAhB,AAEW,AAAA,AAAWiB,AAId,AAAA,AAAYA,AAEZ,AAAA,AAAA,AAAS,AAAA,AAAA,AAAA,AAAA,AAACC,AAAS,AAAA,AAAYD;;;AARvC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAlB,AAAU3D;AAXlB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBM,AAACuD,AAAMvD;AA7Q/B,AAAyB3B,AACAC,AAEA,AAAA,AAACC,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AAGD,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AAED,AAACC,AAA2BxE,AAC5B,AAAA,AAAMyE,AACJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAACjC,AAAmCX,AACCE,AACDC;AAFpC,AAGmC,AAACpB,AAAI,AAAC8D,AAAiB,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAgBjE;AAtBrG,AAAA,AAkByB,AAKAmE,AACa,AAAK3E;AAAL,AACX,AAACD,AAAkBC;;AACnB,AAAMwE;AAAN,AACE,AAACtE,AAAO,AAAA,AAAaF,AACpB,AAAC4E,AAAc9E,AAAU+E,AAAiB,AAACvB,AAAQC,AAAUvD;;AAFhE;;AAGAA;AA7B3B,AA8BsC,AAAKA;AAAL,AACX,AAAMwE;AAAN,AACE,AAAA,AAAAzB,AAAM+B,AAAmB,AAAA,AAACzB,AAAYrD;AAChC+E,AAAc,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAI/E,AAAYQ;AADpC,AAEE,AAAM,AAAA,AAAAuC,AAACiC,AAAM,AAAA,AAA0BhF,AAAG8E;AAA1C,AACE,AAAC5E,AAAO,AAAA,AAA0BF,AAAG8E;;AACrC,AAAM,AAACE,AAAKD,AAAcD;AAA1B,AACE,AAAA,AAAA,AAACpE,AAAiB,AAAA,AAA0BV;;AAC5C,AAAA,AAAA,AAACU,AAAiB,AAAA,AAAuBV;;AAF3C;;AAFF;;AAHJ;;AAQAA;AAvC3B,AAwCwC,AAAKA;AAAL,AACb,AAAA,AAAA+C,AAAO,AAAA,AAAa/C;AAApB,AACE,AAAA,AAAA+C,AAACkC,AAAsB,AAAA,AAAajF;;AACpC,AAAA,AAACE,AAAO,AAAA,AAAaF;;AAFvB;;AAGAA;AA5C3B","names":["oc.web.components.stream-item/stream-item-summary","activity-data","oc.web.components.stream-item/stream-item-activity-preview","is-mobile?","for-you-context","oc.web.lib.utils/activity-date-tooltip","oc.web.lib.utils.time_since","oc.web.components.stream-item/win-width","or__4126__auto__","js/document","js/window","oc.web.components.stream-item/calc-video-height","s","oc.web.lib.responsive/is-tablet-or-mobile?","cljs.core/reset!","oc.web.lib.utils/calc-video-height","oc.web.components.stream-item/show-mobile-menu","oc.web.components.stream-item/show-swipe-button","ref-kw","oc.web.dispatcher/dispatch!","cljs.core/first","cljs.core._EQ_","cljs.core/compare-and-set!","cljs.core.swap_BANG_","cljs.core/not","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.components.stream-item/dismiss-swipe-button","p__46382","vec__46383","cljs.core.nth","seq46375","G__46376","cljs.core/next","self__4723__auto__","e","oc.web.lib.utils/event-stop","oc.web.components.stream-item/swipe-left-handler","_","oc.web.components.stream-item/swipe-right-handler","oc.web.components.stream-item/long-press-handler","oc.web.lib.utils/after","p__46388","map__46389","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.web.components.stream-item/swipe-gesture-manager","swipe-left","swipe-right","long-press","disabled","options","cljs.core/fn?","cljs.core/deref","el","rum.core/dom-node","hr","js/module$node_modules$hammerjs$hammer","current-board-slug","org.martinklepsch.derivatives/get-ref","cljs.core.partial","oc.web.components.stream-item/on-scroll","rum.core/build-defcs","p__46401","map__46402","js/React.createElement","sablono.util/join-classes","attrs46409","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","oc.web.components.stream-item/stream-item","rum.core/static","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/render-on-resize","oc.shared.useragent/mobile?","p1__46399#","oc.web.utils.activity.is_published_QMARK_","oc.web.mixins.ui/strict-refresh-tooltips-mixin","goog.events/listen","goog.events.EventType/SCROLL","mobile-swipe-menu","activity-uuid","cljs.core.not_EQ_","goog.events/unlistenByKey","read-data","show-wrt?","editable-boards","member?","boards-count","foc-board","current-user-data","container-slug","show-new-comments?","replies?","oc.web.lib.responsive/is-mobile-size?","current-user-id","activity-attachments","org.martinklepsch.derivatives/react","current-activity-id","dom-element-id","is-published?","publisher","dom-node-class","has-video","cljs.core/seq","uploading-video","oc.web.dispatcher.uploading_video_data","video-player-show","and__4115__auto__","video-size","mobile-more-menu-el","show-mobile-menu?","more-menu-comp","G__46404","oc.web.components.ui.more-menu/more-menu","mobile-swipe-menu-uuid","is-home?","cljs.core.keyword","show-new-item-tag","show-body-thumbnail?","oc.web.lib.utils/class-set","oc.web.lib.utils.link_for","oc.web.components.stream_item.dismiss_swipe_button","oc.web.actions.activity.activity_edit","more-menu-el","js/$","comments-summary-el","stream-item-wrt-el","rum.core/ref-node","emoji-picker","attachments-el","oc.web.lib.utils/event-inside?","oc.web.lib.utils/button-clicked?","oc.web.lib.utils/input-clicked?","oc.web.lib.utils/anchor-clicked?","oc.web.actions.nux/dismiss-post-added-tooltip","oc.web.actions.nav_sidebar.open_post_modal","oc.web.actions.activity/inbox-dismiss","G__46426","oc.web.components.ui.post-authorship/post-authorship","t","rum.core/portal","oc.web.images/optimize-image-url","oc.web.lib.utils/hide-class","oc.web.lib.utils/emojify","p1__46400#","oc.web.utils.draft/delete-draft-clicked","G__46428","oc.web.components.reactions/reactions","G__46429","oc.web.components.ui.comments-summary/foc-comments-summary","cljs.core/count","cljs.core.filter","G__46430","oc.web.components.ui.wrt/wrt-count","iter__4529__auto__","s__46432","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46434","cljs.core/chunk-buffer","i__46433","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46431","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","atc","clojure.contrib.humanize.filesize","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.stream-item\n  (:require [rum.core :as rum]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [dommy.core :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [clojure.contrib.humanize :refer (filesize)]\n            [oc.web.images :as img]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.shared.useragent :as ua]\n            [oc.web.utils.activity :as au]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.utils.draft :as draft-utils]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.wrt :refer (wrt-count)]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.reactions :refer (reactions)]\n            [oc.web.components.ui.more-menu :refer (more-menu)]\n            [oc.web.components.ui.post-authorship :refer (post-authorship)]\n            [oc.web.components.ui.comments-summary :refer (foc-comments-summary)]\n            [\"hammerjs\" :as hammer]))\n\n(defn- stream-item-summary [activity-data]\n  [:div.stream-item-body.oc-mentions\n    {:data-itemuuid (:uuid activity-data)\n     :ref :item-body\n     :dangerouslySetInnerHTML {:__html (:body activity-data)}}])\n\n(defn- stream-item-activity-preview [is-mobile? for-you-context]\n  [:div.stream-item-activity-preview\n    [:span.for-you-body-label\n     (:label for-you-context)]\n    [:div.separator-dot]\n    [:span.time-since\n      {:data-toggle (when-not is-mobile? \"tooltip\")\n       :data-placement \"top\"\n       :data-container \"body\"\n       :data-delay \"{\\\"show\\\":\\\"1000\\\", \\\"hide\\\":\\\"0\\\"}\"\n       :data-title (utils/activity-date-tooltip (:timestamp for-you-context))}\n      [:time\n        {:date-time (:timestamp for-you-context)}\n        (utils/time-since (:timestamp for-you-context) [:short :lower-case])]]])\n\n(defn win-width []\n  (or (.-clientWidth (.-documentElement js/document))\n      (.-innerWidth js/window)))\n\n(defn calc-video-height [s]\n  (when (responsive/is-tablet-or-mobile?)\n    (reset! (::mobile-video-height s) (utils/calc-video-height (win-width)))))\n\n(defn- show-mobile-menu [s]\n  (reset! (::force-show-menu s) true))\n\n(defn- show-swipe-button [s ref-kw]\n  (dis/dispatch! [:input [:mobile-swipe-menu] (-> s :rum/args first :activity-data :uuid)])\n  (if (= ref-kw ::show-mobile-dismiss-bt)\n    (do\n      (compare-and-set! (::show-mobile-more-bt s) true false)\n      (swap! (::show-mobile-dismiss-bt s) not))\n    (do\n      (compare-and-set! (::show-mobile-dismiss-bt s) true false)\n      (swap! (::show-mobile-more-bt s) not))))\n\n(defn- dismiss-swipe-button [s & [e ref-kw]]\n  (when e\n    (utils/event-stop e))\n  (when (or (not ref-kw)\n            (= ref-kw ::show-mobile-more-bt))\n    (reset! (::show-mobile-more-bt s) false))\n  (when (or (not ref-kw)\n            (= ref-kw ::show-mobile-dismiss-bt))\n    (reset! (::show-mobile-dismiss-bt s) false))\n  (reset! (::last-mobile-swipe-menu s) nil)\n  (dis/dispatch! [:input [:mobile-swipe-menu] nil]))\n\n(defn- swipe-left-handler [s _]\n  (show-swipe-button s ::show-mobile-dismiss-bt))\n\n(defn- swipe-right-handler [s _]\n  (show-swipe-button s ::show-mobile-more-bt))\n\n(defn- long-press-handler [s _]\n  (dismiss-swipe-button s)\n  (utils/after 180 #(show-mobile-menu s)))\n\n(defn- swipe-gesture-manager [{:keys [swipe-left swipe-right long-press disabled] :as options}]\n  {:did-mount (fn [s]\n    (when (and (fn? disabled)\n               (not (disabled s)))\n      (let [el (rum/dom-node s)\n            hr (hammer. el)\n            current-board-slug @(drv/get-ref s :board-slug)]\n        (when (and (fn? swipe-left)\n                   (= current-board-slug \"inbox\"))\n          (.on hr \"swipeleft\" (partial swipe-left s)))\n        (when (fn? swipe-right)\n          (.on hr \"swiperight\" (partial swipe-right s)))\n        (when (fn? long-press)\n          (.on hr \"press\" (partial long-press s)))\n        (reset! (::hammer-recognizer s) hr)))\n    s)\n   :will-unmount (fn [s]\n    (when @(::hammer-recognizer s)\n      (.remove @(::hammer-recognizer s) \"swipeleft\")\n      (.remove @(::hammer-recognizer s) \"swiperight\")\n      (.remove @(::hammer-recognizer s) \"pressup\")\n      (.destroy @(::hammer-recognizer s)))\n    s)})\n\n(defn- on-scroll [s]\n  (reset! (::show-mobile-dismiss-bt s) false)\n  (reset! (::show-mobile-more-bt s) false))\n\n(rum/defcs stream-item < rum/static\n                         rum/reactive\n                         ;; Derivatives\n                         (drv/drv :activity-share-container)\n                         (drv/drv :mobile-swipe-menu)\n                         (drv/drv :board-slug)\n                         (drv/drv :activity-uuid)\n                         ; (drv/drv :show-post-added-tooltip)\n                         ;; Locals\n                         (rum/local 0 ::mobile-video-height)\n                         (rum/local nil ::hammer-recognizer)\n                         (rum/local false ::force-show-menu)\n                         (rum/local false ::show-mobile-dismiss-bt)\n                         (rum/local false ::show-mobile-more-bt)\n                         (rum/local false ::on-scroll)\n                         (rum/local nil ::last-mobile-swipe-menu)\n                         ;; Mixins\n                         (ui-mixins/render-on-resize calc-video-height)\n                         (when ua/mobile?\n                           (swipe-gesture-manager {:swipe-left swipe-left-handler\n                                                   :swipe-right swipe-right-handler\n                                                   :long-press long-press-handler\n                                                   :disabled #(not (au/is-published? (-> % :rum/args first :activity-data)))}))\n                         ui-mixins/strict-refresh-tooltips-mixin\n                         {:will-mount (fn [s]\n                           (calc-video-height s)\n                           (when ua/mobile?\n                             (reset! (::on-scroll s)\n                              (events/listen js/window EventType/SCROLL (partial on-scroll s))))\n                           s)\n                          :did-update (fn [s]\n                           (when ua/mobile?\n                             (let [mobile-swipe-menu @(drv/get-ref s :mobile-swipe-menu)\n                                   activity-uuid (-> s :rum/args first :activity-data :uuid)]\n                               (when (not= @(::last-mobile-swipe-menu s) mobile-swipe-menu)\n                                 (reset! (::last-mobile-swipe-menu s) mobile-swipe-menu)\n                                 (when (not= activity-uuid mobile-swipe-menu)\n                                   (compare-and-set! (::show-mobile-dismiss-bt s) true false)\n                                   (compare-and-set! (::show-mobile-more-bt s) true false)))))\n                           s)\n                          :will-unmount (fn [s]\n                           (when @(::on-scroll s)\n                             (events/unlistenByKey @(::on-scroll s))\n                             (reset! (::on-scroll s) nil))\n                           s)}\n  [s {:keys [activity-data read-data show-wrt? editable-boards member? boards-count foc-board\n             current-user-data container-slug show-new-comments? replies?]}]\n  (let [is-mobile? (responsive/is-mobile-size?)\n        current-user-id (:user-id current-user-data)\n        activity-attachments (:attachments activity-data)\n        current-board-slug (drv/react s :board-slug)\n        current-activity-id (drv/react s :activity-uuid)\n        dom-element-id (str \"stream-item-\" (:uuid activity-data))\n        is-published? (au/is-published? activity-data)\n        publisher (if is-published?\n                    (:publisher activity-data)\n                    (first (:author activity-data)))\n        dom-node-class (str \"stream-item-\" (:uuid activity-data))\n        has-video (seq (:fixed-video-id activity-data))\n        uploading-video (dis/uploading-video-data (:video-id activity-data))\n        video-player-show (and (:publisher? activity-data) uploading-video)\n        video-size (when has-video\n                     (if is-mobile?\n                       {:width (win-width)\n                        :height @(::mobile-video-height s)}\n                       {:width 136\n                        :height (utils/calc-video-height 136)}))\n        ; post-added-tooltip (drv/react s :show-post-added-tooltip)\n        ; show-post-added-tooltip? (and post-added-tooltip\n        ;                               (= post-added-tooltip (:uuid activity-data)))\n        mobile-more-menu-el (sel1 [:div.mobile-more-menu])\n        show-mobile-menu? (and is-mobile?\n                               mobile-more-menu-el)\n        more-menu-comp #(more-menu\n                          {:entity-data activity-data\n                           :share-container-id dom-element-id\n                           :editable-boards editable-boards\n                           :external-share (not is-mobile?)\n                           :external-bookmark (not is-mobile?)\n                           :external-follow (not is-mobile?)\n                           :show-edit? true\n                           :show-delete? true\n                           :show-move? (not is-mobile?)\n                           :will-close (fn [] (reset! (::force-show-menu s) false))\n                           :force-show-menu @(::force-show-menu s)\n                           :mobile-tray-menu show-mobile-menu?})\n        mobile-swipe-menu-uuid (drv/react s :mobile-swipe-menu)\n        is-home? (-> container-slug keyword (= :following))\n        show-new-item-tag (and is-home?\n                               (:unseen activity-data)\n                               (not (:publisher? activity-data)))\n        show-body-thumbnail? (and (not replies?) (:body-thumbnail activity-data))]\n    [:div.stream-item\n      {:class (utils/class-set {dom-node-class true\n                                :draft (not is-published?)\n                                :bookmark-item (:bookmarked-at activity-data)\n                                :unseen-item (:unseen activity-data)\n                                :expandable is-published?\n                                :muted-item (utils/link-for (:links activity-data) \"follow\")\n                                :show-mobile-more-bt true\n                                :show-mobile-dismiss-bt true\n                                :showing-share (= (drv/react s :activity-share-container) dom-element-id)})\n       :data-last-activity-at (::last-activity-at activity-data)\n       :data-last-read-at (:last-read-at activity-data)\n       ;; click on the whole tile only for draft editing\n       :on-click (fn [e]\n                   (if-not (nil? mobile-swipe-menu-uuid)\n                     (dismiss-swipe-button s e)\n                     (if-not is-published?\n                       (activity-actions/activity-edit activity-data)\n                       (let [more-menu-el (.get (js/$ (str \"#\" dom-element-id \" div.more-menu\")) 0)\n                             comments-summary-el (.get (js/$ (str \"#\" dom-element-id \" div.is-comments\")) 0)\n                             stream-item-wrt-el (rum/ref-node s :stream-item-wrt)\n                             emoji-picker (.get (js/$ (str \"#\" dom-element-id \" div.emoji-mart\")) 0)\n                             attachments-el (rum/ref-node s :stream-item-attachments)]\n                         (when (and ;; More menu wasn't clicked\n                                    (not (utils/event-inside? e more-menu-el))\n                                    ;; Comments summary wasn't clicked\n                                    (not (utils/event-inside? e comments-summary-el))\n                                    ;; WRT wasn't clicked\n                                    (not (utils/event-inside? e stream-item-wrt-el))\n                                    ;; Attachments wasn't clicked\n                                    (not (utils/event-inside? e attachments-el))\n                                    ;; Emoji picker wasn't clicked\n                                    (not (utils/event-inside? e emoji-picker))\n                                    ;; a button wasn't clicked\n                                    (not (utils/button-clicked? e))\n                                    ;; No input field clicked\n                                    (not (utils/input-clicked? e))\n                                    ;; No body link was clicked\n                                    (not (utils/anchor-clicked? e)))\n                           (nux-actions/dismiss-post-added-tooltip)\n                           (nav-actions/open-post-modal activity-data false))))))\n       :id dom-element-id}\n      [:button.mlb-reset.mobile-more-bt\n        {:class (when @(::show-mobile-more-bt s) \"visible\")\n         :on-click (fn [e]\n                    (dismiss-swipe-button s e ::show-mobile-more-bt)\n                    (show-mobile-menu s))}\n        [:span \"More\"]]\n      [:button.mlb-reset.mobile-dismiss-bt\n        {:class (when @(::show-mobile-dismiss-bt s) \"visible\")\n         :on-click (fn [e]\n                    (dismiss-swipe-button s e ::show-mobile-dismiss-bt)\n                    (activity-actions/inbox-dismiss (:uuid activity-data)))}\n        [:span \"Dismiss\"]]\n      [:div.stream-item-header.group\n        [:div.stream-header-head-author\n          (post-authorship {:activity-data activity-data\n                            :user-avatar? true\n                            :user-hover? true\n                            :board-hover? true\n                            ; :show-board? foc-board\n                            :activity-board? (and (not (:publisher-board activity-data))\n                                                  (not= (:board-slug activity-data) current-board-slug)\n                                                  (> boards-count 1))\n                            :current-user-id current-user-id})\n          [:div.separator-dot]\n          (let [t (or (:published-at activity-data) (:created-at activity-data))]\n            [:span.time-since\n              {:data-toggle (when-not is-mobile? \"tooltip\")\n               :data-placement \"top\"\n               :data-container \"body\"\n               :data-delay \"{\\\"show\\\":\\\"1000\\\", \\\"hide\\\":\\\"0\\\"}\"\n               :data-title (utils/activity-date-tooltip activity-data)}\n              [:time\n                {:date-time t}\n                (utils/time-since t [:short :lower-case])]])\n          [:div.muted-activity\n            {:data-toggle (when-not is-mobile? \"tooltip\")\n             :data-placement \"top\"\n             :title \"Muted\"}]\n          (when show-new-item-tag\n            [:div.new-item-tag])\n          [:div.bookmark-tag-small.mobile-only]\n          [:div.bookmark-tag.big-web-tablet-only]]\n        (when is-published?\n          (if (and is-mobile?\n                   mobile-more-menu-el)\n            (rum/portal (more-menu-comp) mobile-more-menu-el)\n            (more-menu-comp)))\n        [:div.activity-share-container]]\n      [:div.stream-item-body-ext.group\n        [:div.thumbnail-container.group\n          {:class (when show-body-thumbnail? \"has-preview\")}\n          (when show-body-thumbnail?\n            [:div.body-thumbnail-wrapper\n              {:class (:type (:body-thumbnail activity-data))}\n              [:img.body-thumbnail\n                {:data-image (:thumbnail (:body-thumbnail activity-data))\n                 :src (-> activity-data\n                          :body-thumbnail\n                          :thumbnail\n                          (img/optimize-image-url (* 102 3)))}]])\n          [:div.stream-body-left.group\n            {:class (utils/class-set {:has-thumbnail (and show-body-thumbnail?\n                                                          (not (:fixed-video-id activity-data)))\n                                      :has-video (and show-body-thumbnail?\n                                                      (:fixed-video-id activity-data))\n                                      utils/hide-class true})}\n            [:div.stream-item-headline.ap-seen-item-headline\n              {:ref \"activity-headline\"\n               :data-itemuuid (:uuid activity-data)\n               :dangerouslySetInnerHTML (utils/emojify (:headline activity-data))}]\n            (if replies?\n              (stream-item-activity-preview is-mobile? (:for-you-context activity-data))\n              (stream-item-summary activity-data))]]\n          (if-not is-published?\n            [:div.stream-item-footer.group\n              [:div.stream-body-draft-edit\n                [:button.mlb-reset.edit-draft-bt\n                  {:on-click #(activity-actions/activity-edit activity-data)}\n                  \"Continue editing\"]]\n              [:div.stream-body-draft-delete\n                [:button.mlb-reset.delete-draft-bt\n                  {:on-click #(draft-utils/delete-draft-clicked activity-data %)}\n                  \"Delete draft\"]]]\n            [:div.stream-item-footer.group\n              {:ref \"stream-item-reactions\"}\n              (when member?\n                (reactions {:entity-data activity-data\n                            :only-thumb? true}))\n              [:div.stream-item-footer-mobile-group\n                (when member?\n                  [:div.stream-item-comments-summary\n                    ; {:on-click #(expand s true true)}\n                    (foc-comments-summary {:entry-data activity-data\n                                           :add-comment-focus-prefix \"main-comment\"\n                                           :current-activity-id current-activity-id\n                                           :new-comments-count (when show-new-comments? (count (filter :unseen (:replies-data activity-data))))})])\n                (when show-wrt?\n                  [:div.stream-item-wrt\n                    {:ref :stream-item-wrt}\n                    ; (when show-post-added-tooltip?\n                    ;   [:div.post-added-tooltip-container\n                    ;     {:ref :post-added-tooltip}\n                    ;     [:div.post-added-tooltip-title\n                    ;       \"Post analytics\"]\n                    ;     [:div.post-added-tooltip\n                    ;       (str \"Invite your team to Wut so you can know who read your \"\n                    ;        \"post and when. Click here to access your post analytics anytime.\")]\n                    ;     [:button.mlb-reset.post-added-tooltip-bt\n                    ;       {:on-click #(nux-actions/dismiss-post-added-tooltip)}\n                    ;       \"OK, got it\"]])\n                    (wrt-count {:activity-data activity-data\n                                :read-data read-data})])\n                (when (seq activity-attachments)\n                  (if-not is-mobile?\n                    [:div.stream-item-attachments\n                      {:ref :stream-item-attachments}\n                      [:div.stream-item-attachments-count\n                        {:data-toggle (when-not is-mobile? \"tooltip\")\n                         :data-placement \"top\"\n                         :data-container \"body\"\n                         :title (str (count activity-attachments) \" attachment\" (when (> (count activity-attachments) 1) \"s\"))}\n                        (count activity-attachments)]\n                      [:div.stream-item-attachments-list\n                        (for [atc activity-attachments]\n                          [:a.stream-item-attachments-item\n                            {:href (:file-url atc)\n                             :target \"_blank\"}\n                            [:div.stream-item-attachments-item-desc\n                              [:span.file-name\n                                (:file-name atc)]\n                              [:span.file-size\n                                (str \"(\" (filesize (:file-size atc) :binary false :format \"%.2f\") \")\")]]])]]\n                    [:div.stream-item-mobile-attachments\n                      [:span.mobile-attachments-icon]\n                      [:span.mobile-attachments-count\n                        (count activity-attachments)]]))]])]]))\n"]}