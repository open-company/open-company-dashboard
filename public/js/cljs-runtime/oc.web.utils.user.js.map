{"version":3,"sources":["oc/web/utils/user.cljs"],"mappings":"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","names":["oc.web.utils.user/default-avatar","oc.web.utils.user/other-default-avatars","oc.web.utils.user/default-avatar?","image-url","images-set","cljs.core.conj","cljs.core/set","oc.web.utils.user/random-avatar","cljs.core/first","cljs.core/shuffle","cljs.core/vec","oc.web.utils.user/publisher-board-slug-prefix","oc.web.utils.user/user-avatar-filestack-config","oc.web.utils.user/user-name-max-lenth","oc.web.utils.user/user-has-slack-with-bot?","current-user-data","bots-data","team-roster","slack-orgs-with-bot","cljs.core.map","slack-users","p1__37303#","cljs.core.filter","cljs.core._EQ_","p1__37304#","cljs.core/some","cljs.core/contains?","cljs.core.keyword","oc.web.utils.user/user-has-push-token?","push-token","current-push-tokens","p__37312","map__37315","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.web.utils.user/auth-link-with-state","original-url","user-id","team-id","redirect","redirect-origin","state","parsed-url","js/URL","old-state-string","decoded-state","oc.lib.oauth/decode-state-string","combined-state","cljs.core.merge","new-state-string","oc.lib.oauth/encode-state-string","var_args","G__37331","oc.web.utils.user/localized-time","js/Error","p__37332","map__37333","tz","oc.web.utils.user.localized_time","suffix","opts","e37335","js/Date","js/window","cljs.core/seq","cuerdas.core.trim","e","oc.web.utils.user/readable-tz","cuerdas.core/collapse-whitespace","cuerdas.core/replace","G__37342","oc.web.utils.user/time-with-timezone","timezone","oc.web.utils.user.time_with_timezone","temp__5735__auto__","lt","oc.web.lib.utils/time-without-leading-zeros","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.utils.user/timezone-location-string","p__37366","vec__37367","cljs.core.nth","seq37356","G__37357","cljs.core/next","self__4723__auto__","user-data","local-time-string?","twt","oc.web.utils.user/location-timezone-string","p__37385","vec__37386","seq37383","G__37384","args__33708__auto__","ocr-37394","cljs.core/vector?","cljs.core/count","ocr-37394_0__37397","G__37415","cljs.core.match/backtrack","e37406","e__32662__auto__","e37407","fexpr__37414","e37408","e37405","oc.web.utils.user/active?","user","cljs.core/map?","_user-status","cljs.core/not","user-status","oc.web.utils.user/filter-active-users","users-list","oc.web.utils.user/user-role-string","role-kw","G__37416","cljs.core/Keyword","oc.web.utils.user/get-author","authors","fexpr__37425","ocr-37427","G__37455","fexpr__37454","e37436","ocr-37427_2__37434","e37439","e37438","oc.web.utils.user/get-user-type","org-data","board-data"],"sourcesContent":["(ns oc.web.utils.user\n  (:require [defun.core :refer (defun)]\n            [cuerdas.core :as string]\n            [oc.lib.oauth :as oauth]\n            [oc.web.lib.utils :as utils]))\n\n(def default-avatar \"/img/ML/happy_face_purple.svg\")\n(def other-default-avatars\n [\"/img/ML/happy_face_green.svg\"\n  \"/img/ML/happy_face_blue.svg\"\n  \"/img/ML/happy_face_purple.svg\"\n  \"/img/ML/happy_face_yellow.svg\"])\n\n(defn default-avatar? [image-url]\n  (let [images-set (conj (set other-default-avatars) default-avatar)]\n    (images-set image-url)))\n\n(defn random-avatar []\n  (first (shuffle (vec (conj other-default-avatars default-avatar)))))\n\n(def publisher-board-slug-prefix \"publisher-board-\")\n\n(def user-avatar-filestack-config\n  {:accept \"image/*\"\n   :fromSources [\"local_file_system\"]\n   :transformations {\n     :crop {\n       :aspectRatio 1}}})\n\n(def user-name-max-lenth 64)\n\n;; Associated Slack user check\n\n(defn user-has-slack-with-bot?\n  \"Check if the current user has an associated Slack user under a team that has the bot.\"\n  [current-user-data bots-data team-roster]\n  (let [slack-orgs-with-bot (map :slack-org-id bots-data)\n        slack-users (:slack-users (first (filter #(= (:user-id %) (:user-id current-user-data)) (:users team-roster))))]\n    (some #(contains? slack-users (keyword %)) slack-orgs-with-bot)))\n\n(defn user-has-push-token?\n  [current-user-data push-token]\n  (let [current-push-tokens (set (:expo-push-tokens current-user-data))]\n    (current-push-tokens push-token)))\n\n(defn auth-link-with-state [original-url {:keys [user-id team-id redirect redirect-origin] :as state}]\n  (let [parsed-url       (js/URL. original-url)\n        old-state-string (.. parsed-url -searchParams (get \"state\"))\n        decoded-state    (oauth/decode-state-string old-state-string)\n        combined-state   (merge decoded-state state)\n        new-state-string (oauth/encode-state-string combined-state)]\n    (.. parsed-url -searchParams (set \"state\" new-state-string))\n    (str parsed-url)))\n\n(defn- localized-time\n  ([tz] (localized-time tz {}))\n  ([tz {:keys [suffix] :as opts}]\n  (try\n   (str\n    (.toLocaleTimeString (js/Date.)\n     (.. js/window -navigator -language)\n     #js {:hour \"2-digit\"\n          :minute \"2-digit\"\n          :format \"hour:minute\"\n          :timeZone tz})\n     (when (seq suffix)\n       (str \" \" (string/trim suffix))))\n   (catch :default e\n    nil))))\n\n(defn readable-tz [tz]\n  (string/collapse-whitespace (string/replace tz #\"(_|-)\" \" \")))\n\n(defn time-with-timezone\n  ([timezone] (time-with-timezone timezone {}))\n  ([timezone opts]\n  (when-let [lt (localized-time timezone opts)]\n    (utils/time-without-leading-zeros lt))))\n\n(defn timezone-location-string [user-data & [local-time-string?]]\n  (let [twt (time-with-timezone (:timezone user-data) {:suffix (when local-time-string? \"local time\")})\n        tz (readable-tz (:timezone user-data))]\n    (str twt\n         (if (seq (:location user-data))\n           (if (seq twt)\n             (str \" (\" (:location user-data) \")\")\n             (:location user-data))\n           (when (seq tz)\n             (if (seq twt)\n               (str \" (\" tz \")\")\n               tz))))))\n\n(defn location-timezone-string [user-data & [local-time-string?]]\n  (let [twt (time-with-timezone (:timezone user-data) {:suffix (when local-time-string? \"local time\")})\n        tz (readable-tz (:timezone user-data))]\n    (str\n     (if (seq (:location user-data))\n       (if (seq twt)\n         (str (:location user-data) \" (\" twt \")\")\n         (:location user-data))\n       (when (seq tz)\n         (if (seq twt)\n           (str twt \" (\" tz \")\")\n           tz))))))\n\n(defun active?\n  ([user :guard map?] (active? (:status user)))\n\n  ([_user-status :guard not] false)\n\n  ([user-status :guard string?] (#{\"active\" \"unverified\"} user-status)))\n\n(defn filter-active-users [users-list]\n  (filter active? users-list))\n\n; (defn user-role [org-data user-data]\n;   (let [is-admin? (j/is-admin? (:team-id org-data))\n;         is-author? (utils/link-for (:links org-data) \"create\")]\n;     (cond\n;       is-admin? :admin\n;       is-author? :author\n;       :else :viewer)))\n\n(defn user-role-string [role-kw]\n  (case role-kw\n   :admin\n   \"admin\"\n   :author\n   \"contributor\"\n   \"viewer\"))\n\n(defn get-author\n  \"Get the author data from the org list of authors\"\n  [user-id authors]\n  (when (and (seq authors)\n             (seq user-id))\n    ((set (map :user-id authors)) user-id)))\n\n(defun get-user-type\n  \"Calculate the user type, return admin if it's an admin,\n  check if it's in the authors list if not admin\n  return viewer else.\"\n  ([user-data org-data]\n  (cond\n    ;; if :admin is present and it's true\n    (true? (:admin? user-data))\n    :admin\n    ;; if :admin is present and it's a list of teams\n    ;; and it contains the actual org team\n    ((set (:admin user-data)) (:team-id org-data))\n    :admin\n    ;; if the user is in the list of authors of the org data\n    ;; or if a board is passed and the authors list contains the user-id\n    (get-author (:user-id user-data) (:authors org-data))\n    :author\n    ;; viewer in all other cases\n    :else\n    :viewer))\n  ([user-data org-data board-data :guard map?]\n   (if (get-author (:user-id user-data) (:authors board-data))\n     :viewer)))"]}