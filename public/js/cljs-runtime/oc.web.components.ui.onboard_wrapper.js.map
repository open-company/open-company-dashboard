{"version":3,"sources":["oc/web/components/ui/onboard_wrapper.cljs"],"mappings":"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","names":["oc.web.components.ui.onboard-wrapper/clean-org-name","org-name","cuerdas.core.trim","oc.web.components.ui.onboard-wrapper/delay-focus-field-with-ref","s","r","oc.web.lib.utils/after","temp__5735__auto__","field","rum.core/ref-node","rum.core/build-defcs","js/React.createElement","sablono.util/join-classes","p1__46942#","p1__46944#","sablono.interpreter/interpret","sablono.interpreter/create-element","cljs.core/deref","p1__46945#","p1__46947#","oc.web.components.ui.onboard-wrapper/lander","rum.core/static","rum.core/reactive","org.martinklepsch.derivatives.drv","oc.web.stores.user/signup-with-email","rum.core.local","oc.web.actions.user/signup-with-email-reset-errors","signup-with-email","org.martinklepsch.derivatives/react","auth-settings","deep-link-origin","continue-disabled?","cljs.core/not","oc.web.lib.utils/valid-email?","cljs.core/count","continue-fn","_","cljs.core/reset!","oc.web.actions.user/signup-with-email","cljs.core/identity","oc.web.router/history-back!","auth-link","oc.web.lib.utils.link_for","oc.web.actions.user.login_with_slack","oc.shared.useragent/mobile-app?","oc.web.actions.user.login_with_google","e","cljs.core._EQ_","oc.web.lib.utils/class-set","oc.web.lib.utils/hide-class","oc.web.lib.utils/valid-email-pattern","v","oc.web.urls/terms","oc.web.urls/privacy","oc.shared.useragent/pseudo-native?","oc.web.urls/native-login","oc.web.urls/login","oc.web.lib.utils/event-stop","oc.web.router/nav!","oc.web.components.ui.onboard-wrapper/profile-setup-team-data","oc.web.actions.team/teams-get-if-needed","org-editing","org.martinklepsch.derivatives/get-ref","teams-data","cljs.core/seq","first-team","cljs.core/select-keys","cljs.core/first","p1__46985#","oc.web.dispatcher/dispatch!","cljs.core.merge","img","goog.dom/createDom","goog.dom/removeNode","p1__46986#","cljs.core.dissoc","goog.dom/append","js/document","oc.web.components.ui.onboard-wrapper/update-tooltip","header-avatar","$header-avatar","js/$","edit-user-profile-avatar","title","cuerdas.core/includes?","oc.web.components.ui.onboard-wrapper/error-cb","res","error","oc.web.actions.notifications/show-notification","oc.web.components.ui.onboard-wrapper/success-cb","url","goog.object/get","oc.web.components.ui.onboard-wrapper/progress-cb","progress","oc.web.components.ui.onboard-wrapper/upload-user-profile-picture-clicked","oc.web.lib.image-upload/upload!","oc.web.utils.user/user-avatar-filestack-config","cljs.core.partial","attrs46990","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","p1__46987#","p1__46988#","oc.web.components.ui.onboard-wrapper/lander-profile","oc.web.mixins.ui/refresh-tooltips-mixin","oc.web.actions.user/user-profile-reset","o","edit-user-profile","and__4115__auto__","or__4126__auto__","has-org?","current-user-data","user-data","continue-disabled","cljs.core/empty?","is-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","oc.web.actions.user.onboard_profile_save","oc.web.utils.user/default-avatar?","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.utils.user/user-name-max-lenth","p1__46989#","oc.web.utils.org/org-name-max-length","new-name","clean-org-name","cljs.core.subs","x__4217__auto__","y__4218__auto__","cljs.core.rand","oc.web.actions.jwt.logout","oc.web.urls/sign-up","oc.web.components.ui.onboard-wrapper/setup-team-data","p1__46999#","p1__47007#","oc.web.components.ui.onboard-wrapper/lander-team","oc.web.actions.org/create-or-update-org","oc.web.lib.image_upload.upload_BANG_","oc.web.utils.org/org-avatar-filestack-config","p1__47002#","p1__47004#","oc.web.components.ui.org-avatar/org-avatar","oc.web.components.ui.onboard-wrapper/default-invite-row","oc.web.components.ui.onboard-wrapper/check-invite-row","invite","cljs.core.assoc","oc.web.components.ui.onboard-wrapper/check-invites","cljs.core/vec","cljs.core.map","oc.web.components.ui.onboard-wrapper/default-invite-note","cljs.core.into_array","iter__4529__auto__","s__47031","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__47033","cljs.core/chunk-buffer","i__47032","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47030","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","oc.web.components.ui.onboard-wrapper/lander-invite","rows","cljs.core.repeat","invite-users","invite-errors","cljs.core.filter","to-send","p1__47020#","oc.web.actions.org/signup-invite-completed","org-data","valid-rows","p1__47021#","error-rows","p1__47022#","errors","not-empty-invites","p1__47023#","oc.web.actions.team.invite_users","cljs.core.conj","idx","cljs.core.range","cljs.core.get","cljs.core/assoc-in","oc.web.components.ui.onboard-wrapper/dots-animation","dots-node","dots","next-dots","G__47035","attrs47038","attrs47057","p1__47036#","p1__47037#","attrs47056","attrs47051","oc.web.components.ui.onboard-wrapper/invitee-team-lander","team-invite-drv","email-signup-link","team-data","oc.web.actions.user.signup_with_email","oc.web.components.ui.small-loading/small-loading","oc.web.components.ui.onboard-wrapper/confirm-invitation-when-ready","confirm-invitation","oc.web.actions.user/confirm-invitation","attrs47062","oc.web.components.ui.onboard-wrapper/invitee-lander","p1__47067#","oc.web.components.ui.onboard-wrapper/invitee-lander-password","collect-password-drv","jwt","collect-pswd","collect-pswd-error","oc.web.actions.user/pswd-collect","oc.web.lib.responsive/is-mobile-size?","p1__47078#","p1__47079#","oc.web.components.ui.onboard-wrapper/invitee-lander-profile","orgs","oc.web.urls.org","attrs47092","oc.web.components.ui.onboard-wrapper/email-wall","email","oc.web.components.ui.onboard-wrapper/exchange-token-when-ready","oc.web.actions.user/auth-with-token","oc.web.components.ui.onboard-wrapper/email-verified","email-verification","oc.web.actions.user/verify-continue","oc.web.components.ui.onboard-wrapper/exchange-pswd-reset-token-when-ready","oc.web.components.ui.onboard-wrapper/password-reset-lander","password-reset","oc.web.components.ui.onboard-wrapper/get-component","c","G__47093","cljs.core/Keyword","oc.web.components.ui.onboard-wrapper/onboard-wrapper","component","ap-loading","loading?","oc.web.lib.jwt/jwt","G__47094","oc.web.components.ui.loading/loading","cljs.core/name","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.onboard-wrapper\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [cuerdas.core :as string]\n            [oc.web.expo :as expo]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.shared.useragent :as ua]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.ui :as ui-utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.lib.image-upload :as iu]\n            [oc.web.utils.org :as org-utils]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.stores.user :as user-store]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.actions.jwt :as jwt-actions]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.loading :refer (loading)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.org-avatar :refer (org-avatar)]\n            [oc.shared.useragent :as ua]\n            [goog.dom :as gdom]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [goog.object :as gobj]))\n\n(defn- clean-org-name [org-name]\n  (string/trim org-name))\n\n(defn- delay-focus-field-with-ref\n  \"Given a Rum state and a ref, async focus the filed if it exists.\"\n  [s r]\n  (utils/after 0\n   #(when-let [field (rum/ref-node s r)]\n      (.focus field))))\n\n(rum/defcs lander < rum/static\n                    rum/reactive\n                    (drv/drv user-store/signup-with-email)\n                    (drv/drv :auth-settings)\n                    (drv/drv :expo-deep-link-origin)\n                    (rum/local false ::email-error)\n                    (rum/local false ::password-error)\n                    (rum/local \"\" ::email)\n                    (rum/local \"\" ::pswd)\n                    {:will-mount (fn [s]\n                      (user-actions/signup-with-email-reset-errors)\n                      s)}\n  [s]\n  (let [signup-with-email (drv/react s user-store/signup-with-email)\n        auth-settings (drv/react s :auth-settings)\n        deep-link-origin (drv/react s :expo-deep-link-origin)\n        continue-disabled? (or (not (utils/valid-email? @(::email s)))\n                               (<= (count @(::pswd s)) 7))\n        continue-fn (if continue-disabled?\n                      (fn [_]\n                        (when-not (utils/valid-email? @(::email s))\n                          (reset! (::email-error s) true))\n                        (when (<= (count @(::pswd s)) 7)\n                          (reset! (::password-error s) true)))\n                      #(user-actions/signup-with-email {:email @(::email s) :pswd @(::pswd s)}))]\n    [:div.onboard-lander.lander.group\n      [:header.main-cta\n        [:button.mlb-reset.top-back-button\n          {:on-touch-start identity\n           :on-click #(router/history-back!)}\n          \"Back\"]\n        [:div.title.main-lander\n          \"Let\u2019s get started!\"]\n        [:button.mlb-reset.top-continue\n          {:class (when continue-disabled? \"disabled\")\n           :on-click continue-fn}\n          \"Continue\"]]\n      [:div.onboard-form\n        [:div.form-title\n          \"Your profile\"]\n        [:div.signup-buttons.group\n          [:button.mlb-reset.signup-with-slack\n            {:on-touch-start identity\n             :on-click #(do\n                         (.preventDefault %)\n                         (when-let [auth-link (utils/link-for (:links auth-settings) \"authenticate\" \"GET\"\n                                               {:auth-source \"slack\"})]\n                           (user-actions/login-with-slack auth-link\n                                                          (when ua/mobile-app?\n                                                            {:redirect-origin deep-link-origin}))))}\n            [:div.slack-icon\n              {:aria-label \"slack\"}]\n            [:div.slack-text \"Slack\"]]\n         [:button.mlb-reset.signup-with-google\n           {:on-touch-start identity\n            :on-click #(do\n                         (.preventDefault %)\n                         (when-let [auth-link (utils/link-for (:links auth-settings) \"authenticate\" \"GET\"\n                                                              {:auth-source \"google\"})]\n                           (user-actions/login-with-google auth-link\n                                                           (when ua/mobile-app?\n                                                             {:redirect-origin deep-link-origin}))))}\n            [:div.google-icon\n              {:aria-label \"google\"}]\n            [:div.google-text \"Google\"]]]\n        [:div.or-with-email\n          [:div.or-with-email-copy\n            \"Or, sign up with email\"]]\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          [:div.field-label.email-field\n            \"Work email\"\n            (cond\n              (= (:error signup-with-email) 409)\n              [:span.error \"Email already exists\"]\n              @(::email-error s)\n              [:span.error \"Email is not valid\"])]\n          [:input.field.oc-input\n            {:type \"email\"\n             :class (utils/class-set {:error (= (:error signup-with-email) 409)\n                                      utils/hide-class true})\n             :pattern utils/valid-email-pattern\n             :value @(::email s)\n             :on-change #(let [v (.. % -target -value)]\n                           (reset! (::password-error s) false)\n                           (reset! (::email-error s) false)\n                           (reset! (::email s) v))}]\n          [:div.field-label\n            \"Password\"\n            (when @(::password-error s)\n              [:span.error\n                \"Minimum 8 characters\"])]\n          [:input.field.oc-input\n            {:type \"password\"\n             :pattern \".{8,}\"\n             :value @(::pswd s)\n             :placeholder \"Minimum 8 characters\"\n             :on-change #(let [v (.. % -target -value)]\n                           (reset! (::password-error s) false)\n                           (reset! (::email-error s) false)\n                           (reset! (::pswd s) v))}]\n          [:button.continue\n            {:class (when continue-disabled? \"disabled\")\n             :on-touch-start identity\n             :on-click continue-fn}\n            \"Continue\"]\n          [:div.field-description\n            \"By clicking continue, you agree to our \"\n            [:a\n              {:href oc-urls/terms}\n              \"terms of service\"]\n            \" and \"\n            [:a\n              {:href oc-urls/privacy}\n              \"privacy policy\"]\n            \".\"]]]\n        [:div.footer-link\n          \"Already have an account?\"\n          [:div\n            [:a {:href (if ua/pseudo-native?\n                         oc-urls/native-login\n                         oc-urls/login)\n                 :on-click (fn [e]\n                             (utils/event-stop e)\n                             (router/nav! (if ua/pseudo-native?\n                              oc-urls/native-login\n                              oc-urls/login)))}\n             \"Sign in here\"]]]]))\n\n(defn- profile-setup-team-data\n  \"\"\n  [s]\n  ;; Load the list of teams if it's not already\n  (team-actions/teams-get-if-needed)\n  (let [org-editing @(drv/get-ref s :org-editing)\n        teams-data @(drv/get-ref s :teams-data)]\n    (if (and (zero? (count (:name org-editing)))\n             (seq teams-data))\n      (let [first-team (select-keys\n                        (first teams-data)\n                        [:name :logo-url])]\n        (dis/dispatch! [:update [:org-editing] #(merge % first-team)])\n        (when (seq (:logo-url first-team))\n          (let [img (gdom/createDom \"img\")]\n            (set! (.-onload img) #(gdom/removeNode img))\n            (set! (.-onerror img)\n             (fn []\n               (dis/dispatch! [:update [:org-editing] #(dissoc % :logo-url)])\n               (gdom/removeNode img)))\n            (gdom/append (.-body js/document) img)\n            (set! (.-src img) (:logo-url first-team))))))))\n\n(defn- update-tooltip [s]\n  (utils/after 100\n   #(let [header-avatar (rum/ref-node s \"user-profile-avatar\")\n          $header-avatar (js/$ header-avatar)\n          edit-user-profile-avatar (-> s (drv/get-ref :edit-user-profile) deref :user-data :avatar-url)\n          title (if (string/includes? edit-user-profile-avatar \"/img/ML/happy_face_\")\n                  \"Add a photo\"\n                  \"Change photo\")]\n      (.tooltip $header-avatar #js {:title title\n                                    :trigger \"hover focus\"\n                                    :position \"top\"\n                                    :container \"body\"}))))\n\n(defn error-cb [s res error]\n  (notification-actions/show-notification\n    {:title \"Image upload error\"\n     :description \"An error occurred while processing your image. Please retry.\"\n     :expire 3\n     :dismiss true})\n  (update-tooltip s))\n\n(defn success-cb\n  [s res]\n  (let [url (gobj/get res \"url\")]\n    (if-not url\n      (error-cb s nil nil)\n      (dis/dispatch! [:input [:edit-user-profile :avatar-url] url]))\n    (update-tooltip s)))\n\n(defn progress-cb [res progress])\n\n(defn upload-user-profile-picture-clicked [s]\n  (iu/upload! user-utils/user-avatar-filestack-config (partial success-cb s) progress-cb (partial error-cb s)))\n\n(rum/defcs lander-profile < rum/reactive\n                            (drv/drv :edit-user-profile)\n                            (drv/drv :current-user-data)\n                            (drv/drv :teams-data)\n                            (drv/drv :org-editing)\n                            (drv/drv :orgs)\n                            (rum/local false ::saving)\n                            ui-mixins/refresh-tooltips-mixin\n                            {:will-mount (fn [s]\n                              (dis/dispatch! [:input [:org-editing :name] \"\"])\n                              (user-actions/user-profile-reset)\n                              s)\n                             :did-mount (fn [s]\n                              (profile-setup-team-data s)\n                              (delay-focus-field-with-ref s \"first-name\")\n                              (update-tooltip s)\n                             s)\n                             :did-remount (fn [o s]\n                              (update-tooltip s)\n                              s)\n                             :will-update (fn [s]\n                              (profile-setup-team-data s)\n                              (let [edit-user-profile @(drv/get-ref s :edit-user-profile)\n                                    org-editing @(drv/get-ref s :org-editing)]\n                                (when (and @(::saving s)\n                                           (or (:error edit-user-profile)\n                                               (:error org-editing)))\n                                  (reset! (::saving s) false)))\n                             s)}\n  [s]\n  (let [has-org? (pos? (count (drv/react s :orgs)))\n        edit-user-profile (drv/react s :edit-user-profile)\n        current-user-data (drv/react s :current-user-data)\n        teams-data (drv/react s :teams-data)\n        org-editing (drv/react s :org-editing)\n        user-data (:user-data edit-user-profile)\n        continue-disabled (or @(::saving s)\n                              (and (empty? (:first-name user-data))\n                                   (empty? (:last-name user-data)))\n                              (and (not has-org?)\n                                   (-> org-editing :name clean-org-name count (<= 1))))\n        is-mobile? (responsive/is-tablet-or-mobile?)\n        continue-fn #(when-not continue-disabled\n                       (reset! (::saving s) true)\n                       (dis/dispatch! [:update [:org-editing :name] clean-org-name])\n                       (user-actions/onboard-profile-save current-user-data edit-user-profile :org-editing))]\n    [:div.onboard-lander.lander-profile\n      [:header.main-cta\n        [:div.title.about-yourself\n          (if has-org?\n           \"Tell us about you\"\n           \"Create your team\")]]\n      (when (:error edit-user-profile)\n        [:div.subtitle.error\n          \"An error occurred while saving your data, please try again\"])\n      [:div.onboard-form\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          [:div.form-title\n            \"Your profile\"]\n          [:button.mlb-reset.user-profile-avatar\n            {:on-click #(upload-user-profile-picture-clicked s)\n             :ref \"user-profile-avatar\"\n             :data-toggle (when-not is-mobile? \"tooltip\")\n             :title \"Change avatar\"\n             :data-placement \"top\"\n             :class (when (user-utils/default-avatar? (:avatar-url user-data)) \"default-avatar\")}\n            (user-avatar-image user-data)\n            [:div.plus-icon]]\n          [:div.field-label.name-fields\n              \"First name\"]\n          [:input.field.oc-input\n            {:class utils/hide-class\n             :type \"text\"\n             :ref \"first-name\"\n             :placeholder \"First name...\"\n             :max-length user-utils/user-name-max-lenth\n             :value (or (:first-name user-data) \"\")\n             :on-change #(dis/dispatch! [:input [:edit-user-profile :first-name] (.. % -target -value)])}]\n          [:div.field-label\n            \"Last name\"]\n          [:input.field.oc-input\n            {:class utils/hide-class\n             :type \"text\"\n             :placeholder \"Last name...\"\n             :value (or (:last-name user-data) \"\")\n             :max-length user-utils/user-name-max-lenth\n             :on-change #(dis/dispatch! [:input [:edit-user-profile :last-name] (.. % -target -value)])}]\n          (when-not has-org?\n            [:div.field-label.company-name\n              \"Company name\"])\n          (when-not has-org?\n            [:input.field.oc-input\n              {:type \"text\"\n               :ref \"org-name\"\n               :placeholder \"Enter a team name...\"\n               :class (utils/class-set {:error (:error org-editing)\n                                        utils/hide-class true})\n               :max-length org-utils/org-name-max-length\n               :value (:name org-editing)\n               :on-change #(let [new-name (.. % -target -value)\n                                 clean-org-name (subs new-name 0 (min (count new-name)\n                                                 org-utils/org-name-max-length))]\n                             (dis/dispatch! [:input [:org-editing] (merge org-editing {:error nil\n                                                                                       :name clean-org-name\n                                                                                       ;; Enforce a change in the app-state\n                                                                                       ;; to make sure the name is truncated\n                                                                                       :rand (rand 1000)})]))}])\n          (when (:error org-editing)\n            [:div.error \"Must be between 3 and 50 characters\"])\n          [:button.continue\n            {:class (when continue-disabled \"disabled\")\n             :on-touch-start identity\n             :on-click continue-fn}\n            \"Create team\"]]]\n        [:div.logout-cancel\n          \"Need to start over? \"\n          [:button.mlb-reset.logout-cancel\n            {:on-click #(jwt-actions/logout oc-urls/sign-up)}\n            \"Click here\"]]]))\n\n(defn- setup-team-data\n  \"\"\n  [s]\n  ;; Load the list of teams if it's not already\n  (team-actions/teams-get-if-needed)\n  (let [org-editing @(drv/get-ref s :org-editing)\n        teams-data @(drv/get-ref s :teams-data)]\n    (if (and (zero? (count (:name org-editing)))\n             (zero? (count (:logo-url org-editing)))\n             (seq teams-data))\n      (let [first-team (select-keys\n                        (first teams-data)\n                        [:name :logo-url])]\n        (dis/dispatch! [:update [:org-editing] #(merge % first-team)])\n        (when (and (not (zero? (count (:logo-url first-team))))\n                   (not (:logo-height first-team)))\n          (let [img (gdom/createDom \"img\")]\n            (set! (.-onload img)\n             #(gdom/removeNode img))\n            (gdom/append (.-body js/document) img)\n            (set! (.-src img) (:logo-url first-team))))))))\n\n(rum/defcs lander-team < rum/reactive\n                         (drv/drv :teams-data)\n                         (drv/drv :org-editing)\n                         (rum/local false ::saving)\n                         {:will-mount (fn [s]\n                           (dis/dispatch! [:input [:org-editing :name] \"\"])\n                           s)\n                          :did-mount (fn [s]\n                           (setup-team-data s)\n                           (delay-focus-field-with-ref s \"org-name\")\n                           s)\n                          :will-update (fn [s]\n                           (setup-team-data s)\n                           s)}\n  [s]\n  (let [teams-data (drv/react s :teams-data)\n        org-editing (drv/react s :org-editing)\n        is-mobile? (responsive/is-tablet-or-mobile?)\n        continue-disabled (-> org-editing :name clean-org-name count (< 3))\n        continue-fn #(when-not continue-disabled\n                       (let [org-name (clean-org-name (:name org-editing))]\n                         (dis/dispatch! [:input [:org-editing :name] org-name])\n                         (if (and (seq org-name)\n                                  (>= (count org-name) 2))\n                           ;; Create org and show setup screen\n                           (org-actions/create-or-update-org @(drv/get-ref s :org-editing))\n                           (dis/dispatch! [:input [:org-editing :error] true]))))]\n    [:div.onboard-lander.lander-team\n      [:header.main-cta\n        [:div.title.company-setup\n          \"Set up your company\"]]\n      [:div.onboard-form\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          (when-not is-mobile?\n            [:div.logo-upload-container.org-logo.group\n              {:class utils/hide-class\n               :on-click (fn [_]\n                          (if (empty? (:logo-url org-editing))\n                            (iu/upload! org-utils/org-avatar-filestack-config\n                              (fn [res]\n                                (let [url (gobj/get res \"url\")\n                                      img (gdom/createDom \"img\")]\n                                  (set! (.-onload img)\n                                   (fn []\n                                    (dis/dispatch! [:update [:org-editing] #(merge % {:logo-url url})])\n                                    (gdom/removeNode img)))\n                                  (set! (.-className img) \"hidden\")\n                                  (gdom/append (.-body js/document) img)\n                                  (set! (.-src img) url)))\n                              nil (fn [_]) nil)\n                            (dis/dispatch! [:update [:org-editing] #(dissoc % :logo-url :logo-width :logo-height)])))}\n              (org-avatar org-editing false :never)\n              [:div.add-picture-link\n                (if (empty? (:logo-url org-editing))\n                  \"Add company logo\"\n                  \"Change company logo\")]\n              [:div.add-picture-link-subtitle\n                \"A 160x160 transparent Gif or PNG works best.\"]])\n          [:div.field-label\n            \"Company name\"]\n          [:input.field.oc-input\n            {:type \"text\"\n             :ref \"org-name\"\n             :class (utils/class-set {:error (:error org-editing)\n                                      utils/hide-class true})\n             :value (:name org-editing)\n             :on-change #(dis/dispatch! [:input [:org-editing]\n               (merge org-editing {:error nil :name (.. % -target -value)})])}]\n          (when (:error org-editing)\n            [:div.error \"Must be between 3 and 50 characters\"])\n          [:button.continue\n            {:class (when continue-disabled \"disabled\")\n             :on-touch-start identity\n             :on-click continue-fn}\n            \"Continue\"]]]]))\n\n(def default-invite-row\n  {:user \"\"\n   :type \"email\"\n   :role :author\n   :error false})\n\n(defn- check-invite-row [invite]\n  (assoc invite :error (and (seq (:user invite)) (not (utils/valid-email? (:user invite))))))\n\n(defn- check-invites [s]\n  (reset! (::invite-rows s) (vec (map check-invite-row @(::invite-rows s)))))\n\n(def default-invite-note\n  (str\n    \"Hey there, let's explore Wut together. It's a place to make sure important \"\n    \"announcements, updates, and decisions don't get lost in the noise.\"))\n\n(rum/defcs lander-invite < rum/reactive\n                           (drv/drv :org-data)\n                           (drv/drv :invite-users)\n                           (rum/local false ::inviting)\n                           (rum/local nil ::invite-error)\n                           (rum/local (rand 3) ::invite-rand)\n                           (rum/local [] ::invite-rows)\n                           (rum/local default-invite-note ::invite-note)\n                           {:will-mount (fn [s]\n                             (let [rows (if (responsive/is-tablet-or-mobile?) 2 3)]\n                               (reset! (::invite-rows s) (vec (repeat rows default-invite-row))))\n                             s)\n                            :did-mount (fn [s]\n                             ;; Load the list of teams if it's not already\n                             (team-actions/teams-get-if-needed)\n                             s)\n                            :will-update (fn [s]\n                             ;; Load the list of teams if it's not already\n                             (team-actions/teams-get-if-needed)\n                             (when @(::inviting s)\n                               (let [invite-users @(drv/get-ref s :invite-users)\n                                     invite-errors (filter :error invite-users)\n                                     to-send (filter #(not (:error %)) invite-users)]\n                                 (when (zero? (count to-send))\n                                   (reset! (::inviting s) false)\n                                   (if (pos? (count invite-errors))\n                                     ;; There were errors inviting users, show them and let the user retry\n                                     (do\n                                       (reset! (::invite-rand s) (rand 3))\n                                       (reset! (::invite-error s) \"An error occurred inviting the following users, please try again.\")\n                                       (reset! (::invite-rows s) (vec invite-errors)))\n                                     ;; All invites sent, redirect to dashboard\n                                     (org-actions/signup-invite-completed @(drv/get-ref s :org-data))))))\n                             s)}\n  [s]\n  (let [_ (drv/react s :invite-users)\n        org-data (drv/react s :org-data)\n        valid-rows (filter #(and (seq (:user %))\n                                 (not (:error %))) @(::invite-rows s))\n        error-rows (filter #(and (seq (:user %))\n                                 (:error %)) @(::invite-rows s))\n        continue-fn (fn []\n                     (let [_ (check-invites s)\n                           errors (filter :error @(::invite-rows s))]\n                       (when (zero? (count errors))\n                         (reset! (::inviting s) true)\n                         (reset! (::invite-error s) nil)\n                         (let [not-empty-invites (filter #(seq (:user %)) @(::invite-rows s))]\n                           (team-actions/invite-users not-empty-invites \"\")))))\n        continue-disabled (not (zero? (count error-rows)))]\n    [:div.onboard-lander.lander-invite\n      [:header.main-cta\n        [:div.title\n          \"Invite your team\"]]\n      [:div.subtitle\n        \"Invite some colleagues to explore Wut with you.\"]\n      [:div.onboard-form\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          [:div.field-label.invite-teammates\n            \"Invite teammates \" [:span.info \"(optional)\"]\n            [:button.mlb-reset.add-another-invite-row\n              {:on-click #(reset! (::invite-rows s) (vec (conj @(::invite-rows s) default-invite-row)))}\n              \"+ add more\"]]\n          (when @(::invite-error s)\n            [:div.error @(::invite-error s)])\n          [:div.invite-rows\n            {:class utils/hide-class}\n            (for [idx (range (count @(::invite-rows s)))\n                  :let [invite (get @(::invite-rows s) idx)]]\n              [:div.invite-row\n                {:class (when (:error invite) \"error\")\n                 :key (str \"invite-row-\" @(::invite-rand s) \"-\" idx)}\n                [:input.oc-input\n                  {:type \"text\"\n                   :placeholder \"name@example.com\"\n                   :on-change (fn [e]\n                               (reset! (::invite-rows s)\n                                (vec\n                                 (assoc-in @(::invite-rows s) [idx]\n                                  (assoc invite :user (.. e -target -value)))))\n                               (check-invites s))\n                   :value (:user invite)}]])]\n          [:button.continue\n            {:on-touch-start identity\n             :on-click continue-fn\n             :class (when (or @(::inviting s)\n                              continue-disabled) \"disabled\")}\n            \"Invite team\"]\n          [:button.mlb-reset.skip-for-now\n            {:on-click #(org-actions/signup-invite-completed org-data)}\n            \"Skip for now\"]]]]))\n\n(defn dots-animation [s]\n  (when-let [dots-node (rum/ref-node s :dots)]\n    (let [dots (.-innerText dots-node)\n          next-dots (case dots\n                      \".\" \"..\"\n                      \"..\" \"...\"\n                      \".\")]\n      (set! (.-innerText dots-node) next-dots)\n      (utils/after 800 #(dots-animation s)))))\n\n(rum/defcs invitee-team-lander < rum/reactive\n                                 (drv/drv :team-invite)\n                                 (drv/drv user-store/signup-with-email)\n                                 (rum/local false ::email-error)\n                                 (rum/local false ::password-error)\n                                 (rum/local \"\" ::email)\n                                 (rum/local \"\" ::pswd)\n                                 (rum/local false ::auth-settings-loaded)\n                                 {:did-mount (fn [s]\n                                    (dots-animation s)\n                                  s)\n                                  :will-update (fn [s]\n                                    (let [auth-settings (:auth-settings @(drv/get-ref s :team-invite))]\n                                      (when (and (not @(::auth-settings-loaded s))\n                                                 auth-settings\n                                                 (not (:team auth-settings)))\n                                        (reset! (::auth-settings-loaded s) true)))\n                                  s)}\n  [s]\n  (let [team-invite-drv (drv/react s :team-invite)\n        auth-settings (:auth-settings team-invite-drv)\n        email-signup-link (utils/link-for (:links auth-settings) \"create\" \"POST\" {:auth-source \"email\"})\n        team-data (:team auth-settings)\n        signup-with-email (drv/react s user-store/signup-with-email)]\n    [:div.onboard-lander.invitee-team-lander\n      [:header.main-cta\n        (when-not ua/mobile-app?\n          [:button.mlb-reset.top-back-button\n            {:on-touch-start identity\n             :on-click #(router/history-back!)\n             :aria-label \"Back\"}])\n        (if auth-settings\n          (if (:team auth-settings)\n            [:div.title\n              \"Your team is using Wut to share updates\"]\n            [:div.title\n              \"Oh oh...\"])\n          [:div.title\n            \"Please wait\"])]\n      (if auth-settings\n        (if (:team auth-settings)\n          [:div.onboard-form\n            [:form\n              {:on-submit (fn [e]\n                            (.preventDefault e))}\n              [:div.title-container\n                [:div.team-logo-container\n                  (org-avatar team-data false :never)]\n                [:div.title.main-lander\n                  \"Join \" (:name team-data) \" on Wut\"]]\n              [:div.field-label.email-field\n                \"Work email\"\n                (cond\n                  (= (:error signup-with-email) 409)\n                  [:span.error \"Email already exists\"]\n                  @(::email-error s)\n                  [:span.error \"Email is not valid\"])]\n              [:input.field.oc-input\n                {:type \"email\"\n                 :class (utils/class-set {:error (= (:error signup-with-email) 409)\n                                          utils/hide-class true})\n                 :pattern utils/valid-email-pattern\n                 :value @(::email s)\n                 :on-change #(let [v (.. % -target -value)]\n                               (reset! (::password-error s) false)\n                               (reset! (::email-error s) false)\n                               (reset! (::email s) v))}]\n              [:div.field-label\n                \"Password\"\n                (when @(::password-error s)\n                  [:span.error\n                    \"Minimum 8 characters\"])]\n              [:input.field.oc-input\n                {:type \"password\"\n                 :pattern \".{8,}\"\n                 :value @(::pswd s)\n                 :placeholder \"Minimum 8 characters\"\n                 :on-change #(let [v (.. % -target -value)]\n                               (reset! (::password-error s) false)\n                               (reset! (::email-error s) false)\n                               (reset! (::pswd s) v))}]\n              [:div.field-description\n                \"By signing up you are agreeing to our \"\n                [:a\n                  {:href oc-urls/terms}\n                  \"terms of service\"]\n                \" and \"\n                [:a\n                  {:href oc-urls/privacy}\n                  \"privacy policy\"]\n                \".\"]\n              [:button.continue\n                {:class (when (or (not (utils/valid-email? @(::email s)))\n                                  (<= (count @(::pswd s)) 7))\n                          \"disabled\")\n                 :on-touch-start identity\n                 :on-click #(if (or (not (utils/valid-email? @(::email s)))\n                                    (<= (count @(::pswd s)) 7))\n                              (do\n                                (when-not (utils/valid-email? @(::email s))\n                                  (reset! (::email-error s) true))\n                                (when (<= (count @(::pswd s)) 7)\n                                  (reset! (::password-error s) true)))\n                              (user-actions/signup-with-email {:email @(::email s) :pswd @(::pswd s)} true))}\n                (str \"Join \" (:name team-data))]]]\n          [:div.subtitle.token-error\n            (str \"The invite link you\u2019re trying to access \"\n                 \"has been deactivated by your account admin \"\n                 \"and is no longer valid.\")])\n        [:div.subtitle.checking-invitation\n          (small-loading)\n          \"Checking invitation link\" [:span.dots {:ref :dots} \".\"]])]))\n\n(defn confirm-invitation-when-ready [s]\n  (let [confirm-invitation @(drv/get-ref s :confirm-invitation)]\n    (when (and (:auth-settings confirm-invitation)\n               (not @(::exchange-started s)))\n      (reset! (::exchange-started s) true)\n      (user-actions/confirm-invitation (:token confirm-invitation)))))\n\n(rum/defcs invitee-lander < rum/reactive\n                            (drv/drv :confirm-invitation)\n                            (rum/local false ::exchange-started)\n                            (rum/local false ::exchange-ended)\n                            {:will-mount (fn [s]\n                              (confirm-invitation-when-ready s)\n                              s)\n                             :did-mount (fn [s]\n                              (dots-animation s)\n                              (confirm-invitation-when-ready s)\n                              s)\n                             :did-update (fn [s]\n                              (confirm-invitation-when-ready s)\n                              s)}\n  [s]\n  (let [confirm-invitation (drv/react s :confirm-invitation)]\n    [:div.onboard-lander.invitee-lander\n      [:header.main-cta\n        [:div.invite-container\n          [:div.title\n            \"Join your team on Wut\"]]]\n      (if (:invitation-error confirm-invitation)\n        [:div.subtitle.token-error\n          \"An error occurred while confirming your invitation, please try again.\"]\n        [:div.subtitle.checking-invitation\n          (small-loading)\n          \"Checking invitation link\" [:span.dots {:ref :dots} \".\"]])]))\n\n(rum/defcs invitee-lander-password < rum/reactive\n                                     (drv/drv :collect-password)\n                                     (rum/local false ::password-error)\n                                     ui-mixins/refresh-tooltips-mixin\n                                     {:did-mount (fn [s]\n                                       (delay-focus-field-with-ref s \"password\")\n                                       s)}\n  [s]\n  (let [collect-password-drv (drv/react s :collect-password)\n        jwt (:jwt collect-password-drv)\n        collect-pswd (:collect-pswd collect-password-drv)\n        collect-pswd-error (:collect-pswd-error collect-password-drv)\n        continue-disabled? (<= (count (:pswd collect-pswd)) 7)\n        continue-fn #(if continue-disabled?\n                      (reset! (::password-error s) true)\n                      (user-actions/pswd-collect collect-pswd false))\n        is-mobile? (responsive/is-mobile-size?)]\n    [:div.onboard-lander.invitee-lander-password\n      [:header.main-cta\n        [:div.title\n          \"Join your team on Wut\"]\n        [:button.mlb-reset.top-continue\n          {:class (when continue-disabled? \"disabled\")\n           :on-click continue-fn}\n          \"Continue\"]]\n      [:div.onboard-form\n        [:div.form-title\n          \"Set a password to get started\"]\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          [:div.field-label.email-field\n            \"Work email\"]\n          [:div.email-field-tooltip-container]\n          [:input.field.oc-input.email-field\n            {:type \"email\"\n             :class utils/hide-class\n             :value (:email jwt)\n             :read-only true}]\n          [:div.field-description \"You were invited to join your team using this email.\"]\n          [:div.field-label\n            \"Password\"\n            (when collect-pswd-error\n              [:span.error \"An error occurred, please try again.\"])\n            (when @(::password-error s)\n              [:span.error \"Minimum 8 characters\"])]\n          [:input.field.oc-input\n            {:type \"password\"\n             :class (when collect-pswd-error \"error\")\n             :value (or (:pswd collect-pswd) \"\")\n             :ref \"password\"\n             :on-change #(do\n                           (reset! (::password-error s) false)\n                           (dis/dispatch! [:input [:collect-pswd :pswd] (.. % -target -value)]))\n             :placeholder \"Minimum 8 characters\"\n             :pattern \".{8,}\"}]\n          [:button.continue\n            {:class (when continue-disabled? \"disabled\")\n             :on-touch-start identity\n             :on-click continue-fn}\n            \"Continue\"]\n          [:div.field-description\n            \"By signing up you are agreeing to our \"\n            [:a\n              {:href oc-urls/terms}\n              \"terms of service\"]\n            \" and \"\n            [:a\n              {:href oc-urls/privacy}\n              \"privacy policy\"]\n            \".\"]]]]))\n\n(rum/defcs invitee-lander-profile < rum/reactive\n                                    (drv/drv :edit-user-profile)\n                                    (drv/drv :current-user-data)\n                                    (drv/drv :orgs)\n                                    (rum/local false ::saving)\n                                    {:will-mount (fn [s]\n                                      (user-actions/user-profile-reset)\n                                      s)\n                                     :did-mount (fn [s]\n                                      (delay-focus-field-with-ref s \"first-name\")\n                                      s)\n                                     :will-update (fn [s]\n                                      (let [edit-user-profile @(drv/get-ref s :edit-user-profile)\n                                            orgs @(drv/get-ref s :orgs)]\n                                        (when (and @(::saving s)\n                                                   (not (:loading (:user-data edit-user-profile)))\n                                                   (not (:error edit-user-profile)))\n                                          (utils/after 100 #(router/nav! (oc-urls/org (:slug (first orgs)))))))\n                                      s)}\n  [s]\n  (let [edit-user-profile (drv/react s :edit-user-profile)\n        current-user-data (drv/react s :current-user-data)\n        user-data (:user-data edit-user-profile)\n        is-mobile? (responsive/is-mobile-size?)]\n    [:div.onboard-lander.invitee-lander-profile\n      [:header.main-cta\n        [:div.title.about-yourself\n          \"Tell us about you\"]]\n      (when (:error edit-user-profile)\n        [:div.subtitle.error\n          \"An error occurred while saving your data, please try again\"])\n      [:div.onboard-form\n        [:form\n          {:on-submit (fn [e]\n                        (.preventDefault e))}\n          [:div.form-title\n            \"Sign up\"]\n          [:button.mlb-reset.user-profile-avatar\n            {:on-click #(upload-user-profile-picture-clicked s)\n             :ref \"user-profile-avatar\"\n             :data-toggle (when-not is-mobile? \"tooltip\")\n             :title \"Change avatar\"\n             :data-placement \"top\"}\n            (user-avatar-image user-data)\n            [:div.plus-icon]]\n          [:div.field-label\n            \"First name\"]\n          [:input.field.oc-input\n            {:class utils/hide-class\n             :type \"text\"\n             :ref \"first-name\"\n             :placeholder \"First name...\"\n             :value (:first-name user-data)\n             :max-length user-utils/user-name-max-lenth\n             :on-change #(dis/dispatch! [:input [:edit-user-profile :first-name] (.. % -target -value)])}]\n          [:div.field-label\n            \"Last name\"]\n          [:input.field.oc-input\n            {:class utils/hide-class\n             :type \"text\"\n             :placeholder \"Last name...\"\n             :value (:last-name user-data)\n             :max-length user-utils/user-name-max-lenth\n             :on-change #(dis/dispatch! [:input [:edit-user-profile :last-name] (.. % -target -value)])}]\n          [:button.continue.start-using-carrot\n            {:disabled (and (empty? (:first-name user-data))\n                            (empty? (:last-name user-data)))\n             :on-touch-start identity\n             :on-click #(do\n                          (reset! (::saving s) true)\n                          (user-actions/onboard-profile-save current-user-data edit-user-profile))}\n            \"Start using Wut\"]]]]))\n\n(rum/defcs email-wall < rum/reactive\n                        (drv/drv :query-params)\n  [s]\n  (let [email (:e (drv/react s :query-params))]\n    [:div.onboard-email-container.email-wall\n      [:div.email-wall-icon]\n      \"Please verify your email\"\n      [:div.email-wall-subtitle\n        (str\n         \"Before you can join your team, we just need to verify your idetity. \"\n         \"Please check your email, and continue the registration process from there.\")]\n      [:div.email-wall-sent-link\n        \"We have sent an email to\"\n        (if (seq email)\n          \":\"\n          \" \")\n        (if (seq email)\n          [:div.email-address\n            {:class utils/hide-class}\n            email]\n          \"your email address\")\n        \".\"]]))\n\n(defn exchange-token-when-ready [s]\n  (when-let [auth-settings (:auth-settings @(drv/get-ref s :email-verification))]\n    (when (and (not @(::exchange-started s))\n               (utils/link-for (:links auth-settings) \"authenticate\" \"GET\" {:auth-source \"email\"}))\n      (reset! (::exchange-started s) true)\n      (user-actions/auth-with-token :email-verification))))\n\n(rum/defcs email-verified < rum/reactive\n                            (drv/drv :email-verification)\n                            (drv/drv :orgs)\n                            (rum/local false ::exchange-started)\n                            {:will-mount (fn [s]\n                                           (exchange-token-when-ready s)\n                                           s)\n                             :did-mount (fn [s]\n                                          (dots-animation s)\n                                          (exchange-token-when-ready s)\n                                          s)\n                             :did-update (fn [s]\n                                          (exchange-token-when-ready s)\n                                          s)}\n  [s]\n  (let [email-verification (drv/react s :email-verification)\n        orgs (drv/react s :orgs)]\n    (cond\n      (= (:error email-verification) 401)\n      [:div.onboard-email-container.error\n        \"This link is no longer valid.\"]\n      (:error email-verification)\n      [:div.onboard-email-container.error\n        \"An error occurred, please try again.\"]\n      (:success email-verification)\n      [:div.onboard-email-container\n        \"Thanks for verifying\"\n        [:button.mlb-reset.continue\n          {:on-click #(user-actions/verify-continue orgs)\n           :on-touch-start identity}\n          \"Get Started\"]]\n      :else\n      [:div.onboard-email-container.small.dot-animation\n        \"Verifying, please wait\" [:span.dots {:ref :dots} \".\"]])))\n\n(defn exchange-pswd-reset-token-when-ready [s]\n  (when-let [auth-settings (:auth-settings @(drv/get-ref s :password-reset))]\n    (when (and (not @(::exchange-started s))\n               (utils/link-for (:links auth-settings) \"authenticate\" \"GET\" {:auth-source \"email\"}))\n      (reset! (::exchange-started s) true)\n      (user-actions/auth-with-token :password-reset))))\n\n(rum/defcs password-reset-lander < rum/reactive\n                                   (drv/drv :password-reset)\n                                   (rum/local false ::exchange-started)\n                                   {:will-mount (fn [s]\n                                                  (exchange-pswd-reset-token-when-ready s)\n                                                  s)\n                                    :did-mount (fn [s]\n                                                 (dots-animation s)\n                                                 (exchange-pswd-reset-token-when-ready s)\n                                                 s)\n                                    :did-update (fn [s]\n                                                 (exchange-pswd-reset-token-when-ready s)\n                                                 s)}\n  [s]\n  (let [password-reset (drv/react s :password-reset)]\n    (cond\n      (= (:error password-reset) 401)\n      [:div.onboard-email-container.error\n        \"This link is no longer valid.\"]\n      (:error password-reset)\n      [:div.onboard-email-container.error\n        \"An error occurred, please try again.\"]\n      :else\n      [:div.onboard-email-container.small.dot-animation\n        \"Verifying, please wait\" [:span.dots {:ref :dots} \".\"]])))\n\n(defn get-component [c]\n  (case c\n    :lander (lander)\n    :lander-profile (lander-profile)\n    :lander-team (lander-team)\n    :lander-invite (lander-invite)\n    :invitee-lander (invitee-lander)\n    :invitee-lander-password (invitee-lander-password)\n    :invitee-lander-profile (invitee-lander-profile)\n    :invitee-team-lander (invitee-team-lander)\n    :email-wall (email-wall)\n    :email-verified (email-verified)\n    :password-reset-lander (password-reset-lander)\n    [:div]))\n\n(rum/defcs onboard-wrapper < rum/reactive\n                             (drv/drv :ap-loading)\n                             (drv/drv :current-user-data)\n  [s component]\n  (let [ap-loading (drv/react s :ap-loading)\n        user-data (drv/react s :current-user-data)\n        loading? (or ap-loading\n                     (and (jwt/jwt)\n                          (not user-data)))]\n    [:div.onboard-wrapper-container\n      {:class (when loading? \"loading\")}\n      (if loading?\n        (loading {:loading true})\n        [:div.onboard-wrapper\n          {:class (str \"onboard-\" (name component))}\n          (get-component component)])]))\n"]}