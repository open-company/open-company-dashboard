{
"version":3,
"file":"goog.net.cookies.js",
"lineCount":148,
"mappings":"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",
"sources":["goog/net/cookies.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Functions for setting, getting and deleting cookies.\n *\n * @author arv@google.com (Erik Arvidsson)\n */\n\n\ngoog.provide('goog.net.Cookies');\ngoog.provide('goog.net.cookies');\n\ngoog.require('goog.asserts');\ngoog.require('goog.string');\n\n\n\n/**\n * A class for handling browser cookies.\n * @param {?Document} context The context document to get/set cookies on.\n * @constructor\n * @final\n */\ngoog.net.Cookies = function(context) {\n  /**\n  * The context document to get/set cookies on. If no document context is\n  * passed, use a fake one with only the \"cookie\" attribute. This allows\n  * this class to be instantiated safely in web worker environments.\n  * @private {{cookie: string}}\n  */\n  this.document_ = context || {cookie: ''};\n};\n\n\n/**\n * Static constant for the size of cookies. Per the spec, there's a 4K limit\n * to the size of a cookie. To make sure users can't break this limit, we\n * should truncate long cookies at 3950 bytes, to be extra careful with dumb\n * browsers/proxies that interpret 4K as 4000 rather than 4096.\n * @const {number}\n */\ngoog.net.Cookies.MAX_COOKIE_LENGTH = 3950;\n\n\n/**\n * Returns true if cookies are enabled.\n * @return {boolean} True if cookies are enabled.\n */\ngoog.net.Cookies.prototype.isEnabled = function() {\n  return navigator.cookieEnabled;\n};\n\n\n/**\n * We do not allow '=', ';', or white space in the name.\n *\n * NOTE: The following are allowed by this method, but should be avoided for\n * cookies handled by the server.\n * - any name starting with '$'\n * - 'Comment'\n * - 'Domain'\n * - 'Expires'\n * - 'Max-Age'\n * - 'Path'\n * - 'Secure'\n * - 'Version'\n *\n * @param {string} name Cookie name.\n * @return {boolean} Whether name is valid.\n *\n * @see <a href=\"http://tools.ietf.org/html/rfc2109\">RFC 2109</a>\n * @see <a href=\"http://tools.ietf.org/html/rfc2965\">RFC 2965</a>\n */\ngoog.net.Cookies.prototype.isValidName = function(name) {\n  return !(/[;=\\s]/.test(name));\n};\n\n\n/**\n * We do not allow ';' or line break in the value.\n *\n * Spec does not mention any illegal characters, but in practice semi-colons\n * break parsing and line breaks truncate the name.\n *\n * @param {string} value Cookie value.\n * @return {boolean} Whether value is valid.\n *\n * @see <a href=\"http://tools.ietf.org/html/rfc2109\">RFC 2109</a>\n * @see <a href=\"http://tools.ietf.org/html/rfc2965\">RFC 2965</a>\n */\ngoog.net.Cookies.prototype.isValidValue = function(value) {\n  return !(/[;\\r\\n]/.test(value));\n};\n\n\n/**\n * Sets a cookie.  The max_age can be -1 to set a session cookie. To remove and\n * expire cookies, use remove() instead.\n *\n * Neither the `name` nor the `value` are encoded in any way. It is\n * up to the callers of `get` and `set` (as well as all the other\n * methods) to handle any possible encoding and decoding.\n *\n * @throws {!Error} If the `name` fails #goog.net.cookies.isValidName.\n * @throws {!Error} If the `value` fails #goog.net.cookies.isValidValue.\n *\n * @param {string} name  The cookie name.\n * @param {string} value  The cookie value.\n * @param {number|!goog.net.Cookies.SetOptions=} opt_maxAge  The options object,\n *     or else (deprecated) the max age in seconds (from now). Use -1 to set a\n *     session cookie. If not provided, the default is -1 (i.e. set a session\n *     cookie).\n * @param {?string=} opt_path  The path of the cookie. If not present then this\n *     uses the full request path.\n * @param {?string=} opt_domain  The domain of the cookie, or null to not\n *     specify a domain attribute (browser will use the full request host name).\n *     If not provided, the default is null (i.e. let browser use full request\n *     host name).\n * @param {boolean=} opt_secure Whether the cookie should only be sent over\n *     a secure channel.\n */\ngoog.net.Cookies.prototype.set = function(\n    name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {\n  /** @type {string|undefined} */\n  var sameSite;\n  if (typeof opt_maxAge === 'object') {\n    goog.asserts.assert(opt_path == null);\n    goog.asserts.assert(opt_domain == null);\n    goog.asserts.assert(opt_secure == null);\n    var options = opt_maxAge;\n    sameSite = options.sameSite;\n    opt_secure = options.secure;\n    opt_domain = options.domain;\n    opt_path = options.path;\n    opt_maxAge = options.maxAge;\n  }\n  if (!this.isValidName(name)) {\n    throw new Error('Invalid cookie name \"' + name + '\"');\n  }\n  if (!this.isValidValue(value)) {\n    throw new Error('Invalid cookie value \"' + value + '\"');\n  }\n\n  if (opt_maxAge === undefined) {\n    opt_maxAge = -1;\n  }\n\n  var domainStr = opt_domain ? ';domain=' + opt_domain : '';\n  var pathStr = opt_path ? ';path=' + opt_path : '';\n  var secureStr = opt_secure ? ';secure' : '';\n\n  var expiresStr;\n\n  // Case 1: Set a session cookie.\n  if (opt_maxAge < 0) {\n    expiresStr = '';\n\n    // Case 2: Remove the cookie.\n    // Note: We don't tell people about this option in the function doc because\n    // we prefer people to use remove() to remove cookies.\n  } else if (opt_maxAge == 0) {\n    // Note: Don't use Jan 1, 1970 for date because NS 4.76 will try to convert\n    // it to local time, and if the local time is before Jan 1, 1970, then the\n    // browser will ignore the Expires attribute altogether.\n    var pastDate = new Date(1970, 1 /*Feb*/, 1);  // Feb 1, 1970\n    expiresStr = ';expires=' + pastDate.toUTCString();\n\n    // Case 3: Set a persistent cookie.\n  } else {\n    var futureDate = new Date(goog.now() + opt_maxAge * 1000);\n    expiresStr = ';expires=' + futureDate.toUTCString();\n  }\n\n  var sameSiteStr = sameSite != null ? ';samesite=' + sameSite : '';\n\n  this.setCookie_(\n      name + '=' + value + domainStr + pathStr + expiresStr + secureStr +\n      sameSiteStr);\n};\n\n\n/**\n * Returns the value for the first cookie with the given name.\n * @param {string} name  The name of the cookie to get.\n * @param {string=} opt_default  If not found this is returned instead.\n * @return {string|undefined}  The value of the cookie. If no cookie is set this\n *     returns opt_default or undefined if opt_default is not provided.\n */\ngoog.net.Cookies.prototype.get = function(name, opt_default) {\n  var nameEq = name + '=';\n  var parts = this.getParts_();\n  for (var i = 0, part; i < parts.length; i++) {\n    part = goog.string.trim(parts[i]);\n    // startsWith\n    if (part.lastIndexOf(nameEq, 0) == 0) {\n      return part.substr(nameEq.length);\n    }\n    if (part == name) {\n      return '';\n    }\n  }\n  return opt_default;\n};\n\n\n/**\n * Removes and expires a cookie.\n * @param {string} name  The cookie name.\n * @param {?string=} opt_path  The path of the cookie. If null or not present,\n *     expires the cookie set at the full request path.\n * @param {?string=} opt_domain  The domain of the cookie, or null to expire a\n *     cookie set at the full request host name. If not provided, the default is\n *     null (i.e. cookie at full request host name).\n * @return {boolean} Whether the cookie existed before it was removed.\n */\ngoog.net.Cookies.prototype.remove = function(name, opt_path, opt_domain) {\n  var rv = this.containsKey(name);\n  this.set(name, '', 0, opt_path, opt_domain);\n  return rv;\n};\n\n\n/**\n * Gets the names for all the cookies.\n * @return {Array<string>} An array with the names of the cookies.\n */\ngoog.net.Cookies.prototype.getKeys = function() {\n  return this.getKeyValues_().keys;\n};\n\n\n/**\n * Gets the values for all the cookies.\n * @return {Array<string>} An array with the values of the cookies.\n */\ngoog.net.Cookies.prototype.getValues = function() {\n  return this.getKeyValues_().values;\n};\n\n\n/**\n * @return {boolean} Whether there are any cookies for this document.\n */\ngoog.net.Cookies.prototype.isEmpty = function() {\n  return !this.getCookie_();\n};\n\n\n/**\n * @return {number} The number of cookies for this document.\n */\ngoog.net.Cookies.prototype.getCount = function() {\n  var cookie = this.getCookie_();\n  if (!cookie) {\n    return 0;\n  }\n  return this.getParts_().length;\n};\n\n\n/**\n * Returns whether there is a cookie with the given name.\n * @param {string} key The name of the cookie to test for.\n * @return {boolean} Whether there is a cookie by that name.\n */\ngoog.net.Cookies.prototype.containsKey = function(key) {\n  // substring will return empty string if the key is not found, so the get\n  // function will only return undefined\n  return this.get(key) !== undefined;\n};\n\n\n/**\n * Returns whether there is a cookie with the given value. (This is an O(n)\n * operation.)\n * @param {string} value  The value to check for.\n * @return {boolean} Whether there is a cookie with that value.\n */\ngoog.net.Cookies.prototype.containsValue = function(value) {\n  // this O(n) in any case so lets do the trivial thing.\n  var values = this.getKeyValues_().values;\n  for (var i = 0; i < values.length; i++) {\n    if (values[i] == value) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Removes all cookies for this document.  Note that this will only remove\n * cookies from the current path and domain.  If there are cookies set using a\n * subpath and/or another domain these will still be there.\n */\ngoog.net.Cookies.prototype.clear = function() {\n  var keys = this.getKeyValues_().keys;\n  for (var i = keys.length - 1; i >= 0; i--) {\n    this.remove(keys[i]);\n  }\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser.\n * @param {string} s The cookie string to set.\n * @private\n */\ngoog.net.Cookies.prototype.setCookie_ = function(s) {\n  this.document_.cookie = s;\n};\n\n\n/**\n * Private helper function to allow testing cookies without depending on the\n * browser. IE6 can return null here.\n * @return {string} Returns the `document.cookie`.\n * @private\n */\ngoog.net.Cookies.prototype.getCookie_ = function() {\n  return this.document_.cookie;\n};\n\n\n/**\n * @return {!Array<string>} The cookie split on semi colons.\n * @private\n */\ngoog.net.Cookies.prototype.getParts_ = function() {\n  return (this.getCookie_() || '').split(';');\n};\n\n\n/**\n * Gets the names and values for all the cookies.\n * @return {{keys:!Array<string>, values:!Array<string>}} An object with keys\n *     and values.\n * @private\n */\ngoog.net.Cookies.prototype.getKeyValues_ = function() {\n  var parts = this.getParts_();\n  var keys = [], values = [], index, part;\n  for (var i = 0; i < parts.length; i++) {\n    part = goog.string.trim(parts[i]);\n    index = part.indexOf('=');\n\n    if (index == -1) {  // empty name\n      keys.push('');\n      values.push(part);\n    } else {\n      keys.push(part.substring(0, index));\n      values.push(part.substring(index + 1));\n    }\n  }\n  return {keys: keys, values: values};\n};\n\n\n/**\n * Options object for calls to Cookies.prototype.set.\n * @record\n */\ngoog.net.Cookies.SetOptions = function() {\n  /**\n   * The max age in seconds (from now). Use -1 to set a session cookie. If not\n   * provided, the default is -1 (i.e. set a session cookie).\n   * @type {number|undefined}\n   */\n  this.maxAge;\n  /**\n   * The path of the cookie. If not present then this uses the full request\n   * path.\n   * @type {?string|undefined}\n   */\n  this.path;\n  /**\n   * The domain of the cookie, or null to not specify a domain attribute\n   * (browser will use the full request host name). If not provided, the default\n   * is null (i.e. let browser use full request host name).\n   * @type {?string|undefined}\n   */\n  this.domain;\n  /**\n   * Whether the cookie should only be sent over a secure channel.\n   * @type {boolean|undefined}\n   */\n  this.secure;\n  /**\n   * The SameSite attribute for the cookie (default is NONE).\n   * @type {!goog.net.Cookies.SameSite|undefined}\n   */\n  this.sameSite;\n};\n\n\n/**\n * Valid values for the SameSite cookie attribute.  In 2019, browsers began the\n * process of changing the default from NONE to LAX.\n *\n * @see https://web.dev/samesite-cookies-explained\n * @see https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7\n * @enum {string}\n */\ngoog.net.Cookies.SameSite = {\n  /**\n   * The cookie will be sent in first-party contexts, including initial\n   * navigation from external referrers.\n   */\n  LAX: 'lax',\n  /**\n   * The cookie will be sent in all first-party or third-party contexts. This\n   * was the original default behavior of the web, but will need to be set\n   * explicitly starting in 2020.\n   */\n  NONE: 'none',\n  /**\n   * The cookie will only be sent in first-party contexts. It will not be sent\n   * on initial navigation from external referrers.\n   */\n  STRICT: 'strict',\n};\n\n\n// TODO(closure-team): This should be a singleton getter instead of a static\n// instance.\n/**\n * A static default instance.\n * @const {!goog.net.Cookies}\n */\ngoog.net.cookies =\n    new goog.net.Cookies(typeof document == 'undefined' ? null : document);\n\n\n/**\n * Getter for the static instance of goog.net.Cookies.\n * @return {!goog.net.Cookies}\n */\ngoog.net.Cookies.getInstance = function() {\n  return goog.net.cookies;\n};\n"],
"names":["goog","provide","require","net","Cookies","goog.net.Cookies","context","document_","cookie","MAX_COOKIE_LENGTH","prototype","isEnabled","goog.net.Cookies.prototype.isEnabled","navigator","cookieEnabled","isValidName","goog.net.Cookies.prototype.isValidName","name","test","isValidValue","goog.net.Cookies.prototype.isValidValue","value","set","goog.net.Cookies.prototype.set","opt_maxAge","opt_path","opt_domain","opt_secure","sameSite","asserts","assert","options","secure","domain","path","maxAge","Error","undefined","domainStr","pathStr","secureStr","expiresStr","pastDate","Date","toUTCString","futureDate","now","sameSiteStr","setCookie_","get","goog.net.Cookies.prototype.get","opt_default","nameEq","parts","getParts_","i","part","length","string","trim","lastIndexOf","substr","remove","goog.net.Cookies.prototype.remove","rv","containsKey","getKeys","goog.net.Cookies.prototype.getKeys","getKeyValues_","keys","getValues","goog.net.Cookies.prototype.getValues","values","isEmpty","goog.net.Cookies.prototype.isEmpty","getCookie_","getCount","goog.net.Cookies.prototype.getCount","goog.net.Cookies.prototype.containsKey","key","containsValue","goog.net.Cookies.prototype.containsValue","clear","goog.net.Cookies.prototype.clear","goog.net.Cookies.prototype.setCookie_","s","goog.net.Cookies.prototype.getCookie_","goog.net.Cookies.prototype.getParts_","split","goog.net.Cookies.prototype.getKeyValues_","index","indexOf","push","substring","SetOptions","goog.net.Cookies.SetOptions","SameSite","LAX","NONE","STRICT","cookies","document","getInstance","goog.net.Cookies.getInstance"]
}
