{"version":3,"sources":["oc/web/actions/jwt.cljs"],"mappings":";AAeA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEG,AAACE,AAAO,AAAIC,AACFC,AACAC;;;AAJb,AAAA,AAAA,AAAML,AAKFM;AALJ,AAMG,AAAA,AAACC;;AACD,AAACC,AAAiBF;;AAClB,AAAA,AAAA,AAACG;;;AARJ,AAAA,AAAA,AAAMT;;AAAN,AAYA,AAAA,AAAMU;AAAN,AACE,AAAAC,AAA6B,AAACE;AAA9B,AAAA,AAAAF;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAACE;AAAD,AAAgB,AAAA,AAAA,AAACL,AAAyBG;;;AAE1C,AAAMA;AAAN,AACE,AAACG;;AADH;;;AAHF;;;AAMF,AAAA,AAAMC,AAAwBC;AAA9B,AACE,AAAA,AAAA,AAACC,AAA2BD,AAAY,AAAA,AAAIE,AAA+BC,AAAqBC;;AAElG,AAAA,AAAMC,AAAiBC;AAAvB,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAkCH;AAAlC,AAAA,AAAA;;AACA,AAAMA;AAAN,AACE,AAACP,AAAuBO;;AACxB,AAACb;;AAFH;;;AAMF,AAAA,AAAMiB,AAAmBC;AAAzB,AACE,AAAA,AAAA,AAACV,AAAsBU,AAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAoBR,AAAqBC;;AAEtE,AAAA,AAAMQ;AAAN,AACE,AAAM,AAAAC,AAAK,AAAA,AAACC;AAAN,AAAA,AAAAD;AAAA,AACK,AAAA,AAACE,AAAK,AAAA,AAACD,AACP,AAAA,AAACC,AAAK,AAAA,AAACD;;AAFZD;;;AAAN,AAGE,AAAA,AAACvB;;AAHH;;AAIA,AAAM0B,AAAa,AAACC;AAApB,AACE,AAAA,AAAA,AAACpB;AAAD,AAAgB,AAAA,AAAA,AAACL,AAAoBwB;;;AACrC,AAAA,AAAA,AAAA,AAACxB,AAAuB0B,AAAyB,AAACC,AAAI,AAACL,AAAgB,AAACM,AAA8B,AAAA,AAAUJ;;AAEhH,AAAMA;AAAN,AACE,AAAClB;;AADH;;;AAGJ,AAAA,AAAMuB,AAAYC;AAAlB,AACE,AAAAf,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA6Ba;AAA7B,AAAA,AAAA;;AACA,AAAMA;AAAN,AACE,AAACZ,AAAkBY;;AACnB,AAACV;;AAFH;;;AAIF,AAAA,AAAA,AAAA/B,AAAM2C;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAxC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMwC;AAAN,AAEI,AAACC,AAAgBJ,AAAWtC;;;AAFhC,AAAA,AAAA,AAAMyC,AAGFE;AAHJ,AAII,AAAA,AAAAC,AAACF;AAAD,AAAkB,AAAI,AAAAE,AAACN;;AAAc,AAACK,AAAAA,AAAAA;AAAa3C;;;AAJvD,AAAA,AAAA,AAAMyC;;AAAN","names":["var_args","G__41906","oc.web.actions.jwt/logout","js/Error","oc.web.actions.jwt.logout","oc.shared.useragent/pseudo-native?","oc.web.urls/native-login","oc.web.urls/home","location","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.router/redirect!","oc.web.dispatcher/dispatch!","oc.web.actions.jwt/dispatch-id-token","temp__5735__auto__","id-token-contents","oc.web.lib.jwt.get_id_token_contents","oc.web.lib.utils/after","oc.web.lib.fullstory/identify","oc.web.actions.jwt/update-id-token-cookie","id-token","oc.web.lib.cookies.set_cookie_BANG_","js/window","oc.web.local-settings/jwt-cookie-domain","oc.web.local-settings/jwt-cookie-secure","oc.web.actions.jwt/update-id-token","token-body","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.actions.jwt/update-jwt-cookie","jwt","oc.web.actions.jwt/dispatch-jwt","and__4115__auto__","oc.web.lib.cookies/get-cookie","cljs.core.not_EQ_","jwt-contents","oc.web.lib.jwt/get-contents","oc.web.dispatcher/show-invite-box-key","cljs.core/seq","oc.web.router/show-invite-box-cookie","oc.web.actions.jwt/update-jwt","jbody","G__41925","oc.web.actions.jwt/jwt-refresh","oc.web.api/jwt-refresh","success-cb","p1__41923#"],"sourcesContent":["(ns oc.web.actions.jwt\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.shared.useragent :as ua]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.fullstory :as fullstory]))\n\n;; Logout\n\n(defn logout\n  ([]\n   (logout (if ua/pseudo-native?\n             oc-urls/native-login\n             oc-urls/home)))\n  ([location]\n   (cook/remove-cookie! :jwt)\n   (router/redirect! location)\n   (dis/dispatch! [:logout])))\n\n;; ID Token\n\n(defn dispatch-id-token []\n  (when-let [id-token-contents (jwt/get-id-token-contents)]\n    (utils/after 1 #(dis/dispatch! [:id-token id-token-contents]))\n    ;; User identifications for third party services\n    (when id-token-contents\n      (fullstory/identify))))\n\n(defn update-id-token-cookie [id-token]\n  (cook/set-cookie! :id-token id-token -1 (.. js/window -location -pathname) ls/jwt-cookie-domain ls/jwt-cookie-secure))\n\n(defn update-id-token [token-body]\n  (timbre/info \"Updating id-token:\" token-body)\n  (when token-body\n    (update-id-token-cookie token-body)\n    (dispatch-id-token)))\n\n;; JWT\n\n(defn update-jwt-cookie [jwt]\n  (cook/set-cookie! :jwt jwt (* 60 60 24 60) \"/\" ls/jwt-cookie-domain ls/jwt-cookie-secure))\n\n(defn dispatch-jwt []\n  (when (and (cook/get-cookie :show-login-overlay)\n             (not= (cook/get-cookie :show-login-overlay) \"collect-name-password\")\n             (not= (cook/get-cookie :show-login-overlay) \"collect-password\"))\n    (cook/remove-cookie! :show-login-overlay))\n  (let [jwt-contents (jwt/get-contents)]\n    (utils/after 1 #(dis/dispatch! [:jwt jwt-contents]))\n    (dis/dispatch! [:input [dis/show-invite-box-key] (seq (cook/get-cookie (router/show-invite-box-cookie (:user-id jwt-contents))))])\n    ;; User identifications for third party services\n    (when jwt-contents\n      (fullstory/identify))))\n\n(defn update-jwt [jbody]\n  (timbre/info \"Updating jwt:\" jbody)\n  (when jbody\n    (update-jwt-cookie jbody)\n    (dispatch-jwt)))\n\n(defn jwt-refresh\n  ([]\n    (api/jwt-refresh update-jwt logout))\n  ([success-cb]\n    (api/jwt-refresh #(do (update-jwt %) (success-cb)) logout)))\n"]}