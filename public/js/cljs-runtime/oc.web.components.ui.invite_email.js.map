{"version":3,"sources":["oc/web/components/ui/invite_email.cljs"],"mappings":"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","names":["oc.web.components.ui.invite-email/default-row-num","oc.web.components.ui.invite-email/default-user","oc.web.components.ui.invite-email/default-user-role","oc.web.components.ui.invite-email/default-user-row","oc.web.components.ui.invite-email/new-user-row","s","cljs.core.assoc","oc.web.components.ui.invite-email/valid-user?","user-map","oc.web.lib.utils/valid-email?","oc.web.components.ui.invite-email/has-valid-user?","users-list","cljs.core/some","oc.web.components.ui.invite-email/setup-initial-rows","cljs.core/deref","invite-users","org.martinklepsch.derivatives/get-ref","cljs.core/count","new-row","oc.web.dispatcher/dispatch!","cljs.core/vec","cljs.core.repeat","or__4126__auto__","cljs.core/first","oc.web.components.ui.invite-email/save-button-cta","oc.web.components.ui.invite-email/saving-button-cta","oc.web.components.ui.invite-email/saved-button-cta","rum.core/build-defcs","p__44514","map__44515","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","cljs.core.into_array","iter__4529__auto__","s__44518","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__44520","cljs.core/chunk-buffer","i__44519","cljs.core/-nth","cljs.core/chunk-append","sablono.interpreter/create-element","p1__44510#","sablono.util/join-classes","sablono.interpreter/interpret","cljs.core/chunk-cons","cljs.core/chunk","iter__44517","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","oc.web.components.ui.invite-email/invite-email","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","cljs.core/reset!","sending","initial-sending","no-error-invites","p1__44509#","cljs.core.filter","cljs.core/not","error-invites","hold-initial-sending","oc.web.lib.utils/after","oc.web.actions.notifications/show-notification","rows-num","hide-user-role","org.martinklepsch.derivatives/react","org-data","is-admin?","oc.web.lib.jwt/is-admin?","i","cljs.core.range","user-data","key-string","cljs.core.merge","G__44521","p1__44511#","G__44522","oc.web.components.ui.user-type-dropdown/user-type-dropdown","oc.web.lib.utils/guid","before","cljs.core.subvec","after","next-invite-users","cljs.core.concat","fixed-next-invite-users","cljs.core.conj","valid-count","cljs.core/filterv","oc.web.actions.team/invite-users","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.invite-email\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.user-type-dropdown :refer (user-type-dropdown)]))\n\n(def default-row-num 1)\n(def default-user \"\")\n(def default-user-role :author)\n(def default-user-row\n {:temp-user default-user\n  :user default-user\n  :role default-user-role})\n\n(defn new-user-row [s]\n  (assoc default-user-row :type \"email\"))\n\n(defn valid-user? [user-map]\n  (utils/valid-email? (:user user-map)))\n\n(defn has-valid-user? [users-list]\n  (some valid-user? users-list))\n\n(defn setup-initial-rows [s]\n  (let [invite-users @(drv/get-ref s :invite-users)]\n    ;; Check if there are already invite rows\n    (when (zero? (count invite-users))\n      ;; if there are no rows setup the default initial rows\n      (let [new-row (new-user-row s)]\n        (dis/dispatch! [:input [:invite-users] (vec (repeat (or (-> s :rum/args first :rows-num) default-row-num) new-row))])))))\n\n(defn- save-button-cta [s]\n  (or (-> s :rum/args first :save-title) \"Send email invitations\"))\n\n(defn- saving-button-cta [s]\n  (or (-> s :rum/args first :saving-title) \"Sending email invitations\"))\n\n(defn- saved-button-cta [s]\n  (or (-> s :rum/args first :saved-title) \"Email invitations sent!\"))\n\n(rum/defcs invite-email <\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :invite-users)\n  ;; Locals\n  (rum/local nil ::send-bt-cta)\n  (rum/local 0 ::sending)\n  (rum/local 0 ::initial-sending)\n  {:will-mount (fn [s]\n    (setup-initial-rows s)\n    (reset! (::send-bt-cta s) (save-button-cta s))\n    s)\n   :will-update (fn [s]\n    (let [sending (::sending s)\n          initial-sending (::initial-sending s)]\n      (when (pos? @sending)\n        (let [invite-users @(drv/get-ref s :invite-users)\n              no-error-invites (filter #(not (:error %)) invite-users)\n              error-invites (filter :error invite-users)\n              hold-initial-sending @initial-sending]\n          (reset! sending (count no-error-invites))\n          (when (zero? (count no-error-invites))\n            (utils/after 1000\n              (fn []\n                (reset! sending 0)\n                (reset! initial-sending 0)\n                (if (zero? (count error-invites))\n                  (do\n                    (reset! (::send-bt-cta s) (saved-button-cta s))\n                    (utils/after 2500 #(reset! (::send-bt-cta s) (save-button-cta s)))\n                    (notification-actions/show-notification {:title (str \"Invite\"\n                                                                     (when (> hold-initial-sending 1)\n                                                                       \"s\")\n                                                                     \" sent.\")\n                                                             :primary-bt-title \"OK\"\n                                                             :primary-bt-dismiss true\n                                                             :expire 3\n                                                             :primary-bt-inline true\n                                                             :id :invites-sent})\n                    (setup-initial-rows s))\n                  (reset! (::send-bt-cta s) (save-button-cta s)))))))))\n    s)\n    :will-unmount (fn [s]\n     (dis/dispatch! [:input [:invite-users] nil])\n     s)}\n\n  [s {:keys [rows-num hide-user-role]}]\n  (let [invite-users (drv/react s :invite-users)\n        org-data (drv/react s :org-data)\n        is-admin? (jwt/is-admin? (:team-id org-data))]\n    [:div.invite-email-container\n      [:div.invite-email\n        {:key \"org-settings-invite-table\"}\n        (for [i (range (count invite-users))\n              :let [user-data (get invite-users i)\n                    key-string (str \"invite-users-tabe-\" i)]]\n          [:div.invite-email-item-outer\n            {:key key-string}\n            [:div.invite-email-item.group\n              [:div.invite-email-item-left\n                [:input.org-settings-field.email-field.oc-input\n                  {:type \"text\"\n                   :class (when (:error user-data) \"error\")\n                   :pattern \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}$\"\n                   :placeholder \"name@domain.com\"\n                   :on-change #(dis/dispatch! [:input [:invite-users]\n                                 (assoc invite-users i (merge user-data {:error nil :user (.. % -target -value)}))])\n                   :value (or (:user user-data) \"\")}]\n                (when-not hide-user-role\n                  [:div.user-type-dropdown\n                    (user-type-dropdown {:user-id (utils/guid)\n                                         :user-type (:role user-data)\n                                         :hide-admin (not is-admin?)\n                                         :on-change\n                                          #(dis/dispatch! [:input [:invite-users]\n                                             (assoc invite-users i (merge user-data {:role % :error nil}))])})])]\n              (when-not hide-user-role\n                [:button.mlb-reset.remove-user\n                  {:on-click #(let [before (subvec invite-users 0 i)\n                                    after (subvec invite-users (inc i) (count invite-users))\n                                    next-invite-users (vec (concat before after))\n                                    fixed-next-invite-users (if (zero? (count next-invite-users))\n                                                              [(assoc default-user-row :type (:type user-data))]\n                                                              next-invite-users)]\n                                (dis/dispatch! [:input [:invite-users] fixed-next-invite-users]))}])]])]\n      [:button.mlb-reset.add-button\n        {:on-click #(dis/dispatch! [:input [:invite-users]\n                     (conj invite-users (assoc default-user-row :type \"email\"))])}\n        [:div.add-button-plus]\n        \"Add another\"]\n      [:button.mlb-reset.save-bt\n        {:on-click #(let [valid-count (count (filterv valid-user? invite-users))]\n                      (reset! (::sending s) valid-count)\n                      (reset! (::initial-sending s) valid-count)\n                      (reset! (::send-bt-cta s) (saving-button-cta s))\n                      (team-actions/invite-users @(drv/get-ref s :invite-users)))\n         :class (when (= (saved-button-cta s) @(::send-bt-cta s)) \"no-disable\")\n         :disabled (or (not (has-valid-user? invite-users))\n                       (pos? @(::sending s)))}\n        @(::send-bt-cta s)]]))"]}