{"version":3,"sources":["oc/web/components/ui/section_editor.cljs"],"mappings":"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","names":["oc.web.components.ui.section-editor/filter-user-by-query","user","query","lower-query","cuerdas.core/lower","first-name","last-name","lower-name","lower-email","oc.web.components.ui.section-editor/compare-users","user-1","user-2","cljs.core/compare","oc.web.components.ui.section-editor/filter-users","users-list","filtered-users","p1__46299#","cljs.core.filter","cljs.core.sort","oc.web.components.ui.section-editor/get-addable-users","section-editing","users","already-in-ids","cljs.core.concat","without-self","p1__46300#","cljs.core.remove","cljs.core._EQ_","oc.web.lib.jwt/user-id","p1__46301#","cljs.core/some","oc.web.components.ui.section-editor/private-access","oc.web.components.ui.section-editor/team-access","oc.web.components.ui.section-editor/public-access","oc.web.components.ui.section-editor/section-for-editing","section-data","cljs.core.assoc","p1__46302#","cljs.core.map","cljs.core/map?","p1__46303#","oc.web.components.ui.section-editor/check-section-name-error","s","cljs.core/deref","org.martinklepsch.derivatives/get-ref","org-data","boards","p1__46304#","cljs.core.not_EQ_","sec-name","equal-names","p1__46305#","js/RegExp","cljs.core/reset!","cljs.core/count","p1__46306#","oc.web.dispatcher/dispatch!","oc.web.lib.utils/section-name-exists-error","cljs.core.dissoc","oc.web.actions.section/min-section-name-length","oc.web.actions.section/pre-flight-check","rum.core/build-defcs","js/React.createElement","p1__46309#","sablono.util/join-classes","sablono.interpreter/create-element","p1__46312#","sablono.interpreter/interpret","attrs46333","cljs.core.apply","sablono.interpreter/attributes","sablono.normalize.merge_with_class","oc.web.components.ui.section-editor/section-editor","oc.web.mixins.ui/refresh-tooltips-mixin","rum.core/reactive","rum.core.local","org.martinklepsch.derivatives.drv","oc.web.mixins.ui/autoresize-textarea","oc.web.actions.team/teams-get","initial-section-data","cljs.core/first","new-section","fixed-section-data","oc.web.lib.utils/default-section","clojure.string/trim","js/$","cljs.core/seq","cljs.core/not","and__4115__auto__","on-change","from-section-picker","org.martinklepsch.derivatives/react","no-drafts-boards","p1__46307#","oc.web.lib.utils/default-drafts-board-slug","team-data","slack-teams","show-slack-channels?","cljs.core/+","p1__46308#","channel-name","roster","all-users-data","slack-orgs","cur-user-data","slack-users","current-user-id","can-change","or__4126__auto__","oc.web.lib.utils/default-section-slug","oc.web.lib.jwt/is-admin?","last-section-standing","disallow-public-board?","wrapped-on-change","exit-cb","oc.web.components.ui.alert-modal/show-alert","oc.web.components.ui.alert-modal/hide-alert","oc.web.lib.utils/event-inside?","rum.core/ref-node","oc.web.lib.utils/event-stop","oc.web.actions.nav-sidebar/close-all-panels","e","oc.web.lib.utils/emojify","disable-bt","_","cljs.core/compare-and-set!","p1__46310#","section-node","section-name","personal-note-node","personal-note","success-cb","cljs.core/fn?","oc.web.actions.nav-sidebar/hide-section-editor","oc.web.actions.section/section-save-create","oc.web.lib.utils/class-set","next-section-name","js/window","oc.web.lib.utils/after","p1__46311#","cljs.core.merge","G__46334","p1__46313#","p1__46314#","cljs.core.conj","cljs.core/set","p1__46315#","G__46335","oc.web.components.ui.carrot-switch/carrot-switch","v","p1__46316#","G__46336","oc.web.components.ui.slack-channels-dropdown/slack-channels-dropdown","team","channel","p1__46317#","oc.web.lib.jwt/team-has-bot?","oc.web.actions.org.bot_auth","oc.web.router/get-token","available-users","oc.web.utils.user/filter-active-users","addable-users","p1__46318#","oc.web.lib.utils/hide-class","q","iter__4529__auto__","s__46338","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46340","cljs.core/chunk-buffer","i__46339","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46337","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","u","team-user","p1__46319#","user-type","oc.web.utils.user.get_user_type","oc.web.actions.section/private-section-user-add","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.actions.nav-sidebar/show-org-settings","user-id","oc.web.lib.utils/in?","p1__46320#","G__46341","oc.web.components.ui.dropdown-list/dropdown-list","item","oc.web.actions.section/private-section-user-remove","author-ids","viewer-ids","authors","cljs.core.comp","viewers","complete-authors","p1__46321#","complete-viewers","p1__46322#","all-users","self-user","p1__46323#","rest-users","p1__46324#","sorted-users","s__46343","b__46345","i__46344","iter__46342","self","showing-dropdown","user-node","top","next-user-id","self-data","p1__46325#","oc.web.actions.section/private-section-kick-out-self","p1__46326#","js/OnPaste_StripFormatting","oc.web.lib.utils.link_for","oc.web.actions.section.section_delete","oc.web.actions.notifications/show-notification","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.section-editor\n  (:require [rum.core :as rum]\n            [goog.object :as gobj]\n            [cuerdas.core :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.router :as router]\n            [oc.web.utils.user :as uu]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.section :as section-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.dropdown-list :refer (dropdown-list)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.carrot-switch :refer (carrot-switch)]\n            [oc.web.components.ui.slack-channels-dropdown :refer (slack-channels-dropdown)]))\n\n;; Private section users search helpers\n\n(defn filter-user-by-query\n  \"Given a user and a query string, return true if first-name, last-name or email contains it.\"\n  [user query]\n  (let [lower-query (string/lower query)\n        first-name (:first-name user)\n        last-name (:last-name user)\n        lower-name (string/lower (str first-name \" \" last-name))\n        lower-email (string/lower (:email user))]\n    (or (>= (.search lower-name lower-query) 0)\n        (>= (.search lower-email lower-query) 0))))\n\n(defn compare-users [user-1 user-2]\n  (compare (string/lower (:name user-1))\n           (string/lower (:name user-2))))\n\n(defn filter-users\n  \"Given a list of users and a query string, return those that match the given query.\"\n  [users-list query]\n  (let [filtered-users (filter #(filter-user-by-query % query) users-list)]\n    (sort compare-users filtered-users)))\n\n(defn get-addable-users\n  \"Filter users that are not arleady viewer or author users.\"\n  [section-editing users]\n  (let [already-in-ids (concat (:viewers section-editing) (:authors section-editing))\n        without-self (remove #(= (:user-id %) (jwt/user-id)) users)]\n    (remove #(some #{(:user-id %)} already-in-ids) without-self)))\n\n(def private-access\n  [:div.access-item.private-access\n    \"Team members you invite\"])\n\n(def team-access\n  [:div.access-item.team-access\n    \"Anyone on the team\"])\n\n(def public-access\n  [:div.access-item.public-access\n    \"Open for the public\"])\n\n(defn section-for-editing [section-data]\n  (-> section-data\n    (assoc :authors (map #(if (map? %) (:user-id %) %) (:authors section-data)))\n    (assoc :viewers (map #(if (map? %) (:user-id %) %) (:viewers section-data)))))\n\n(defn check-section-name-error [s]\n  (let [section-editing @(drv/get-ref s :section-editing)\n        org-data @(drv/get-ref s :org-data)\n        boards (filter #(not= (:slug %) (:slug section-editing)) (:boards org-data))\n        sec-name @(::section-name s)\n        equal-names (filter #(.match sec-name (js/RegExp. (str \"^\" (:name %) \"$\") \"ig\")) boards)]\n    (reset! (::pre-flight-check s) false)\n    (reset! (::pre-flight-ok s) false)\n    (if (pos? (count equal-names))\n      (dis/dispatch! [:update [:section-editing] #(-> %\n                                                    (assoc :section-name-error utils/section-name-exists-error)\n                                                    (dissoc :loading))])\n      (do\n        (when (:section-name-error section-editing)\n          (dis/dispatch! [:input [:section-editing :section-name-error] nil]))\n        (if (>= (count sec-name) section-actions/min-section-name-length)\n          (do\n            (section-actions/pre-flight-check (when @(::editing-existing-section s) (:slug section-editing))\n             sec-name)\n            (reset! (::pre-flight-check s) true))\n          (reset! (::pre-flight-check s) false))))))\n\n(rum/defcs section-editor <\n  ;; Mixins\n  mixins/refresh-tooltips-mixin\n  rum/reactive\n  ;; Locals\n  (rum/local \"\" ::query)\n  (rum/local false ::show-access-list)\n  (rum/local false ::show-search-results)\n  (rum/local nil ::show-edit-user-dropdown)\n  (rum/local nil ::show-edit-user-top)\n  (rum/local \"\" ::initial-section-name)\n  (rum/local false ::editing-existing-section)\n  (rum/local false ::slack-enabled)\n  (rum/local \"\" ::section-name)\n  (rum/local false ::pre-flight-check)\n  (rum/local false ::pre-flight-ok)\n  (rum/local nil ::section-name-check-timeout)\n  (rum/local false ::saving)\n  ;; Derivatives\n  (drv/drv :org-data)\n  (drv/drv :board-data)\n  (drv/drv :section-editing)\n  (drv/drv :team-data)\n  (drv/drv :team-channels)\n  (drv/drv :team-roster)\n  (drv/drv :current-user-data)\n  (mixins/autoresize-textarea :section-description)\n  {:will-mount (fn [s]\n   (team-actions/teams-get)\n   (let [initial-section-data (first (:rum/args s))\n         new-section (nil? initial-section-data)\n         fixed-section-data (if new-section\n                            utils/default-section\n                            (section-for-editing initial-section-data))]\n     (when (string? (:name fixed-section-data))\n       (reset! (::section-name s) (clojure.string/trim\n        (.text (js/$ (str \"<div>\" (:name fixed-section-data) \"</div>\"))))))\n     (reset! (::editing-existing-section s) (not new-section))\n     (when (seq (:name fixed-section-data))\n       (reset! (::initial-section-name s) (:name fixed-section-data)))\n     (dis/dispatch! [:input [:section-editing] fixed-section-data])\n     (reset! (::slack-enabled s)\n      (-> fixed-section-data :slack-mirror :channel-id seq)))\n  s)\n  :will-update (fn [s]\n   (let [section-editing @(drv/get-ref s :section-editing)]\n     (when @(::pre-flight-check s)\n       (when-not (:pre-flight-loading section-editing)\n         (reset! (::pre-flight-check s) false)\n         (when (and (not (:section-name-error section-editing))\n                    (not (:section-error section-editing)))\n           (reset! (::pre-flight-ok s) true))))\n     ;; Re-enable the save button after a save failure\n     (when (and @(::saving s)\n                (not (:loading section-editing)))\n       (reset! (::saving s) false)))\n   s)}\n  [s initial-section-data on-change from-section-picker]\n  (let [org-data (drv/react s :org-data)\n        no-drafts-boards (filter #(and (not (:draft %)) (not= (:slug %) utils/default-drafts-board-slug))\n                          (:boards org-data))\n        section-editing (drv/react s :section-editing)\n        section-data (if (seq (:slug section-editing)) (drv/react s :board-data) section-editing)\n        team-data (drv/react s :team-data)\n        slack-teams (drv/react s :team-channels)\n        show-slack-channels? (pos? (apply + (map #(-> % :channels count) slack-teams)))\n        channel-name (when @(::editing-existing-section s) (:channel-name (:slack-mirror section-data)))\n        roster (drv/react s :team-roster)\n        all-users-data (if team-data (:users team-data) (:users roster))\n        slack-orgs (:slack-orgs team-data)\n        cur-user-data (drv/react s :current-user-data)\n        slack-users (:slack-users cur-user-data)\n        current-user-id (jwt/user-id)\n        ;; user can edit the private section users if\n        ;; he's creating a new section\n        ;; or if he's in the authors list of the existing section\n        can-change (or (= (:slug section-editing) utils/default-section-slug)\n                       (some #{current-user-id} (:authors section-editing))\n                       (jwt/is-admin? (:team-id org-data)))\n        last-section-standing (= (count no-drafts-boards) 1)\n        disallow-public-board? (and (:content-visibility org-data)\n                                    (:disallow-public-board (:content-visibility org-data)))\n        wrapped-on-change (fn [exit-cb]\n                            (if (:has-changes @(drv/get-ref s :section-editing))\n                              (alert-modal/show-alert\n                               {:icon \"/img/ML/trash.svg\"\n                                :action \"section-settings-unsaved-edits\"\n                                :message \"Leave without saving your changes?\"\n                                :link-button-title \"Stay\"\n                                :link-button-cb #(alert-modal/hide-alert)\n                                :solid-button-style :red\n                                :solid-button-title \"Lose changes\"\n                                :solid-button-cb #(do\n                                                    (alert-modal/hide-alert)\n                                                    (on-change nil nil exit-cb))})\n                              (on-change nil nil exit-cb)))]\n    [:div.section-editor-container\n      {:on-click #(when-not (utils/event-inside? % (rum/ref-node s :section-editor))\n                    (utils/event-stop %)\n                    (wrapped-on-change nav-actions/close-all-panels))}\n      [:button.mlb-reset.modal-close-bt\n        {:on-click #(wrapped-on-change nav-actions/close-all-panels)}]\n      [:div.section-editor.group\n        {:ref :section-editor\n         :on-click (fn [e]\n                     (when-not (utils/event-inside? e (rum/ref-node s \"section-editor-add-access-list\"))\n                       (reset! (::show-access-list s) false))\n                     (when-not (utils/event-inside? e (rum/ref-node s \"private-users-search\"))\n                       (reset! (::show-search-results s) false))\n                     (when-not (utils/event-inside? e (rum/ref-node s \"section-editor-add-private-users\"))\n                       (reset! (::show-edit-user-dropdown s) nil)))}\n        [:div.section-editor-header\n          [:div.section-editor-header-title\n            {:dangerouslySetInnerHTML\n              (utils/emojify\n               (if @(::editing-existing-section s)\n                 \"Team settings\"\n                 \"Create topic\"))}]\n          (let [disable-bt (or @(::saving s)\n                               (< (count @(::section-name s)) section-actions/min-section-name-length)\n                               @(::pre-flight-check s)\n                               (:pre-flight-loading section-editing)\n                               (seq (:section-name-error section-editing)))]\n            [:button.mlb-reset.save-bt\n              {:on-click (fn [_]\n                          (when (and (not disable-bt)\n                                     (compare-and-set! (::saving s) false true))\n                            (let [section-node (rum/ref-node s \"section-name\")\n                                  section-name (clojure.string/trim (.-value section-node))\n                                  personal-note-node (rum/ref-node s \"personal-note\")\n                                  personal-note (when personal-note-node (.-innerText personal-note-node))\n                                  success-cb #(when (fn? on-change)\n                                                (on-change % personal-note nav-actions/hide-section-editor))]\n                              (section-actions/section-save-create section-editing section-name success-cb))))\n               :class (when disable-bt \"disabled\")}\n              \"Save\"])\n          [:button.mlb-reset.cancel-bt\n            {:on-click #(wrapped-on-change nav-actions/hide-section-editor)}\n            \"Back\"]]\n        [:div.section-editor-add\n          [:div.section-editor-add-label\n            [:span.section-name \"Topic name\"]]\n          [:input.section-editor-add-name.oc-input\n            {:value @(::section-name s)\n             :placeholder \"Topic name\"\n             :ref \"section-name\"\n             :class  (utils/class-set {:preflight-ok @(::pre-flight-ok s)\n                                       :preflight-error (:section-name-error section-editing)})\n             :max-length 50\n             :on-change (fn [e]\n                          (let [next-section-name (.. e -target -value)]\n                            (when (not= @(::section-name s) next-section-name)\n                              (reset! (::section-name s) next-section-name)\n                              (when @(::section-name-check-timeout s)\n                                (.clearTimeout js/window @(::section-name-check-timeout s)))\n                              (reset! (::section-name-check-timeout s)\n                               (utils/after 500\n                                #(check-section-name-error s))))))}]\n          [:div.section-editor-add-label\n            [:span.section-description \"Description\"]]\n          [:textarea.section-editor-description.oc-input\n            {:value (or (:description section-editing) \"\")\n             :ref :section-description\n             :placeholder \"Topic description\"\n             :columns 2\n             :max-length 256\n             :on-change (fn [e]\n                          (utils/event-stop e)\n                          (dis/dispatch! [:update [:section-editing] #(merge % {:description (.. e -target -value)\n                                                                                :has-changes true})]))}]\n          [:div.section-editor-add-label\n            \"Topic security\"]\n          [:div.section-editor-add-access.oc-input\n            {:class (when @(::show-access-list s) \"active\")\n             :on-click #(do\n                          (utils/event-stop %)\n                          (reset! (::show-access-list s) (not @(::show-access-list s))))}\n            (case (:access section-editing)\n              \"private\" private-access\n              \"public\" public-access\n              team-access)]\n          (when @(::show-access-list s)\n            [:div.section-editor-add-access-list\n              {:ref \"section-editor-add-access-list\"}\n              [:div.access-list-row\n                {:on-click (fn [e]\n                             (utils/event-stop e)\n                             (reset! (::show-access-list s) false)\n                             (dis/dispatch! [:update [:section-editing] #(merge % {:access \"team\"\n                                                                                   :has-changes true})]))}\n                team-access]\n              [:div.access-list-row\n                {:on-click (fn [e]\n                              (utils/event-stop e)\n                              (reset! (::show-access-list s) false)\n                              (when show-slack-channels?\n                                (reset! (::slack-enabled s) false))\n                              (dis/dispatch! [:update [:section-editing]\n                                              #(merge % {:access \"private\"\n                                                         :has-changes true\n                                                         :authors (conj (set (:authors section-editing)) current-user-id)\n                                                         :slack-mirror (if show-slack-channels?\n                                                                         nil\n                                                                         (:slack-mirror section-editor))})]))}\n                private-access]\n              (when-not disallow-public-board?\n                [:div.access-list-row\n                  {:on-click (fn [e]\n                                (utils/event-stop e)\n                                (reset! (::show-access-list s) false)\n                                (dis/dispatch! [:update [:section-editing] #(merge % {:access \"public\"\n                                                                                      :has-changes true})]))}\n                  public-access])])\n          (when show-slack-channels?\n            [:div.section-editor-add-label.top-separator\n              \"Auto-share to Slack\"\n              (when show-slack-channels?\n                [:span.info])\n              (when show-slack-channels?\n                (carrot-switch {:selected @(::slack-enabled s)\n                                :did-change-cb (fn [v]\n                                                 (reset! (::slack-enabled s) v)\n                                                  (when-not v\n                                                    (dis/dispatch! [:update [:section-editing]\n                                                     #(merge % {:slack-mirror nil\n                                                                :has-changes true})])))}))])\n          (if show-slack-channels?\n            [:div.section-editor-add-slack-channel.group\n              {:class (when-not @(::slack-enabled s) \"disabled\")}\n              (slack-channels-dropdown {:initial-value (when channel-name (str \"#\" channel-name))\n                                        :on-change (fn [team channel]\n                                                     (dis/dispatch!\n                                                      [:update\n                                                       [:section-editing]\n                                                       #(merge %\n                                                         {:slack-mirror\n                                                           {:channel-id (:id channel)\n                                                            :channel-name (:name channel)\n                                                            :slack-org-id (:slack-org-id team)}\n                                                          :has-changes true})]))})]\n            ;; If they don't have bot installed already but have slack org associated to the team\n            ;; and user has a slack user (if not they can't add the bot) let's prompt to add the bot\n            (when (and (not (jwt/team-has-bot? (:team-id team-data)))\n                       (pos? (count slack-users))\n                       (pos? (count slack-orgs)))\n              [:div.section-editor-enable-slack-bot.group\n                \"Automatically share updates to Slack? \"\n                [:button.mlb-reset.enable-slack-bot-bt\n                  {:on-click (fn [_]\n                               (org-actions/bot-auth team-data cur-user-data (router/get-token)))}\n                  \"Add Wut bot\"]]))\n          (when (= (:access section-editing) \"public\")\n            [:div.section-editor-access-public-description\n              \"Public topics are visible to the world, including search engines.\"])\n          (when (= (:access section-editing) \"private\")\n            [:div.section-editor-add-label.top-separator\n              \"Add members to this private topic\"])\n          (when (= (:access section-editing) \"private\")\n            (let [query  (::query s)\n                  available-users (uu/filter-active-users all-users-data)\n                  addable-users (get-addable-users section-editing available-users)\n                  filtered-users (filter-users addable-users @query)]\n              (when can-change\n                [:div.section-editor-private-users-search\n                  {:ref \"private-users-search\"}\n                  [:input.oc-input\n                    {:class utils/hide-class\n                     :value @query\n                     :type \"text\"\n                     :placeholder \"Select a member...\"\n                     :on-focus #(reset! (::show-search-results s) true)\n                     :on-change #(let [q (.. % -target -value)]\n                                  (reset! (::show-search-results s) (seq q))\n                                  (reset! query q))}]\n                  (when @(::show-search-results s)\n                    [:div.section-editor-private-users-results\n                      (if (pos? (count filtered-users))\n                        (for [u filtered-users\n                              :let [team-user (some #(when (= (:user-id %) (:user-id u)) %) (:users roster))\n                                    user (merge u team-user)\n                                    user-type (uu/get-user-type user org-data section-editing)]]\n                          [:div.section-editor-private-users-result\n                            {:class utils/hide-class\n                             :on-click #(do\n                                          (reset! query \"\")\n                                          (reset! (::show-search-results s) false)\n                                          (section-actions/private-section-user-add user user-type))\n                             :ref (str \"add-user-\" (:user-id user))}\n                            (user-avatar-image user)\n                            [:div.name\n                              (:name user)]])\n                        [:div.section-editor-private-users-result.no-more-invites\n                          [:div.name\n                            (str\n                             \"Looks like you'll need to invite more people before you can add them. \"\n                             \"You can do that in \")\n                            [:a\n                              {:on-click #(nav-actions/show-org-settings :invite)}\n                              \"Wut topic settings\"]\n                            \".\"]])])])))\n          (when (and (= (:access section-editing) \"private\")\n                     (pos? (+ (count (:authors section-editing))\n                              (count (:viewers section-editing)))))\n            [:div.section-editor-add-label.group\n              [:span.main-label\n                \"Team members\"]\n              [:span.role-header\n                \"Access\"]])\n          (when (and (= (:access section-editing) \"private\")\n                     (pos? (+ (count (:authors section-editing))\n                              (count (:viewers section-editing)))))\n            [:div.section-editor-add-private-users\n              {:ref \"section-editor-add-private-users\"}\n              (let [user-id @(::show-edit-user-dropdown s)\n                    user-type (if (utils/in? (:viewers section-editing) user-id)\n                                :viewer\n                                :author)\n                    team-user (some #(when (= (:user-id %) user-id) %) all-users-data)]\n                [:div.section-editor-add-private-users-dropdown-container\n                  {:style {:top (str (+ @(::show-edit-user-top s) -114) \"px\")\n                           :display (if @(::show-edit-user-dropdown s) \"block\" \"none\")}}\n                  (dropdown-list {:items [{:value :viewer :label \"View\"}\n                                          {:value :author :label \"Edit\"}\n                                          {:value :remove :label \"Remove\"}]\n                                  :value user-type\n                                  :on-change (fn [item]\n                                   (reset! (::show-edit-user-dropdown s) nil)\n                                   (if (= (:value item) :remove)\n                                     (section-actions/private-section-user-remove team-user)\n                                     (section-actions/private-section-user-add team-user (:value item))))})])\n              [:div.section-editor-add-private-users-list.group\n                {:class utils/hide-class\n                 :on-scroll #(do\n                              (reset! (::show-edit-user-dropdown s) nil)\n                              (reset! (::show-edit-user-top s) nil))\n                 :ref \"edit-users-scroll\"}\n                (let [author-ids (set (:authors section-editing))\n                      viewer-ids (set (:viewers section-editing))\n                      authors (filter (comp author-ids :user-id) all-users-data)\n                      viewers (filter (comp viewer-ids :user-id) all-users-data)\n                      complete-authors (map\n                                        #(merge % {:type :author :display-name (:name %)})\n                                        authors)\n                      complete-viewers (map\n                                        #(merge % {:type :viewer :display-name (:name %)})\n                                        viewers)\n                      all-users (concat complete-authors complete-viewers)\n                      self-user (first (filter #(= (:user-id %) current-user-id) all-users))\n                      rest-users (filter #(not= (:user-id %) current-user-id) all-users)\n                      sorted-users (concat [self-user] (sort compare-users rest-users))]\n                  (for [user sorted-users\n                        :let [user-type (:type user)\n                              self (= (:user-id user) current-user-id)\n                              showing-dropdown (= @(::show-edit-user-dropdown s) (:user-id user))]]\n                    [:div.section-editor-add-private-user.group\n                      {:ref (str \"edit-user-\" (:user-id user))\n                       :on-click #(when (and can-change\n                                             (not self))\n                                    (let [user-node (rum/ref-node s (str \"edit-user-\" (:user-id user)))\n                                          top (- (.-offsetTop user-node) (.-scrollTop (.-parentElement user-node)))\n                                          next-user-id (if showing-dropdown\n                                                         nil\n                                                         (:user-id user))]\n                                      (reset! (::show-edit-user-top s) top)\n                                      (reset! (::show-edit-user-dropdown s) next-user-id)))}\n                      (user-avatar-image user)\n                      [:div.name\n                        (:name user)\n                        (when (= (:user-id user) current-user-id)\n                          \" (you)\")]\n                      (if self\n                        (if (and (seq (:slug section-editing))\n                                 (> (count (:authors section-data)) 1))\n                          [:div.user-type.remove-link\n                            {:on-click (fn []\n                              (let [authors (:authors section-data)\n                                    self-data (first (filter #(= (:user-id %) current-user-id) authors))]\n                                (alert-modal/show-alert\n                                 {:icon \"/img/ML/error_icon.png\"\n                                  :action \"remove-self-user-from-private-section\"\n                                  :message \"Are you sure you want to leave this topic?\"\n                                  :link-button-title \"No\"\n                                  :link-button-cb #(alert-modal/hide-alert)\n                                  :solid-button-title \"Yes\"\n                                  :solid-button-cb (fn []\n                                   (section-actions/private-section-kick-out-self self-data)\n                                   (alert-modal/hide-alert))})))}\n                            \"Leave topic\"]\n                          [:div.user-type.no-dropdown\n                            \"Edit\"])\n                        [:div.user-type\n                          {:class (utils/class-set {:no-dropdown (not can-change)\n                                                    :active showing-dropdown})}\n                          (if (= user-type :author)\n                            \"Edit\"\n                            \"View\")])]))]])\n          (when (= (:access section-editing) \"private\")\n            [:div.section-editor-add-label\n              \"Personal note\"])\n          (when (= (:access section-editing) \"private\")\n            [:div.section-editor-add-personal-note.oc-input\n              {:class utils/hide-class\n               :content-editable true\n               :placeholder \"Add a personal note to your invitation...\"\n               :ref \"personal-note\"\n               :on-paste #(js/OnPaste_StripFormatting (rum/ref-node s \"personal-note\") %)\n               :on-key-press (fn [e]\n                               (when (or (>= (count (.. e -target -innerText)) 500)\n                                        (= (.-key e) \"Enter\"))\n                                (utils/event-stop e)))\n               :dangerouslySetInnerHTML {:__html \"\"}}])\n          [:div.section-editor-add-footer\n            (when (and @(::editing-existing-section s)\n                       (utils/link-for (:links section-data) \"delete\"))\n              [:button.mlb-reset.delete-bt\n                {:on-click (fn []\n                            (when-not last-section-standing\n                              (alert-modal/show-alert\n                               {:icon \"/img/ML/trash.svg\"\n                                :action \"delete-section\"\n                                :message [:span\n                                           [:span \"Are you sure?\"]\n                                           (when (-> section-data :entry-count pos?)\n                                             [:span\n                                               \" This will delete the topic and \"\n                                               [:strong \"all\"]\n                                               \" its updates, too.\"])]\n                                :link-button-title \"No\"\n                                :link-button-cb #(alert-modal/hide-alert)\n                                :solid-button-style :red\n                                :solid-button-title \"Yes, I'm sure\"\n                                :solid-button-cb (fn []\n                                                   (section-actions/section-delete\n                                                     (:slug section-data)\n                                                     (notification-actions/show-notification\n                                                      {:title \"Topic deleted\"\n                                                       :dismiss true\n                                                       :expire 3\n                                                       :id :section-deleted}))\n                                                   (alert-modal/hide-alert)\n                                                   (nav-actions/hide-section-editor))})))\n                 :data-toggle \"tooltip\"\n                 :data-placement \"top\"\n                 :data-container \"body\"\n                 :title (if last-section-standing\n                         \"You cannot delete the last remaining topic.\"\n                         \"Delete this topic and all its updates.\")\n                 :class (when last-section-standing \"disabled\")}\n                \"Delete topic\"])]]]]))"]}