{"version":3,"sources":["oc/web/stores/reminder.cljs"],"mappings":"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","names":["oc.web.dispatcher/action","p__38715","vec__38716","cljs.core.nth","db","_","org-slug","reminder-uuid","reminders-data","oc.web.dispatcher.reminders_data","reminder-edit-key","oc.web.dispatcher/reminder-edit-key","old-edit-reminder-data","cljs.core.get_in","new-reminder-data","oc.web.utils.reminder/parse-reminder","oc.web.utils.reminder/new-reminder-data","reminder-data","or__4126__auto__","cljs.core/first","p1__38714#","cljs.core.filter","cljs.core._EQ_","cljs.core/assoc-in","p__38719","vec__38720","sorted-reminders","oc.web.utils.reminder/sort-reminders","oc.web.dispatcher/reminders-data-key","cljs.core.assoc","p__38723","vec__38724","roster-data","parsed-roster","oc.web.utils.reminder/parse-reminders-roster","oc.web.dispatcher/reminders-roster-key","p__38727","vec__38728","value-or-fn","old-reminder-edit-data","cljs.core/fn?","cljs.core.update_in","cljs.core.merge","p__38732","vec__38733","old-reminders-data","filtered-reminders","p1__38731#","cljs.core/filterv","new-reminders-data","reminders-list-key","cljs.core.conj","p__38737","vec__38738","fixed-reminder-data","oc.web.lib.utils/activity-uuid","p1__38736#","cljs.core.not_EQ_","p__38741","vec__38742","p__38746","vec__38747","reminders-key","reminders-items-key","p1__38745#"],"sourcesContent":["(ns oc.web.stores.reminder\n  (:require [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.reminder :as reminder-utils]))\n\n(defmethod dispatcher/action :edit-reminder\n  [db [_ org-slug reminder-uuid]]\n  (let [reminders-data (dispatcher/reminders-data org-slug db)\n        reminder-edit-key (dispatcher/reminder-edit-key org-slug)\n        old-edit-reminder-data (get-in db reminder-edit-key)\n        new-reminder-data (reminder-utils/parse-reminder (reminder-utils/new-reminder-data))\n        reminder-data (or\n                        ;; If the edit reminder is already populated it means a post/patch\n                        ;; request failed, this avoid losing the edited data\n                        old-edit-reminder-data\n                        (if reminder-uuid\n                          ;; In case of edit initialize the edit with the reminder data\n                          (first (filter #(= (:uuid %) reminder-uuid) (:items reminders-data)))\n                          ;; Else use an default reminder data\n                          new-reminder-data))]\n    (assoc-in db reminder-edit-key reminder-data)))\n\n(defmethod dispatcher/action :reminders-loaded\n  [db [_ org-slug reminders-data]]\n  (let [sorted-reminders (reminder-utils/sort-reminders (:items reminders-data))]\n    (assoc-in db (dispatcher/reminders-data-key org-slug) (assoc reminders-data :items sorted-reminders))))\n\n(defmethod dispatcher/action :reminders-roster-loaded\n  [db [_ org-slug roster-data]]\n  (let [parsed-roster (reminder-utils/parse-reminders-roster roster-data)]\n    (assoc-in db (dispatcher/reminders-roster-key org-slug) parsed-roster)))\n\n(defmethod dispatcher/action :update-reminder\n  [db [_ org-slug reminder-uuid value-or-fn]]\n  (let [reminder-edit-key (dispatcher/reminder-edit-key org-slug)\n        old-reminder-edit-data (get-in db reminder-edit-key)]\n    (if (fn? value-or-fn)\n      (update-in db reminder-edit-key value-or-fn)\n      (assoc-in db reminder-edit-key (merge old-reminder-edit-data value-or-fn)))))\n\n(defmethod dispatcher/action :save-reminder/error\n  [db [_ org-slug reminder-data]]\n  (let [old-reminders-data (dispatcher/reminders-data org-slug db)\n        filtered-reminders (filterv #(nil? (:uuid %)) (:items old-reminders-data))\n        new-reminders-data (reminder-utils/sort-reminders filtered-reminders)\n        reminders-list-key (conj (dispatcher/reminders-data-key org-slug) :items)]\n    (-> db\n      (assoc-in reminders-list-key new-reminders-data)\n      (assoc-in (dispatcher/reminder-edit-key org-slug) reminder-data))))\n\n(defmethod dispatcher/action :save-reminder\n  [db [_ org-slug reminder-data]]\n  (let [fixed-reminder-data (if (:uuid reminder-data)\n                              reminder-data\n                              (assoc reminder-data :uuid (utils/activity-uuid)))\n        old-reminders-data (dispatcher/reminders-data org-slug db)\n        filtered-reminders (filterv #(not= (:uuid reminder-data) (:uuid %)) (:items old-reminders-data))\n        new-reminders-data (reminder-utils/sort-reminders (conj filtered-reminders fixed-reminder-data))\n        reminders-list-key (conj (dispatcher/reminders-data-key org-slug) :items)]\n    (-> db\n      (assoc-in reminders-list-key new-reminders-data)\n      (assoc-in (dispatcher/reminder-edit-key org-slug) nil))))\n\n(defmethod dispatcher/action :cancel-edit-reminder\n  [db [_ org-slug]]\n  (assoc-in db (dispatcher/reminder-edit-key org-slug) nil))\n\n(defmethod dispatcher/action :delete-reminder\n  [db [_ org-slug reminder-uuid]]\n  (let [reminders-key (dispatcher/reminders-data-key org-slug)\n        old-reminders-data (get-in db reminders-key)\n        reminders-items-key (conj reminders-key :items)\n        filtered-reminders (reminder-utils/sort-reminders (filterv #(not= (:uuid %) reminder-uuid) (:items old-reminders-data)))]\n    (-> db\n      (assoc-in reminders-items-key filtered-reminders)\n      (assoc-in (dispatcher/reminder-edit-key org-slug) nil))))"]}