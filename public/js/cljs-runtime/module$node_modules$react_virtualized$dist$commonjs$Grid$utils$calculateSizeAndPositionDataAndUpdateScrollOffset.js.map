{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$calculateSizeAndPositionDataAndUpdateScrollOffset.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,gHAAf,CAAqI,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7KC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,OAAR,CACAC,QAA0D,CAACC,IAAD,CAAO,CAAA,IAE3DC,SAAWD,IAAXC,CAAgBA,QAF2C,CAG3DC,wBAA0BF,IAA1BE,CAA+BA,uBAH4B,CAI3DC,6BAA+BH,IAA/BG,CAAoCA,4BAJuB,CAM3DC,aAAeJ,IAAfI,CAAoBA,YANuC,CAO3DC,kBAAoBL,IAApBK,CAAyBA,iBAPkC,CAQ3DC,cAAgBN,IAAhBM,CAAqBA,aARsC;AAS3DC,mCAAqCP,IAArCO,CAA0CA,kCAI9C,IAZgBP,IAYhB,CAZqBQ,SAYrB,GARqBR,IAQrB,CAR0BS,cAQ1B,GAAyD,QAAzD,GAAqC,MAAOR,SAA5C,EAA6F,QAA7F,GAAqE,MAAOG,aAA5E,GAA0GH,QAA1G,GAAuHG,YAAvH,CACEF,uBAAA,CAAwBC,4BAAxB,CAIA,CAAqB,CAArB,EAAIG,aAAJ,EAA0BA,aAA1B,GAA4CD,iBAA5C,EACEE,kCAAA,EAnB2D,CAP4G;",
"sources":["node_modules/react-virtualized/dist/commonjs/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$calculateSizeAndPositionDataAndUpdateScrollOffset\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = calculateSizeAndPositionDataAndUpdateScrollOffset;\nfunction calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;\n\n  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps);\n\n    // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}\n\n/**\n * Helper method that determines when to recalculate row or column metadata.\n */\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","calculateSizeAndPositionDataAndUpdateScrollOffset","_ref","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellSize","nextScrollToIndex","scrollToIndex","updateScrollOffsetForScrollToIndex","cellCount","nextCellsCount"]
}
