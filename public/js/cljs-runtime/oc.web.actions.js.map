{"version":3,"sources":["oc/web/actions.cljs"],"mappings":";AAYA,AAAA,AAAA,AAAAA,AAAOM;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOE,AAAOI;AAAd,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAa,AAACC,AAAMC,AAAOL;AAA3B,AAAA,AAAA;;;AADF,AAAA,AAAA,AAAOJ;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAGA,AAAAS,AAAA,AAAA,AAAuCC,AAAGC;AAA1C,AACE,AAAAP,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAsC,AAAK,AAACM,AAAMD;AAAlD,AAAA,AAAA;;AACA,AAAAP,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA4B,AAACO,AAAOF;AAApC,AAAA,AAAA;;AACAD;;AAEF,AAAAD,AAAA,AAAA,AAAAK,AAAqCJ;AAArC,AAAA,AAAAK,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAyCE;AAAzC,AAAAD,AAAAD,AAAA,AAAA,AAA2CG;AAA3C,AAAAF,AAAAD,AAAA,AAAA,AAAgDI;AAAhD,AACE,AAACC,AAASV,AAAGQ,AAAKC;;AAEpB,AAAAV,AAAA,AAAA,AAAAY,AAAsCX;AAAtC,AAAA,AAAAY,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAA0CL;AAA1C,AAAAD,AAAAM,AAAA,AAAA,AAA4CJ;AAA5C,AAAAF,AAAAM,AAAA,AAAA,AAAiDC;AAAjD,AACE,AAAI,AAACC,AAAID;AACP,AAACE,AAAUf,AAAGQ,AAAKK;;AACnBb","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions/log","seq50442","self__4724__auto__","cljs.core/seq","args","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.apply","cljs.core/pr-str","oc.web.dispatcher/action","db","payload","cljs.core/first","cljs.core.pr_str","p__50446","vec__50447","cljs.core.nth","_","path","value","cljs.core/assoc-in","p__50452","vec__50453","value-fn","cljs.core/fn?","cljs.core.update_in"],"sourcesContent":["(ns oc.web.actions\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]))\n\n;; ---- Generic Actions Dispatch\n;; This is a small generic abstraction to handle \"actions\".\n;; An `action` is a transformation on the app state.\n;; The return value of an action will be used as the new app-state.\n\n;; The extended multimethod `action` is defined in the dispatcher\n;; namespace to avoid cyclical dependencies between namespaces\n\n(defn- log [& args]\n  (timbre/info (apply pr-str args)))\n\n(defmethod dispatcher/action :default [db payload]\n  (timbre/warn \"No handler defined for\" (str (first payload)))\n  (timbre/info \"Full event: \" (pr-str payload))\n  db)\n\n(defmethod dispatcher/action :input [db [_ path value]]\n  (assoc-in db path value))\n\n(defmethod dispatcher/action :update [db [_ path value-fn]]\n  (if (fn? value-fn)\n    (update-in db path value-fn)\n    db))\n"]}