{"version":3,"sources":["oc/web/actions/reaction.cljs"],"mappings":";AAYA,AAAA,AAAMA,AAAmBC,AAAcC;AAAvC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAyCF,AAC9BC,AACX,AAACE,AAAiB,AAACC,AAAsB,AAAA,AAAOJ;;AAGjD,AAAM,AAAAK,AAAKJ;AAAL,AAAA,AAAAI;AACK,AAAA,AAACC,AAAe,AAAA,AAAQN;;AAD7BK;;;AAAN,AAEE,AAAME,AAAW,AAAA,AAACD,AAAe,AAAA,AAAQN;AAAzC,AACE,AAACQ,AAAsBD,AAAWN,AAChC,AAAAQ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AAAAF,AAAAJ,AAAA,AAA4BO;AAA5B,AAEE,AAACC,AAA2BlB;;;AANpC;;;AAQF,AAAA,AAAMmB,AACHnB,AAAcoB,AAAcC;AAD/B,AAEE,AAAMC,AAAa,AAACnB,AAAiB,AAACC,AAAsB,AAAA,AAAOJ;AAC7DuB,AAAY,AAAA,AAAA,AAAIF;AAChBG,AAAc,AAAA,AAAClB,AAAe,AAAA,AAAQc,AAAuBG;AAC7DE,AAAY,AAAIJ,AACF,AAAK,AAAAK,AAAI,AAAA,AAAQN;AAAZ,AAAA,AAAAM;AAAAA;;AAAA;;AAAL,AACA,AAAK,AAAAA,AAAI,AAAA,AAAQN;AAAZ,AAAA,AAAAM;AAAAA;;AAAA;;AAAL;AACdC,AAAwBP,AACH,AAAA,AAACQ,AAAaH,AACd,AAAA,AAACG,AAAeP;AAR3C,AASE,AAAA,AAAA,AAACnB,AAAyCF,AAAc2B,AAAoBL;;AAC5E,AAACO,AAAoBL,AACnB,AAAAM;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAA,AAAAjB,AAAAiB,AAAA,AAAahB;AAAb,AAAAD,AAAAiB,AAAA,AAAoBf;AAApB,AAAAF,AAAAiB,AAAA,AAA4Bd;AAA5B,AAEE,AAACC,AAA2BlB;;;AAEpC,AAAA,AAAMgC,AAAmBC,AAASC;AAAlC,AACE,AAAMC,AAAW,AAACC,AAAkBH,AAASC;AACvCG,AAAa,AAACC,AAAiBL,AAASC;AAD9C,AAEE,AAAAR,AAAIS;AAAJ,AAAA,AAAAT;AAAAA;;AAAeW;;;AAEnB,AAAA,AAAME,AAAyBN,AAASO,AAAWC,AAAcN;AAAjE,AAEE,AAAIA;AACF,AAACjB,AAA2BiB;;AAC5B,AAACO,AAAkCF,AAAWC;;;AAElD,AAAA,AAAME,AAA4BV,AAASO,AAAWH;AAAtD,AACE,AAAMO,AAAW,AAAA,AAAgBP;AAE3BF,AAAW,AAACC,AAAkBH,AAASW;AAF7C,AAIE,AAAIT;AACF,AAACU,AAA4BV;;AAC7B,AAACW,AAAkCN,AAAWI,AAC7C,AAAK5B,AAAQD;AAAb,AACE,AAAMC;AAAN,AACE,AAAC6B,AAA4B,AAACT,AAAkBH,AAASW;;AAD3D;;;;;AAGT,AAAA,AAAMG,AAAkBd,AAASO,AAAWN;AAA5C,AACE,AAAMc,AAAc,AAAChB,AAAkBC,AAASC;AAAhD,AACE,AAAI,AAACe,AAAwBD;AAC3B,AAACL,AAA2BV,AAASO,AAAWQ;;AAChD,AAACT,AAAwBN,AAASO,AAAWN,AAAUc;;;AAE7D,AAAA,AAAME,AAA6BC;AAAnC,AACE,AAAMlB,AAAS,AAAC7B;AACVgD,AAAW,AAAA,AAAeD;AADhC,AAEE,AAAA,AAAA,AAACjD,AAA4CiD;;AAC7C,AAACJ,AAAiBd,AAASmB,AAAW,AAAA,AAAgBD;;AAE1D,AAAA,AAAME,AAAgCF;AAAtC,AACE,AAAMlB,AAAS,AAAC7B;AACVgD,AAAW,AAAA,AAAeD;AADhC,AAEE,AAAA,AAAA,AAACjD,AAA+CiD;;AAChD,AAACJ,AAAiBd,AAASmB,AAAW,AAAA,AAAgBD;;AAE1D,AAAA,AAAMG;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC;AAAD,AACkB,AAACN,AAA4B,AAAA,AAAAK;;;AAC/C,AAAA,AAAA,AAAAE,AAACD;AAAD,AACkB,AAACH,AAA+B,AAAA,AAAAI","names":["oc.web.actions.reaction/react-from-picker","activity-data","emoji","oc.web.dispatcher/dispatch!","oc.web.dispatcher/activity-key","oc.web.dispatcher.current_org_slug","and__4115__auto__","oc.web.lib.utils.link_for","react-link","oc.web.api/react-from-picker","p__44162","map__44163","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","status","success","body","oc.web.actions.activity/get-entry","oc.web.actions.reaction/reaction-toggle","reaction-data","reacting?","activity-key","link-method","reaction-link","fixed-count","or__4126__auto__","fixed-reaction-data","cljs.core.assoc","oc.web.api/toggle-reaction","p__44165","map__44166","oc.web.actions.reaction/reaction-resource","org-slug","item-uuid","entry-data","oc.web.dispatcher.activity_data","comment-data","oc.web.dispatcher.comment_data","oc.web.actions.reaction/refresh-entry-if-needed","board-slug","resource-uuid","oc.web.actions.cmail/get-entry-with-uuid","oc.web.actions.reaction/refresh-comments-if-needed","entry-uuid","oc.web.utils.activity/get-comments","oc.web.actions.cmail.get_entry_with_uuid","oc.web.actions.reaction/refresh-resource","resource-data","oc.web.utils.activity/comment?","oc.web.actions.reaction/ws-interaction-reaction-add","interaction-data","board-uuid","oc.web.actions.reaction/ws-interaction-reaction-delete","oc.web.actions.reaction/subscribe","p1__44168#","oc.web.ws.interaction-client/subscribe","p1__44169#"],"sourcesContent":["(ns oc.web.actions.reaction\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.ws.interaction-client :as ws-ic]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.actions.activity :as activity-actions]))\n\n(defn react-from-picker [activity-data emoji]\n  (dis/dispatch! [:handle-reaction-to-entry activity-data\n   {:reaction emoji :count 1 :reacted true :links [] :authors []}\n   (dis/activity-key (dis/current-org-slug) (:uuid activity-data))])\n  ;; Some times emoji.native coming from EmojiMart is null\n  ;; so we need to avoid posting empty emojis\n  (when (and emoji\n             (utils/link-for (:links activity-data) \"react\"))\n    (let [react-link (utils/link-for (:links activity-data) \"react\")]\n      (api/react-from-picker react-link emoji\n        (fn [{:keys [status success body]}]\n          ;; Refresh the full entry to make sure it's up to date\n          (activity-actions/get-entry activity-data))))))\n\n(defn reaction-toggle\n  [activity-data reaction-data reacting?]\n  (let [activity-key (dis/activity-key (dis/current-org-slug) (:uuid activity-data))\n        link-method (if reacting? \"PUT\" \"DELETE\")\n        reaction-link (utils/link-for (:links reaction-data) \"react\" link-method)\n        fixed-count (if reacting?\n                      (inc (or (:count reaction-data) 0))\n                      (dec (or (:count reaction-data) 0)))\n        fixed-reaction-data (-> reaction-data\n                             (assoc :count fixed-count)\n                             (assoc :reacted reacting?))]\n    (dis/dispatch! [:handle-reaction-to-entry activity-data fixed-reaction-data activity-key])\n    (api/toggle-reaction reaction-link\n      (fn [{:keys [status success body]}]\n        ;; Refresh the full entry to make sure it's up to date\n        (activity-actions/get-entry activity-data)))))\n\n(defn reaction-resource [org-slug item-uuid]\n  (let [entry-data (dis/activity-data org-slug item-uuid)\n        comment-data (dis/comment-data org-slug item-uuid)]\n    (or entry-data comment-data)))\n\n(defn refresh-entry-if-needed [org-slug board-slug resource-uuid entry-data]\n  ;; Refresh entry if necessary\n  (if entry-data\n    (activity-actions/get-entry entry-data)\n    (cmail-actions/get-entry-with-uuid board-slug resource-uuid)))\n\n(defn refresh-comments-if-needed [org-slug board-slug comment-data]\n  (let [entry-uuid (:resource-uuid comment-data)\n        ; Entry data\n        entry-data (dis/activity-data org-slug entry-uuid)]\n    ;; Refresh entry if necessary\n    (if entry-data\n      (activity-utils/get-comments entry-data)\n      (cmail-actions/get-entry-with-uuid board-slug entry-uuid\n       (fn [success status]\n         (when success\n           (activity-utils/get-comments (dis/activity-data org-slug entry-uuid))))))))\n\n(defn refresh-resource [org-slug board-slug item-uuid]\n  (let [resource-data (reaction-resource org-slug item-uuid)]\n    (if (activity-utils/comment? resource-data)\n      (refresh-comments-if-needed org-slug board-slug resource-data)\n      (refresh-entry-if-needed org-slug board-slug item-uuid resource-data))))\n\n(defn ws-interaction-reaction-add [interaction-data]\n  (let [org-slug (dis/current-org-slug)\n        board-uuid (:container-id interaction-data)]\n    (dis/dispatch! [:ws-interaction/reaction-add interaction-data])\n    (refresh-resource org-slug board-uuid (:resource-uuid interaction-data))))\n\n(defn ws-interaction-reaction-delete [interaction-data]\n  (let [org-slug (dis/current-org-slug)\n        board-uuid (:container-id interaction-data)]\n    (dis/dispatch! [:ws-interaction/reaction-delete interaction-data])\n    (refresh-resource org-slug board-uuid (:resource-uuid interaction-data))))\n\n(defn subscribe []\n  (ws-ic/subscribe :interaction-reaction/add\n                   #(ws-interaction-reaction-add (:data %)))\n  (ws-ic/subscribe :interaction-reaction/delete\n                   #(ws-interaction-reaction-delete (:data %))))"]}