{"version":3,"sources":["oc/web/actions/user.cljs"],"mappings":"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","names":["var_args","G__43285","oc.web.actions.user/dismiss-invite-box","js/Error","oc.web.actions.user.dismiss_invite_box","oc.web.lib.jwt/user-id","user-id","remove-now?","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.router/show-invite-box-cookie","oc.web.dispatcher/dispatch!","oc.web.dispatcher/show-invite-box-key","G__43291","oc.web.actions.user/check-user-walls","oc.web.lib.jwt/jwt","oc.web.lib.utils/after","oc.web.stores.user/orgs?","oc.web.stores.user/auth-settings?","oc.web.stores.user/auth-settings-status?","oc.web.actions.user.check_user_walls","oc.web.dispatcher.auth_settings","oc.web.dispatcher.orgs_data","auth-settings","orgs","status-response","cljs.core/set","cljs.core.map","cljs.core/keyword","has-orgs","cljs.core/count","oc.web.router/nav!","oc.web.urls/confirm-invitation-password","oc.web.urls/confirm-invitation-profile","oc.web.urls/sign-up-profile","G__43293","oc.web.actions.user/entry-point-get-finished","success","body","oc.web.actions.user.entry_point_get_finished","callback","collection","cljs.core/fn?","oc.web.actions.notifications/show-notification","cljs.core.assoc","oc.web.lib.utils/network-error","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.user/entry-point-get","p__43297","vec__43298","cljs.core.nth","seq43295","G__43296","cljs.core/first","cljs.core/next","self__4723__auto__","org-slug","force-refresh?","oc.web.api/get-entry-point","oc.web.dispatcher.current_org_slug","temp__5733__auto__","org-data","p1__43294#","cljs.core.filter","cljs.core._EQ_","oc.web.router/rewrite-org-uuid-as-slug","oc.web.actions.org.get_org","cljs.core/not","oc.web.dispatcher.current_secure_activity_id","oc.web.actions.activity.secure_activity_get","oc.web.utils.activity.get_comments_if_needed","oc.web.dispatcher.secure_activity_data","oc.web.dispatcher.comments_data","oc.web.lib.cookies.set_cookie_BANG_","oc.web.router/last-org-cookie","oc.web.lib.cookies/default-cookie-expire","oc.web.actions.routing.maybe_404","and__4115__auto__","oc.web.dispatcher.in_route_QMARK_","oc.web.urls.org","oc.web.actions.user/save-login-redirect","p__43307","vec__43309","seq43304","self__4724__auto__","cljs.core/seq","url","or__4126__auto__","js/window","oc.web.router/login-redirect-cookie","oc.web.actions.user/maybe-save-login-redirect","url-pathname","is-login-route?","oc.web.urls/login-wall","oc.web.urls/login","oc.web.urls/native-login","cljs.core/deref","oc.web.dispatcher/app-state","oc.web.actions.user.save_login_redirect","oc.web.actions.user/newest-org","cljs.core.sort_by","oc.web.actions.user/get-default-org","last-org-slug","oc.web.lib.cookies/get-cookie","last-org","p1__43312#","oc.web.actions.user/login-redirect","redirect-url","oc.web.router/redirect!","oc.web.urls.default_landing","oc.web.actions.user/lander-check-team-redirect","oc.web.actions.user/login-with-email-finish","user-email","status","cljs.core/empty?","oc.web.urls/email-wall","oc.web.actions.jwt/update-jwt-cookie","oc.web.actions.user/login-with-email","email","pswd","email-links","auth-link","oc.web.lib.utils.link_for","oc.web.api/auth-with-email","cljs.core.partial","oc.web.actions.user/login-with-slack","p__43341","vec__43342","seq43339","G__43340","auth-url","state-map","auth-url-with-redirect","oc.web.utils.user/auth-link-with-state","cljs.core.merge","oc.web.urls/slack-lander-check","oc.web.actions.user/login-with-google","p__43347","vec__43348","seq43345","G__43346","oc.web.actions.user/refresh-slack-user","refresh-link","oc.web.api/refresh-slack-user","oc.web.actions.jwt/update-jwt","oc.web.urls/logout","oc.web.actions.user/show-login","login-type","oc.web.actions.user/patch-timezone-if-needed","user-map","temp__33774__auto__","_notz","clojure.string/blank?","user-profile-link","guessed-timezone","js/module$node_modules$moment_timezone$index","oc.web.api/patch-user","oc.web.lib.json/json->cljs","oc.web.actions.user/get-user","user-link","temp__5735__auto__","fixed-user-link","oc.web.api/get-user","data","oc.web.actions.nux/check-nux","oc.web.actions.user/auth-settings-get","oc.web.api/get-auth-settings","oc.web.actions.team/teams-get","oc.web.actions.user/auth-with-token-failed","error","oc.web.actions.user/invitation-confirmed","oc.web.actions.nux/new-user-registered","oc.web.actions.user/confirm-invitation","token","oc.web.api/confirm-invitation","oc.web.actions.user/auth-with-token-success","token-type","jwt","auth-body","to-org","oc.web.actions.user/auth-with-token-callback","cljs.core.not_EQ_","oc.web.lib.jwt/get-key","oc.web.actions.user/auth-with-token","token-links","oc.web.dispatcher.query_param","oc.web.api/auth-with-token","oc.web.actions.user/signup-with-email-failed","oc.web.actions.user/signup-with-email-success","team-token-signup?","signup-redirect","current-org-slug","oc.web.actions.user/signup-with-email-callback","oc.web.actions.user/signup-with-email","p__43365","vec__43366","seq43363","G__43364","signup-data","oc.web.api/signup-with-email","oc.web.actions.user/signup-with-email-reset-errors","oc.web.actions.user/pswd-collect","form-data","password-reset?","update-link","oc.web.api/collect-password","oc.web.actions.user/password-reset","reset-link","p1__43369#","oc.web.api/password-reset","oc.web.actions.user/clean-user-data","current-user-data","edit-user-profile","new-password","password-did-change","with-pswd","cljs.core.dissoc","new-email","email-did-change","with-email","oc.web.lib.utils/valid-email?","timezone","oc.web.actions.user/user-profile-patch","user-data","patch-cb","resp","G__43392","oc.web.actions.user/user-profile-save","edit-data","oc.web.actions.user.user_profile_save","save-cb","oc.web.actions.jwt.jwt_refresh","G__43394","oc.web.actions.user/onboard-profile-save","oc.web.actions.user.onboard_profile_save","org-editing-kw","org-editing","cljs.core.get","oc.web.actions.org/create-or-update-org","_","entry-point-body","oc.web.actions.user/user-avatar-save","avatar-url","user-avatar-data","oc.web.dispatcher.current_user_data","oc.web.actions.jwt/jwt-refresh","oc.web.actions.user/user-profile-reset","oc.web.actions.user/resend-verification-email","resend-link","oc.web.api/resend-verification-email","cljs.core.keyword","oc.web.actions.user/verify-continue","org","oc.web.actions.user/expo-push-token-expiry","oc.web.actions.user/dispatch-expo-push-token","push-token","oc.web.router/expo-push-token-cookie","oc.web.actions.user/recall-expo-push-token","oc.web.actions.user/add-expo-push-token","add-token-link","need-to-add?","oc.web.utils.user/user-has-push-token?","oc.web.api/add-expo-push-token","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.actions.user/deny-push-notification-permission","oc.web.actions.user/initial-loading","p__43413","vec__43429","seq43408","force-refresh","latest-entry-point","latest-auth-settings","now","js/Date","reload-time","oc.web.dispatcher.org_data","oc.web.actions.user.entry_point_get","oc.web.actions.user/read-notifications","oc.web.actions.user/read-notification","notification","oc.web.actions.user/load-follow-list","oc.web.ws.change-client/follow-list","oc.web.actions.user/load-followers-count","oc.web.ws.change-client/followers-count","oc.web.actions.user/refresh-follow-containers","current-board-slug","oc.web.dispatcher.current_board_slug","is-following?","is-replies?","following-delay","replies-delay","oc.web.lib.utils/maybe-after","oc.web.actions.activity.following_get","oc.web.actions.activity.replies_get","oc.web.actions.user/toggle-publisher","publisher-uuid","current-publishers","oc.web.dispatcher.follow_publishers_list","follow?","oc.web.lib.utils/in?","next-publishers","cljs.core/vec","cljs.core.conj","cljs.core.disj","oc.web.ws.change-client/publisher-follow","oc.web.ws.change-client/publisher-unfollow","oc.web.actions.user/toggle-board","board-uuid","current-boards","oc.web.dispatcher.follow_boards_list","next-boards","oc.web.ws.change-client/board-follow","oc.web.ws.change-client/board-unfollow","oc.web.actions.user/subscribe","oc.web.ws.notify-client/subscribe","p__43443","map__43444","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","p__43446","map__43447","fixed-notification","oc.web.utils.notification/fix-notification","oc.web.ws.change-client/subscribe","p__43449","map__43450","p__43452","map__43453","oc.web.actions.user/force-jwt-refresh"],"sourcesContent":["(ns oc.web.actions.user\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [cuerdas.core :as s]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.stores.user :as user-store]\n            [oc.web.ws.notify-client :as ws-nc]\n            [oc.web.ws.change-client :as ws-cc]\n            [oc.web.lib.fullstory :as fullstory]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.actions.jwt :as jwt-actions]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.utils.notification :as notif-utils]\n            [oc.web.actions.routing :as routing-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.actions.notifications :as notification-actions]\n            [\"moment-timezone\" :as moment-timezone]))\n\n;; Invite box\n\n(defn dismiss-invite-box\n\n  ([] (dismiss-invite-box (jwt/user-id) false))\n\n  ([user-id] (dismiss-invite-box user-id false))\n\n  ([user-id remove-now?]\n  (cook/remove-cookie! (router/show-invite-box-cookie user-id))\n  (when remove-now?\n    (dis/dispatch! [:input [dis/show-invite-box-key] false]))))\n\n;;User walls\n\n(defn- check-user-walls\n  \"Check if one of the following is present and redirect to the proper wall if needed:\n  :password-required redirect to password collect\n  :name-required redirect to first and last name collect\n\n  Use the orgs value to determine if the user has already at least one org set\"\n  ([]\n    ; Delay to let the last api request set the app-state data\n    (when (jwt/jwt)\n      (utils/after 100\n        #(when (and (user-store/orgs?)\n                    (user-store/auth-settings?)\n                    (user-store/auth-settings-status?))\n            (check-user-walls (dis/auth-settings) (dis/orgs-data))))))\n  ([auth-settings orgs]\n    (let [status-response (set (map keyword (:status auth-settings)))\n          has-orgs (pos? (count orgs))]\n      (cond\n        (status-response :password-required)\n        (router/nav! oc-urls/confirm-invitation-password)\n\n        (status-response :name-required)\n        (if has-orgs\n          (router/nav! oc-urls/confirm-invitation-profile)\n          (router/nav! oc-urls/sign-up-profile))\n\n        :else\n        (when-not has-orgs\n          (router/nav! oc-urls/sign-up-profile))))))\n\n;; API Entry point\n(defn entry-point-get-finished\n  ([success body] (entry-point-get-finished success body nil))\n\n  ([success body callback]\n  (let [collection (:collection body)]\n    (if success\n      (let [orgs (:items collection)]\n        (dis/dispatch! [:entry-point orgs collection])\n        (check-user-walls)\n        (when (fn? callback)\n          (callback orgs collection)))\n      (notification-actions/show-notification (assoc utils/network-error :expire 0))))))\n\n(defn entry-point-get [org-slug & [force-refresh?]]\n  (api/get-entry-point (dis/current-org-slug)\n   (fn [success body]\n     (entry-point-get-finished success body\n       (fn [orgs collection]\n         (if org-slug\n           (if-let [org-data (first (filter #(or (= (:slug %) org-slug)\n                                                 (= (:uuid %) org-slug)) orgs))]\n             ;; We got the org we were looking for. Possibly redirect if the client\n             ;; used org uuid in token.\n             (if (= (:uuid org-data) org-slug)\n               (router/rewrite-org-uuid-as-slug org-slug (:slug org-data))\n               (org-actions/get-org org-data (not force-refresh?)))\n             (if (dis/current-secure-activity-id)\n               (activity-actions/secure-activity-get\n                #(activity-utils/get-comments-if-needed (dis/secure-activity-data) (dis/comments-data)))\n               (do\n                 ;; avoid infinite loop of the Go to digest button\n                 ;; by changing the value of the last visited slug\n                 (if (pos? (count orgs))\n                   ;; we got at least one org, redirect to it next time\n                   (cook/set-cookie! (router/last-org-cookie) (:slug (first orgs)) cook/default-cookie-expire)\n                   ;; no orgs present, remove the last org cookie to avoid infinite loops\n                   (cook/remove-cookie! (router/last-org-cookie)))\n                 (when-not (dis/current-secure-activity-id)\n                   ;; 404: secure entry can't 404 here since the org response is included in the\n                   ;; secure entry response and not in the entry point response\n                   (routing-actions/maybe-404)))))\n           ;; If user is on login page and he's logged in redirect to the org page\n           (when (and (jwt/jwt)\n                      (dis/in-route? :login)\n                      (pos? (count orgs)))\n             (router/nav! (oc-urls/org (:slug (first orgs)))))))))))\n\n(defn save-login-redirect [& [url]]\n  (let [url (or url (.. js/window -location -href))]\n    (when url\n      (cook/set-cookie! router/login-redirect-cookie url))))\n\n(defn maybe-save-login-redirect []\n  (let [url-pathname (.. js/window -location -pathname)\n        is-login-route? (or (= url-pathname oc-urls/login-wall)\n                            (= url-pathname oc-urls/login)\n                            (= url-pathname oc-urls/native-login))]\n    (cond\n      (and is-login-route?\n           (:login-redirect (:query-params @dis/app-state)))\n      (save-login-redirect (:login-redirect (:query-params @dis/app-state)))\n      (not is-login-route?)\n      (save-login-redirect))))\n\n(defn- newest-org [orgs]\n  (first (sort-by :created-at orgs)))\n\n(defn- get-default-org [orgs]\n  (if-let [last-org-slug (cook/get-cookie (router/last-org-cookie))]\n    (let [last-org (first (filter #(= (:slug %) last-org-slug) orgs))]\n      (or\n        ; Get the last accessed board from the saved cookie\n        last-org\n        ; Fallback to the newest board if the saved board was not found\n        (newest-org orgs)))\n    (newest-org orgs)))\n\n(defn login-redirect []\n  (let [redirect-url (cook/get-cookie router/login-redirect-cookie)\n        orgs (dis/orgs-data)]\n    (cook/remove-cookie! router/login-redirect-cookie)\n    (if redirect-url\n      (router/redirect! redirect-url)\n      (router/nav!\n       (if (zero? (count orgs))\n         oc-urls/sign-up-profile\n         (oc-urls/default-landing (:slug (get-default-org orgs))))))))\n\n(defn lander-check-team-redirect []\n  (utils/after 100 #(api/get-entry-point (dis/current-org-slug)\n    (fn [success body]\n      (entry-point-get-finished success body login-redirect)))))\n\n;; Login\n(defn login-with-email-finish\n  [user-email success body status]\n  (if success\n    (do\n      (if (empty? body)\n        (utils/after 10 #(router/nav! (str oc-urls/email-wall \"?e=\" user-email)))\n        (do\n          (jwt-actions/update-jwt-cookie body)\n          (lander-check-team-redirect)))\n      (dis/dispatch! [:login-with-email/success body]))\n    (cond\n     (= status 401)\n     (dis/dispatch! [:login-with-email/failed 401])\n     :else\n     (dis/dispatch! [:login-with-email/failed 500]))))\n\n(defn login-with-email [email pswd]\n  (let [email-links (:links (dis/auth-settings))\n        auth-link (utils/link-for email-links \"authenticate\" \"GET\" {:auth-source \"email\"})]\n    (api/auth-with-email auth-link email pswd (partial login-with-email-finish email))\n    (dis/dispatch! [:login-with-email])))\n\n(defn login-with-slack [auth-url & [state-map]]\n  (let [auth-url-with-redirect (user-utils/auth-link-with-state\n                                (:href auth-url)\n                                (merge {:team-id \"open-company-auth\"\n                                        :redirect oc-urls/slack-lander-check}\n                                       state-map))]\n    (router/redirect! auth-url-with-redirect)\n    (dis/dispatch! [:login-with-slack])))\n\n(defn login-with-google [auth-url & [state-map]]\n  (let [auth-url-with-redirect (user-utils/auth-link-with-state\n                                (:href auth-url)\n                                (or state-map {}))]\n    (router/redirect! auth-url-with-redirect)\n    (dis/dispatch! [:login-with-google])))\n\n(defn refresh-slack-user []\n  (let [refresh-link (utils/link-for (:links (dis/auth-settings)) \"refresh\")]\n    (api/refresh-slack-user refresh-link\n     (fn [status body success]\n      (if success\n        (jwt-actions/update-jwt body)\n        (router/redirect! oc-urls/logout))))))\n\n(defn show-login [login-type]\n  (dis/dispatch! [:login-overlay-show login-type]))\n\n;; User Timezone preset\n\n(defn- patch-timezone-if-needed [user-map]\n  (when-let* [_notz (clojure.string/blank? (:timezone user-map))\n              user-profile-link (utils/link-for (:links user-map) \"partial-update\" \"PATCH\")\n              guessed-timezone (.. moment-timezone -tz guess)]\n    (api/patch-user user-profile-link {:timezone guessed-timezone}\n     (fn [status body success]\n       (when success\n        (dis/dispatch! [:user-data (json->cljs body)]))))))\n\n;; Get user\n\n(defn get-user [user-link]\n  (when-let [fixed-user-link (or user-link (utils/link-for (:links (dis/auth-settings)) \"user\" \"GET\"))]\n    (api/get-user fixed-user-link (fn [success data]\n     (let [user-map (when success (json->cljs data))]\n       (dis/dispatch! [:user-data user-map])\n       (utils/after 100 nux-actions/check-nux)\n       (patch-timezone-if-needed user-map))))))\n\n;; Auth\n\n(defn auth-settings-get\n  \"Entry point call for auth service.\"\n  []\n  (api/get-auth-settings (fn [body status]\n    (if body\n      (do\n        ;; auth settings loaded\n        (when-let [user-link (utils/link-for (:links body) \"user\" \"GET\")]\n          (get-user user-link))\n        (dis/dispatch! [:auth-settings body])\n        (check-user-walls)\n        ;; Start teams retrieve if we have a link\n        (team-actions/teams-get))\n      (when (= status 401)\n        (dis/dispatch! [:auth-settings status]))))))\n\n(defn auth-with-token-failed [error]\n  (dis/dispatch! [:auth-with-token/failed error]))\n\n;;Invitation\n(defn invitation-confirmed [status body success]\n (when success\n    (jwt-actions/update-jwt body)\n    (when (= status 201)\n      (nux-actions/new-user-registered \"email\")\n      (api/get-entry-point (dis/current-org-slug) entry-point-get-finished)\n      (auth-settings-get))\n    ;; Go to password setup\n    (router/nav! oc-urls/confirm-invitation-password))\n  (dis/dispatch! [:invitation-confirmed success]))\n\n(defn confirm-invitation [token]\n  (let [auth-link (utils/link-for (:links (dis/auth-settings)) \"authenticate\" \"GET\"\n                   {:auth-source \"email\"})]\n    (api/confirm-invitation auth-link token invitation-confirmed)))\n\n;; Token authentication\n(defn auth-with-token-success [token-type jwt]\n  (api/get-auth-settings\n   (fn [auth-body]\n     (api/get-entry-point (dis/current-org-slug)\n      (fn [success body]\n        (entry-point-get-finished success body)\n        (let [orgs (:items (:collection body))\n              to-org (get-default-org orgs)]\n          (router/redirect! (if to-org (oc-urls/default-landing (:slug to-org)) oc-urls/sign-up-profile)))))))\n  (when (= token-type :password-reset)\n    (cook/set-cookie! :show-login-overlay \"collect-password\"))\n  (dis/dispatch! [:auth-with-token/success jwt]))\n\n(defn auth-with-token-callback\n  [token-type success body status]\n  (if success\n    (do\n      (jwt-actions/update-jwt body)\n      (when (and (not= token-type :password-reset)\n                 (empty? (jwt/get-key :name)))\n        (nux-actions/new-user-registered \"email\"))\n      (auth-with-token-success token-type body))\n    (cond\n      (= status 401)\n      (auth-with-token-failed 401)\n      :else\n      (auth-with-token-failed 500))))\n\n(defn auth-with-token [token-type]\n  (let [token-links (:links (dis/auth-settings))\n        auth-url (utils/link-for token-links \"authenticate\" \"GET\" {:auth-source \"email\"})\n        token (dis/query-param :token)]\n    (api/auth-with-token auth-url token (partial auth-with-token-callback token-type))\n    (dis/dispatch! [:auth-with-token token-type])))\n\n;; Signup\n\n(defn signup-with-email-failed [status]\n  (dis/dispatch! [:signup-with-email/failed status]))\n\n(defn signup-with-email-success\n  [user-email team-token-signup? status jwt]\n  (let [signup-redirect (if team-token-signup?\n                         oc-urls/confirm-invitation-profile\n                         oc-urls/sign-up-profile)\n        current-org-slug (dis/current-org-slug)]\n    (cond\n      (= status 204) ;; Email wall since it's a valid signup w/ non verified email address\n      (utils/after 10 #(router/nav! (str oc-urls/email-wall \"?e=\" user-email)))\n      (= status 200) ;; Valid login, not signup, redirect to home\n      (if (or\n            (and (empty? (:first-name jwt)) (empty? (:last-name jwt)))\n            (empty? (:avatar-url jwt)))\n        (do\n          (utils/after 200 #(router/nav! signup-redirect))\n          (api/get-entry-point current-org-slug entry-point-get-finished))\n        (api/get-entry-point current-org-slug\n         (fn [success body]\n           (entry-point-get-finished success body\n             (fn [orgs collection]\n               (when (pos? (count orgs))\n                 (router/nav! (oc-urls/default-landing (:slug (get-default-org orgs))))))))))\n      :else ;; Valid signup let's collect user data\n      (do\n        (jwt-actions/update-jwt-cookie jwt)\n        (nux-actions/new-user-registered \"email\")\n        (utils/after 200 #(router/nav! signup-redirect))\n        (api/get-entry-point (dis/current-org-slug) entry-point-get-finished)\n        (dis/dispatch! [:signup-with-email/success])))))\n\n(defn signup-with-email-callback\n  [user-email team-token-signup? success body status]\n  (if success\n    (signup-with-email-success user-email team-token-signup? status body)\n    (signup-with-email-failed status)))\n\n(defn signup-with-email [signup-data & [team-token-signup?]]\n  (let [email-links (:links (dis/auth-settings))\n        auth-link (utils/link-for email-links \"create\" \"POST\" {:auth-source \"email\"})]\n    (api/signup-with-email auth-link\n     (or (:firstname signup-data) \"\")\n     (or (:lastname signup-data) \"\")\n     (:email signup-data)\n     (:pswd signup-data)\n     (.. moment-timezone -tz guess)\n     (partial signup-with-email-callback (:email signup-data) team-token-signup?))\n    (dis/dispatch! [:signup-with-email])))\n\n(defn signup-with-email-reset-errors []\n  (dis/dispatch! [:input [:signup-with-email] {}]))\n\n(defn pswd-collect [form-data password-reset?]\n  (let [update-link (utils/link-for (:links (:current-user-data @dis/app-state)) \"partial-update\" \"PATCH\")]\n    (api/collect-password update-link (:pswd form-data)\n      (fn [status body success]\n        (when success\n          (dis/dispatch! [:user-data (json->cljs body)]))\n        (when (and (>= status 200)\n                   (<= status 299))\n          (if password-reset?\n            (do\n              (cook/remove-cookie! :show-login-overlay)\n              (utils/after 200 #(router/nav! oc-urls/login)))\n            (do\n              (nux-actions/new-user-registered \"email\")\n              (router/nav! oc-urls/confirm-invitation-profile))))\n        (dis/dispatch! [:pswd-collect/finish status]))))\n  (dis/dispatch! [:pswd-collect password-reset?]))\n\n(defn password-reset [email]\n  (let [reset-link (utils/link-for (:links (dis/auth-settings)) \"reset\")]\n    (api/password-reset reset-link email\n     #(dis/dispatch! [:password-reset/finish %]))\n    (dis/dispatch! [:password-reset])))\n\n;; User Profile\n\n(defn- clean-user-data [current-user-data edit-user-profile]\n  (let [new-password (:password edit-user-profile)\n        password-did-change (pos? (count new-password))\n        with-pswd (if (and password-did-change\n                           (>= (count new-password) 8))\n                    edit-user-profile\n                    (dissoc edit-user-profile :password))\n        new-email (:email edit-user-profile)\n        email-did-change (not= new-email (:email current-user-data))\n        with-email (if (and email-did-change\n                            (utils/valid-email? new-email))\n                     (assoc with-pswd :email new-email)\n                     (assoc with-pswd :email (:email current-user-data)))\n        timezone (or (:timezone edit-user-profile) (:timezone current-user-data) (.. moment-timezone -tz guess))]\n    (assoc with-email :timezone timezone)))\n\n(defn- user-profile-patch [user-data user-profile-link patch-cb]\n  (dis/dispatch! [:user-profile-save])\n  (api/patch-user user-profile-link user-data\n   (fn [status body success]\n     (if (= status 422)\n       (dis/dispatch! [:user-profile-update/failed])\n       (let [resp (when success (json->cljs body))]\n         (when (fn? patch-cb)\n           (patch-cb success resp))\n         (when success\n           (dis/dispatch! [:user-data resp])))))))\n\n(defn user-profile-save\n  ([current-user-data edit-data]\n   (user-profile-save current-user-data edit-data nil))\n  ([current-user-data edit-data save-cb]\n   (let [user-data (clean-user-data current-user-data (or (:user-data edit-data) edit-data))\n         user-profile-link (utils/link-for (:links current-user-data) \"partial-update\" \"PATCH\")]\n     (user-profile-patch user-data user-profile-link\n      (fn [success resp]\n        (when success\n          (utils/after 100 #(jwt-actions/jwt-refresh)))\n        (when (fn? save-cb)\n          (utils/after 280 #(save-cb success resp))))))))\n\n(defn onboard-profile-save\n  ([current-user-data edit-data]\n   (onboard-profile-save current-user-data edit-data nil))\n  ([current-user-data edit-data org-editing-kw]\n   (let [org-editing (when org-editing-kw\n                        (get @dis/app-state org-editing-kw))\n         user-data (clean-user-data current-user-data (or (:user-data edit-data) edit-data))\n         user-profile-link (utils/link-for (:links current-user-data) \"partial-update\" \"PATCH\")]\n     (dis/dispatch! [:user-profile-save])\n     (user-profile-patch user-data user-profile-link\n      (fn [success resp]\n       (when-not org-editing\n         (dis/dispatch! [:input [:ap-loading] true]))\n       (utils/after 100 (fn []\n        (jwt-actions/jwt-refresh (fn []\n         (if org-editing\n           (org-actions/create-or-update-org org-editing)\n           (api/get-entry-point nil (fn [_ entry-point-body]\n            (router/nav! (oc-urls/default-landing (-> entry-point-body :collection :items first :slug)))))))))))))))\n\n(defn user-avatar-save [avatar-url]\n  (let [user-avatar-data {:avatar-url avatar-url}\n        current-user-data (dis/current-user-data)\n        user-profile-link (utils/link-for (:links current-user-data) \"partial-update\" \"PATCH\")]\n    (api/patch-user user-profile-link user-avatar-data\n     (fn [status body success]\n       (if-not success\n         (do\n           (dis/dispatch! [:user-profile-avatar-update/failed])\n           (notification-actions/show-notification\n            {:title \"Image upload error\"\n             :description \"An error occurred while processing your image. Please retry.\"\n             :expire 3\n             :id :user-avatar-upload-failed\n             :dismiss true}))\n         (do\n           (utils/after 1000 jwt-actions/jwt-refresh)\n           ; (dis/dispatch! [:user-data (json->cljs body)])\n           (dis/dispatch! [:user-profile-avatar-update/success (json->cljs body)])\n           (notification-actions/show-notification\n            {:title \"Image update succeeded\"\n             :description \"Your image was succesfully updated.\"\n             :expire 3\n             :dismiss true})))))))\n\n(defn user-profile-reset []\n  (dis/dispatch! [:user-profile-reset]))\n\n(defn resend-verification-email []\n  (let [user-data (dis/current-user-data)\n        resend-link (utils/link-for (:links user-data) \"resend-verification\" \"POST\")]\n    (when resend-link\n      (api/resend-verification-email resend-link\n       (fn [success]\n         (notification-actions/show-notification\n          {:title (if success \"Verification email re-sent!\" \"An error occurred\")\n           :description (when-not success \"Please try again.\")\n           :expire 3\n           :primary-bt-title \"OK\"\n           :primary-bt-dismiss true\n           :id (keyword (str \"resend-verification-\" (if success \"ok\" \"failed\")))}))))))\n\n(defn verify-continue [orgs]\n  (let [org (get-default-org orgs)]\n    (router/nav! (if org\n                   (if (and (empty? (jwt/get-key :first-name))\n                            (empty? (jwt/get-key :last-name)))\n                     oc-urls/confirm-invitation-profile\n                     (oc-urls/org (:slug org)))\n                  oc-urls/sign-up-profile))))\n\n;; Mobile push notifications\n\n(def ^:private expo-push-token-expiry (* 60 60 24 352 10)) ;; 10 years (infinite)\n\n(defn dispatch-expo-push-token\n  \"Save the expo push token in a cookie (or re-save to extend the cookie expire time)\n   and dispatch the value into the app-state.\"\n  [push-token]\n  (when push-token\n    ;; A blank push-token indicates that the user was prompted, but\n    ;; denied the push notification permission.\n    (cook/set-cookie! router/expo-push-token-cookie push-token expo-push-token-expiry)\n    (dis/dispatch! [:expo-push-token push-token])))\n\n(defn recall-expo-push-token\n  []\n  (dispatch-expo-push-token (cook/get-cookie router/expo-push-token-cookie)))\n\n(defn add-expo-push-token [push-token]\n  (let [user-data            (dis/current-user-data)\n        add-token-link       (utils/link-for (:links user-data) \"add-expo-push-token\" \"POST\")\n        need-to-add?         (not (user-utils/user-has-push-token? user-data push-token))]\n    (if-not need-to-add?\n      ;; Push token already known, dispatch it to app-state immediately\n      (dispatch-expo-push-token push-token)\n      ;; Novel push token, add it to the Auth service for storage\n      (when (and add-token-link push-token)\n        ;; Immediately dispatch placeholder token so we don't wait on network request\n        (dispatch-expo-push-token \"PENDING_PUSH_TOKEN\")\n        (api/add-expo-push-token\n         add-token-link\n         push-token\n         (fn [success]\n           (dispatch-expo-push-token push-token)\n           (timbre/info \"Successfully saved Expo push notification token\")))))))\n\n(defn deny-push-notification-permission\n  \"Push notification permission was denied.\"\n  []\n  (dispatch-expo-push-token \"\"))\n\n;; Initial loading\n\n(defn initial-loading [& [force-refresh?]]\n  (let [force-refresh (or force-refresh?\n                          (dis/in-route? :org)\n                          (dis/in-route? :login))\n        latest-entry-point (if (or force-refresh?\n                                   (nil? (:latest-entry-point @dis/app-state)))\n                             0\n                             (:latest-entry-point @dis/app-state))\n        latest-auth-settings (if (or force-refresh?\n                                     (nil? (:latest-auth-settings @dis/app-state)))\n                               0\n                               (:latest-auth-settings @dis/app-state))\n        now (.getTime (js/Date.))\n        reload-time (* 1000 60 20)] ; every 20m\n    (when (or (> (- now latest-entry-point) reload-time)\n              (and (dis/current-org-slug)\n                   (nil? (dis/org-data))))\n      (entry-point-get (dis/current-org-slug) force-refresh?))\n    (when (> (- now latest-auth-settings) reload-time)\n      (auth-settings-get))))\n\n;; User notifications\n\n(defn read-notifications []\n  (dis/dispatch! [:user-notifications/read (dis/current-org-slug)]))\n\n(defn read-notification [notification]\n  (dis/dispatch! [:user-notification/read (dis/current-org-slug) notification]))\n\n;; Follow/unfollow related actions\n\n(defn load-follow-list []\n  (ws-cc/follow-list))\n\n(defn load-followers-count []\n  (ws-cc/followers-count))\n\n(defn refresh-follow-containers []\n  (let [org-data (dis/org-data)\n        current-board-slug (dis/current-board-slug)\n        ; is-inbox? (= (dis/current-org-slug) \"inbox\")\n        is-following? (= current-board-slug \"following\")\n        is-replies? (= current-board-slug \"replies\")\n        ; is-unfollowing? (= (dis/current-org-slug) \"unfollowing\")\n        ; inbox-delay (if is-inbox? 1 500)\n        following-delay (if is-following? 1 500)\n        replies-delay (if is-replies? 1 500)\n        ; unfollowing-delay (if is-unfollowing? 1 500)\n        ]\n    ; (utils/maybe-after inbox-delay #(activity-actions/inbox-get org-data))\n    (utils/maybe-after following-delay #(activity-actions/following-get org-data is-following? nil))\n    (utils/maybe-after replies-delay #(activity-actions/replies-get org-data is-replies? nil))\n    ; (utils/maybe-after unfollowing-delay #(activity-actions/unfollowing-get org-data))\n    ))\n\n(defn toggle-publisher [publisher-uuid]\n  (let [org-slug (dis/current-org-slug)\n        current-publishers (map :user-id (dis/follow-publishers-list org-slug))\n        follow? (not (utils/in? current-publishers publisher-uuid))\n        next-publishers (if follow?\n                          (vec (conj (set current-publishers) publisher-uuid))\n                          (vec (disj (set current-publishers) publisher-uuid)))]\n    (dis/dispatch! [:publisher/follow (dis/current-org-slug)\n                                      {:org-slug org-slug\n                                       :publisher-uuids next-publishers\n                                       :follow? follow?\n                                       :publisher-uuid publisher-uuid}])\n    (when follow?\n      (dis/dispatch! [:follow-list-last-added org-slug {:last-added-uuid publisher-uuid\n                                                        :resource-type :user}]))\n    (if follow?\n      (ws-cc/publisher-follow publisher-uuid)\n      (ws-cc/publisher-unfollow publisher-uuid))))\n\n(defn toggle-board [board-uuid]\n  (let [org-slug (dis/current-org-slug)\n        current-boards (map :uuid (dis/follow-boards-list org-slug))\n        follow? (not (utils/in? current-boards board-uuid))\n        next-boards (if follow?\n                      (vec (conj (set current-boards) board-uuid))\n                      (vec (disj (set current-boards) board-uuid)))]\n    (dis/dispatch! [:board/follow (dis/current-org-slug)\n                                  {:org-slug org-slug\n                                   :board-uuids next-boards\n                                   :follow? follow?\n                                   :board-uuid board-uuid}])\n    (when follow?\n      (dis/dispatch! [:follow-list-last-added org-slug {:last-added-uuid board-uuid\n                                                        :resource-type :board}]))\n    (if follow?\n      (ws-cc/board-follow board-uuid)\n      (ws-cc/board-unfollow board-uuid))\n    (refresh-follow-containers)))\n\n;; subscribe to websocket events\n\n(defn subscribe []\n  (ws-nc/subscribe :user/notifications\n    (fn [{:keys [data]}]\n      ; (let [fixed-notifications (notif-utils/fix-notifications @dis/app-state (:notifications data))]\n      ;   (dis/dispatch! [:user-notifications (dis/current-org-slug) fixed-notifications]))\n      ))\n  (ws-nc/subscribe :user/notification\n    (fn [{:keys [data]}]\n      (when-let [fixed-notification (notif-utils/fix-notification @dis/app-state (assoc data :unread true))]\n        ; (dis/dispatch! [:user-notification (dis/current-org-slug) data])\n        (notification-actions/show-notification\n         {:title (:title fixed-notification)\n          :mention true\n          :dismiss true\n          :click (:click fixed-notification)\n          :mention-author (:author fixed-notification)\n          :description (:body fixed-notification)\n          :id (str \"notif-\" (:created-at fixed-notification))\n          :expire 5}))))\n  (ws-cc/subscribe :follow/list\n    (fn [{:keys [data]}]\n      (dis/dispatch! [:follow/loaded (dis/current-org-slug) data])))\n  (ws-cc/subscribe :followers/count\n    (fn [{:keys [data]}]\n      (dis/dispatch! [:followers-count/finish (dis/current-org-slug) data]))))\n\n;; Debug\n\n(defn force-jwt-refresh []\n  (when (jwt/jwt) (jwt-actions/jwt-refresh)))\n\n(set! (.-OCWebForceRefreshToken js/window) force-jwt-refresh)"]}