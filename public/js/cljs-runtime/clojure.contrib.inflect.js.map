{"version":3,"sources":["clojure/contrib/inflect.cljc"],"mappings":"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","names":["clojure.contrib.inflect/in?","x","coll","p1__51867#","cljs.core/some","cljs.core._EQ_","clojure.contrib.inflect/pluralize-noun-rules","cljs.core.atom","clojure.contrib.inflect/pluralize-noun-exceptions","clojure.contrib.inflect/pluralize-noun","count","noun","singular?","cljs.core/deref","p__51868","vec__51869","cljs.core.nth","cond?","result-fn","clojure.contrib.inflect/add-pluralize-noun-rule","rule-description","cljs.core.swap_BANG_","cljs.core/conj","clojure.contrib.inflect/add-pluralize-noun-exceptions","execption-description","exceptions","cljs.core/into","cljs.core/contains?","fexpr__51873","clojure.string/ends-with?","cljs.core/boolean","cljs.core/butlast","cljs.core/last","clojure.string.join","p1__51874#"],"sourcesContent":["(ns clojure.contrib.inflect\n  \"Functions and rules for pluralizing nouns.\"\n  (:require [clojure.string :refer [ends-with?]]))\n\n(defn in? [x coll]\n  \"Return true if x is in coll, else false. \"\n  ;; FIXME: duplicate\n  (some #(= x %) coll))\n\n(def ^:private pluralize-noun-rules (atom []))\n(def ^:private pluralize-noun-exceptions (atom {}))\n\n(defn pluralize-noun [count noun]\n  \"Return the pluralized noun if the `count' is\n   not 1.\"\n  {:pre [(<= 0 count)]}\n  (let [singular? (== count 1)]\n    (if singular?\n      noun                                                  ; If singular, return noun\n      (some (fn [[cond? result-fn]]\n                (if (cond? noun)\n                  (result-fn noun)))\n            @pluralize-noun-rules))))\n\n(defn add-pluralize-noun-rule\n  \"Adds a rule for pluralizing. The singular form of the noun is passed to the cond?\n  predicate and if that return a truthy value, the singular form is passed\n  to the result-fn to generate the plural form.\n\n  The rule description is for documentation only, it is ignored and may be nil.\"\n  [rule-description cond? result-fn]\n  (swap! pluralize-noun-rules\n         conj\n         [cond? result-fn]))\n\n(defn add-pluralize-noun-exceptions\n  \"Adds some number of exception cases.\n\n   exceptions is a map from singular form to plural form.\n\n   The exception description is for documentation only, it is ignored and may be nil.\"\n  [execption-description exceptions]\n  (swap! pluralize-noun-exceptions into exceptions))\n\n;; the order of rules is important\n(add-pluralize-noun-rule \"For irregular nouns, use the exceptions.\"\n                         (fn [noun] (contains? @pluralize-noun-exceptions noun))\n                         (fn [noun] (@pluralize-noun-exceptions noun)))\n\n(add-pluralize-noun-rule \"For nouns ending within consonant + y, suffixes `ies' \"\n                         (fn [noun] (and (ends-with? noun \"y\")\n                                         (not (boolean (in?  (-> noun butlast last) ;; before-last char\n                                                             [\\a \\e \\i \\o \\u])))))\n                         (fn [noun] (str (-> noun butlast clojure.string/join) \"ies\")))\n\n(add-pluralize-noun-rule \"For nouns ending with ss, x, z, ch or sh, suffixes `es.'\"\n                         (fn [noun] (some #(ends-with? noun %)\n                                          [\"ss\" \"x\" \"z\" \"ch\" \"sh\"]))\n                         (fn [noun] (str noun \"es\")))\n\n(add-pluralize-noun-rule \"For nouns ending with `f', suffixes `ves'\"\n                         (fn [noun] (and (ends-with? noun \"f\")\n                                         (not (ends-with? noun \"ff\"))))\n                         (fn [noun] (str (-> noun butlast clojure.string/join) \"ves\")))\n\n(add-pluralize-noun-rule \"For nouns ending with `fe', suffixes `ves'\"\n                         (fn [noun] (ends-with? noun \"fe\"))\n                         (fn [noun] (str (-> noun butlast butlast clojure.string/join) \"ves\")))\n\n(add-pluralize-noun-rule \"Always append `s' at the end of noun.\"\n                         (fn [noun] true) ;; always return true\n                         (fn [noun] (str noun \"s\")))\n\n(add-pluralize-noun-exceptions \"Irregular nouns ending in en\"\n                               {\n                                \"ox\" \"oxen\",\n                                \"child\" \"children\",\n                                \"man\" \"men\",\n                                \"woman\" \"women\",\n                                \"foot\" \"feet\",\n                                \"tooth\" \"teeth\",\n                                \"goose\" \"geese\",\n                                \"mouse\" \"mice\" ,\n                                \"person\" \"people\",\n                                \"louse\" \"lice\",\n                                })\n\n\n(add-pluralize-noun-exceptions \"Irregular nouns ending in f\"\n                               {\n                                \"chef\" \"chefs\",\n                                \"cliff\" \"cliffs\",\n                                \"ref\" \"refs\",\n                                \"roof\" \"roofs\",\n                                \"chief\" \"chiefs\",\n                                }\n                               )\n\n(add-pluralize-noun-exceptions \"Irregular nouns ending in o-es\"\n                               {\n                                \"negro\" \"negroes\",\n                                \"buffalo\" \"buffaloes\",\n                                \"flamingo\" \"flamingoes\",\n                                \"hero\" \"heroes\",\n                                \"mango\" \"mangoes\",\n                                \"mosquito\" \"mosquitoes\",\n                                \"potato\" \"potatoes\",\n                                \"tomato\" \"tomatoes\",\n                                \"tornado\" \"tornadoes\",\n                                \"torpedo\" \"torpedoes\",\n                                \"tuxedo\" \"tuxedoes\",\n                                \"volcano\" \"volcanoes\",\n                                \"zero\" \"zeroes\",\n                                \"echo\" \"echoes\",\n                                \"banjo\" \"banjoes\",\n                                \"cactus\" \"cactuses\"\n                                }\n                               )\n\n(add-pluralize-noun-exceptions \"Nouns with identical singular and plural forms.\"\n                               {\n                                \"bison\" \"bison\",\n                                \"buffalo\" \"buffalo\",\n                                \"deer\" \"deer\",\n                                \"duck\" \"duck\",\n                                \"fish\" \"fish\",\n                                \"moose\" \"moose\",\n                                \"pike\" \"pike\",\n                                \"sheep\" \"sheep\",\n                                \"salmon\" \"salmon\",\n                                \"trout\" \"trout\",\n                                \"swine\" \"swine\",\n                                \"plankton\" \"plankton\",\n                                \"squid\" \"squid\",\n                                })\n\n(add-pluralize-noun-exceptions \"Special cases\"\n                               {\n                                \"millenium\" \"millennia\",\n                                })\n"]}