{
"version":3,
"file":"module$node_modules$jwt_decode$lib$atob.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,uCAAf,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAQpGC,QAASA,sBAAqB,CAACC,OAAD,CAAU,CACtC,IAAA,CAAKA,OAAL,CAAeA,OADuB,CAOxCC,QAASA,SAAS,CAACC,KAAD,CAAQ,CACpBC,KAAAA,CAAMC,MAAA,CAAOF,KAAP,CAAA,CAAcG,OAAd,CAAsB,KAAtB,CAA6B,EAA7B,CACV,IAAsB,CAAtB,EAAIF,KAAJ,CAAQG,MAAR,CAAiB,CAAjB,CACE,KAAM,KAAIP,qBAAJ,CAA0B,mEAA1B,CAAN,CAEF,IALwB,IAOlBQ,GAAK,CAPa,CAOVC,EAPU,CAONC,MAPM,CAOEC,IAAM,CAPR,CAOWC,OAAS,EAF5C,CAIEF,MAJF,CAIWN,KAAA,CAAIS,MAAJ,CAAWF,GAAA,EAAX,CAJX,CAME,CAACD,MAAD,GAAYD,EAAA,CAAKD,EAAA,CAAK,CAAL,CAAc,EAAd,CAASC,EAAT,CAAmBC,MAAnB,CAA4BA,MAAjC,CAGVF,EAAA,EAHU,CAGH,CAHT,EAGcI,MAHd,EAGwBP,MAAA,CAAOS,YAAP,CAAoB,GAApB,CAA0BL,EAA1B,GAAiC,EAAjC,CAAsCD,EAAtC,CAA2C,CAA3C,EAHxB,CAGyE,CAT3E,CAYEE,MAAA;AA1BQK,sEA0BC,CAAMC,OAAN,CAAcN,MAAd,CAEX,OAAOE,OAnBiB,CAH1BZ,qBAAA,CAAsBiB,SAAtB,CAAsCC,KAAJ,EAClClB,sBAAA,CAAsBiB,SAAtB,CAAgCE,IAAhC,CAAuC,uBAyBvCrB,OAAA,CAAOC,OAAP,CAAmC,WAAnC,GAAiB,MAAOqB,OAAxB,EAAkDA,MAAlD,CAAyDC,IAAzD,EAAiED,MAAA,CAAOC,IAAP,CAAYC,IAAZ,CAAiBF,MAAjB,CAAjE,EAA6FlB,QAtCO;",
"sources":["node_modules/jwt-decode/lib/atob.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jwt_decode$lib$atob\"] = function(global,require,module,exports) {\n/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n\n};"],
"names":["shadow$provide","global","require","module","exports","InvalidCharacterError","message","polyfill","input","str","String","replace","length","bc","bs","buffer","idx","output","charAt","fromCharCode","chars","indexOf","prototype","Error","name","window","atob","bind"]
}
