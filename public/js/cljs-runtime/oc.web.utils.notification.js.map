{"version":3,"sources":["oc/web/utils/notification.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.utils.notification/notification-title","p__38031","vec__38032","cljs.core.nth","seq38029","G__38030","cljs.core/first","cljs.core/next","self__4723__auto__","notification","no-first-name?","mention?","reminder?","author","first-name","or__4126__auto__","clojure.string.split","reminder","notification-type","reminder-assignee","entry-publisher","user-id","and__4115__auto__","cljs.core._EQ_","oc.web.utils.notification/notification-content","oc.web.utils.activity/post-date","oc.web.utils.notification/notification-click","activity-data","interaction-uuid","status","url","cljs.core/seq","oc.web.urls.comment_url","oc.web.urls.entry","oc.web.dispatcher.current_board_slug","oc.web.actions.nav-sidebar/open-post-modal","oc.web.router/nav!","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.utils.notification/load-item","db","org-slug","board-slug","entry-uuid","oc.web.actions.cmail.get_entry_with_uuid","success","oc.web.dispatcher/dispatch!","oc.web.utils.notification/load-item-if-needed","oc.web.dispatcher.activity_data","oc.web.dispatcher.current_org_slug","cljs.core/map?","oc.web.utils.notification/fix-notification","board-id","board-data","oc.web.utils.activity/board-by-uuid","title","body","reminder-data","current-user-data","cljs.core.merge","cljs.core.not_EQ_","cljs.core.get_in","oc.web.lib.responsive/is-mobile-size?","oc.web.actions.nav-sidebar/show-reminders","oc.web.utils.ui/ui-compose","oc.web.utils.notification/reply-notifications","comment-uuid","ns","p1__38064#","cljs.core.filter","cljs.core.sort_by","oc.web.utils.notification/comment-notifications","p1__38065#","cljs.core/empty?","p1__38066#","cljs.core.map","cljs.core.assoc","args__33705__auto__","ocr-38073","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-38073_0__38075","cljs.core.match/backtrack","e38085","js/Error","e__32662__auto__","p1__38071#","e38086","x__4214__auto__","y__4215__auto__","G__38089","e38087","e38084","oc.web.utils.notification/latest-notify-at","cljs.core/sequential?","cljs.core.apply","cljs.core/max","n","cljs.core/contains?","oc.web.utils.notification/entry-notifications","entry-id","all-roots","p1__38094#","all-comments","included-notify-at","cljs.core/set","cljs.core.concat","p1__38095#","cljs.core.mapcat","excluded-ns","p1__38096#","G__38106","cljs.core/not","all-ns","cljs.core.remove","cljs.core/nil?","with-notify-at","p1__38097#","oc.web.utils.notification.latest_notify_at","G__38112","oc.web.utils.notification/caught-up-map","oc.web.utils.notification.caught_up_map","t","oc.web.lib.utils.js_date","oc.web.lib.utils/as-of-now","oc.web.utils.notification/insert-open-close-items","p1__38115#","cljs.core.update","p1__38116#","oc.web.utils.notification/insert-caught-up","vec__38123","first-read-index","oc.web.lib.utils/index-of","cljs.core.comp","insert?","ns-before","ns-after","cljs.core/split-at","cljs.core/last","cljs.core/cons","oc.web.utils.notification/group-notifications","grouped-ns","cljs.core/group-by","three-ns","p__38126","vec__38127","k","v","sorted-ns","cljs.core/reverse","oc.web.utils.notification/sorted-notifications","notifications","ocr-38136","ocr-38136_1__38140","G__38148","G__38149","e38145","e38146","e38147","e38144","oc.web.utils.notification/fix-notifications","fixed-notifications","cljs.core.partial","_db","_notifications"],"sourcesContent":["(ns oc.web.utils.notification\n  (:require [defun.core :refer (defun defun-)]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.ui :refer (ui-compose)]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.components.ui.alert-modal :as alert-modal]))\n\n(defn- notification-title [notification & [no-first-name?]]\n  (let [mention? (:mention? notification)\n        reminder? (:reminder? notification)\n        author (:author notification)\n        first-name (or (:first-name author) (first (clojure.string/split (:name author) #\"\\s\")))\n        reminder (when reminder?\n                    (:reminder notification))\n        notification-type (when reminder?\n                            (:notification-type reminder))\n        reminder-assignee (when reminder?\n                            (:assignee reminder))\n        entry-publisher (:entry-publisher notification)\n        user-id (:user-id notification)]\n    (cond\n      ;; A reminder was created for current user\n      (and reminder\n           (= notification-type \"reminder-notification\"))\n      (str (when-not no-first-name? (str first-name \" \")) \"created a new reminder for you\")\n      ;; A reminder has been triggered for the current user\n      (and reminder\n           (= notification-type \"reminder-alert\"))\n      (str \"Hi \" (first (clojure.string/split (:name reminder-assignee) #\"\\s\")) \", it's time to update your team\")\n      ;; Current user was mentioned in a post or comment, for comment check (seq (:interaction-id notification))\n      mention?\n      (str (when-not no-first-name? (str first-name \" \")) \"mentioned you\")\n      (:interaction-id notification)\n      (str (when-not no-first-name? (str first-name \" \")) \"added a comment\")\n      :else\n      nil)))\n\n(defn- notification-content [notification]\n  (let [reminder? (:reminder? notification)\n        reminder (when reminder?\n                   (:reminder notification))\n        notification-type (when reminder?\n                            (:notification-type reminder))]\n    (cond\n      (and reminder\n           (= notification-type \"reminder-notification\"))\n      (str\n       (:headline reminder) \": \"\n       (:frequency reminder) \" starting \"\n       (activity-utils/post-date (:next-send reminder)))\n      (and reminder\n           (= notification-type \"reminder-alert\"))\n      (:headline reminder)\n      :else\n      (:content notification))))\n\n(defn- notification-click [activity-data interaction-uuid status]\n  (let [url (when activity-data\n              (if (seq interaction-uuid)\n                (oc-urls/comment-url (:board-slug activity-data) (:uuid activity-data) interaction-uuid)\n                (oc-urls/entry (:board-slug activity-data) (:uuid activity-data))))]\n    (cond\n      (and (= (dis/current-board-slug) \"replies\")\n           (seq activity-data))\n      #(oc.web.actions.nav-sidebar/open-post-modal activity-data false interaction-uuid)\n      (seq activity-data)\n      #(router/nav! url)\n      :else\n      #(let [alert-data {:icon \"/img/ML/trash.svg\"\n                         :action \"notification-click-item-load\"\n                         :title (if (= status 404) \"Post not found\" \"An error occurred\")\n                         :message (if (= status 404)\n                                    \"The post you're trying to access may have been moved or deleted.\"\n                                    \"Please try again\")\n                         :solid-button-title \"Ok\"\n                         :solid-button-style :red\n                         :solid-button-cb alert-modal/hide-alert}]\n         (alert-modal/show-alert alert-data)))))\n\n(defn- load-item [db org-slug board-slug entry-uuid interaction-uuid]\n  (cmail-actions/get-entry-with-uuid board-slug entry-uuid\n   (fn [success status]\n    (when (= 404 status)\n      (dis/dispatch! [:user-notification-remove-by-entry org-slug board-slug entry-uuid]))))\n  nil)\n\n(defn- load-item-if-needed [db board-slug entry-uuid interaction-uuid]\n  (when (and board-slug\n             entry-uuid)\n    (let [activity-data (dis/activity-data (dis/current-org-slug db) entry-uuid db)]\n      (when-not (map? activity-data)\n        (load-item db (dis/current-org-slug db) board-slug entry-uuid interaction-uuid))\n      (when (and (map? activity-data)\n                 (:uuid activity-data)\n                 (:board-slug activity-data))\n        (notification-click activity-data interaction-uuid nil)))))\n\n(defn fix-notification [db notification]\n  (let [board-id (:board-id notification)\n        board-data (activity-utils/board-by-uuid board-id)\n        title (notification-title notification)\n        body (notification-content notification)\n        reminder-data (:reminder notification)\n        entry-uuid (:entry-id notification)\n        interaction-uuid (:interaction-id notification)\n        activity-data (dis/activity-data entry-uuid)\n        current-user-data (:current-user-data db)]\n    (merge notification\n     {:activity-data activity-data\n      :title title\n      :body body\n      :unread (and (not= (:user-id current-user-data) (-> notification :author :user-id))\n                   (or (:unread notification)\n                       (> (:notify-at notification) (:last-read-at activity-data))))\n      :current-user-id (or (get-in db [:current-user-data :user-id]) (get-in db [:jwt :user-id]))\n      :click (if (:reminder? notification)\n               (when-not (responsive/is-mobile-size?)\n                 (if (and reminder-data\n                          (= (:notification-type reminder-data) \"reminder-notification\"))\n                   #(oc.web.actions.nav-sidebar/show-reminders)\n                   #(ui-compose)))\n               (load-item-if-needed db (or (:slug board-data) board-id) entry-uuid\n                (:interaction-id notification)))})))\n\n(defn- reply-notifications [comment-uuid ns]\n  (->> ns\n   (filter #(and (-> % :interaction-id seq)\n                 (-> % :parent-interaction-id (= comment-uuid))))\n   (sort-by :notify-at)))\n\n(defn- comment-notifications [ns]\n  (->> ns\n   (filter #(and (-> % :interaction-id seq)\n                 (-> % :parent-interaction-id empty?)))\n   (map #(assoc % :replies (reply-notifications (:interaction-id %) ns)))))\n\n(defun- latest-notify-at\n\n  ([ns :guard sequential?]\n  (apply max (map :notify-at ns)))\n\n  ([n :guard #(contains? % :notify-at)]\n   (:notify-at n))\n\n  ([n :guard map?]\n  (if (contains? n :replies)\n    (max (:notify-at n) (latest-notify-at (:replies n)))\n    (:notify-at n))))\n\n(defn- entry-notifications [db entry-id ns]\n  (let [all-roots (filter #(and (-> % :interaction-id empty?)\n                                (-> % :parent-interaction-id empty?)) ns)\n        all-comments (comment-notifications ns)\n        included-notify-at (set (concat (map :notify-at all-roots)\n                                        (map :notify-at all-comments)\n                                        (mapcat #(map :notify-at (:replies %)) all-comments)))\n        excluded-ns (filter #(-> % :notify-at included-notify-at not) ns)\n        all-ns (remove nil? (concat all-roots all-comments excluded-ns))\n        with-notify-at (map #(assoc % :latest-notify-at (latest-notify-at %)) all-ns)\n        activity-data (dis/activity-data (dis/current-org-slug db) entry-id db)\n        board-id (or (:board-slug activity-data) (:board-id (first ns)))]\n    {:entry-id  entry-id\n     :notifications (sort-by :latest-notify-at with-notify-at)\n     :activity-data (dis/activity-data (dis/current-org-slug db) entry-id db)\n     :current-user-id (or (get-in db [:current-user-data :user-id]) (get-in db [:jwt :user-id]))\n     :latest-notify-at (latest-notify-at with-notify-at)\n     :click (load-item-if-needed db board-id entry-id nil)}))\n\n(defn- caught-up-map\n  ([] (caught-up-map nil))\n  ([n]\n   (let [t (if (:latest-notify-at n)\n             (-> n :latest-notify-at utils/js-date .getTime inc utils/js-date .toISOString)\n             (utils/as-of-now))]\n     {:resource-type :caught-up :latest-notify-at t})))\n\n(defn- insert-open-close-items [ns]\n  (when (seq ns)\n    (-> ns\n     vec\n     (update 0 #(assoc % :open-item true))\n     (update (dec (count ns)) #(assoc % :close-item true)))))\n\n(defn- insert-caught-up [ns]\n  (when (seq ns)\n    (let [first-read-index (utils/index-of ns (comp not :unread))\n          insert? (and first-read-index\n                       (> first-read-index -1))\n          [ns-before ns-after] (when insert?\n                                 (split-at first-read-index ns))]\n      (if insert?\n        (vec (concat (insert-open-close-items ns-before) [(caught-up-map (last ns-before))] (insert-open-close-items ns-after)))\n        (vec (cons (caught-up-map) (insert-open-close-items ns)))))))\n\n(defn- group-notifications [db ns]\n  (let [grouped-ns (group-by :entry-id ns)\n        three-ns (map (fn [[k v]] (entry-notifications db k v)) grouped-ns)\n        sorted-ns (reverse (sort-by :latest-notify-at three-ns))]\n    (or (insert-caught-up sorted-ns) [])))\n\n(defn sorted-notifications [notifications]\n  (vec (reverse (sort-by :notify-at notifications))))\n\n(defun fix-notifications\n  ([db notifications :guard map?]\n   (fix-notifications db (:sorted notifications)))\n\n  ([db notifications :guard sequential?]\n   (let [fixed-notifications (map (partial fix-notification db) notifications)]\n     {:sorted (sorted-notifications (remove nil? fixed-notifications))\n      :grouped (group-notifications db fixed-notifications)}))\n\n  ([_db _notifications :guard nil?]\n   []))"]}