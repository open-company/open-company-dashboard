{"version":3,"sources":["oc/web/lib/image_upload.cljs"],"mappings":"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","names":["oc.web.lib.image-upload/_fs","cljs.core.atom","oc.web.lib.image-upload/init-filestack","or__4126__auto__","cljs.core/deref","new-fs","js/filestack","oc.web.local-settings/filestack-key","cljs.core/reset!","oc.web.lib.image-upload/store-to","oc.web.local-settings/attachments-bucket","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.lib.image-upload/upload!","p__38204","vec__38205","cljs.core.nth","seq38199","G__38200","cljs.core/first","cljs.core/next","G__38201","G__38202","G__38203","self__4723__auto__","config","success-cb","progress-cb","error-cb","close-cb","finished-cb","selected-cb","started-cb","from-sources","cljs.core._EQ_","base-config","oc.web.local-settings/file-upload-size","res","cljs.core/fn?","progress","cljs.core.merge","fs","cljs.core/clj->js","files-uploaded","goog.object/get","cljs.core/count","G__38208","cljs.core.get","oc.web.lib.image-upload/upload-file!","p__38213","vec__38214","seq38210","G__38211","G__38212","file","e38217","fs-client","p1__38209#","G__38218","url","e","oc.web.lib.sentry.capture_error_BANG_","oc.web.lib.image-upload/thumbnail!","p__38221","vec__38222","seq38219","G__38220","fs-url","opts","transformed-url","fixed-success-cb","fixed-progress-cb","fixed-error-cb","err","storing-task","e38225"],"sourcesContent":["(ns oc.web.lib.image-upload\n  (:require [oc.web.local-settings :as ls]\n            [goog.object :as gobj]\n            [oc.web.lib.sentry :as sentry]))\n\n(def _fs (atom nil))\n\n(defn init-filestack []\n  (or\n    @_fs\n    (let [new-fs (.init js/filestack ls/filestack-key)]\n      (reset! _fs new-fs)\n      new-fs)))\n\n(def store-to\n  {:container ls/attachments-bucket\n   :region \"us-east-1\"\n   :location \"s3\"})\n\n(defn upload!\n  [config success-cb progress-cb error-cb & [close-cb finished-cb selected-cb started-cb]]\n  (let [from-sources (if (= (:accept config) \"image/*\")\n                        [\"local_file_system\" \"imagesearch\" \"googledrive\" \"dropbox\" \"onedrive\" \"box\"]\n                        [\"local_file_system\" \"googledrive\" \"dropbox\" \"onedrive\" \"box\"])\n        base-config   {:maxFiles 1\n                       :maxSize ls/file-upload-size ; Limit the uploaded file to be at most 20MB\n                       :storeTo store-to\n                       :transformations {\n                         :crop {:circle true}\n                         :rotate true\n                       }\n                       :fromSources from-sources\n                       ;; Selected cb\n                       :onFileSelected (fn [res]\n                         (when (fn? selected-cb)\n                           (selected-cb res)))\n                       ;; Started cb\n                       :onFileUploadStarted (fn [res]\n                         (when (fn? started-cb)\n                           (started-cb res)))\n                       ;; Progress cb\n                       :onFileUploadProgress (fn [res progress]\n                         (when (fn? progress-cb)\n                            (progress-cb res progress)))\n                       ;; Finished cb\n                       :onFileUploadFinished (fn [res]\n                         (when (fn? finished-cb)\n                           (finished-cb res)))\n                       ;; Error cb\n                       :onFileUploadFailed error-cb\n                       ;; Close cb\n                       :onClose (fn []\n                          (when (fn? close-cb)\n                            (close-cb)))}\n        config        (merge base-config config)\n        fs (init-filestack)]\n    (.then\n      (.pick fs\n        (clj->js config))\n      (fn [res]\n        (let [files-uploaded (gobj/get res \"filesUploaded\")]\n          (when (= (count files-uploaded)1)\n            (success-cb (get files-uploaded 0))))))))\n\n(defn upload-file! [file success-cb & [error-cb progress-cb]]\n  (try\n    (let [fs-client (init-filestack)]\n      (.then\n        (.upload fs-client file #js {:onProgress #(when (fn? progress-cb) (progress-cb (.-totalPercent %)))})\n        (fn [res]\n          (let [url (gobj/get res \"url\")]\n            (when (fn? success-cb)\n              (success-cb url))))))\n    (catch :default e\n      (sentry/capture-error! e)\n      (when (fn? error-cb)\n        (error-cb e)))))\n\n(defn thumbnail! [fs-url & [success-cb progress-cb error-cb]]\n  (let [fs-client (init-filestack)\n        opts (clj->js {:resize {\n                        :fit \"crop\"\n                        :width 272\n                        :height 204\n                        :align \"faces\"}})\n       transformed-url (.transform fs-client fs-url opts)\n       fixed-success-cb (fn [res]\n                          (when (fn? success-cb)\n                            (success-cb res)))\n       fixed-progress-cb (fn [res progress]\n                           (when (fn? progress-cb)\n                             (progress-cb res progress)))\n       fixed-error-cb (fn [res err]\n                        (when (fn? error-cb)\n                          (error-cb res err)))\n       storing-task (.storeURL fs-client\n                     ;; transformed image\n                     transformed-url\n                     ;; store options\n                     (clj->js store-to)\n                     ;; onSuccess\n                     fixed-success-cb\n                     ;; onError\n                     fixed-error-cb\n                      ;; onProgress\n                      fixed-progress-cb)]\n    (try\n      (.then\n        storing-task\n        (fn [res]\n          (let [url (gobj/get res \"url\")]\n            (when (fn? success-cb)\n              (success-cb url)))))\n      (catch :default e\n        (sentry/capture-error! e)\n        (when (fn? error-cb)\n          (error-cb e))))))"]}