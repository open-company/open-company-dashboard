{"version":3,"sources":["oc/web/components/org_settings_modal.cljs"],"mappings":"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","names":["oc.web.components.org-settings-modal/close-clicked","s","dismiss-action","cljs.core/deref","org-editing","org.martinklepsch.derivatives/get-ref","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.components.org-settings-modal/form-is-clean?","map__46774","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","has-org-edit-changes","um-domain-invite","cljs.core/not","cljs.core/empty?","oc.web.components.org-settings-modal/reset-form","org-data","oc.web.actions.org/org-edit-setup","oc.web.dispatcher/dispatch!","oc.web.components.org-settings-modal/change-content-visibility","content-visibility-data","k","v","new-content-visibility","cljs.core.merge","p1__46776#","oc.web.components.org-settings-modal/logo-on-load","org-avatar-editing","url","img","oc.web.actions.org/org-avatar-edit-save","goog.dom/removeNode","oc.web.components.org-settings-modal/logo-add-error","oc.web.actions.notifications/show-notification","oc.web.components.org-settings-modal/update-tooltip","oc.web.lib.utils/after","header-logo","rum.core/ref-node","$header-logo","js/$","title","oc.web.components.org-settings-modal/logo-on-click","oc.web.lib.image-upload/upload!","oc.web.utils.org/org-avatar-filestack-config","res","goog.object/get","goog.dom/createDom","goog.dom/append","js/document","err","rum.core/build-defcs","map__46785","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","sablono.interpreter/create-element","p1__46779#","oc.web.components.org-settings-modal/org-settings-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","oc.web.mixins.ui/refresh-tooltips-mixin","rum.core.local","oc.web.actions.org.get_org","cljs.core/reset!","p1__46777#","cljs.core/some","cljs.core/keys","and__4115__auto__","cljs.core/contains?","_","p1__46778#","cljs.core.dissoc","org.martinklepsch.derivatives/react","org-data-for-avatar","is-tablet-or-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","query-params","add-email-domain-team-error","team-data","team-management-data","or__4126__auto__","oc.web.actions.nav-sidebar/close-all-panels","cljs.core/compare-and-set!","oc.web.actions.org/org-edit-save","cljs.core/seq","clojure.string/trim","oc.web.actions.nav-sidebar/show-org-settings","oc.web.lib.utils/class-set","oc.web.lib.utils/hide-class","oc.web.components.ui.org-avatar/org-avatar","oc.web.utils.org/org-name-max-length","org-name","clean-org-name","cljs.core.subs","x__4217__auto__","y__4218__auto__","cljs.core/count","cljs.core.rand","oc.web.components.ui.email-domains/email-domains","G__46801","p1__46780#","oc.web.components.ui.carrot-checkbox/carrot-checkbox","G__46804","p1__46781#","G__46805","p1__46782#"],"sourcesContent":["(ns oc.web.components.org-settings-modal\n  (:require [rum.core :as rum]\n            [goog.dom :as gdom]\n            [goog.object :as gobj]\n            [clojure.string :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.image-upload :as iu]\n            [oc.web.utils.org :as org-utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.org-avatar :refer (org-avatar)]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.email-domains :refer (email-domains)]\n            [oc.web.components.ui.carrot-checkbox :refer (carrot-checkbox)]))\n\n(defn close-clicked [s dismiss-action]\n  (let [org-editing @(drv/get-ref s :org-editing)]\n    (if (:has-changes org-editing)\n      (let [alert-data {:icon \"/img/ML/trash.svg\"\n                        :action \"org-settings-unsaved-edits\"\n                        :message \"Leave without saving your changes?\"\n                        :link-button-title \"Stay\"\n                        :link-button-cb #(alert-modal/hide-alert)\n                        :solid-button-style :red\n                        :solid-button-title \"Lose changes\"\n                        :solid-button-cb #(do\n                                            (alert-modal/hide-alert)\n                                            (dismiss-action))}]\n        (alert-modal/show-alert alert-data))\n      (dismiss-action))))\n\n(defn form-is-clean? [s]\n  (let [has-org-edit-changes (:has-changes @(drv/get-ref s :org-editing))\n        {:keys [um-domain-invite]} @(drv/get-ref s :org-settings-team-management)]\n    (and (not has-org-edit-changes)\n         (empty? (:domain um-domain-invite)))))\n\n(defn reset-form [s]\n  (let [org-data @(drv/get-ref s :org-data)\n        um-domain-invite (:um-domain-invite @(drv/get-ref s :org-settings-team-management))]\n    (org-actions/org-edit-setup org-data)\n    (dis/dispatch! [:input [:um-domain-invite :domain] \"\"])\n    (dis/dispatch! [:input [:add-email-domain-team-error] nil])))\n\n(defn- change-content-visibility [content-visibility-data k v]\n  (let [new-content-visibility (merge content-visibility-data {k v})]\n    (dis/dispatch! [:update [:org-editing] #(merge % {:has-changes true\n                                                      :content-visibility new-content-visibility})])))\n\n(defn logo-on-load [org-avatar-editing url img]\n  (org-actions/org-avatar-edit-save {:logo-url url})\n  (gdom/removeNode img))\n\n(defn logo-add-error\n  \"Show an error alert view for failed uploads.\"\n  [img]\n  (notification-actions/show-notification\n   {:title \"Image upload error\"\n    :description \"An error occurred while processing your company avatar. Please retry.\"\n    :expire 3\n    :id :org-avatar-upload-failed\n    :dismiss true})\n  (when img\n    (gdom/removeNode img)))\n\n(defn- update-tooltip [s]\n  (utils/after 100\n   #(let [header-logo (rum/ref-node s \"org-settings-header-logo\")\n          $header-logo (js/$ header-logo)\n          org-avatar-editing @(drv/get-ref s :org-avatar-editing)\n          title (if (empty? (:logo-url org-avatar-editing))\n                  \"Add a logo\"\n                  \"Change logo\")]\n      (.tooltip $header-logo #js {:title title\n                                  :trigger \"hover focus\"\n                                  :position \"top\"\n                                  :container \"body\"}))))\n\n(defn logo-on-click [org-avatar-editing]\n  (iu/upload! org-utils/org-avatar-filestack-config\n    (fn [res]\n      (let [url (gobj/get res \"url\")\n            img (gdom/createDom \"img\")]\n        (set! (.-onerror img) #(logo-add-error img))\n        (set! (.-onload img) #(logo-on-load org-avatar-editing url img))\n        (set! (.-className img) \"hidden\")\n        (gdom/append (.-body js/document) img)\n        (set! (.-src img) url)))\n    nil\n    (fn [err]\n      (logo-add-error nil))))\n\n(rum/defcs org-settings-modal <\n  ;; Mixins\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :team-data)\n  (drv/drv :org-editing)\n  (drv/drv :org-avatar-editing)\n  (drv/drv :org-settings-team-management)\n  ui-mixins/refresh-tooltips-mixin\n  ;; Locals\n  (rum/local false ::saving)\n  (rum/local false ::show-advanced-settings)\n  {:will-mount (fn [s]\n    (let [org-data @(drv/get-ref s :org-data)]\n      (org-actions/get-org org-data true))\n    (reset-form s)\n    (let [content-visibility-data (:content-visibility @(drv/get-ref s :org-data))]\n      (reset! (::show-advanced-settings s) (some #(content-visibility-data %) (keys content-visibility-data))))\n    s)\n   :will-update (fn [s]\n    (let [org-editing @(drv/get-ref s :org-editing)]\n      (when (and @(::saving s)\n                 (contains? org-editing :saved))\n        (reset! (::saving s) false)\n        (utils/after 2500 (fn [_] (dis/dispatch! [:update [:org-editing] #(dissoc % :saved)])))\n        (notification-actions/show-notification {:title (if (:saved org-editing) \"Settings saved\" \"Error saving, please retry\")\n                                                 :primary-bt-title \"OK\"\n                                                 :primary-bt-dismiss true\n                                                 :expire 3\n                                                 :id :org-settings-saved})))\n    s)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        org-avatar-editing (drv/react s :org-avatar-editing)\n        org-data-for-avatar (merge org-data org-avatar-editing)\n        org-editing (drv/react s :org-editing)\n        is-tablet-or-mobile? (responsive/is-tablet-or-mobile?)\n        {:keys [query-params\n                um-domain-invite\n                add-email-domain-team-error\n                team-data]\n         :as team-management-data}\n                    (drv/react s :org-settings-team-management)\n        content-visibility-data (or (:content-visibility org-editing) {})]\n    [:div.org-settings-modal\n      [:button.mlb-reset.modal-close-bt\n        {:on-click #(close-clicked s nav-actions/close-all-panels)}]\n      [:div.org-settings-modal-container\n        [:div.org-settings-header\n          [:div.org-settings-header-title\n            \"Admin settings\"]\n          [:button.mlb-reset.save-bt\n            {:on-click #(when (compare-and-set! (::saving s) false true)\n                         (org-actions/org-edit-save org-editing))\n             :disabled (or @(::saving s)\n                           (:saved org-editing)\n                           (not (seq (:name org-editing)))\n                           (< (count (string/trim (:name org-editing))) 3))\n           :class (when (:saved org-editing) \"no-disable\")}\n            \"Save\"]\n          [:button.mlb-reset.cancel-bt\n            {:on-click (fn [_] (close-clicked s #(nav-actions/show-org-settings nil)))}\n            \"Back\"]]\n        [:div.org-settings-body\n          [:div.org-settings-header-avatar.group\n            {:ref \"org-settings-header-logo\"\n             :class (utils/class-set {:missing-logo (empty? (:logo-url org-avatar-editing))\n                                      utils/hide-class true})\n             :on-click logo-on-click}\n            (org-avatar org-data-for-avatar false :never)\n            [:span.edit-company-logo\n              \"Edit company logo\"]]\n          [:div.org-settings-fields\n            [:div.org-settings-label\n              \"Company name\"]\n            [:input.org-settings-field.oc-input\n              {:type \"text\"\n               :class (when (:error org-editing) \"error\")\n               :value (or (:name org-editing) \"\")\n               :max-length org-utils/org-name-max-length\n               :on-change #(let [org-name (.. % -target -value)\n                                 clean-org-name (subs org-name 0 (min (count org-name) org-utils/org-name-max-length))]\n                            (dis/dispatch! [:input [:org-editing] (merge org-editing {:name clean-org-name\n                                                                                      :has-changes true\n                                                                                      :error false\n                                                                                      :rand (rand 1000)})]))}]\n            (when (:error org-editing)\n              [:div.error \"Must be between 3 and 50 characters\"])\n            (email-domains)]\n          (if-not @(::show-advanced-settings s)\n            [:div.org-settings-advanced\n              [:button.mlb-reset.advanced-settings-bt\n                {:on-click (fn [_]\n                              (reset! (::show-advanced-settings s) true)\n                              (utils/after 1000 #(.tooltip (js/$ \"[data-toggle=\\\"tooltip\\\"]\"))))}\n                \"Show advanced settings\"]]\n            [:div.org-settings-advanced\n              [:div.org-settings-advanced-title\n                \"Advanced settings\"]\n              [:div.org-settings-advanced-row.digest-links.group\n                (carrot-checkbox {:selected (:disallow-secure-links content-visibility-data)\n                                  :disabled false\n                                  :did-change-cb #(change-content-visibility content-visibility-data :disallow-secure-links %)})\n                [:div.checkbox-label\n                  {:class (when-not (:disallow-secure-links content-visibility-data) \"unselected\")\n                   :on-click #(change-content-visibility content-visibility-data :disallow-secure-links (not (:disallow-secure-links content-visibility-data)))}\n                  \"Do not allow secure links to open posts from email or Slack\"\n                  [:i.mdi.mdi-information-outline\n                    {:title (str\n                             \"When team members receive Wut posts via an email or Slack morning digest, secure \"\n                             \"links allow them to read the post without first logging in. A login is still required \"\n                             \"to access additional posts. If you turn off secure links, your team will always need to \"\n                             \"be logged in to view posts.\")\n                     :data-toggle (when-not is-tablet-or-mobile? \"tooltip\")\n                     :data-placement \"top\"\n                     :data-container \"body\"}]]]\n              [:div.org-settings-advanced-row.public-sections.group\n                (carrot-checkbox {:selected (:disallow-public-board content-visibility-data)\n                                  :disabled false\n                                  :did-change-cb #(change-content-visibility content-visibility-data :disallow-public-board %)})\n                ; [:div.checkbox-label\n                ;   {:class (when-not (:disallow-public-board content-visibility-data) \"unselected\")\n                ;    :on-click #(change-content-visibility content-visibility-data :disallow-public-board (not (:disallow-public-board content-visibility-data)))}\n                ;   \"Do not allow public teams\"]\n                ]\n              [:div.org-settings-advanced-row.public-share.group\n                (carrot-checkbox {:selected (:disallow-public-share content-visibility-data)\n                                  :disabled false\n                                  :did-change-cb #(change-content-visibility content-visibility-data :disallow-public-share %)})\n                [:div.checkbox-label\n                  {:class (when-not (:disallow-public-share content-visibility-data) \"unselected\")\n                   :on-click #(change-content-visibility content-visibility-data :disallow-public-share (not (:disallow-public-share content-visibility-data)))}\n                  \"Do not allow public share links\"]]])]]]))"]}