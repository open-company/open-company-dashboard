{"version":3,"sources":["oc/web/stores/search.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.stores","js/oc.web.stores.search","js/oc.web.stores.search.search-limit","oc.web.stores.search/search-limit","js/oc.web.stores.search.savedsearch","oc.web.stores.search/savedsearch","cljs.core.atom","js/oc.web.stores.search.search-key","oc.web.stores.search/search-key","js/oc.web.stores.search.search-active?","oc.web.stores.search/search-active?","oc.web.stores.search/search-results","cljs.core/deref","cljs.core.get_in","oc.web.dispatcher/app-state","oc.web.stores.search/saved-search","tmp","cljs.core/reset!","oc.web.stores.search/should-display","cljs.core/not","oc.web.lib.jwt/jwt","oc.web.dispatcher.org_data","oc.web.stores.search/board-slug-with-uuid","board-uuid","temp__5735__auto__","uuid-board","oc.web.utils.activity/board-by-uuid","oc.web.stores.search/cleanup-result","result","source","fixed-entry-uuid","clojure.string/replace","fixed-board-slug","cljs.core/seq","cljs.core.assoc","oc.web.stores.search/cleanup-results","results","cljs.core.mapv","p1__43502#","cljs.core/filterv","oc.web.dispatcher/action","p__43503","vec__43504","cljs.core.nth","db","_","search-query","cljs.core/assoc-in","p__43510","vec__43511","map__43514","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","success","error","body","query","total-hits","cljs.core/map?","cljs.core/vec","p1__43507#","cljs.core.sort_by","p__43521","vec__43522","p__43525","vec__43526","p__43533","vec__43534","cljs.core.dissoc","p__43541","vec__43542"],"sourcesContent":["(ns oc.web.stores.search\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.utils.activity :as au]\n            [oc.web.dispatcher :as dispatcher]))\n\n(defonce search-limit 20)\n(defonce savedsearch (atom \"\"))\n\n(defonce search-key :search-results)\n(defonce search-active? :search-active)\n\n(defn search-results []\n  (get-in @dispatcher/app-state search-key))\n\n(defn saved-search []\n  (let [tmp @savedsearch]\n    (reset! savedsearch \"\")\n    tmp))\n\n(defn should-display []\n  \" If the user is anonymous or not part of the orginization\n    don't display search component.\n  \"\n  (if-not (jwt/jwt)\n    false\n    (if (:member? (dispatcher/org-data))\n      true\n      false)))\n\n(defn board-slug-with-uuid [board-uuid]\n  (when-let [uuid-board (au/board-by-uuid board-uuid)]\n    (:board-slug uuid-board)))\n\n(defn cleanup-result [result]\n  (let [source (:_source result)\n        fixed-entry-uuid (clojure.string/replace (:uuid source)\n                          \"entry-\" \"\")\n        fixed-board-slug (cond\n                          (seq (:board-slug source))\n                          (:board-slug source)\n                          (seq (:board-uuid source))\n                          (board-slug-with-uuid (:board-uuid source))\n                          :else\n                          nil)]\n    (assoc result :_source (-> source\n                            (assoc :uuid fixed-entry-uuid)\n                            (assoc :board-slug fixed-board-slug)))))\n\n(defn- cleanup-results\n  \"Entries have the uuid in this format: entry-0000-0000-0000-0000\n   replace those with only the UUID and make sure they have a board-slug,\n   if the slug is missing replace it with the board-uuid.\n   Finally filter out all the results that still don't have a board-slug.\"\n  [results]\n  (->> results\n   (mapv cleanup-result)\n   (filterv #(-> % :_source :board-slug seq))))\n\n(defmethod dispatcher/action :search-query/start\n  [db [_ search-query]]\n  (assoc-in db [search-key :loading] true))\n\n\n(defmethod dispatcher/action :search-query/finish\n  [db [_ {:keys [success error body query]}]]\n  (let [total-hits (if (map? (:total body))\n                     (-> body :total :value)\n                     (:total body))\n        results (vec (sort-by #(:created-at (:_source %)) (:hits body)))]\n    (when success\n      (reset! savedsearch query))\n    (if success\n      (assoc db search-key {:count total-hits :loading false :results (cleanup-results results) :query query})\n      (assoc db search-key {:failed true :loading false :query query}))))\n\n(defmethod dispatcher/action :search-active\n  [db [_]]\n  (assoc db search-active? true))\n\n(defmethod dispatcher/action :search-inactive\n  [db [_]]\n  (assoc db search-active? false))\n\n(defmethod dispatcher/action :search-reset\n  [db [_]]\n  (dissoc db search-key))\n\n(defmethod dispatcher/action :search-result-clicked\n  [db [_]]\n  (assoc db search-active? false))"]}