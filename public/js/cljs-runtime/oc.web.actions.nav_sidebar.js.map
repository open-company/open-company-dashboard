{"version":3,"sources":["oc/web/actions/nav_sidebar.cljs"],"mappings":"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","names":["oc.web.actions.nav-sidebar/refresh-contributions-data","author-uuid","oc.web.actions.contributions.contributions_get","var_args","G__38758","oc.web.actions.nav-sidebar/nav-to-author!","js/Error","e","url","oc.web.actions.nav_sidebar.nav_to_author_BANG_","or__4126__auto__","oc.web.dispatcher.route_param","oc.web.lib.utils/page-scroll-top","back-y","refresh?","and__4115__auto__","oc.shared.useragent/mobile?","oc.web.dispatcher/dispatch!","oc.web.lib.utils/after","current-path","js/window","org-slug","oc.web.dispatcher.current_org_slug","sort-type","oc.web.actions.activity/saved-sort-type","org-data","oc.web.dispatcher.org_data","cljs.core._EQ_","oc.web.actions.routing/post-routing","oc.web.actions.user.initial_loading","oc.web.dispatcher.query_params","js/document","oc.web.actions.nav-sidebar/current-container-data","board-slug","oc.web.dispatcher.current_board_slug","contributions-id","oc.web.dispatcher.current_contributions_id","cljs.core/seq","cljs.core/deref","oc.web.dispatcher.contributions_data","oc.web.dispatcher/app-state","oc.web.dispatcher/is-container?","oc.web.dispatcher.container_data","cljs.core.keyword","oc.web.dispatcher.board_data","oc.web.actions.nav-sidebar/reload-board-data","oc.web.dispatcher.current_activity_id","board-data","oc.web.actions.activity/inbox-get","oc.web.actions.activity.replies_get","oc.web.dispatcher.current_sort_type","oc.web.dispatcher/recently-posted-sort","oc.web.actions.activity/all-posts-get","oc.web.dispatcher/recent-activity-sort","oc.web.actions.activity/recent-all-posts-get","oc.web.actions.activity/bookmarks-get","oc.web.actions.activity.following_get","oc.web.actions.activity.recent_following_get","oc.web.actions.activity/unfollowing-get","oc.web.actions.activity/recent-unfollowing-get","fixed-board-data","oc.web.dispatcher.org_board_data","board-link","oc.web.lib.utils.link_for","oc.web.actions.section/section-get","oc.web.actions.nav-sidebar/refresh-board-data","current-board-slug","current-contrib-id","container-data","board-kw","oc.web.actions.activity.all_posts_refresh","oc.web.actions.activity.bookmarks_refresh","oc.web.actions.activity.replies_refresh","oc.web.actions.activity.following_refresh","oc.web.actions.activity.unfollowing_refresh","oc.web.actions.contributions.contributions_refresh","cljs.core/not","oc.web.actions.section/section-refresh","G__38760","oc.web.actions.nav-sidebar/nav-to-url!","oc.web.actions.nav_sidebar.nav_to_url_BANG_","is-drafts-board?","oc.web.lib.utils/default-drafts-board-slug","is-container?","current-activity-id","oc.web.dispatcher.cmail_state","temp__33777__auto__","nav-to-board-data","edit-link","oc.web.dispatcher/cmail-data-key","cljs.core.conj","oc.web.dispatcher/cmail-state-key","oc.web.lib.utils/activity-uuid","oc.web.actions.nav-sidebar/dismiss-post-modal","route","oc.web.dispatcher.route","board","is-contributions?","to-url","oc.web.urls.following","cont-data","should-refresh-data?","default-back-y","cljs.core/contains?","G__38762","oc.web.actions.nav-sidebar/open-post-modal","entry-data","dont-scroll","oc.web.actions.nav_sidebar.open_post_modal","comment-uuid","org","entry-board-slug","current-sort-type","current-contributions-id","back-to","oc.web.urls.contributions","oc.web.urls.replies","oc.web.urls.topics","oc.web.urls.board","entry-uuid","post-url","oc.web.urls.comment_url","oc.web.urls.entry","query-params","cljs.core/vec","cljs.core.remove","cljs.core/nil?","route-path*","route-path","cljs.core.assoc","oc.web.actions.cmail/cmail-hide","oc.web.actions.nav-sidebar/push-panel","panel","cljs.core/count","cljs.core.get","oc.web.utils.dom/lock-page-scroll","fexpr__38764","oc.web.actions.user.dismiss_invite_box","p1__38763#","oc.web.actions.nav-sidebar/pop-panel","panel-stack","cljs.core/pop","oc.web.utils.dom/unlock-page-scroll","cljs.core/peek","oc.web.actions.nav-sidebar/close-all-panels","oc.web.actions.nav-sidebar/show-section-editor","section-slug","oc.web.actions.section/setup-section-editing","oc.web.actions.nav-sidebar/hide-section-editor","oc.web.actions.nav-sidebar/show-section-add","sec-data","note","dismiss-action","oc.web.actions.section.section_save","cljs.core/fn?","oc.web.actions.nav-sidebar/show-section-add-with-callback","callback","oc.web.actions.nav-sidebar/hide-section-add","oc.web.actions.nav-sidebar/show-reminders","oc.web.actions.nav-sidebar/show-new-reminder","oc.web.actions.nav-sidebar/edit-reminder","reminder-uuid","oc.web.actions.nav-sidebar/close-reminders","oc.web.actions.nav-sidebar/menu-toggle","oc.web.actions.nav-sidebar/menu-close","oc.web.actions.nav-sidebar/show-org-settings","cljs.core.not_EQ_","oc.web.local-settings/payments-enabled","oc.web.actions.nav-sidebar/show-user-settings","oc.web.actions.nav-sidebar/show-wrt","activity-uuid","oc.web.actions.nav-sidebar/hide-wrt","oc.web.actions.nav-sidebar/open-integrations-panel","oc.web.lib.responsive/is-mobile-size?","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.actions.nav-sidebar/show-theme-settings","oc.web.actions.nav-sidebar/hide-theme-settings","oc.web.actions.nav-sidebar/show-user-info","user-id","oc.web.actions.nav-sidebar/hide-user-info","oc.web.actions.nav-sidebar/show-follow-picker","oc.web.actions.nav-sidebar/hide-follow-picker","oc.web.actions.nav-sidebar/open-invite-picker","oc.web.lib.utils/event-stop"],"sourcesContent":["(ns oc.web.actions.nav-sidebar\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.shared.useragent :as ua]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.actions.routing :as routing-actions]\n            [oc.web.actions.section :as section-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.actions.contributions :as contributions-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]))\n\n;; Panels\n;; :menu\n;; :org\n;; :integrations\n;; :team\n;; :invite-picker\n;; :invite-email\n;; :invite-slack\n;; :payments\n;; :profile\n;; :notifications\n;; :reminders\n;; :reminder-{uuid}/:reminder-new\n;; :section-add\n;; :section-edit\n;; :wrt-{uuid}\n;; :theme\n;; :user-info-{uuid}\n;; :follow-picker\n\n(defn- refresh-contributions-data [author-uuid]\n  (when author-uuid\n    (contributions-actions/contributions-get author-uuid)))\n\n(defn nav-to-author!\n  ([e author-uuid url]\n  (nav-to-author! e author-uuid url (or (dis/route-param :back-y) (utils/page-scroll-top)) true))\n\n  ([e author-uuid url back-y refresh?]\n  (when (and e\n             (.-preventDefault e))\n    (.preventDefault e))\n  (when ua/mobile?\n    (dis/dispatch! [:input [:mobile-navigation-sidebar] false]))\n  (utils/after 0 (fn []\n   (let [current-path (str (.. js/window -location -pathname) (.. js/window -location -search))\n         org-slug (dis/current-org-slug)\n         sort-type (activity-actions/saved-sort-type org-slug author-uuid)\n         org-data (dis/org-data)]\n     (if (= current-path url)\n       (do ;; In case user is clicking on the currently highlighted section\n           ;; let's refresh the posts list only\n         (routing-actions/post-routing)\n         (user-actions/initial-loading refresh?))\n       (do ;; If user clicked on a different section/container\n           ;; let's switch to it using pushState and changing\n           ;; the internal router state\n         (dis/dispatch! [:routing {:org org-slug\n                                   :contributions author-uuid\n                                   :sort-type sort-type\n                                   :scroll-y back-y\n                                   :query-params (dis/query-params)\n                                   :route [org-slug author-uuid sort-type \"dashboard\"]}])\n         (.pushState (.-history js/window) #js {} (.-title js/document) url)\n         (set! (.. js/document -scrollingElement -scrollTop) (utils/page-scroll-top))\n         (when refresh?\n           (refresh-contributions-data author-uuid)))))))))\n\n(defn- current-container-data []\n  (let [board-slug (dis/current-board-slug)\n        contributions-id (dis/current-contributions-id)]\n    (cond\n     (seq contributions-id)\n     (dis/contributions-data @dis/app-state (dis/current-org-slug) contributions-id)\n     (dis/is-container? board-slug)\n     (dis/container-data @dis/app-state (dis/current-org-slug) board-slug)\n     (= (keyword board-slug) :topic)\n     nil\n     :else\n     (dis/board-data @dis/app-state (dis/current-org-slug) board-slug))))\n\n(defn- reload-board-data []\n  (when-not (dis/current-activity-id)\n    (let [board-slug (dis/current-board-slug)\n          org-data (dis/org-data)\n          board-data (current-container-data)]\n       (cond\n\n        (= board-slug \"inbox\")\n        (activity-actions/inbox-get org-data)\n\n        (= board-slug \"replies\")\n        (activity-actions/replies-get org-data true nil)\n\n        (and (= board-slug \"all-posts\")\n             (= (dis/current-sort-type) dis/recently-posted-sort))\n        (activity-actions/all-posts-get org-data)\n\n        (and (= board-slug \"all-posts\")\n             (= (dis/current-sort-type) dis/recent-activity-sort))\n        (activity-actions/recent-all-posts-get org-data)\n\n        (= board-slug \"bookmarks\")\n        (activity-actions/bookmarks-get org-data)\n\n        (and (= board-slug \"following\")\n             (= (dis/current-sort-type) dis/recently-posted-sort))\n        (activity-actions/following-get org-data true nil)\n\n        (and (= board-slug \"following\")\n             (= (dis/current-sort-type) dis/recent-activity-sort))\n        (activity-actions/recent-following-get org-data)\n\n        (and (= board-slug \"unfollowing\")\n             (= (dis/current-sort-type) dis/recently-posted-sort))\n        (activity-actions/unfollowing-get org-data)\n\n        (and (= board-slug \"unfollowing\")\n             (= (dis/current-sort-type) dis/recent-activity-sort))\n        (activity-actions/recent-unfollowing-get org-data)\n\n        :default\n        (let [fixed-board-data (or board-data\n                                   (dis/org-board-data org-data board-slug))\n              board-link (utils/link-for (:links fixed-board-data) [\"item\" \"self\"] \"GET\")]\n          (when board-link\n            (section-actions/section-get (:slug fixed-board-data) board-link)))))))\n\n(defn- refresh-board-data []\n  (when-not (dis/current-activity-id)\n    (let [current-board-slug (dis/current-board-slug)\n          current-contrib-id (dis/current-contributions-id)\n          org-data (dis/org-data)\n          container-data (current-container-data)\n          board-kw (keyword current-board-slug)]\n       (cond (= board-kw :all-posts)\n             (activity-actions/all-posts-refresh org-data)\n             (= board-kw :bookmarks)\n             (activity-actions/bookmarks-refresh org-data)\n             (= board-kw :replies)\n             (activity-actions/replies-refresh org-data true)\n             (= board-kw :following)\n             (activity-actions/following-refresh org-data true)\n             (= board-kw :unfollowing)\n             (activity-actions/unfollowing-refresh org-data true)\n             (seq current-contrib-id)\n             (contributions-actions/contributions-refresh org-data current-contrib-id)\n             (not (dis/is-container? current-board-slug))\n             (section-actions/section-refresh current-board-slug)\n             :else\n             (reload-board-data)))))\n\n(defn nav-to-url!\n  ([e board-slug url]\n  (nav-to-url! e board-slug url (or (dis/route-param :back-y) (utils/page-scroll-top)) true))\n\n  ([e board-slug url back-y refresh?]\n  (when (and e\n             (.-preventDefault e))\n    (.preventDefault e))\n  (when ua/mobile?\n    (dis/dispatch! [:input [:mobile-navigation-sidebar] false]))\n  (utils/after 0 (fn []\n   (let [current-path (str (.. js/window -location -pathname) (.. js/window -location -search))\n         org-slug (dis/current-org-slug)\n         sort-type (activity-actions/saved-sort-type org-slug board-slug)\n         is-drafts-board? (= board-slug utils/default-drafts-board-slug)\n         is-container? (dis/is-container? board-slug)\n         org-data (dis/org-data)\n         current-activity-id (dis/current-activity-id)]\n     (if (= current-path url)\n       (do ;; In case user clicked on the current location let's refresh it\n         (routing-actions/post-routing)\n         (user-actions/initial-loading refresh?))\n       (do ;; If user clicked on a different section/container\n           ;; let's switch to it using pushState and changing\n           ;; the internal router state\n         (dis/dispatch! [:routing {:org org-slug\n                                   :board board-slug\n                                   :sort-type sort-type\n                                   :scroll-y back-y\n                                   :query-params (dis/query-params)\n                                   :route [org-slug (if is-container? \"dashboard\" board-slug) sort-type]}])\n         (.pushState (.-history js/window) #js {} (.-title js/document) url)\n         (when refresh?\n           (reload-board-data))\n         ;; Let's change the QP section if it's not active and going to an editable section\n         (when (and (not is-container?)\n                    (not is-drafts-board?)\n                    (:collapsed (dis/cmail-state)))\n           (when-let* [nav-to-board-data (dis/org-board-data org-data board-slug)\n                       edit-link (utils/link-for (:links nav-to-board-data) \"create\" \"POST\")]\n             (dis/dispatch! [:input dis/cmail-data-key {:board-slug (:slug nav-to-board-data)\n                                                        :board-name (:name nav-to-board-data)\n                                                        :publisher-board (:publisher-board nav-to-board-data)}])\n             (dis/dispatch! [:input (conj dis/cmail-state-key :key) (utils/activity-uuid)]))))))))))\n\n(defn dismiss-post-modal [e]\n  (let [org-data (dis/org-data)\n        route (dis/route)\n        board (dis/current-board-slug)\n        contributions-id (dis/current-contributions-id)\n        is-contributions? (seq contributions-id)\n        to-url (or (:back-to route) (oc-urls/following))\n        cont-data (current-container-data)\n        should-refresh-data? (or ; Force refresh of activities if user did an action that can resort posts\n                                 (:refresh route)\n                                 (not cont-data))\n        ;; Get the previous scroll top position\n        default-back-y (or (:back-y route) (utils/page-scroll-top))\n        ;; Scroll back to the previous scroll position only if the posts are\n        ;; not going to refresh, if they refresh the old scroll position won't be right anymore\n        back-y (if (contains? route :back-to) (.. js/document -scrollingElement -scrollTop) (utils/page-scroll-top))]\n    (if is-contributions?\n      (nav-to-author! e contributions-id to-url back-y false)\n      (nav-to-url! e board to-url back-y false))\n    (when should-refresh-data?\n      (utils/after 180 refresh-board-data))))\n\n(defn open-post-modal\n  ([entry-data dont-scroll]\n   (open-post-modal entry-data dont-scroll nil))\n\n  ([entry-data dont-scroll comment-uuid]\n  (let [org (dis/current-org-slug)\n        entry-board-slug (:board-slug entry-data)\n        current-sort-type (dis/current-sort-type)\n        current-contributions-id (dis/current-contributions-id)\n        current-board-slug (dis/current-board-slug)\n        back-to (cond\n                  (and (seq current-contributions-id)\n                       (not current-board-slug))\n                  (oc-urls/contributions current-contributions-id)\n                  (= (keyword current-board-slug) :replies)\n                  (oc-urls/replies)\n                  (= (keyword current-board-slug) :topics)\n                  (oc-urls/topics)\n                  (= (keyword current-board-slug) :following)\n                  (oc-urls/following)\n                  :else\n                  (oc-urls/board entry-board-slug))\n        entry-uuid (:uuid entry-data)\n        post-url (if comment-uuid\n                   (oc-urls/comment-url org entry-board-slug entry-uuid comment-uuid)\n                   (oc-urls/entry org entry-board-slug entry-uuid))\n        query-params (dis/query-params)\n        route (vec (remove nil? [org current-board-slug current-contributions-id current-sort-type entry-uuid \"activity\"]))\n        route-path* {:org org\n                     :board current-board-slug\n                     :entry-board entry-board-slug\n                     :contributions (dis/current-contributions-id)\n                     :sort-type current-sort-type\n                     :activity entry-uuid\n                     :back-to back-to\n                     :query-params query-params\n                     :route route}\n        route-path (if comment-uuid\n                     (assoc route-path* :comment comment-uuid)\n                     route-path*)]\n    (dis/dispatch! [:routing route-path])\n    (cmail-actions/cmail-hide)\n    (.pushState (.-history js/window) #js {} (.-title js/document) post-url))))\n\n;; Push panel\n\n(defn- push-panel\n  \"Push a panel at the top of the stack.\"\n  [panel]\n  (when (zero? (count (get @dis/app-state :panel-stack [])))\n    (dom-utils/lock-page-scroll))\n  (when (#{:invite-picker :invite-email :invite-slack} panel)\n    (user-actions/dismiss-invite-box))\n  (dis/dispatch! [:update [:panel-stack] #(vec (conj (or % []) panel))]))\n\n(defn- pop-panel\n  \"Pop the panel at the top of stack from it and return it.\"\n  []\n  (let [panel-stack (:panel-stack @dis/app-state)]\n    (when (pos? (count panel-stack))\n      (dis/dispatch! [:update [:panel-stack] pop]))\n    (when (= (count panel-stack) 1)\n      (dom-utils/unlock-page-scroll))\n    (peek panel-stack)))\n\n(defn close-all-panels\n  \"Remove all the panels from the stack and return the stack itself.\n   The return value is never used, but it's being returned to be consistent with\n   the pop-panel function.\"\n  []\n  (let [panel-stack (:panel-stack @dis/app-state)]\n    (dis/dispatch! [:input [:panel-stack] []])\n    (dom-utils/unlock-page-scroll)\n    panel-stack))\n\n;; Section settings\n\n(defn show-section-editor [section-slug]\n  (section-actions/setup-section-editing section-slug)\n  (push-panel :section-edit))\n\n(defn hide-section-editor []\n  (pop-panel))\n\n(defn show-section-add []\n  (dis/dispatch! [:input [:show-section-add-cb]\n   (fn [sec-data note dismiss-action]\n     (if sec-data\n       (section-actions/section-save sec-data note dismiss-action)\n       (when (fn? dismiss-action)\n        (dismiss-action))))])\n  (push-panel :section-add))\n\n(defn show-section-add-with-callback [callback]\n  (dis/dispatch! [:input [:show-section-add-cb]\n   (fn [sec-data note dismiss-action]\n     (callback sec-data note dismiss-action)\n     (dis/dispatch! [:input [:show-section-add-cb] nil])\n     (pop-panel))])\n  (push-panel :section-add))\n\n(defn hide-section-add []\n  (pop-panel))\n\n;; Reminders\n\n(defn show-reminders []\n  (push-panel :reminders))\n\n(defn show-new-reminder []\n  (push-panel :reminder-new))\n\n(defn edit-reminder [reminder-uuid]\n  (push-panel (keyword (str \"reminder-\" reminder-uuid))))\n\n(defn close-reminders []\n  (pop-panel))\n\n;; Menu\n\n(defn menu-toggle []\n  (let [panel-stack (:panel-stack @dis/app-state)]\n    (if (= (peek panel-stack) :menu)\n      (pop-panel)\n      (push-panel :menu))))\n\n(defn menu-close []\n  (pop-panel))\n\n;; Show panels\n\n(defn show-org-settings [panel]\n  (if panel\n    (when (or (not= panel :payments)\n              ls/payments-enabled)\n      (push-panel panel))\n    (pop-panel)))\n\n(defn show-user-settings [panel]\n  (if panel\n    (push-panel panel)\n    (pop-panel)))\n\n;; WRT\n\n(defn show-wrt [activity-uuid]\n  (push-panel (keyword (str \"wrt-\" activity-uuid))))\n\n(defn hide-wrt []\n  (pop-panel))\n\n;; Integrations\n\n(defn open-integrations-panel [e]\n  (when e\n    (.preventDefault e)\n    (.stopPropagation e))\n  (if (responsive/is-mobile-size?)\n    (let [alert-data {:action \"mobile-integrations-link\"\n                      :message \"Wut integrations need to be configured in a desktop browser.\"\n                      :solid-button-style :green\n                      :solid-button-title \"OK, got it\"\n                      :solid-button-cb #(alert-modal/hide-alert)}]\n      (alert-modal/show-alert alert-data))\n    (show-org-settings :integrations)))\n\n(set! (.-OCWebStaticOpenIntegrationsPanel js/window) open-integrations-panel)\n\n;; Theme\n\n(defn show-theme-settings []\n  (push-panel :theme))\n\n(defn hide-theme-settings []\n  (pop-panel))\n\n;; User info modal\n\n(defn show-user-info [user-id]\n  (push-panel (str \"user-info-\" user-id)))\n\n(defn hide-user-info []\n  (pop-panel))\n\n;; Follow picker\n\n(defn show-follow-picker []\n  (push-panel :follow-picker))\n\n(defn hide-follow-picker []\n  (pop-panel))\n\n(defn ^:export open-invite-picker [e]\n  (when e\n    (utils/event-stop e))\n  (push-panel :invite-picker))"]}