{"version":3,"sources":["oc/web/components/ui/org_avatar.cljs"],"mappings":";AASA,AAAA,AAAKA;AAEL,AAAA,AAAMC,AACHC,AAAEC,AAASC,AAAiBC;AAD/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAGY,AAAA,AAAA,AAACC,AAA4B,AAACC,AAAIH,AACtB,AAACI,AAAM,AAAA,AAAOL,AAClC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC,AAEOD,AAAmB,AAAA,AAAA,AAACM,AAA4BT;AAF7D,AAGe,AAAA,AAACU,AAAO,AAAA,AAAmBR;AAH1C,AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMG,AAEwB,AAACM,AAAc,AAAA,AAAOR;;AAExD;;;;;;;;;AAAA,AAAAS,AAAA,AAAWO;AAAXN,AAUGX,AAAEC,AAASmB;AAVd,AAAA,AAAAR,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAUkCS;AAVlC,AAAA,AAAA,AAWQC,AAAS,AAAA,AAAWrB;AAX5B,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAac,AAAA,AAAA,AAAA,AAAM,AAACO,AAAcD,AAC7B,AAAA,AAAMrB,AACJ,AAAMwB,AAAS,AAAA,AAAOxB;AAChByB,AAAS,AAACC,AAAI,AAAA,AAAO1B;AACrB2B,AAAS,AAAIF,AACD,AAAA,AAAOzB,AACP,AAAC4B,AAAqBJ;AAJxC,AAAAD,AAKMM,AAAiB,AAAA,AAAmB9B;AACpCE,AAAiB,AAAK,AAACG,AAAIyB,AACL,AAAK,AAACP,AAAcD;AAC1CnB,AAAe,AAAA4B,AAAMV;AAANU,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA;;;AAAA;AAAA;;;;AAME,AAAK7B;;;;AACtB+B,AAAY,AAAA,AAAA,AAAMb,AACJ,AAACc,AAAwBT;AAhB7C,AAiBE,AAAIL;AAAJ,AAAA,AAAA,AAAA,AAEWa,AACP,AAAClC,AAAoBC,AAAEC,AAASC,AAAiBC;;AACnD,AAACJ,AAAoBC,AAAEC,AAASC,AAAiBC;;AAtBvD;;AAJHH,AAAEC,AAASmB;AAVdT;;;;AAAAA;;AAAAA,AAUGX,AAAEC,AAASmB;;;AAAXpB;;AAAEC;;AAASmB;AAVdT;AAAAA,AAUGX,AAAEC,AAASmB;;;;;AAVd,AAAA,AAQIF,AACA,AAAA,AAAA,AAACC","names":["oc.web.components.ui.org-avatar/default-max-logo-height","oc.web.components.ui.org-avatar/internal-org-avatar","s","org-data","show-org-avatar?","show-org-name?","oc.web.lib.utils/class-set","cljs.core/not","cljs.core/first","oc.web.images/optimize-org-avatar-url","cljs.core/reset!","oc.web.lib.utils/emojify","rum.core/build-defcs","p__39567","vec__39568","cljs.core.nth","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.ui.org-avatar/org-avatar","rum.core/static","rum.core.local","should-show-link","show-org-name","org-logo","clojure.string/blank?","cljs.core/deref","org-slug","has-name","cljs.core/seq","org-name","oc.web.lib.utils/camel-case-str","img-load-failed","G__39571","cljs.core/Keyword","avatar-link","oc.web.urls.default_landing"],"sourcesContent":["(ns oc.web.components.ui.org-avatar\n  (:require [rum.core :as rum]\n            [clojure.string :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.urls :as oc-urls]\n            [oc.web.images :as img]\n            [oc.web.router :as router]\n            [oc.web.lib.utils :as utils]))\n\n(def default-max-logo-height 96) ;; 32 * 3 for retina\n\n(defn internal-org-avatar\n  [s org-data show-org-avatar? show-org-name?]\n  [:div.org-avatar-container.group\n    {:class (utils/class-set {:no-avatar (not show-org-avatar?)})\n     :data-first-letter (first (:name org-data))}\n    (when show-org-avatar?\n      [:img.org-avatar-img\n       {:src (-> org-data :logo-url (img/optimize-org-avatar-url default-max-logo-height))\n        :on-error #(reset! (::img-load-failed s) true)}])\n    (when show-org-name?\n      [:span.org-name\n        {:dangerouslySetInnerHTML (utils/emojify (:name org-data))}])])\n\n(rum/defcs org-avatar\n  \"Org avatar component, params:\n   - should-show-link: add anchor tag around the avatar linked to the company page\n   - show-org-name: possible values:\n       * :always\n       * :never\n       * :auto (default)\n      auto means that it's shown if the org logo is empty.\"\n  < rum/static\n    (rum/local false ::img-load-failed)\n  [s org-data should-show-link & [show-org-name]]\n  (let [org-logo (:logo-url org-data)]\n    [:div.org-avatar\n      {:class (when (string/blank? org-logo) \"missing-logo\")}\n      (when org-data\n        (let [org-slug (:slug org-data)\n              has-name (seq (:name org-data))\n              org-name (if has-name\n                          (:name org-data)\n                          (utils/camel-case-str org-slug))\n              img-load-failed @(::img-load-failed s)\n              show-org-avatar? (and (not img-load-failed)\n                                    (not (string/blank? org-logo)))\n              show-org-name? (case show-org-name\n                               :always\n                               true\n                               :never\n                               false\n                               ;; else\n                               (not show-org-avatar?))\n              avatar-link (when should-show-link\n                            (oc-urls/default-landing org-slug))]\n          (if should-show-link\n            [:a.org-link\n              {:href avatar-link}\n              (internal-org-avatar s org-data show-org-avatar? show-org-name?)]\n            (internal-org-avatar s org-data show-org-avatar? show-org-name?))))]))\n"]}