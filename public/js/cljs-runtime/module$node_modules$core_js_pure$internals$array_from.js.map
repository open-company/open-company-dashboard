{
"version":3,
"file":"module$node_modules$core_js_pure$internals$array_from.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,qDAAf,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAElH,IAAIC,KAAOH,OAAA,CAAQ,kEAAR,CAAX,CACII,SAAWJ,OAAA,CAAQ,sDAAR,CADf,CAEIK,6BAA+BL,OAAA,CAAQ,6EAAR,CAFnC,CAGIM,sBAAwBN,OAAA,CAAQ,qEAAR,CAH5B,CAIIO,SAAWP,OAAA,CAAQ,sDAAR,CAJf;AAKIQ,eAAiBR,OAAA,CAAQ,4DAAR,CALrB,CAMIS,kBAAoBT,OAAA,CAAQ,gEAAR,CAIxBC,OAAA,CAAOC,OAAP,CAAiBQ,QAAa,CAACC,SAAD,CAA2D,CACvF,IAAIC,EAAIR,QAAA,CAASO,SAAT,CAAR,CACIE,EAAmB,UAAf,EAAA,MAAO,KAAP,CAA4B,IAA5B,CAAmCC,KAD3C,CAEIC,gBAAkBC,SAAlBD,CAA4BE,MAFhC,CAGIC,MAA0B,CAAlB,CAAAH,eAAA,CAAsBC,SAAA,CAAU,CAAV,CAAtB,CAAqCG,IAAAA,EAHjD,CAIIC,QAAoBD,IAAAA,EAApBC,GAAUF,KAJd,CAKIG,eAAiBZ,iBAAA,CAAkBG,CAAlB,CALrB,CAMIU,MAAQ,CAERF,QAAJ,GAAaF,KAAb,CAAqBf,IAAA,CAAKe,KAAL,CAA8B,CAAlB,CAAAH,eAAA,CAAsBC,SAAA,CAAU,CAAV,CAAtB,CAAqCG,IAAAA,EAAjD,CAA4D,CAA5D,CAArB,CAEA,IAAsBA,IAAAA,EAAtB,EAAIE,cAAJ;AAAqCR,CAArC,EAA0CC,KAA1C,EAAmDR,qBAAA,CAAsBe,cAAtB,CAAnD,CAWE,IAFAJ,eACA,CADSV,QAAA,CAASK,CAAT,CAAWK,MAAX,CACT,CAAAM,CAAA,CAAS,IAAIV,CAAJ,CAAMI,eAAN,CACT,CAAMA,eAAN,CAAeK,KAAf,CAAsBA,KAAA,EAAtB,CACEE,cACA,CADQJ,OAAA,CAAUF,KAAA,CAAMN,CAAA,CAAEU,KAAF,CAAN,CAAgBA,KAAhB,CAAV,CAAmCV,CAAA,CAAEU,KAAF,CAC3C,CAAAd,cAAA,CAAee,CAAf,CAAuBD,KAAvB,CAA8BE,cAA9B,CAbJ,KAIE,KAHAC,CAEA,CAFWJ,cAAA,CAAeK,IAAf,CAAoBd,CAApB,CAEX,CADAe,eACA,CADOF,CACP,CADgBE,IAChB,CAAAJ,CAAA,CAAS,IAAIV,CACb,CAAM,EAAEe,cAAF,CAASD,eAAA,CAAKD,IAAL,CAAUD,CAAV,CAAT,EAA8BI,IAApC,CAA0CP,KAAA,EAA1C,CACEE,cACA,CADQJ,OAAA,CAAUf,4BAAA,CAA6BoB,CAA7B,CAAuCP,KAAvC,CAA8C,CAACU,cAAD,CAAMJ,KAAN,CAAaF,KAAb,CAA9C,CAAmE,CAAA,CAAnE,CAAV,CAAqFM,cAArF,CAA0FJ,KAClG,CAAAhB,cAAA,CAAee,CAAf,CAAuBD,KAAvB,CAA8BE,cAA9B,CAUJD;CAAA,CAAON,MAAP,CAAgBK,KAChB,OAAOC,EA5BgF,CAZyB;",
"sources":["node_modules/core-js-pure/internals/array-from.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$core_js_pure$internals$array_from\"] = function(global,require,module,exports) {\n'use strict';\nvar bind = require('../internals/function-bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    next = iterator.next;\n    result = new C();\n    for (;!(step = next.call(iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","bind","toObject","callWithSafeIterationClosing","isArrayIteratorMethod","toLength","createProperty","getIteratorMethod","module.exports","arrayLike","O","C","Array","argumentsLength","arguments","length","mapfn","undefined","mapping","iteratorMethod","index","result","value","iterator","call","next","step","done"]
}
