{"version":3,"sources":["oc/web/lib/responsive.cljs"],"mappings":";AAOA,AAAA,AAAKA;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAMC;AAAN,AACE,AAAM,AAAAC,AAAKC;AAAL,AAAA,AAAAD;AAAA,AAAAA,AACK,AAAQC;AADb,AAAA,AAAAD;AAEK,AAAe,AAAQC;;AAF5BD;;;AAAAA;;;AAAN,AAGE,AAAe,AAAQC;;AAHzB;;;AAKF,AAAKC,AAAQ,AAAA,AAACC;AAEd,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAoB,AAAA,AAACC;AACrBC,AAAW,AAAA,AAAI,AAAQN,AACV,AAAI,AAACF,AAAIJ;AAEtBa,AAAmB,AAAI,AAAA,AAAMH,AACT,AAAKE,AACL,AAAA,AAAA,AAAI,AAAA,AAACE,AAAEJ;AANjC,AASA,AAACK,AAAOR,AAAQM;;AAElB,AAAA,AAAMI;AAAN,AAAA;AAGC,AAAM,AAAA,AAAAD,AAAA,AAAOT;AAAb,AACE,AAACE;;AADH;;AAHD,AAAAO,AAKET;;AAEF,AAAA,AAAKW;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAEL,AAAA,AAAMC;AAAN,AAEE,AAAI,AAAYC;AAAhB;;AAEE,AAAA,AAAAC,AAAQ,AAASD;AACf,AAAI,AAAClB,AAAIH;;AACT,AAAI,AAAA,AAACa,AAAE,AAAA,AAACU,AAASC,AACb,AAAA,AAACX,AAAE,AAAA,AAACU,AAASC,AACb,AAAA,AAACX,AAAE,AAAA,AAACU,AAASC;;;;AAEvB,AAAU,AAAYH;AAAtB;AAAA,AACE,AAACI,AAAcJ,AAAUK,AAAiBlB","names":["oc.web.lib.responsive/big-web-min-width","oc.web.lib.responsive/tablet-max-width","oc.web.lib.responsive/navbar-height","oc.web.lib.responsive/mobile-navbar-height","oc.web.lib.responsive/ww","and__4115__auto__","js/document","oc.web.lib.responsive/_mobile","cljs.core.atom","oc.web.lib.responsive/set-browser-type!","force-mobile-cookie","oc.web.lib.cookies/get-cookie","is-big-web","fixed-browser-type","cljs.core._EQ_","cljs.core/reset!","cljs.core/deref","oc.web.lib.responsive/is-mobile-size?","oc.web.lib.responsive/left-navigation-sidebar-minimum-right-margin","oc.web.lib.responsive/left-navigation-sidebar-width","oc.web.lib.responsive/dashboard-container-width","oc.web.lib.responsive/is-tablet-or-mobile?","js/window","cljs.core/not","goog.object/get","js/WURFL","goog.events/listen","goog.events.EventType/RESIZE"],"sourcesContent":["(ns oc.web.lib.responsive\n  (:require [oc.web.lib.cookies :as cook]\n            [goog.object :as gobj]\n            [goog.userAgent :as userAgent]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]))\n\n(def big-web-min-width 768)\n(def tablet-max-width 980)\n(def navbar-height 56)\n(def mobile-navbar-height 54)\n\n(defn ww []\n  (when (and js/document\n             (.-body js/document)\n             (.-clientWidth (.-body js/document)))\n    (.-clientWidth (.-body js/document))))\n\n(def _mobile (atom -1))\n\n(defn set-browser-type! []\n  (let [force-mobile-cookie (cook/get-cookie :force-browser-type)\n        is-big-web (if (.-body js/document)\n                     (>= (ww) big-web-min-width)\n                     true) ; to not break tests\n        fixed-browser-type (if (nil? force-mobile-cookie)\n                            (not is-big-web)\n                            (if (= force-mobile-cookie \"mobile\")\n                             true\n                             false))]\n  (reset! _mobile fixed-browser-type)))\n\n(defn is-mobile-size? []\n \"Check if it's mobile based only on screen size\"\n ;; fake the browser type for the moment\n (when (neg? @_mobile)\n   (set-browser-type!))\n @_mobile)\n\n(def left-navigation-sidebar-minimum-right-margin 16)\n(def left-navigation-sidebar-width 160)\n(def dashboard-container-width 732)\n\n(defn is-tablet-or-mobile? []\n  ;; check if it's test env, can't import utils to avoid circular dependencies\n  (if (.-_phantom js/window)\n    false\n    (if-not (.-WURFL js/window)\n      (<= (ww) tablet-max-width)\n      (or (= (gobj/get js/WURFL \"form_factor\") \"Tablet\")\n          (= (gobj/get js/WURFL \"form_factor\") \"Smartphone\")\n          (= (gobj/get js/WURFL \"form_factor\") \"Other Mobile\")))))\n\n(when-not (.-_phantom js/window)\n  (events/listen js/window EventType/RESIZE set-browser-type!))"]}