{"version":3,"sources":["oc/web/actions/org.cljs"],"mappings":"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","names":["oc.web.actions.org/get-ap-url","org-slug","first-ever-landing-name","oc.web.router/first-ever-landing-cookie","oc.web.lib.jwt/user-id","first-ever-landing","oc.web.lib.cookies/get-cookie","oc.web.urls.default_landing","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.urls.first_ever_landing","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.org/bot-auth","p__43193","vec__43194","cljs.core.nth","seq43190","G__43191","cljs.core/first","cljs.core/next","G__43192","self__4723__auto__","team-data","user-data","redirect-to","redirect","or__4126__auto__","oc.web.router/get-token","auth-link","oc.web.lib.utils.link_for","fixed-auth-url","oc.web.utils.user/auth-link-with-state","oc.web.router/redirect!","oc.web.actions.org/maybe-show-integration-added-notification?","temp__33774__auto__","org-data","oc.web.dispatcher.org_data","bot-access","oc.web.dispatcher.bot_access","cljs.core._EQ_","oc.web.actions.notifications/show-notification","cljs.core.not_EQ_","oc.web.dispatcher.query_params","oc.web.dispatcher/dispatch!","oc.web.actions.org/max-retry-count","oc.web.actions.org/load-active-users","p__43202","vec__43203","seq43200","G__43201","active-users-link","retry","oc.web.api/get-active-users","p__43206","map__43207","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","status","success","body","resp","oc.web.lib.json/json->cljs","oc.web.dispatcher.current_org_slug","oc.web.lib.utils/after","oc.web.actions.org.load_active_users","oc.web.actions.org/check-org-404","orgs","oc.web.dispatcher.orgs_data","cljs.core/count","oc.web.lib.cookies.set_cookie_BANG_","oc.web.router/last-org-cookie","oc.web.lib.cookies/default-cookie-expire","oc.web.actions.routing.maybe_404","oc.web.actions.org/get-default-board","last-board-slug","oc.web.urls/default-board-slug","boards","board","p1__43210#","cljs.core.filter","sorted-boards","cljs.core/vec","cljs.core.sort_by","oc.web.actions.org/other-resources-delay","oc.web.actions.org/org-loaded","p__43219","vec__43220","seq43217","G__43218","saved?","email-domain","complete-refresh?","and__4115__auto__","current-board-slug","oc.web.dispatcher.current_board_slug","all-posts-link","bookmarks-link","following-link","unfollowing-link","contrib-link","drafts-board","p1__43212#","cljs.core/some","oc.web.lib.utils/default-drafts-board-slug","drafts-link","replies-link","is-following?","is-replies?","is-bookmarks?","is-drafts?","is-topics?","is-contributions?","cljs.core/seq","oc.web.dispatcher.current_contributions_id","is-unfollowing?","sort-type","oc.web.dispatcher.current_sort_type","delay-count","cljs.core.atom","following-delay","oc.web.dispatcher/recently-posted-sort","cljs.core.swap_BANG_","cljs.core/inc","replies-delay","bookmarks-delay","drafts-delay","contributions-delay","route","oc.web.dispatcher.route_param","oc.web.dispatcher.current_secure_activity_id","oc.web.actions.activity.secure_activity_get","oc.web.dispatcher.current_activity_id","oc.web.dispatcher.current_entry_board_slug","oc.web.actions.cmail/get-entry-with-uuid","oc.web.lib.utils/maybe-after","oc.web.actions.activity.following_get","oc.web.actions.activity.replies_get","oc.web.actions.activity/bookmarks-get","oc.web.actions.section/section-get","oc.web.actions.contributions.contributions_get","oc.web.actions.activity/unfollowing-get","oc.web.dispatcher/is-container?","cljs.core/not","temp__5733__auto__","board-data","p1__43215#","oc.web.router/rewrite-board-uuid-as-slug","board-link","oc.web.actions.section/section-get-finish","oc.web.lib.utils/default-drafts-board","oc.web.dispatcher.in_route_QMARK_","board-to","oc.web.router/nav!","oc.web.urls.board","oc.web.lib.jwt/jwt","oc.web.lib.jwt/id-token","temp__5735__auto__","ws-link","oc.web.ws.change-client/reconnect","cljs.core.conj","cljs.core.map","oc.web.ws.interaction-client/reconnect","oc.web.ws.notify-client/reconnect","oc.web.lib.fullstory/track-org","oc.web.lib.chat/identify","oc.web.actions.payments.maybe_load_payments_data","js/document","p__43229","map__43230","oc.web.actions.org/get-org-cb","prevent-complete-refresh?","oc.web.actions.org.org_loaded","G__43234","oc.web.actions.org/get-org","js/Error","oc.web.actions.org.get_org","callback","fixed-org-data","org-link","oc.web.api/get-org","p__43235","map__43236","cljs.core/fn?","oc.web.actions.org/org-redirect","oc.web.actions.org/org-created","p__43247","map__43248","oc.web.actions.org/team-patch-cb","oc.web.actions.org/handle-org-redirect","cljs.core/empty?","team-id","oc.web.dispatcher.team_data","team-patch-link","oc.web.api/patch-team","cljs.core.partial","oc.web.actions.org/update-email-domains","redirect-cb","add-email-domain-link","oc.web.api/add-email-domain","oc.web.actions.org/pre-flight-email-domain","cb","p1__43250#","oc.web.dispatcher.teams_data","p__43251","map__43252","oc.web.api.add_email_domain","oc.web.actions.org/org-create-check-errors","oc.web.urls.org","p__43254","map__43255","oc.web.actions.org/org-create-cb","js/history","oc.web.urls.sign_up_update_team","p__43257","map__43258","oc.web.actions.org/org-update-cb","oc.web.actions.org/trunc","s","n","cljs.core.subs","x__4217__auto__","y__4218__auto__","oc.web.actions.org/add-utm-data","source","term","medium","campaign","seq__43264","chunk__43265","count__43266","i__43267","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","c-name","js/OCStaticDeleteCookie","cljs.core.merge","oc.web.actions.org/create-or-update-org","existing-org","logo-org-data","cljs.core.dissoc","clean-org-data","cljs.core.assoc","org-patch-link","oc.web.api/patch-org","create-org-link","oc.web.dispatcher.api_entry_point","oc.web.api/create-org","oc.web.actions.org/org-edit-setup","p__43268","map__43269","oc.web.actions.org/org-edit-save-cb","oc.web.actions.org/org-edit-save","with-trimmed-name","clojure.string/trim","p__43271","map__43272","p__43274","map__43275","oc.web.actions.org/org-avatar-edit-save-cb","oc.web.actions.org/org-avatar-edit-save","org-avatar-data","oc.web.actions.org/org-change","data","change-data","container-id","user-id","oc.web.actions.org/subscribe","oc.web.ws.change-client/subscribe","change-type","current-board-data","oc.web.dispatcher/board-data","oc.web.actions.org/signup-invite-completed"],"sourcesContent":["(ns oc.web.actions.org\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.utils.user :as uu]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.local-settings :as ls]\n            [oc.web.actions.comment :as ca]\n            [oc.web.actions.section :as sa]\n            [oc.web.actions.activity :as aa]\n            [oc.web.lib.fullstory :as fullstory]\n            [oc.web.lib.chat :as chat]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.ws.notify-client :as ws-nc]\n            [oc.web.ws.change-client :as ws-cc]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.ws.interaction-client :as ws-ic]\n            [oc.web.actions.routing :as routing-actions]\n            [oc.web.actions.payments :as payments-actions]\n            [oc.web.actions.contributions :as contributions-actions]\n            [oc.web.actions.notifications :as notification-actions]))\n\n;; User related functions\n;; FIXME: these functions shouldn't be here but calling oc.web.actions.user from here is causing a circular dep\n\n(defn- get-ap-url [org-slug]\n  (let [first-ever-landing-name (router/first-ever-landing-cookie (jwt/user-id))\n        first-ever-landing (cook/get-cookie first-ever-landing-name)]\n    (if first-ever-landing\n      (oc-urls/default-landing org-slug)\n      (do\n        (cook/remove-cookie! first-ever-landing-name)\n        (oc-urls/first-ever-landing org-slug)))))\n\n(defn bot-auth [team-data user-data & [redirect-to]]\n  (let [redirect (or redirect-to (router/get-token))\n        auth-link (utils/link-for (:links team-data) \"bot\")\n        fixed-auth-url (uu/auth-link-with-state (:href auth-link)\n                                                {:user-id (:user-id user-data)\n                                                 :team-id (:team-id team-data)\n                                                 :redirect redirect})]\n    (router/redirect! fixed-auth-url)))\n\n(defn maybe-show-integration-added-notification? []\n  ;; Do we need to show the add bot banner?\n  (when-let* [org-data (dis/org-data)\n              bot-access (dis/bot-access)]\n    (when (= bot-access \"bot\")\n      (notification-actions/show-notification {:title \"Wut Bot enabled\"\n                                                      :primary-bt-title \"OK\"\n                                                      :primary-bt-dismiss true\n                                                      :expire 5\n                                                      :id :slack-bot-added}))\n    (when (and (= bot-access \"team\")\n               (not= (:new (dis/query-params)) \"true\"))\n      (notification-actions/show-notification {:title \"Integration added\"\n                                                      :primary-bt-title \"OK\"\n                                                      :primary-bt-dismiss true\n                                                      :expire 5\n                                                      :id :slack-team-added}))\n    (dis/dispatch! [:input [:bot-access] nil])))\n\n;; Active users\n\n(def max-retry-count 3)\n\n(defn load-active-users [active-users-link & [retry]]\n  (when active-users-link\n    (api/get-active-users active-users-link\n     (fn [{:keys [status success body]}]\n       (if success\n         (let [resp (when success (json->cljs body))]\n           (dis/dispatch! [:active-users (dis/current-org-slug) resp]))\n         (when (< retry max-retry-count)\n           (utils/after 1000 #(load-active-users active-users-link (inc (or retry 0))))))))))\n\n;; Org get\n(defn check-org-404 []\n  (let [orgs (dis/orgs-data)]\n    ;; avoid infinite loop of the Go to digest button\n    ;; by changing the value of the last visited slug\n    (if (pos? (count orgs))\n      (cook/set-cookie! (router/last-org-cookie) (:slug (first orgs)) cook/default-cookie-expire)\n      (cook/remove-cookie! (router/last-org-cookie)))\n    (routing-actions/maybe-404)))\n\n(defn get-default-board [org-data]\n  (let [last-board-slug oc-urls/default-board-slug]\n    ; Replace default-board with the following to go back to the last visited board\n    ; (or (cook/get-cookie (router/last-board-cookie (:slug org-data))) default-board)]\n    (cond\n      ; (and (= last-board-slug \"all-posts\")\n      ;      (utils/link-for (:links org-data) \"entries\"))\n      ; {:slug \"all-posts\"}\n      (and (or (= last-board-slug \"all-posts\") (= last-board-slug \"following\"))\n           (utils/link-for (:links org-data) \"following\"))\n      {:slug \"home\"}\n      (and (= last-board-slug \"unfollowing\")\n           (utils/link-for (:links org-data) \"unfollowing\"))\n      {:slug \"unfollowing\"}\n      :else\n      (let [boards (:boards org-data)\n            board (first (filter #(= (:slug %) last-board-slug) boards))]\n        (or\n          ; Get the last accessed board from the saved cookie\n          board\n          (let [sorted-boards (vec (sort-by :name boards))]\n            (first sorted-boards)))))))\n\n(def other-resources-delay 1500)\n\n(defn org-loaded\n  \"Dispatch the org data into the app-state to be used by all the components.\n   Do all the needed loading when the org data are loaded if complete-refresh? is true.\n   The saved? flag is used as a strict boolean, if it's nil it means no org data PATCH happened, false\n   means that the save went wrong, true went well.\"\n  [org-data & [saved? email-domain complete-refresh?]]\n  ;; Save the last visited org\n  (when (and org-data\n             (= (dis/current-org-slug) (:slug org-data)))\n    (cook/set-cookie! (router/last-org-cookie) (:slug org-data) cook/default-cookie-expire))\n  ;; Check the loaded org\n  (let [boards (:boards org-data)\n        current-board-slug (dis/current-board-slug)\n        ; inbox-link (utils/link-for (:links org-data) \"following-inbox\")\n        all-posts-link (utils/link-for (:links org-data) \"entries\")\n        bookmarks-link (utils/link-for (:links org-data) \"bookmarks\")\n        following-link (utils/link-for (:links org-data) \"following\")\n        unfollowing-link (utils/link-for (:links org-data) \"unfollowing\")\n        contrib-link (utils/link-for (:links org-data) \"partial-contributions\")\n        drafts-board (some #(when (= (:slug %) utils/default-drafts-board-slug) %) boards)\n        drafts-link (utils/link-for (:links drafts-board) [\"self\" \"item\"] \"GET\")\n        replies-link (utils/link-for (:links org-data) \"replies\")\n        active-users-link (utils/link-for (:links org-data) \"active-users\")\n        ; is-inbox? (= current-board-slug \"inbox\")\n        ; is-all-posts? (= current-board-slug \"all-posts\")\n        is-following? (= current-board-slug \"following\")\n        is-replies? (= current-board-slug \"replies\")\n        is-bookmarks? (= current-board-slug \"bookmarks\")\n        is-drafts? (= current-board-slug utils/default-drafts-board-slug)\n        is-topics? (= current-board-slug \"topics\")\n        is-contributions? (seq (dis/current-contributions-id))\n        is-unfollowing? (= current-board-slug \"unfollowing\")\n        sort-type (dis/current-sort-type)\n        delay-count (atom 1)\n        ; inbox-delay (if is-inbox? 0 (* other-resources-delay (swap! delay-count inc)))\n        ; all-posts-delay (if (and is-all-posts? (= sort-type dis/recently-posted-sort)) 0 (* other-resources-delay (swap! delay-count inc)))\n        following-delay (if (and is-following? (= sort-type dis/recently-posted-sort)) 0 (* other-resources-delay (swap! delay-count inc)))\n        replies-delay (if is-replies? 0 (* other-resources-delay (swap! delay-count inc)))\n        bookmarks-delay (if is-bookmarks? 0 (* other-resources-delay (swap! delay-count inc)))\n        drafts-delay (if is-drafts? 0 (* other-resources-delay (swap! delay-count inc)))\n        ; unfollowing-delay (if (and is-unfollowing? (= sort-type dis/recently-posted-sort)) 0 (* other-resources-delay (swap! delay-count inc)))\n        contributions-delay (if is-contributions? 0 (* other-resources-delay (swap! delay-count inc)))\n        route (dis/route-param :route)]\n    (when is-bookmarks?\n      (dis/dispatch! [:bookmarks-nav/show (:slug org-data)]))\n    (when is-drafts?\n      (dis/dispatch! [:drafts-nav/show (:slug org-data)]))\n    (when complete-refresh?\n      ;; Load secure activity\n      (if (dis/current-secure-activity-id)\n        (aa/secure-activity-get)\n        (do\n          ;; Load the active users\n          (when active-users-link\n            (load-active-users active-users-link))\n          ;; Load the current activity\n          (when (and (dis/current-activity-id)\n                     (dis/current-entry-board-slug))\n            (cmail-actions/get-entry-with-uuid (dis/current-entry-board-slug) (dis/current-activity-id)))\n          ;; Load inbox data\n          ; (when (and ls/wut?\n          ;            inbox-link)\n          ;   (utils/maybe-after inbox-delay #(aa/inbox-get org-data)))\n          ;; Load all posts data with recently posted sort\n          ; (when all-posts-link\n          ;   (utils/maybe-after all-posts-delay #(aa/all-posts-get org-data)))\n          ;; Preload following data with recently posted sort\n          (when following-link\n            (utils/maybe-after following-delay #(aa/following-get org-data)))\n          ;; Preload replies data\n          (when replies-link\n            (utils/maybe-after replies-delay #(aa/replies-get org-data)))\n          ;; Preload bookmarks data\n          (when bookmarks-link\n            (utils/maybe-after bookmarks-delay #(aa/bookmarks-get org-data)))\n          ;; Drafts\n          (when drafts-link\n            (utils/maybe-after drafts-delay #(sa/section-get utils/default-drafts-board-slug drafts-link)))\n          ;; contributions data\n          (when (and contrib-link\n                     (dis/current-contributions-id))\n            (utils/maybe-after contributions-delay #(contributions-actions/contributions-get org-data (dis/current-contributions-id))))\n          ;; Preload unfollowing data with recently posted sort\n          (when (and is-unfollowing? unfollowing-link)\n            (aa/unfollowing-get org-data))\n          ))\n      (when (:badge-following org-data)\n        (dis/dispatch! [:maybe-badge-following (:slug org-data) current-board-slug]))\n      (when (:badge-replies org-data)\n        (dis/dispatch! [:maybe-badge-replies (:slug org-data) current-board-slug])))\n    (cond\n      is-topics?\n      ;; No-op\n      true\n      ;; If it's all posts page or must see, loads AP and must see for the current org\n      (dis/is-container? current-board-slug)\n      (when (or ; (and is-inbox?\n                ;     (not inbox-link))\n                ; (and is-all-posts?\n                ;      (not all-posts-link))\n                (and is-replies?\n                     (not replies-link))\n                (and is-bookmarks?\n                     (not bookmarks-link))\n                (and is-following?\n                     (not following-link))\n                (and is-drafts?\n                     (not drafts-link))\n                (and is-unfollowing?\n                     (not unfollowing-link)))\n        (check-org-404))\n\n      ; If there is a board slug let's load the board data\n      current-board-slug\n      (if-let [board-data (first (filter #(or (= (:slug %) current-board-slug)\n                                              (= (:uuid %) current-board-slug)) boards))]\n        ;; Load the board data except for drafts if there is a link in the boards list\n        ;; except for drafts which is preloaded with the rest\n        (when-not is-drafts?\n          ;; Rewrite the URL in case it's using the board UUID instead of the slug\n          (when (= (:uuid board-data) current-board-slug)\n            (router/rewrite-board-uuid-as-slug current-board-slug (:slug board-data)))\n          (when-let* [board-link (utils/link-for (:links board-data) [\"item\" \"self\"] \"GET\")]\n            (sa/section-get (:slug board-data) board-link)))\n        ; The board wasn't found, showing a 404 page\n        (if is-drafts?\n          (utils/after 100 #(sa/section-get-finish (:slug org-data) utils/default-drafts-board-slug dis/recently-posted-sort utils/default-drafts-board))\n          (when-not (dis/current-activity-id) ;; user is not asking for a specific post\n            (routing-actions/maybe-404))))\n      ;; Board redirect handles\n      (and (not (dis/in-route? :org-settings-invite))\n           (not (dis/in-route? :org-settings-team))\n           (not (dis/in-route? :org-settings))\n           (not (dis/in-route? :email-verification))\n           (not (dis/in-route? :sign-up))\n           (not (dis/in-route? :email-wall))\n           (not (dis/in-route? :confirm-invitation))\n           (not (dis/in-route? :secure-activity))\n           (not (dis/current-contributions-id)))\n      ;; Redirect to the first board if at least one is present\n      (let [board-to (get-default-board org-data)]\n        (router/nav!\n          (if board-to\n            (oc-urls/board (:slug org-data) (:slug board-to))\n            (oc-urls/default-landing (:slug org-data)))))))\n\n  ;; Change service connection\n  (when (or (jwt/jwt)\n            (jwt/id-token)) ; only for logged in users\n    (when-let [ws-link (utils/link-for (:links org-data) \"changes\")]\n      (ws-cc/reconnect ws-link (jwt/user-id) (:slug org-data) (conj (map :uuid (:boards org-data)) (:uuid org-data)))))\n\n  ;; Interaction service connection\n  (when (jwt/jwt) ; only for logged in users\n    (when-let [ws-link (utils/link-for (:links org-data) \"interactions\")]\n      (ws-ic/reconnect ws-link (jwt/user-id))))\n\n  ;; Notify client\n  (when (jwt/jwt)\n    (when-let [ws-link (utils/link-for (:links org-data) \"notifications\")]\n      (ws-nc/reconnect ws-link (jwt/user-id))))\n\n  (dis/dispatch! [:org-loaded org-data saved? email-domain])\n  (utils/after 100 maybe-show-integration-added-notification?)\n  (fullstory/track-org org-data)\n  (chat/identify) ; Intercom\n\n  (payments-actions/maybe-load-payments-data org-data complete-refresh?)\n\n  ;; Change page title when an org page is loaded\n  (set! (.-title js/document) (str \"Wut | \" (:name org-data))))\n\n(defn get-org-cb [prevent-complete-refresh? {:keys [status body success]}]\n  (let [org-data (json->cljs body)]\n    (org-loaded org-data nil nil (not prevent-complete-refresh?))))\n\n(defn get-org\n  ([] (get-org (dis/org-data) false nil))\n  ([org-data] (get-org org-data false nil))\n  ([org-data prevent-complete-refresh?] (get-org org-data prevent-complete-refresh? nil))\n  ([org-data prevent-complete-refresh? callback]\n   (let [fixed-org-data (or org-data (dis/org-data))\n         org-link (utils/link-for (:links fixed-org-data) [\"item\" \"self\"] \"GET\")]\n     (api/get-org org-link\n      (fn [{:keys [success] :as resp}]\n        (get-org-cb prevent-complete-refresh? resp)\n        (when (fn? callback)\n          (callback success)))))))\n\n;; Org redirect\n\n(defn org-redirect [org-data]\n  (when org-data\n    (let [org-slug (:slug org-data)]\n      (utils/after 100 #(router/redirect! (get-ap-url (:slug org-data)))))))\n\n;; Org create\n\n(defn- org-created [org-data]\n  (utils/after 0\n   #(router/nav! (oc-urls/default-landing (:slug org-data)))))\n\n(defn team-patch-cb [org-data {:keys [success body status]}]\n  (when success\n    (org-created org-data)))\n\n(defn- handle-org-redirect [team-data org-data email-domain]\n  (if (and (empty? (:name team-data))\n           (utils/link-for (:links team-data) \"partial-update\"))\n    ;; if the current team has no name and\n    ;; the user has write permission on it\n    ;; use the org name\n    ;; for it and patch it back\n    (let [team-id (:team-id org-data)\n          team-data (dis/team-data team-id)\n          team-patch-link (utils/link-for (:links team-data) \"partial-update\")]\n      (api/patch-team team-patch-link team-id {:name (:name org-data)}\n       (partial team-patch-cb org-data)))\n    ;; if not redirect the user to the invite page\n    (org-created org-data)))\n\n(defn update-email-domains [email-domain org-data]\n  (let [team-data (dis/team-data (:team-id org-data))\n        redirect-cb #(handle-org-redirect team-data org-data email-domain)]\n    (if (seq email-domain)\n      (let [add-email-domain-link (utils/link-for\n                                   (:links team-data)\n                                   \"add\"\n                                   \"POST\"\n                                   {:content-type \"application/vnd.open-company.team.email-domain.v1+json\"})]\n        (api/add-email-domain add-email-domain-link email-domain redirect-cb team-data))\n      (redirect-cb))))\n\n(defn pre-flight-email-domain [email-domain team-id cb]\n  (let [team-data (or (dis/team-data team-id)\n                      ;; Fallback for NUX: user has no team-id set from the org yet\n                      ;; so the team data are not in the right position yet\n                      (first (filter #(= (:team-id %) team-id) (dis/teams-data))))\n        add-email-domain-link (utils/link-for\n                                   (:links team-data)\n                                   \"add\"\n                                   \"POST\"\n                                   {:content-type \"application/vnd.open-company.team.email-domain.v1+json\"})\n        redirect-cb (fn [{:keys [status success body]}]\n                      (cb success status))]\n    (api/add-email-domain add-email-domain-link email-domain redirect-cb team-data true)))\n\n(defn org-create-check-errors [status]\n  (if (= status 409)\n    ;; Redirect to the already available org\n    (router/nav! (oc-urls/org (:slug (first (dis/orgs-data)))))\n    (dis/dispatch! [:input [:org-editing :error] true])))\n\n(defn org-create-cb [email-domain {:keys [success status body]}]\n  (if success\n    (when-let [org-data (when success (json->cljs body))]\n      ;; rewrite history so when user come back here we load org data and patch them\n      ;; instead of creating them\n      (.replaceState js/history #js {} (.-title js/document) (oc-urls/sign-up-update-team (:slug org-data)))\n      (org-loaded org-data nil email-domain)\n      (dis/dispatch! [:org-create])\n      (update-email-domains email-domain org-data))\n    (org-create-check-errors status)))\n\n(defn org-update-cb [email-domain {:keys [success status body]}]\n  (if success\n    (when-let [org-data (when success (json->cljs body))]\n      (org-loaded org-data success email-domain)\n      (update-email-domains email-domain org-data))\n    (org-create-check-errors status)))\n\n(defn- trunc\n  \"\n  Truncate a string based on length\n  \"\n  [s n]\n  (subs s 0 (min (count s) n)))\n\n(defn- add-utm-data\n  \"\n  Augment org data with utm values stored in cookies.\n\n  Remove utm cookies if present.\n  \"\n  [org-data]\n  (let [source (cook/get-cookie \"utm_source\")\n        term (cook/get-cookie \"utm_term\")\n        medium (cook/get-cookie \"utm_medium\")\n        campaign (cook/get-cookie \"utm_campaign\")]\n    (doseq [c-name [\"utm_source\" \"utm_term\" \"utm_medium\" \"utm_campaign\"]]\n      (js/OCStaticDeleteCookie c-name))\n    (if (or source term medium campaign)\n      (merge org-data {:utm-data {:utm-source (or source \"\")\n                                  :utm-term (or term \"\")\n                                  :utm-medium (or medium \"\")\n                                  :utm-campaign (or campaign \"\")}})\n      org-data)))\n\n(defn create-or-update-org [org-data]\n  (dis/dispatch! [:input [:org-editing :error] false])\n  (let [email-domain (:email-domain org-data)\n        existing-org (dis/org-data)\n        logo-org-data (if (seq (:logo-url org-data))\n                          org-data\n                          (dissoc org-data :logo-url :logo-width :logo-height))\n        clean-org-data (assoc logo-org-data\n                              :name\n                              (trunc (:name logo-org-data) 127))]\n    (if (seq (:slug existing-org))\n      (let [org-patch-link (utils/link-for (:links (dis/org-data)) \"partial-update\")]\n        (api/patch-org org-patch-link clean-org-data (partial org-update-cb email-domain)))\n      (let [create-org-link (utils/link-for (dis/api-entry-point) \"create\")]\n        (api/create-org create-org-link (add-utm-data clean-org-data) (partial org-create-cb email-domain))))))\n\n;; Org edit\n\n(defn org-edit-setup [org-data]\n  (dis/dispatch! [:org-edit-setup org-data]))\n\n(defn org-edit-save-cb [{:keys [success body status]}]\n  (org-loaded (json->cljs body) success))\n\n(defn org-edit-save [org-data]\n  (let [org-patch-link (utils/link-for (:links (dis/org-data)) \"partial-update\")\n        with-trimmed-name (assoc org-data :name (clojure.string/trim (:name org-data)))]\n    (api/patch-org org-patch-link with-trimmed-name\n      (fn [{:keys [success status] :as resp}]\n        (if success\n          (org-edit-save-cb resp)\n          (when (= status 422)\n            (dis/dispatch! [:input [:org-editing :error] true])))))))\n\n(defn org-avatar-edit-save-cb [{:keys [success body status]}]\n  (if success\n    (do\n      (notification-actions/show-notification\n        {:title \"Image update succeeded\"\n         :description \"Your image was succesfully updated.\"\n         :expire 3\n         :dismiss true})\n      (org-loaded (json->cljs body)))\n    (do\n      (dis/dispatch! [:org-avatar-update/failed])\n      (notification-actions/show-notification\n       {:title \"Image upload error\"\n        :description \"An error occurred while processing your company avatar. Please retry.\"\n        :expire 3\n        :id :org-avatar-upload-failed\n        :dismiss true}))))\n\n(defn org-avatar-edit-save [org-avatar-data]\n  (let [org-patch-link (utils/link-for (:links (dis/org-data)) \"partial-update\")]\n    (api/patch-org org-patch-link org-avatar-data org-avatar-edit-save-cb)))\n\n(defn org-change [data org-data]\n  (let [change-data (:data data)\n        container-id (:container-id change-data)\n        user-id (:user-id change-data)]\n    (when (not= (jwt/user-id) user-id) ; no need to respond to our own events\n      (when (= container-id (:uuid org-data))\n        (utils/after 1000 #(get-org org-data true))))))\n\n;; subscribe to websocket events\n(defn subscribe []\n  (ws-cc/subscribe :org/status\n    (fn [data]\n      (get-org (dis/org-data) true)))\n  (ws-cc/subscribe :container/change\n    (fn [data]\n      (let [change-data (:data data)\n            change-type (:change-type change-data)\n            org-data (dis/org-data)]\n        ;; Handle section changes\n        (org-change data org-data)\n        ;; Nav away of the current section\n        ;; if it's being deleted\n        (when (and (= change-type :delete)\n                   (= (:container-id change-data) (:uuid org-data)))\n          (let [current-board-data (dis/board-data)]\n            (when (= (:item-id change-data) (:uuid current-board-data))\n              (router/nav! (oc-urls/default-landing (:slug org-data))))))))))\n\n(defn signup-invite-completed [org-data]\n  (router/nav! (oc-urls/default-landing (:slug org-data))))\n"]}