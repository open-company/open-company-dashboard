{"version":3,"sources":["oc/web/actions/comment.cljs"],"mappings":";AAeA,AAAA,AAAMA,AAAmBC;AAAzB,AACE,AAAA,AAAA,AAACC,AAAkCD;;AAErC,AAAA,AAAA,AAAAE,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAUR,AAAYkB;AAA5B,AAAA,AAAAR,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA2CS;AAA3C,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAClB,AAAkC,AAACmB,AAAsBpB,AAAmBkB,AAAmBC;;;AADlG,AAAA,AAAA,AAAMX;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAGA,AAAA,AAAMS,AAAgBrB;AAAtB,AACE,AAAA,AAAA,AAACC,AAAwC,AAACmB,AAAsBpB;;AAElE,AAAA,AAAMsB,AAAkBtB;AAAxB,AACE,AAAA,AAAA,AAACC,AAAiCD;;AAEpC,AAAA,AAAMuB,AAAcC,AAAcC;AAAlC,AACE,AAAA,AAAA,AAACxB,AAAmC,AAACmB,AAAsBI,AAAc,AAAA,AAAeC,AAAc,AAAA,AAAOA,AAAc,AAAA,AAAOA;;AAEpI,AAAA,AAAMC,AAAmBF,AAAcC;AAAvC,AACE,AAAA,AAAA,AAAA,AAACxB,AAAmC,AAACmB,AAAsBI,AAAc,AAAA,AAAeC,AAAc,AAAA,AAAOA;;AAE/G,AAAA,AAAME,AAAoBC,AAAcC,AAAoBC,AAAaC;AAAzE,AAEE,AAAA,AAAA,AAAC9B,AAAmC,AAACmB,AAAsB,AAAA,AAAOQ,AAAeC,AAAoBC,AAAaC;;AAEpH,AAAA,AAAMC,AAAmBC,AAAOT,AAAcK,AAAoBC;AAAlE,AACE,AAACR,AAAiB,AAACY,AAAsCD,AAAOT,AAAcK,AAAoBC;;AAClG,AAAA,AAAA,AAAC7B,AAAkC,AAACmB,AAAsBI,AAAcK,AAAoBC;;AAE9F,AAAA,AAAMK,AAAaP,AAAcG,AAAaF,AAAoBO;AAAlE,AACE,AAAMC,AAAS,AAACjB;AACVkB,AAAa,AAACC,AAA0BF,AAAS,AAAA,AAAOT;AACxDY,AAAc,AAAA,AAAAC,AAACC,AAAQC,AAAcL;AACrCM,AAAiB,AAAA,AAAA,AAACC,AAAe,AAAA,AAAQjB;AACzCkB,AAAgB,AAACC;AACjBC,AAAiB,AAACC;AAClBC,AAAU,AAAI,AAACC,AACH,AAACC,AACD,AAACC;AARnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASMC,AAAuBvB,AACM,AAACwB,AACA1B,AACE,AAAA,AAAOD,AAChBoB,AACS,AAAA,AAAOE,AACD,AAAA,AAAaA,AAChB,AAAA,AAAUA;AAC7CM,AAAyB,AAAA,AAAA,AAAU,AAAA,AAAa5B,AACrB,AAAC6B,AAAI,AAACC,AAAI,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACC,AAAE,AAAA,AAAA,AAAA,AAAAF,AAAwBb;AAAiBN;AAC1FsB,AAAiC,AAAAC,AAAKP;AAAL,AAAA,AAAAO;AACK,AAAA,AAAClB,AAAe,AAAA,AAAQjB;;AAD7BmC;;;AAEjCC,AAAmB,AAACC;AArB1B,AAuBE,AAAA,AAAA,AAAA,AAAChE,AAAkCoC,AAAS,AAAA,AAAOT,AAAeC;;AAElE,AAAA,AAAA,AAAC5B,AAA4BoC,AAAST,AAAc0B,AAAgBzB,AAAoBS,AAAaU;;AAErG,AAACkB,AAAgC,AAAA,AAAOtC;;AACxC,AAACuC,AAAgBvB,AAAiBb,AAAaiB,AAAiBnB,AAG9D,AAAAuC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAoBM;AAApB,AAAAF,AAAAJ,AAAA,AAA4BO;AAA5B,AACE,AAACxC,AAAAA,AAAAA,AAAauC,AAAAA;;AAGd,AAAMA;AAAN,AACE,AACE,AAAA,AAAA,AAAC1E,AAAoC2B,AAAc,AAACiD,AAAWD,AAAMtC,AAAaU;;AAClF,AAAA,AAAA,AAAA,AAAA,AAAC/C;;AACH,AAAM6D;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACgB;;AADH;;AAJF;;AASA,AAAMC,AAAc,AAAA,AAAClC,AAAe,AAAA,AAAQjB;AAA5C,AACE,AAAA,AAAAoD,AAACC,AAAiBF;AAAlB,AACE,AAAMf,AAAmB,AAACC;AAA1B,AACE,AAAAe,AAACE,AAAqC7C,AAASC,AAAaV;;AAC5D,AAAM,AAAA,AAACuD,AAAK,AAACC,AAAQpB;AAArB,AACE,AAACqB,AAA6B,AAACC;;AADjC;;;;AAGN,AAAUX;AAAV;;AAAA,AAEE,AAAA,AAAA,AAAC1E,AAAmC2B,AAAc0B,AAAgBhB;;AAElE,AAAA,AAAA,AAAA,AAAA,AAACrC,AAAmC,AAACmB,AAAsB,AAAA,AAAOQ,AAAeC,AAAwBE;;;;AAC/GuB;;AAEJ,AAAA,AAAMiC,AAAc3D;AAApB,AACE,AAAC4D,AAA4B5D;;AAE/B,AAAA,AAAM6D,AAAwB7D,AAAcY;AAA5C,AACE,AAACkD,AAAsC9D,AAAcY;;AAEvD,AAAA,AAAMmD,AAAgB/D,AAAcH;AAApC,AAEE,AAACyC,AAAgC,AAAA,AAAOtC;;AACxC,AAAMS,AAAS,AAACjB;AACVkB,AAAa,AAACC,AACAF,AACA,AAAA,AAAOT;AACrBgE,AAAmB,AAAA,AAAC/C,AAAe,AAAA,AAAQpB;AAC3CuC,AAAmB,AAACC;AAL1B,AAME,AAAA,AAAA,AAAChE,AACe,AAAA,AAAO2B,AACPH,AACAa;;AAChB,AAACuD,AAAmBD,AAClB,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzB,AAAA,AAAAyB,AAAA,AAAA,AAAA,AAAA,AAAAxB,AAAAC,AAAAuB,AAAAA;AAAA,AAAAtB,AAAAsB,AAAA,AAAarB;AAAb,AAAAD,AAAAsB,AAAA,AAAoBpB;AAApB,AAAAF,AAAAsB,AAAA,AAA4BnB;AAA5B,AACE,AAAMG,AAAc,AAAA,AAAClC,AAAe,AAAA,AAAQjB;AAA5C,AACE,AAAA,AAAAoE,AAACf,AAAiBF;AAAlB,AACE,AACC,AAAAiB,AAACd,AAAqC7C,AAASC,AAAaV;;AAC5D,AAAM,AAAA,AAACuD,AAAK,AAACC,AAAQpB;AAArB,AACE,AAACqB,AAA6B,AAACC;;AADjC;;;;;AAGb,AAAA,AAAMW,AAAyBrE,AAAcH,AAAayE,AAAcC;AAAxE,AACE,AAACjC,AAAgC,AAAA,AAAOtC;;AACxC,AAAMU,AAAa,AAACC,AAA0B,AAACnB,AAC3B,AAAA,AAAOQ;AACrBwE,AAAY,AAAA,AAAA,AAAID;AAChBE,AAAc,AAAA,AAACxD,AAAe,AAAA,AAAQqD,AAAuBE;AAHnE,AAIE,AAAA,AAAA,AAACnG,AACeqC,AACAV,AACAH,AACAyE,AACAC;;AAChB,AAACG,AAAoBD,AACnB,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlC,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAAjC,AAAAC,AAAAgC,AAAAA;AAAA,AAAA/B,AAAA+B,AAAA,AAAa9B;AAAb,AAAAD,AAAA+B,AAAA,AAAoB7B;AAApB,AAAAF,AAAA+B,AAAA,AAA4B5B;AAA5B,AACE,AAACW,AAAa3D;;;AAEtB,AAAA,AAAM6E,AAAmB7E,AAAcH,AAAaiF;AAApD,AACE,AAAMC,AAAW,AAAA,AAAA,AAAC9D,AAAe,AAAA,AAAQpB;AACnCa,AAAa,AAACC,AAA0B,AAACnB,AAAsB,AAAA,AAAOQ;AAD5E,AAEE,AAAA,AAAA,AAAC3B,AAA0CqC,AAAa,AAAA,AAAOV,AAAe,AAAA,AAAOH,AAAciF;;AACnG,AAACE,AAAsBD,AAAWD,AAChC,AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxC,AAAA,AAAAwC,AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAAC,AAAAsC,AAAAA;AAAA,AAAArC,AAAAqC,AAAA,AAAapC;AAAb,AAAAD,AAAAqC,AAAA,AAAoBC;AAApB,AAAAtC,AAAAqC,AAAA,AAA2BlC;AAA3B,AACE,AAACW,AAAa3D;;;AAEtB,AAAA,AAAOoF,AAAUC;AAAjB,AACE,AAAU,AAAAC,AAAU,AAAA,AAAK,AAAU,AAAAA,AAAUD;;AAE/C,AAAA,AAAME,AAAcvF,AAAcH,AAAa2F,AAAShF;AAAxD,AAEE,AAAC8B,AAAgC,AAAA,AAAOtC;;AACxC,AAAMS,AAAS,AAACjB;AACVkB,AAAa,AAACC,AACAF,AACA,AAAA,AAAOT;AACrByF,AAAmB,AAAA,AAACxE,AAAe,AAAA,AAAQpB;AAC3C6F,AAAoB,AAAA,AAAA,AAAA,AAACC,AAAM9F,AAAoB2F,AACM,AAACJ,AAAS,AAAA,AAAavF;AAC5EuC,AAAmB,AAACC;AAP1B,AASE,AAAA,AAAA,AAAChE,AAA6BoC,AAASC,AAAagF;;AAEpD,AAAA,AAAA,AAACrH,AAAkCoC,AAAS,AAAA,AAAOT,AAAe,AAAA,AAAeH,AAAc,AAAA,AAAOA;;AACtG,AAAC+F,AAAkBH,AAAmBD,AACpC,AAAAK;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApD,AAAA,AAAAoD,AAAA,AAAA,AAAA,AAAA,AAAAnD,AAAAC,AAAAkD,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AAAa/C;AAAb,AACE,AAACvC,AAAAA,AAAAA,AAAauC,AAAAA;;AACd,AAAMI,AAAc,AAAA,AAAClC,AAAe,AAAA,AAAQjB;AAA5C,AACE,AAAA,AAAA+F,AAAC1C,AAAiBF;AAAlB,AAAiC,AAAA4C,AAACzC,AAAqC7C,AAASC,AAAaV;;;AAC/F,AAAU+C;AAAV;AAAA,AAEE,AAAA,AAAA,AAAC1E,AAAoC2B,AAAcH,AAAaa;;AAEhE,AAAA,AAAA,AAAA,AAACrC,AAAmCoC,AAAS,AAAA,AAAOT,AAAe,AAAA,AAAcH,AAAc,AAAA,AAAOA,AAAc2F;;;AACtH,AAAM,AAAA,AAACjC,AAAK,AAACC,AAAQpB;AAArB,AACE,AAACqB,AAA6B,AAACC;;AADjC;;;;AAEJgC;;AAEJ,AAAA,AAAMM,AAAmBC;AAAzB,AACE,AAAMC,AAAiB,AAAC1G;AAClB2G,AAAW,AAAA,AAAgBF;AAC3BvF,AAAa,AAACC,AAA0BuF,AAAiBC;AACzDC,AAAW,AAACC,AAAkBH,AAAiBC;AAHrD,AAIE,AAAA,AAAA,AAAC9H,AAA8CqC,AAAauF;;AAC5D,AAAMG;AAAN,AACE,AAACzC,AAAayC;;AADhB;;;AAGJ,AAAA,AAAME,AAAmBL;AAAzB,AACE,AAAMC,AAAiB,AAAC1G;AAClB2G,AAAW,AAAA,AAAgBF;AAC3BG,AAAW,AAACC,AAAkBH,AAAiBC;AAFrD,AAGE,AAAA,AAAA,AAAC9H,AAA8C6H,AAAiBD;;AAChE,AAAMG;AAAN,AACE,AAACzC,AAAayC;;AADhB;;;AAGJ,AAAA,AAAMG,AAAgBN;AAAtB,AACE,AAAMC,AAAiB,AAAC1G;AAClBgH,AAAa,AAAA,AAAeP;AAC5BE,AAAW,AAAA,AAAgBF;AAC3BG,AAAW,AAACC,AAAkBH,AAAiBC;AAC/CM,AAAW,AAACC,AAA6BF;AACzCpF,AAAiB,AAAA,AAAO,AAAA,AAAc6E;AACtCrF,AAAc,AAAA,AAAAC,AAACC,AAAQC,AAAc,AAACJ,AAA0BuF,AAAiBC;AACjFQ,AAAgB,AAAC7E,AAAI,AAAA,AAAA8E,AAACC;AAAD,AAAU,AAAC5E,AAAE,AAAA,AAAA2E,AAAUxF;AAAkBR;AAC9DwB,AAAmB,AAACC;AAR1B,AASE,AAEE,AAACR,AAAIuE;AACL,AAACU,AAAkC,AAAAC,AAAI,AAAA,AAAaN;AAAjB,AAAA,AAAAM;AAAAA;;AAA6BP;;AAAcL,AAC7E,AAAKpD,AAAQD;AAAb,AAEE,AAAMC;AAAN,AACE,AAACY,AAAa,AAAC0C,AAAkBH,AAAiBC;;AADpD;;;;AANL,AASE,AAACtE,AAAI8E;AACL,AACE,AAAA,AAAA,AAACtI,AAA2C6H,AAAiBE,AAAWH;;AAExE,AAAI,AAAA,AAAC1C,AAAK,AAACC,AAAQpB;AACjB,AAACqB,AAA6B,AAACC;;AAC/B,AAAA,AAAA,AAACrF,AAAwC6H,AAAiB9D;;;AAfhE;;;AAgBA,AAAMgE;AAAN,AACE,AAACzC,AAAayC;;AADhB;;;AAGJ,AAAA,AAAMY;AAAN,AACE,AAAA,AAAA,AAAAC,AAACC;AAAD,AACkB,AAAA,AAACC,AAAc;AAAA,AAAO,AAACZ,AAAe,AAAA,AAAAU;;;;AACxD,AAAA,AAAA,AAAAG,AAACF;AAAD,AACkB,AAAClB,AAAkB,AAAA,AAAAoB;;;AACrC,AAAA,AAAA,AAAAC,AAACH;AAAD,AACkB,AAACZ,AAAkB,AAAA,AAAAe","names":["oc.web.actions.comment/add-comment-focus","focus-value","oc.web.dispatcher/dispatch!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.comment/reply-to","p__43116","vec__43117","cljs.core.nth","seq43113","G__43114","cljs.core/first","cljs.core/next","G__43115","self__4723__auto__","parent-body","focus-field?","oc.web.dispatcher.current_org_slug","oc.web.actions.comment/reset-reply-to","oc.web.actions.comment/add-comment-blur","oc.web.actions.comment/edit-comment","activity-uuid","comment-data","oc.web.actions.comment/stop-comment-edit","oc.web.actions.comment/add-comment-change","activity-data","parent-comment-uuid","comment-uuid","comment-body","oc.web.actions.comment/add-comment-reset","prefix","oc.web.utils.comment.add_comment_focus_value","oc.web.actions.comment/add-comment","save-done-cb","org-slug","comments-key","oc.web.dispatcher/activity-comments-key","comments-data","cljs.core/deref","cljs.core.get_in","oc.web.dispatcher/app-state","add-comment-link","oc.web.lib.utils.link_for","current-user-id","oc.web.lib.jwt/user-id","new-comment-uuid","oc.web.lib.utils/activity-uuid","user-data","oc.web.lib.jwt/jwt","oc.web.lib.jwt/get-contents","oc.web.lib.jwt.get_id_token_contents","new-comment-map","oc.web.lib.utils/as-of-now","first-comment-from-user?","cljs.core/not","cljs.core/seq","p1__43124#","cljs.core.filter","cljs.core._EQ_","should-show-follow-notification?","and__4115__auto__","current-board-slug","oc.web.dispatcher.current_board_slug","oc.web.actions.activity/send-item-read","oc.web.api/add-comment","p__43127","map__43128","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","status","success","body","oc.web.lib.json/json->cljs","oc.web.actions.notifications/show-notification","comments-link","p1__43126#","oc.web.api/get-comments","oc.web.utils.activity/get-comments-finished","cljs.core.not_EQ_","cljs.core.keyword","oc.web.actions.activity.replies_get","oc.web.dispatcher.org_data","oc.web.actions.comment/get-comments","oc.web.utils.activity/get-comments","oc.web.actions.comment/get-comments-if-needed","oc.web.utils.activity.get_comments_if_needed","oc.web.actions.comment/delete-comment","delte-comment-link","oc.web.api/delete-comment","p__43138","map__43139","p1__43136#","oc.web.actions.comment/comment-reaction-toggle","reaction-data","reacting?","link-method","reaction-link","oc.web.api/toggle-reaction","p__43142","map__43143","oc.web.actions.comment/react-from-picker","emoji","react-link","oc.web.api/react-from-picker","p__43145","map__43146","succes","oc.web.actions.comment/inc-time","t","js/Date","oc.web.actions.comment/save-comment","new-body","patch-comment-link","updated-comment-map","cljs.core.merge","oc.web.api/patch-comment","p__43149","map__43150","p1__43148#","oc.web.actions.comment/ws-comment-update","interaction-data","current-org-slug","entry-uuid","entry-data","oc.web.dispatcher.activity_data","oc.web.actions.comment/ws-comment-delete","oc.web.actions.comment/ws-comment-add","container-id","board-data","oc.web.utils.activity/board-by-uuid","comment-exists?","p1__43155#","cljs.core/filterv","oc.web.actions.cmail.get_entry_with_uuid","or__4126__auto__","oc.web.actions.comment/subscribe","p1__43156#","oc.web.ws.interaction-client/subscribe","oc.web.lib.utils/after","p1__43157#","p1__43158#"],"sourcesContent":["(ns oc.web.actions.comment\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.ws.interaction-client :as ws-ic]\n            [oc.web.utils.comment :as comment-utils]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.stores.comment :as comment-store]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.actions.notifications :as notification-actions]))\n\n(defn add-comment-focus [focus-value]\n  (dis/dispatch! [:add-comment-focus focus-value]))\n\n(defn reply-to [focus-value parent-body & [focus-field?]]\n  (dis/dispatch! [:add-comment/reply (dis/current-org-slug) focus-value {:body parent-body :focus focus-field?}]))\n\n(defn reset-reply-to [focus-value]\n  (dis/dispatch! [:add-comment/reset-reply (dis/current-org-slug) focus-value]))\n\n(defn add-comment-blur [focus-value]\n  (dis/dispatch! [:add-comment-blur focus-value]))\n\n(defn edit-comment [activity-uuid comment-data]\n  (dis/dispatch! [:add-comment-change (dis/current-org-slug) activity-uuid (:reply-parent comment-data) (:uuid comment-data) (:body comment-data)]))\n\n(defn stop-comment-edit [activity-uuid comment-data]\n  (dis/dispatch! [:add-comment-change (dis/current-org-slug) activity-uuid (:reply-parent comment-data) (:uuid comment-data) nil]))\n\n(defn add-comment-change [activity-data parent-comment-uuid comment-uuid comment-body]\n  ;; Save the comment change in the app state to remember it\n  (dis/dispatch! [:add-comment-change (dis/current-org-slug) (:uuid activity-data) parent-comment-uuid comment-uuid comment-body]))\n\n(defn add-comment-reset [prefix activity-uuid parent-comment-uuid comment-uuid]\n  (add-comment-blur (comment-utils/add-comment-focus-value prefix activity-uuid parent-comment-uuid comment-uuid))\n  (dis/dispatch! [:add-comment-reset (dis/current-org-slug) activity-uuid parent-comment-uuid comment-uuid]))\n\n(defn add-comment [activity-data comment-body parent-comment-uuid save-done-cb]\n  (let [org-slug (dis/current-org-slug)\n        comments-key (dis/activity-comments-key org-slug (:uuid activity-data))\n        comments-data (get-in @dis/app-state comments-key)\n        add-comment-link (utils/link-for (:links activity-data) \"create\" \"POST\")\n        current-user-id (jwt/user-id)\n        new-comment-uuid (utils/activity-uuid)\n        user-data (if (jwt/jwt)\n                    (jwt/get-contents)\n                    (jwt/get-id-token-contents))\n        new-comment-map {:body comment-body\n                         :created-at (utils/as-of-now)\n                         :parent-uuid parent-comment-uuid\n                         :resource-uuid (:uuid activity-data)\n                         :uuid new-comment-uuid\n                         :author {:name (:name user-data)\n                                  :avatar-url (:avatar-url user-data)\n                                  :user-id (:user-id user-data)}}\n        first-comment-from-user? (when-not (:publisher? activity-data)\n                                   (not (seq (filter #(= (-> % :author :user-id) current-user-id) comments-data))))\n        should-show-follow-notification? (and first-comment-from-user?\n                                              (utils/link-for (:links activity-data) \"follow\"))\n        current-board-slug (dis/current-board-slug)]\n    ;; Reset the add comment field\n    (dis/dispatch! [:add-comment-reset org-slug (:uuid activity-data) parent-comment-uuid nil])\n    ;; Add the comment to the app-state to show it immediately\n    (dis/dispatch! [:comment-add org-slug activity-data new-comment-map parent-comment-uuid comments-key new-comment-uuid])\n    ;; Send WRT read on comment add\n    (activity-actions/send-item-read (:uuid activity-data))\n    (api/add-comment add-comment-link comment-body new-comment-uuid parent-comment-uuid\n      ;; Once the comment api request is finished refresh all the comments, no matter\n      ;; if it worked or not\n      (fn [{:keys [status success body]}]\n        (save-done-cb success)\n        ;; If the user is not the publisher of the post and is leaving his first comment on it\n        ;; let's inform them that they are now following the post\n        (when success\n          (do\n            (dis/dispatch! [:comment-add/replace activity-data (json->cljs body) comments-key new-comment-uuid])\n            (dis/dispatch! [:ropute/rewrite :refresh true]))\n          (when should-show-follow-notification?\n            (notification-actions/show-notification {:title \"You are now following this post.\"\n                                                     :dismiss true\n                                                     :expire 3\n                                                     :id :first-comment-follow-post})))\n        (let [comments-link (utils/link-for (:links activity-data) \"comments\")]\n          (api/get-comments comments-link\n           #(let [current-board-slug (dis/current-board-slug)]\n              (activity-utils/get-comments-finished org-slug comments-key activity-data %)\n              (when (not= (keyword current-board-slug) :replies)\n                (activity-actions/replies-get (dis/org-data))))))\n        ;; In case save didn't go well let's re-set the comment body in the add comment field\n        (when-not success\n          ;; Remove the newly added comment if still in the list\n          (dis/dispatch! [:comment-add/failed activity-data new-comment-map comments-key])\n          ;; Move the comment back in the body field\n          (dis/dispatch! [:add-comment-change (dis/current-org-slug) (:uuid activity-data) parent-comment-uuid nil comment-body true]))))\n    new-comment-map))\n\n(defn get-comments [activity-data]\n  (activity-utils/get-comments activity-data))\n\n(defn get-comments-if-needed [activity-data comments-data]\n  (activity-utils/get-comments-if-needed activity-data comments-data))\n\n(defn delete-comment [activity-data comment-data]\n  ;; Send WRT read on comment delete\n  (activity-actions/send-item-read (:uuid activity-data))\n  (let [org-slug (dis/current-org-slug)\n        comments-key (dis/activity-comments-key\n                      org-slug\n                      (:uuid activity-data))\n        delte-comment-link (utils/link-for (:links comment-data) \"delete\")\n        current-board-slug (dis/current-board-slug)]\n    (dis/dispatch! [:comment-delete\n                    (:uuid activity-data)\n                    comment-data\n                    comments-key])\n    (api/delete-comment delte-comment-link\n      (fn [{:keys [status success body]}]\n        (let [comments-link (utils/link-for (:links activity-data) \"comments\")]\n          (api/get-comments comments-link\n           #(do\n             (activity-utils/get-comments-finished org-slug comments-key activity-data %)\n             (when (not= (keyword current-board-slug) :replies)\n               (activity-actions/replies-get (dis/org-data))))))))))\n\n(defn comment-reaction-toggle [activity-data comment-data reaction-data reacting?]\n  (activity-actions/send-item-read (:uuid activity-data))\n  (let [comments-key (dis/activity-comments-key (dis/current-org-slug)\n                      (:uuid activity-data))\n        link-method (if reacting? \"PUT\" \"DELETE\")\n        reaction-link (utils/link-for (:links reaction-data) \"react\" link-method)]\n    (dis/dispatch! [:comment-reaction-toggle\n                    comments-key\n                    activity-data\n                    comment-data\n                    reaction-data\n                    reacting?])\n    (api/toggle-reaction reaction-link\n      (fn [{:keys [status success body]}]\n        (get-comments activity-data)))))\n\n(defn react-from-picker [activity-data comment-data emoji]\n  (let [react-link (utils/link-for (:links comment-data) \"react\" \"POST\")\n        comments-key (dis/activity-comments-key (dis/current-org-slug) (:uuid activity-data))]\n    (dis/dispatch! [:comment-react-from-picker comments-key (:uuid activity-data) (:uuid comment-data) emoji])\n    (api/react-from-picker react-link emoji\n      (fn [{:keys [status succes body]}]\n        (get-comments activity-data)))))\n\n(defn- inc-time [t]\n  (.getTime (js/Date. (inc (.getTime (js/Date. t))))))\n\n(defn save-comment [activity-data comment-data new-body save-done-cb]\n  ;; Send WRT on comment update\n  (activity-actions/send-item-read (:uuid activity-data))\n  (let [org-slug (dis/current-org-slug)\n        comments-key (dis/activity-comments-key\n                      org-slug\n                      (:uuid activity-data))\n        patch-comment-link (utils/link-for (:links comment-data) \"partial-update\")\n        updated-comment-map (merge comment-data {:body new-body\n                                                 :updated-at (inc-time (:updated-at comment-data))})\n        current-board-slug (dis/current-board-slug)]\n    ;; Add the new comment to the list of comments\n    (dis/dispatch! [:comment-save org-slug comments-key updated-comment-map])\n    ;; Reset the add comment field\n    (dis/dispatch! [:add-comment-reset org-slug (:uuid activity-data) (:reply-parent comment-data) (:uuid comment-data)])\n    (api/patch-comment patch-comment-link new-body\n      (fn [{:keys [success]}]\n        (save-done-cb success)\n        (let [comments-link (utils/link-for (:links activity-data) \"comments\")]\n          (api/get-comments comments-link #(activity-utils/get-comments-finished org-slug comments-key activity-data %)))\n        (when-not success\n          ;; Remove the newly added comment if still in the list\n          (dis/dispatch! [:comment-save/failed activity-data comment-data comments-key])\n          ;; Move the comment back in the body field\n          (dis/dispatch! [:add-comment-change org-slug (:uuid activity-data) (:parent-uuid comment-data) (:uuid comment-data) new-body true]))\n        (when (not= (keyword current-board-slug) :replies)\n          (activity-actions/replies-get (dis/org-data)))))\n    updated-comment-map))\n\n(defn ws-comment-update [interaction-data]\n  (let [current-org-slug (dis/current-org-slug)\n        entry-uuid (:resource-uuid interaction-data)\n        comments-key (dis/activity-comments-key current-org-slug entry-uuid)\n        entry-data (dis/activity-data current-org-slug entry-uuid)]\n    (dis/dispatch! [:ws-interaction/comment-update comments-key interaction-data])\n    (when entry-data\n      (get-comments entry-data))))\n\n(defn ws-comment-delete [interaction-data]\n  (let [current-org-slug (dis/current-org-slug)\n        entry-uuid (:resource-uuid interaction-data)\n        entry-data (dis/activity-data current-org-slug entry-uuid)]\n    (dis/dispatch! [:ws-interaction/comment-delete current-org-slug interaction-data])\n    (when entry-data\n      (get-comments entry-data))))\n\n(defn ws-comment-add [interaction-data]\n  (let [current-org-slug (dis/current-org-slug)\n        container-id (:container-id interaction-data)\n        entry-uuid (:resource-uuid interaction-data)\n        entry-data (dis/activity-data current-org-slug entry-uuid)\n        board-data (activity-utils/board-by-uuid container-id)\n        new-comment-uuid (:uuid (:interaction interaction-data))\n        comments-data (get-in @dis/app-state (dis/activity-comments-key current-org-slug entry-uuid))\n        comment-exists? (seq (filterv #(= (:uuid %) new-comment-uuid) comments-data))\n        current-board-slug (dis/current-board-slug)]\n    (cond\n      ;; In case the entry is not loaded let's load it\n      (not entry-data)\n      (cmail-actions/get-entry-with-uuid (or (:board-slug board-data) container-id) entry-uuid\n       (fn [success status]\n         ;; And if the entry was loaded w/o problems let's load the comments\n         (when success\n           (get-comments (dis/activity-data current-org-slug entry-uuid)))))\n\n      (not comment-exists?)\n      (do\n        (dis/dispatch! [:ws-interaction/comment-add current-org-slug entry-data interaction-data])\n        ;; If we are not on replies we can refresh the container to load the latest data\n        (if (not= (keyword current-board-slug) :replies)\n          (activity-actions/replies-get (dis/org-data))\n          (dis/dispatch! [:update-replies-comments current-org-slug current-board-slug]))))\n    (when entry-data\n      (get-comments entry-data))))\n\n(defn subscribe []\n  (ws-ic/subscribe :interaction-comment/add\n                   #(utils/after 0 (fn [] (ws-comment-add (:data %)))))\n  (ws-ic/subscribe :interaction-comment/update\n                   #(ws-comment-update (:data %)))\n  (ws-ic/subscribe :interaction-comment/delete\n                   #(ws-comment-delete (:data %))))\n"]}