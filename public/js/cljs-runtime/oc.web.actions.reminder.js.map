{"version":3,"sources":["oc/web/actions/reminder.cljs"],"mappings":"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","names":["oc.web.actions.reminder/load-reminders-roster","oc.web.local-settings/reminders-enabled?","reminders-data","oc.web.dispatcher.reminders_data","roster-link","oc.web.lib.utils.link_for","oc.web.api/get-reminders-roster","p__39961","map__39962","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","success","body","status","oc.web.dispatcher/dispatch!","oc.web.dispatcher.current_org_slug","oc.web.lib.json/json->cljs","p__39964","map__39965","oc.web.actions.reminder/reminders-loaded","parsed-body","parsed-reminders","oc.web.utils.reminder/parse-reminders","oc.web.dispatcher.reminders_roster_data","oc.web.actions.reminder/load-reminders","temp__33777__auto__","org-data","oc.web.dispatcher.org_data","reminders-link","oc.web.api/get-reminders","oc.web.actions.reminder/edit-reminder","reminder-uuid","oc.web.actions.nav-sidebar/edit-reminder","oc.web.actions.reminder/new-reminder","oc.web.actions.nav-sidebar/show-new-reminder","oc.web.actions.reminder/update-reminder","value-or-fn","oc.web.actions.reminder/save-reminder","reminder-data","refresh-reminders","update-reminder-link","oc.web.api/update-reminder","p__39972","map__39973","oc.web.actions.notifications/show-notification","add-reminder-link","oc.web.api/add-reminder","p__39983","map__39984","self-reminder","cljs.core._EQ_","oc.web.dispatcher.current_user_data","oc.web.actions.reminder/cancel-edit-reminder","oc.web.actions.nav-sidebar/close-reminders","oc.web.actions.reminder/delete-reminder","cljs.core/first","p1__39986#","cljs.core.filter","delete-reminder-link","oc.web.actions.nav-sidebar/show-reminders","oc.web.api/delete-reminder","p__39990","map__39991"],"sourcesContent":["(ns oc.web.actions.reminder\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [oc.web.api :as api]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.utils.reminder :as reminder-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.notifications :as notification-actions]))\n\n(defn load-reminders-roster\n  \"Load the roster of the users that can be assigned to reminders.\"\n  []\n  (when ls/reminders-enabled?\n    (let [reminders-data (dis/reminders-data)\n          roster-link (utils/link-for (:links reminders-data) \"roster\")]\n      (when roster-link\n        (api/get-reminders-roster roster-link\n         (fn [{:keys [success body status]}]\n           (when success\n             (dis/dispatch! [:reminders-roster-loaded (dis/current-org-slug) (json->cljs body)]))))))))\n\n(defn- reminders-loaded\n  \"Reminders data loaded, parse and dispatch the content to the app-state.\"\n  [{:keys [success body status]}]\n  (when success\n    (let [parsed-body (json->cljs body)\n          reminders-data (:collection parsed-body)\n          parsed-reminders (reminder-utils/parse-reminders reminders-data)]\n      (dis/dispatch! [:reminders-loaded (dis/current-org-slug) parsed-reminders])\n      ;; Load the roster if it's not present yet\n      (when-not (dis/reminders-roster-data)\n        (load-reminders-roster)))))\n\n(defn load-reminders\n  \"\n  Load the reminders list.\n  NB: first reminders is loaded in did-mount of dashboard-layout component.\"\n  []\n  (when ls/reminders-enabled?\n    (when-let* [org-data (dis/org-data)\n                reminders-link (utils/link-for (:links org-data) \"reminders\")]\n      (api/get-reminders reminders-link reminders-loaded))))\n\n(defn edit-reminder\n  \"Move a reminder in the edit location of the app-state and open the edit component.\"\n  [reminder-uuid]\n  (dis/dispatch! [:edit-reminder (dis/current-org-slug) reminder-uuid])\n  ; (dis/dispatch! [:input [:show-reminders] reminder-uuid])\n  (nav-actions/edit-reminder reminder-uuid))\n\n(defn new-reminder\n  \"Move an empty reminder in the edit location of the app-state and open the edit component.\"\n  []\n  (dis/dispatch! [:edit-reminder (dis/current-org-slug)])\n  ; (dis/dispatch! [:input [:show-reminders] :new])\n  (nav-actions/show-new-reminder))\n\n(defn update-reminder\n  \"Update a reminder map.\"\n  [reminder-uuid value-or-fn]\n  (dis/dispatch! [:update-reminder (dis/current-org-slug) reminder-uuid value-or-fn]))\n\n(defn save-reminder\n  \"\n  Save a reminder moving it into the local list and also by creating or updating it on the server.\n  Refresh the list of reminders when finished.\n  \"\n  [reminder-data]\n  (dis/dispatch! [:save-reminder (dis/current-org-slug) reminder-data])\n  (let [reminders-data (dis/reminders-data)\n        reminders-link (utils/link-for (:links reminders-data) \"self\")\n        refresh-reminders #(api/get-reminders reminders-link reminders-loaded)]\n    (if (:uuid reminder-data)\n      (let [update-reminder-link (utils/link-for (:links reminder-data) \"partial-update\")]\n        (api/update-reminder update-reminder-link reminder-data\n         (fn [{:keys [status success body]}]\n           (if success\n             (notification-actions/show-notification {:title \"Reminder updated\"\n                                                      :primary-bt-title \"OK\"\n                                                      :primary-bt-dismiss true\n                                                      :expire 3\n                                                      :id :reminder-updated})\n             (do\n              (dis/dispatch! [:save-reminder/error (dis/current-org-slug) reminder-data])\n              (notification-actions/show-notification {:title \"An error occurred\"\n                                                       :description \"Please try again\"\n                                                       :primary-bt-title \"OK\"\n                                                       :primary-bt-dismiss true\n                                                       :expire 3\n                                                       :id :reminder-update-failed})\n              (nav-actions/edit-reminder (:uuid reminder-data))))\n           (refresh-reminders))))\n      (let [add-reminder-link (utils/link-for (:links reminders-data) \"create\")]\n        (api/add-reminder add-reminder-link reminder-data\n         (fn [{:keys [status success body]}]\n           (if success\n             (let [self-reminder (= (:user-id (:assignee reminder-data))\n                                    (:user-id (dis/current-user-data)))]\n               (notification-actions/show-notification {:title (if self-reminder\n                                                                \"Reminder created\"\n                                                                \"Reminder created and teammate notified\")\n                                                        :primary-bt-title \"OK\"\n                                                        :primary-bt-dismiss true\n                                                        :expire 3\n                                                        :id :reminder-create}))\n             (do\n              (dis/dispatch! [:save-reminder/error (dis/current-org-slug) reminder-data])\n              (notification-actions/show-notification {:title \"An error occurred\"\n                                                       :description \"Please try again\"\n                                                       :primary-bt-title \"OK\"\n                                                       :primary-bt-dismiss true\n                                                       :expire 3\n                                                       :id :reminder-update-failed})\n              (nav-actions/show-new-reminder)))\n           (refresh-reminders)))))))\n\n(defn cancel-edit-reminder\n  \"Exit edit losing changes.\"\n  []\n  (dis/dispatch! [:cancel-edit-reminder (dis/current-org-slug)])\n  (nav-actions/close-reminders))\n\n(defn delete-reminder\n  \"Delete a reminder.\"\n  [reminder-uuid]\n  (let [reminders-data (dis/reminders-data)\n        reminder-data (first (filter #(= (:uuid %) reminder-uuid) (:items reminders-data)))\n        delete-reminder-link (utils/link-for (:links reminder-data) \"delete\")\n        reminders-link (utils/link-for (:links reminders-data) \"self\")]\n    (dis/dispatch! [:delete-reminder (dis/current-org-slug) reminder-uuid])\n    (nav-actions/show-reminders)\n    (api/delete-reminder delete-reminder-link\n      (fn [{:keys [status success body]}]\n        (when success\n          (notification-actions/show-notification {:title \"Reminder deleted\"\n                                                   :primary-bt-title \"OK\"\n                                                   :primary-bt-dismiss true\n                                                   :expire 3\n                                                   :id :reminder-deleted}))\n        (api/get-reminders reminders-link reminders-loaded)))))"]}