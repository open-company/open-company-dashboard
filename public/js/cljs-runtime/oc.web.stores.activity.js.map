{"version":3,"sources":["oc/web/stores/activity.cljs"],"mappings":"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","names":["oc.web.stores.activity/item-from-entity","entry","cljs.core/select-keys","oc.web.utils.activity/preserved-keys","oc.web.stores.activity/sort-value","sort-type","item","cljs.core.update","v","sort-key","G__43570","cljs.core._EQ_","activity-data","cljs.core/contains?","oc.web.dispatcher.activity_data","oc.web.lib.utils.js_date","cljs.core.get","oc.web.stores.activity/add-remove-item-from-all-posts","db","org-slug","is-published?","ap-rp-key","oc.web.dispatcher.container_key","oc.web.dispatcher/recently-posted-sort","ap-ra-key","oc.web.dispatcher/recent-activity-sort","old-ap-rp-data","cljs.core.get_in","old-ap-ra-data","old-ap-rp-data-posts","old-ap-ra-data-posts","ap-rp-without-uuid","p1__43571#","cljs.core/filterv","cljs.core.not_EQ_","ap-ra-without-uuid","p1__43572#","new-ap-rp-list","cljs.core/vec","cljs.core.conj","new-ap-ra-list","new-ap-rp-with-sort-value","cljs.core.map","cljs.core.partial","new-ap-ra-with-sort-value","sorted-new-ap-rp-uuids","cljs.core/reverse","cljs.core.sort_by","sorted-new-ap-ra-uuids","next-ap-rp-data","cljs.core.assoc","next-ap-ra-data","org-data","oc.web.dispatcher.org_data","active-users","oc.web.dispatcher.active_users","parsed-ap-rp-data","oc.web.utils.activity.parse_container","cljs.core.dissoc","parsed-ap-ra-data","tdb","cljs.core/assoc-in","oc.web.stores.activity/add-remove-item-from-board","rp-board-data-key","oc.web.dispatcher.board_data_key","ra-board-data-key","rp-old-board-data","ra-old-board-data","rp-old-board-data-posts","ra-old-board-data-posts","rp-board-without-uuid","p1__43573#","ra-board-without-uuid","p1__43574#","new-rp-list","new-ra-list","new-rp-with-sort-value","new-ra-with-sort-value","sorted-new-rp-uuids","sorted-new-ra-uuids","change-data","oc.web.dispatcher.change_data","follow-boards-list","oc.web.dispatcher.follow_boards_list","parsed-rp-board-data","oc.web.utils.activity/parse-board","parsed-ra-board-data","oc.web.stores.activity/add-remove-item-from-bookmarks","is-bookmark?","bm-key","old-bm-data","old-bm-data-posts","bm-without-item","p1__43575#","cljs.core.filter","new-bm-items","with-bookmarked-at","p1__43576#","sorted-new-bm-posts","next-bm-data","oc.web.stores.activity/add-published-post-to-home","fl-rp-key","fl-ra-key","old-fl-rp-data","old-fl-ra-data","activity-item","first-rp-item","cljs.core/first","first-ra-item","rp-activity-item","cljs.core/not","oc.web.utils.activity/entry?","ra-activity-item","new-fl-rp-data","p1__43577#","cljs.core.concat","p1__43578#","new-fl-ra-data","p1__43579#","p1__43580#","oc.web.stores.activity/add-remove-item-from-follow","following-container?","follow-list","oc.web.dispatcher.follow_list","publisher-id","include-activity?","or__4126__auto__","and__4115__auto__","fexpr__43608","cljs.core/set","G__43612","fexpr__43611","oc.web.lib.jwt/user-id","fexpr__43616","G__43618","fexpr__43617","container-slug","old-fl-rp-data-posts","old-fl-ra-data-posts","fl-rp-without-uuid","p1__43581#","fl-ra-without-uuid","p1__43582#","new-fl-rp-uuids","new-fl-ra-uuids","new-fl-rp-with-sort-value","new-fl-ra-with-sort-value","sorted-new-fl-rp-uuids","sorted-new-fl-ra-uuids","next-fl-rp-data","next-fl-ra-data","parsed-fl-rp-data","parsed-fl-ra-data","oc.web.stores.activity/add-remove-item-from-contributions","map__43621","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","map__43622","contributions-list-key","oc.web.dispatcher/contributions-list-key","author-uuid","rp-contributions-data-key","oc.web.dispatcher.contributions_data_key","ra-contributions-data-key","rp-old-data","ra-old-data","rp-old-data-posts","ra-old-data-posts","rp-without-uuid","p1__43619#","ra-without-uuid","p1__43620#","rp-new-uuids","ra-new-uuids","rp-with-sort-value","ra-with-sort-value","rp-sorted-new-uuids","ra-sorted-new-uuids","rp-new-posts-list","ra-new-posts-list","follow-publishers-list","oc.web.dispatcher.follow_publishers_list","parsed-rp-data","oc.web.utils.activity/parse-contributions","parsed-ra-data","oc.web.dispatcher/action","p__43627","vec__43628","cljs.core.nth","_","p__43634","vec__43635","enabled?","p__43638","vec__43640","dispatch-input-key","attachment-data","old-attachments","next-attachments","p__43644","vec__43645","p1__43643#","p__43648","vec__43649","edit-key","p__43652","vec__43653","p__43656","vec__43657","oc.web.lib.utils/post-org-slug","board-slug","activity-key","oc.web.dispatcher/activity-key","activity-board-data","oc.web.dispatcher.board_data","fixed-activity-data","oc.web.utils.activity.parse_entry","next-db","with-edited-key","cljs.core.update_in","cljs.core/dissoc","without-entry-save-on-exit","p__43660","vec__43661","cljs.core/assoc","p__43664","vec__43665","p__43668","vec__43669","error","p__43672","vec__43673","new-board-data","oc.web.lib.utils/section-org-slug","org-data-key","oc.web.dispatcher/org-data-key","contributions-count-key","posts-key","oc.web.dispatcher/posts-data-key","board-key","fixed-board-data","oc.web.utils.activity.parse_board","merged-items","cljs.core.merge","cljs.core/inc","p__43687","vec__43688","board-data","oc.web.utils.activity/board-by-uuid","p1__43676#","cljs.core/seq","oc.web.lib.utils/as-of-now","ndb","p__43700","vec__43701","p__43711","vec__43712","posts-data","oc.web.dispatcher.posts_data","next-posts","containers-key","oc.web.dispatcher/containers-key","with-fixed-containers","cljs.core.reduce","ckey","container-rp-key","container-ra-key","rp-data","ra-data","rp?","cljs.core/map?","ra?","updated-rp-data","items-list","p1__43705#","updated-ra-data","p1__43706#","tndb","cljs.core/keys","with-fixed-contribs","contrib-data-key","oc.web.dispatcher.contributions_key","contrib-posts-list-key","contrib-data","updated-contrib-data","posts-list","p1__43709#","parsed-contrib-data","boards-key","oc.web.dispatcher/boards-key","with-fixed-boards","board-data-key","posts-list-key","updated-board-data","p1__43710#","parsed-board-data","oc.web.dispatcher/cmail-data-key","cljs.core/dec","p__43717","vec__43718","p__43721","vec__43722","container-element-id","share-medium","p__43727","vec__43730","p__43733","vec__43734","p__43740","vec__43741","share-data","p__43744","vec__43745","success","shared-data","p__43748","vec__43749","p__43753","vec__43755","map__43758","board-uuid","activity-uuid","secure-uuid","oc.web.dispatcher/secure-activity-key","p1__43752#","updated-activity-data","p__43767","vec__43768","p__43771","vec__43772","old-activity-data","failed-activity-data","p__43781","vec__43782","status","update-cmail?","cljs.core/compare","G__43789","p1__43779#","oc.web.dispatcher/cmail-state-key","oc.web.lib.utils/activity-uuid","p1__43780#","oc.web.dispatcher/user-notifications-key","oc.web.utils.notification.fix_notifications","p__43800","vec__43801","bookmark?","bookmarks-count-key","current-bookmarks-count","bookmark-link-index","p1__43798#","oc.web.lib.utils/index-of","next-activity-data*","next-activity-data","next-bookmarks-count","tmp","bk-key","p__43825","vec__43826","cljs.core/merge","oc.web.stores.activity/all-posts-get-finish","all-posts-data","prepare-all-posts-data","fixed-all-posts-data","old-posts","container-key","p1__43829#","p__43851","vec__43856","p__43859","vec__43860","p__43874","vec__43875","container-data","next-posts-data","p__43883","vec__43884","org","direction","posts-data-key","new-items-map","new-container-data","p1__43879#","oc.web.stores.activity/bookmarks-get-finish","bookmarks-data","prepare-bookmarks-data","fixed-bookmarks-data","p1__43891#","oc.web.utils.org/disappearing-count-value","p1__43892#","p__43893","vec__43894","p__43897","vec__43898","p__43902","vec__43903","p1__43901#","p__43908","vec__43909","p1__43906#","p1__43907#","p__43913","vec__43914","entry-data","bookmarks-key","p1__43912#","p__43918","vec__43919","p1__43917#","p__43936","vec__43937","items-count","old-reads-data","oc.web.dispatcher/activities-read-key","ks","vs","p1__43935#","cljs.core/zipmap","new-items-count","last-read-at-map","activities-key","p__43944","vec__43945","activity-last-read-at","oc.web.dispatcher/entry-data","oc.web.dispatcher/activity-last-read-at-key","p__43953","vec__43954","item-id","read-data-count","read-data","team-roster","roster-data","oc.web.dispatcher.team_roster","p1__43948#","fixed-read-data","p1__43949#","team-users","oc.web.utils.user/filter-active-users","seen-ids","private-access?","all-private-users","filtered-users","p1__43950#","G__43979","all-ids","unseen-ids","clojure.set.difference","unseen-users","user-id","p1__43951#","current-user-id","current-user-reads","p1__43952#","last-read-at","cljs.core/last","current-posts-uuids","oc.web.dispatcher.filtered_posts_data","p__43994","vec__43995","video-id","uploading-video-key","oc.web.dispatcher/uploading-video-key","p__43998","vec__43999","initial-entry-map","keys-for-edit","current-edit","with-board-keys","is-same-video?","with-video-keys","video-error","map-for-edit","p__44002","vec__44003","cljs.core/butlast","p__44011","vec__44012","section-change-key","oc.web.dispatcher/change-data-key","activity-read-key","p1__44010#","p__44017","vec__44018","dismiss-at","all-comments-data","oc.web.dispatcher.activity_comments_data","comments-data","p1__44015#","unreads","p1__44016#","p__44022","vec__44023","inbox-data","prepare-inbox-data","fixed-inbox-data","p1__44021#","p__44026","vec__44027","p__44031","vec__44032","p1__44030#","p__44038","vec__44039","temp__5733__auto__","inbox-key","without-item","p1__44036#","p1__44037#","update-count?","cljs.core/count","cljs.core/identity","p__44042","vec__44043","current-board-slug","items-to-render-key","links","cljs.core.mapv","link","cuerdas.core/replace","p__44046","vec__44047","without-items","oc.web.stores.activity/latest-seen-at","new-seen-at","old-seen-at","oc.web.stores.activity/following-get-finish","current-container-slug","keep-seen-at?","following-data","old-container-data","prepare-following-data","p1__44050#","fixed-following-data","following-badge-key","oc.web.dispatcher/following-badge-key","badge-following?","cljs.core/some","cljs.core.keyword","cljs.core/boolean","p1__44051#","p__44052","vec__44053","p__44056","vec__44057","p__44060","vec__44061","p__44065","vec__44066","p1__44064#","oc.web.stores.activity/replies-get-finish","replies-data","replies-container-key","prepare-replies-data","p1__44069#","fixed-replies-data","replies-badge-key","oc.web.dispatcher/replies-badge-key","badge-replies?","p1__44070#","p__44071","vec__44072","p__44075","vec__44076","p__44079","vec__44080","next-replies-data","p__44084","vec__44085","new-posts-map","p1__44083#","oc.web.stores.activity/unfollowing-get-finish","unfollowing-data","prepare-unfollowing-data","fixed-unfollowing-data","p1__44088#","p1__44089#","p__44090","vec__44091","p__44094","vec__44095","p__44098","vec__44099","p__44104","vec__44105","p1__44102#","p1__44103#","p__44108","vec__44109","p__44112","vec__44113","p__44116","vec__44117","p__44120","vec__44121","p__44124","vec__44125","container-id","seen-at","p__44128","vec__44129","p__44132","vec__44133","oc.web.utils.activity.update_container","p__44136","vec__44137","oc.web.utils.activity/update-replies-comments","p__44142","vec__44143","oc.web.dispatcher.following_data","oc.web.dispatcher.replies_data","p1__44140#","p1__44141#","p__44146","vec__44147","oc.web.utils.activity/update-containers"],"sourcesContent":["(ns oc.web.stores.activity\n  (:require [cuerdas.core :as string]\n            [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.jwt :as j]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.notification :as notif-util]\n            [oc.web.utils.org :as ou]\n            [oc.web.utils.user :as uu]\n            [oc.web.utils.activity :as au]))\n\n(defn- item-from-entity [entry]\n  (select-keys entry au/preserved-keys))\n\n(defn- sort-value\n  \"Calculate the sort value as used on the server while quering the data.\n\n   This is a limited sort-value in respect of what the server is using. Since this is applied\n   only to posts the user publishes we can avoid all the unread and cap window related cals.\"\n  [sort-type item]\n  (update item :sort-value\n   (fn [v]\n    (let [sort-key (case sort-type\n                    dispatcher/recent-activity-sort :last-activity-at\n                    :bookmarked-at :bookmarked-at\n                    :published-at)\n          activity-data (if (contains? item sort-key) item (dispatcher/activity-data (:uuid item)))]\n      (.getTime (utils/js-date (get activity-data sort-key)))))))\n\n(defn- add-remove-item-from-all-posts\n  \"Given an activity map adds or remove it from the all-posts list of posts depending on the activity\n   status\"\n  [db org-slug activity-data]\n  (if (:uuid activity-data)\n    (let [;; Add/remove item from AP\n          is-published? (= (:status activity-data) \"published\")\n          ap-rp-key (dispatcher/container-key org-slug :all-posts dispatcher/recently-posted-sort)\n          ap-ra-key (dispatcher/container-key org-slug :all-posts dispatcher/recent-activity-sort)\n          old-ap-rp-data (get-in db ap-rp-key)\n          old-ap-ra-data (get-in db ap-ra-key)\n          old-ap-rp-data-posts (get old-ap-rp-data :posts-list)\n          old-ap-ra-data-posts (get old-ap-ra-data :posts-list)\n          ap-rp-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) old-ap-rp-data-posts)\n          ap-ra-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) old-ap-ra-data-posts)\n          new-ap-rp-list (vec (if is-published?\n                                (conj ap-rp-without-uuid (item-from-entity activity-data))\n                                ap-rp-without-uuid))\n          new-ap-ra-list (vec (if is-published?\n                                (conj ap-ra-without-uuid (item-from-entity activity-data))\n                                ap-ra-without-uuid))\n          new-ap-rp-with-sort-value (map (partial sort-value dispatcher/recently-posted-sort) new-ap-rp-list)\n          new-ap-ra-with-sort-value (map (partial sort-value dispatcher/recent-activity-sort) new-ap-rp-list)\n          sorted-new-ap-rp-uuids (reverse (sort-by :sort-value new-ap-rp-with-sort-value))\n          sorted-new-ap-ra-uuids (reverse (sort-by :sort-value new-ap-ra-with-sort-value))\n          next-ap-rp-data (assoc old-ap-rp-data :posts-list sorted-new-ap-rp-uuids)\n          next-ap-ra-data (assoc old-ap-ra-data :posts-list sorted-new-ap-ra-uuids)\n          org-data (dispatcher/org-data db org-slug)\n          active-users (dispatcher/active-users org-slug db)\n          parsed-ap-rp-data (when old-ap-rp-data\n                              (-> next-ap-rp-data\n                                (au/parse-container {} org-data active-users dispatcher/recently-posted-sort)\n                                (dissoc :fixed-items)))\n          parsed-ap-ra-data (when old-ap-ra-data\n                              (-> next-ap-ra-data\n                                (au/parse-container {} org-data active-users dispatcher/recent-activity-sort)\n                                (dissoc :fixed-items)))]\n      (as-> db tdb\n       (if old-ap-rp-data\n         (assoc-in tdb ap-rp-key parsed-ap-rp-data)\n         tdb)\n       (if old-ap-ra-data\n         (assoc-in tdb ap-ra-key parsed-ap-ra-data)\n        tdb)))\n    db))\n\n(defn- add-remove-item-from-board\n  \"Given an activity map adds or remove it from it's board's list of posts depending on the activity status\"\n  [db org-slug activity-data]\n  (if (:uuid activity-data)\n    (let [;; Add/remove item from AP\n          is-published? (= (:status activity-data) \"published\")\n          rp-board-data-key (dispatcher/board-data-key org-slug (:board-slug activity-data) dispatcher/recently-posted-sort)\n          ra-board-data-key (dispatcher/board-data-key org-slug (:board-slug activity-data) dispatcher/recent-activity-sort)\n          rp-old-board-data (get-in db rp-board-data-key)\n          ra-old-board-data (get-in db ra-board-data-key)\n          rp-old-board-data-posts (get rp-old-board-data :posts-list)\n          ra-old-board-data-posts (get ra-old-board-data :posts-list)\n          rp-board-without-uuid (filterv #(= (:uuid %) (:uuid activity-data)) rp-old-board-data-posts)\n          ra-board-without-uuid (filterv #(= (:uuid %) (:uuid activity-data)) ra-old-board-data-posts)\n          new-rp-list (vec (if is-published?\n                             (conj rp-board-without-uuid (item-from-entity activity-data))\n                             rp-board-without-uuid))\n          new-ra-list (vec (if is-published?\n                             (conj ra-board-without-uuid (item-from-entity activity-data))\n                             ra-board-without-uuid))\n          new-rp-with-sort-value (map (partial sort-value dispatcher/recently-posted-sort) new-rp-list)\n          new-ra-with-sort-value (map (partial sort-value dispatcher/recent-activity-sort) new-rp-list)\n          sorted-new-rp-uuids (reverse (sort-by :sort-value new-rp-with-sort-value))\n          sorted-new-ra-uuids (reverse (sort-by :sort-value new-ra-with-sort-value))\n          change-data (dispatcher/change-data db org-slug)\n          active-users (dispatcher/active-users org-slug db)\n          follow-boards-list (dispatcher/follow-boards-list org-slug db)\n          parsed-rp-board-data (when rp-old-board-data\n                                 (-> rp-old-board-data\n                                  (assoc :posts-list sorted-new-rp-uuids)\n                                  (au/parse-board change-data active-users follow-boards-list dispatcher/recently-posted-sort)\n                                  (dissoc :fixed-items)))\n          parsed-ra-board-data (when ra-old-board-data\n                                 (-> ra-old-board-data\n                                  (assoc :posts-list sorted-new-ra-uuids)\n                                  (au/parse-board change-data active-users follow-boards-list dispatcher/recent-activity-sort)\n                                  (dissoc :fixed-items)))]\n      (as-> db tdb\n       (if rp-old-board-data\n         (assoc-in tdb rp-board-data-key parsed-rp-board-data)\n         tdb)\n       (if ra-old-board-data\n         (assoc-in tdb ra-board-data-key parsed-ra-board-data)\n         tdb)))\n    db))\n\n(defn- add-remove-item-from-bookmarks\n  \"Given an activity map adds or remove it from the bookmarks list of posts.\"\n  [db org-slug activity-data]\n  (if (:uuid activity-data)\n    (let [;; Add/remove item from MS\n          is-bookmark? (and (not= (:status activity-data) \"draft\")\n                            (:bookmarked-at activity-data))\n          bm-key (dispatcher/container-key org-slug :bookmarks)\n          old-bm-data (get-in db bm-key)\n          old-bm-data-posts (get old-bm-data :posts-list)\n          bm-without-item (filter #(not= (:uuid %) (:uuid activity-data)) old-bm-data-posts)\n          new-bm-items (vec\n                        (if is-bookmark?\n                          (conj bm-without-item (item-from-entity activity-data))\n                          bm-without-item))\n          with-bookmarked-at (map #(as-> % item\n                                    (assoc item :bookmarked-at (if (= (:uuid item) (:uuid activity-data))\n                                                                 (:bookmarked-at activity-data)\n                                                                 (-> item :uuid dispatcher/activity-data :bookmarked-at)))\n                                    (sort-value :bookmarked-at item)\n                                    (dissoc item :bookmarked-at))\n                              new-bm-items)\n          sorted-new-bm-posts (vec (reverse (sort-by :sort-value with-bookmarked-at)))\n          org-data (dispatcher/org-data db org-slug)\n          change-data (dispatcher/change-data db org-slug)\n          active-users (dispatcher/active-users org-slug db)\n          next-bm-data (when old-bm-data\n                         (-> old-bm-data\n                          (assoc :posts-list sorted-new-bm-posts)\n                          (au/parse-container change-data org-data active-users dispatcher/recently-posted-sort)\n                          (dissoc :fixed-items)))]\n      (assoc-in db bm-key next-bm-data))\n    db))\n\n(defn- add-published-post-to-home [db org-slug activity-data]\n  (let [fl-rp-key (dispatcher/container-key org-slug :following dispatcher/recently-posted-sort)\n        fl-ra-key (dispatcher/container-key org-slug :following dispatcher/recent-activity-sort)\n        old-fl-rp-data (get-in db fl-rp-key)\n        old-fl-ra-data (get-in db fl-ra-key)\n        activity-item (item-from-entity activity-data)\n        first-rp-item (-> old-fl-rp-data :items-to-render first)\n        first-ra-item (-> old-fl-ra-data :items-to-render first)\n        rp-activity-item (-> activity-item\n                          (assoc :container-seen-at (:last-seen-at old-fl-rp-data))\n                          (assoc :unseen false)\n                          (assoc :unread false)\n                          (assoc :open-item true)\n                          (assoc :close-item (not (au/entry? first-rp-item))))\n        ra-activity-item (-> activity-item\n                           (assoc :container-seen-at (:last-seen-at old-fl-ra-data))\n                           (assoc :unseen false)\n                           (assoc :open-item true)\n                           (assoc :close-item (not (au/entry? first-ra-item))))\n        new-fl-rp-data (when old-fl-rp-data\n                         (-> old-fl-rp-data\n                          (update :sort-value (partial sort-value dispatcher/recently-posted-sort))\n                          (update :posts-list #(vec (concat [activity-item] %)))\n                          (update :items-to-render #(vec (concat [rp-activity-item] %)))))\n        new-fl-ra-data (when old-fl-ra-data\n                         (-> old-fl-ra-data\n                          (update :sort-value (partial sort-value dispatcher/recent-activity-sort))\n                          (update :posts-list #(vec (concat [activity-item] %)))\n                          (update :items-to-render #(vec (concat [ra-activity-item] %)))))]\n    (as-> db tdb\n      (if old-fl-rp-data\n        (assoc-in tdb fl-rp-key new-fl-rp-data)\n        tdb)\n      (if old-fl-ra-data\n        (assoc-in tdb fl-ra-key new-fl-ra-data)\n        tdb))))\n\n(defn- add-remove-item-from-follow\n  \"Given an activity map adds or remove it from the bookmarks list of posts.\"\n  [db org-slug activity-data following-container?]\n  (if (:uuid activity-data)\n    (let [;; Add/remove item from MS\n          follow-list (dispatcher/follow-list org-slug db)\n          publisher-id (-> activity-data :publisher :user-id)\n          include-activity? (and (not= (:status activity-data) \"draft\")\n                                 (or (and following-container?\n                                          (or ((set (:publisher-uuids follow-list)) publisher-id)\n                                              ((set (:board-uuids follow-list)) (:board-uuid activity-data))\n                                              (= publisher-id (j/user-id))))\n                                     (and (not following-container?)\n                                          (not ((set (:publisher-uuids follow-list)) publisher-id))\n                                          (not ((set (:board-uuids follow-list)) (:board-uuids activity-data)))\n                                          (not= publisher-id (j/user-id)))))\n          container-slug (if following-container? :following :unfollowing)\n          fl-rp-key (dispatcher/container-key org-slug container-slug dispatcher/recently-posted-sort)\n          fl-ra-key (dispatcher/container-key org-slug container-slug dispatcher/recent-activity-sort)\n          old-fl-rp-data (get-in db fl-rp-key)\n          old-fl-ra-data (get-in db fl-ra-key)\n          old-fl-rp-data-posts (get old-fl-rp-data :posts-list)\n          old-fl-ra-data-posts (get old-fl-ra-data :posts-list)\n          fl-rp-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) old-fl-rp-data-posts)\n          fl-ra-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) old-fl-ra-data-posts)\n          new-fl-rp-uuids (vec (if (= following-container? include-activity?)\n                                 (conj fl-rp-without-uuid (item-from-entity activity-data))\n                                 fl-rp-without-uuid))\n          new-fl-ra-uuids (vec (if (= following-container? include-activity?)\n                                 (conj fl-ra-without-uuid (item-from-entity activity-data))\n                                 fl-ra-without-uuid))\n          new-fl-rp-with-sort-value (map (partial sort-value dispatcher/recently-posted-sort) new-fl-rp-uuids)\n          new-fl-ra-with-sort-value (map (partial sort-value dispatcher/recent-activity-sort) new-fl-ra-uuids)\n          sorted-new-fl-rp-uuids (reverse (sort-by :sort-value new-fl-rp-with-sort-value))\n          sorted-new-fl-ra-uuids (reverse (sort-by :sort-value new-fl-ra-with-sort-value))\n          next-fl-rp-data (assoc old-fl-rp-data :posts-list sorted-new-fl-rp-uuids)\n          next-fl-ra-data (assoc old-fl-ra-data :posts-list sorted-new-fl-ra-uuids)\n          org-data (dispatcher/org-data db org-slug)\n          active-users (dispatcher/active-users org-slug db)\n          parsed-fl-rp-data (when old-fl-rp-data\n                              (-> next-fl-rp-data\n                               (au/parse-container {} org-data active-users dispatcher/recently-posted-sort)\n                               (dissoc :fixed-items)))\n          parsed-fl-ra-data (when old-fl-ra-data\n                              (-> next-fl-ra-data\n                               (au/parse-container {} org-data active-users dispatcher/recent-activity-sort)\n                               (dissoc :fixed-items)))]\n      (as-> db tdb\n       (if old-fl-rp-data\n         (assoc-in tdb fl-rp-key parsed-fl-rp-data)\n         tdb)\n       (if old-fl-ra-data\n         (assoc-in tdb fl-ra-key parsed-fl-ra-data)\n         tdb)))\n    db))\n\n(defn- add-remove-item-from-contributions\n  \"Given an activity map adds or remove it from it's contributions' list of posts depending on the activity status\"\n  [db org-slug activity-data]\n  (let [contributions-list-key (dispatcher/contributions-list-key org-slug)\n        {{author-uuid :user-id} :publisher} activity-data]\n    (if (and (:uuid activity-data)\n             (= (:status activity-data) \"published\")\n             (contains? (get db contributions-list-key) author-uuid))\n      (let [;; Add/remove item from AP\n            rp-contributions-data-key (dispatcher/contributions-data-key org-slug author-uuid dispatcher/recently-posted-sort)\n            ra-contributions-data-key (dispatcher/contributions-data-key org-slug author-uuid dispatcher/recent-activity-sort)\n            rp-old-data (get-in db rp-contributions-data-key)\n            ra-old-data (get-in db ra-contributions-data-key)\n            rp-old-data-posts (get rp-old-data :posts-list)\n            ra-old-data-posts (get ra-old-data :posts-list)\n            rp-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) rp-old-data-posts)\n            ra-without-uuid (filterv #(not= (:uuid %) (:uuid activity-data)) ra-old-data-posts)\n            rp-new-uuids (vec (conj rp-without-uuid (item-from-entity activity-data)))\n            ra-new-uuids (vec (conj ra-without-uuid (item-from-entity activity-data)))\n            rp-with-sort-value (map (partial sort-value dispatcher/recently-posted-sort) rp-new-uuids)\n            ra-with-sort-value (map (partial sort-value dispatcher/recent-activity-sort) ra-new-uuids)\n            rp-sorted-new-uuids (reverse (sort-by :sort-value rp-with-sort-value))\n            ra-sorted-new-uuids (reverse (sort-by :sort-value ra-with-sort-value))\n            rp-new-posts-list (assoc rp-old-data :posts-list rp-sorted-new-uuids)\n            ra-new-posts-list (assoc ra-old-data :posts-list ra-sorted-new-uuids)\n            change-data (dispatcher/change-data db org-slug)\n            org-data (dispatcher/org-data db org-slug)\n            active-users (dispatcher/active-users org-slug db)\n            follow-publishers-list (dispatcher/follow-publishers-list org-slug db)\n            parsed-rp-data (when rp-old-data\n                             (-> rp-new-posts-list\n                              (au/parse-contributions change-data org-data active-users follow-publishers-list dispatcher/recently-posted-sort))\n                              (dissoc :fixed-items))\n            parsed-ra-data (when ra-old-data\n                             (-> ra-new-posts-list\n                              (au/parse-contributions change-data org-data active-users follow-publishers-list dispatcher/recent-activity-sort)\n                              (dissoc :fixed-items)))]\n        (as-> db tdb\n         (if rp-old-data\n           (assoc-in tdb rp-contributions-data-key parsed-rp-data)\n           tdb)\n         (if ra-old-data\n           (assoc-in tdb ra-contributions-data-key parsed-ra-data)\n           tdb)))\n      db)))\n\n(defmethod dispatcher/action :entry-edit/dismiss\n  [db [_]]\n  (-> db\n    (dissoc :entry-editing)\n    (assoc :entry-edit-dissmissing true)))\n\n(defmethod dispatcher/action :entry-toggle-save-on-exit\n  [db [_ enabled?]]\n  (assoc db :entry-save-on-exit enabled?))\n\n(defmethod dispatcher/action :activity-add-attachment\n  [db [_ dispatch-input-key attachment-data]]\n  (let [old-attachments (or (-> db dispatch-input-key :attachments) [])\n        next-attachments (vec (conj old-attachments attachment-data))]\n    (assoc-in db [dispatch-input-key :attachments] next-attachments)))\n\n(defmethod dispatcher/action :activity-remove-attachment\n  [db [_ dispatch-input-key attachment-data]]\n  (let [old-attachments (or (-> db dispatch-input-key :attachments) [])\n        next-attachments (filterv #(not= (:file-url %) (:file-url attachment-data)) old-attachments)]\n    (assoc-in db [dispatch-input-key :attachments] next-attachments)))\n\n(defmethod dispatcher/action :entry-clear-local-cache\n  [db [_ edit-key]]\n  (dissoc db :entry-save-on-exit))\n\n(defmethod dispatcher/action :entry-save\n  [db [_ edit-key]]\n  (assoc-in db [edit-key :loading] true))\n\n(defmethod dispatcher/action :entry-save/finish\n  [db [_ activity-data edit-key]]\n  (let [org-slug (utils/post-org-slug activity-data)\n        board-slug (:board-slug activity-data)\n        activity-key (dispatcher/activity-key org-slug (:uuid activity-data))\n        activity-board-data (dispatcher/board-data db org-slug board-slug)\n        fixed-activity-data (au/parse-entry activity-data activity-board-data (dispatcher/change-data db org-slug))\n        next-db (assoc-in db activity-key fixed-activity-data)\n        with-edited-key (if edit-key\n                          (update-in next-db [edit-key] dissoc :loading)\n                          next-db)\n        without-entry-save-on-exit (dissoc with-edited-key :entry-toggle-save-on-exit)]\n    (dissoc without-entry-save-on-exit :section-editing)))\n\n(defmethod dispatcher/action :entry-save/failed\n  [db [_ edit-key]]\n  (-> db\n    (update-in [edit-key] dissoc :loading)\n    (update-in [edit-key] assoc :error true)))\n\n(defmethod dispatcher/action :entry-publish [db [_ edit-key]]\n  (assoc-in db [edit-key :publishing] true))\n\n(defmethod dispatcher/action :section-edit/error [db [_ error]]\n  (-> db\n    (assoc-in [:section-editing :section-name-error] error)\n    (update-in [:section-editing] dissoc :loading)))\n\n(defmethod dispatcher/action :entry-publish-with-board/finish\n  [db [_ new-board-data edit-key]]\n  (let [org-slug (utils/section-org-slug new-board-data)\n        org-data-key (dispatcher/org-data-key org-slug)\n        contributions-count-key (vec (conj org-data-key :contributions-count))\n        board-slug (:slug new-board-data)\n        posts-key (dispatcher/posts-data-key org-slug)\n        board-key (dispatcher/board-data-key org-slug board-slug)\n        fixed-board-data (au/parse-board new-board-data (dispatcher/change-data db org-slug))\n        merged-items (merge (get-in db posts-key)\n                            (:fixed-items fixed-board-data))]\n    (-> db\n      (update-in contributions-count-key inc)\n      (assoc-in board-key (dissoc fixed-board-data :fixed-items))\n      (assoc-in posts-key merged-items)\n      (dissoc :section-editing)\n      (update-in [edit-key] dissoc :publishing)\n      (assoc-in [edit-key :board-slug] (:slug fixed-board-data))\n      (assoc-in [edit-key :new-section] true)\n      (dissoc :entry-toggle-save-on-exit))))\n\n(defmethod dispatcher/action :entry-publish/finish\n  [db [_ org-slug edit-key activity-data]]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        contributions-count-key (vec (conj org-data-key :contributions-count))\n        board-data (au/board-by-uuid (:board-uuid activity-data))\n        fixed-activity-data (-> activity-data\n                             (update :published-at #(if (seq %) % (utils/as-of-now)))\n                             (au/parse-entry board-data (dispatcher/change-data db org-slug))\n                             (assoc :unseen false)\n                             (assoc :unread false))]\n    (-> db\n      (update-in contributions-count-key inc)\n      (assoc-in (dispatcher/activity-key org-slug (:uuid activity-data)) fixed-activity-data)\n      (add-remove-item-from-all-posts org-slug fixed-activity-data)\n      (add-remove-item-from-bookmarks org-slug fixed-activity-data)\n      (as-> ndb\n       (if (:following board-data)\n         (add-published-post-to-home ndb org-slug fixed-activity-data)\n         ndb))\n      (add-remove-item-from-follow org-slug fixed-activity-data false)\n      (add-remove-item-from-board org-slug fixed-activity-data)\n      (add-remove-item-from-contributions org-slug fixed-activity-data)\n      (update-in [edit-key] dissoc :publishing)\n      (dissoc :entry-toggle-save-on-exit))))\n\n(defmethod dispatcher/action :entry-publish/failed\n  [db [_ edit-key]]\n  (-> db\n    (update-in [edit-key] dissoc :publishing)\n    (update-in [edit-key] assoc :error true)))\n\n(defmethod dispatcher/action :activity-delete\n  [db [_ org-slug activity-data]]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        contributions-count-key (vec (conj org-data-key :contributions-count))\n        posts-key (dispatcher/posts-data-key org-slug)\n        posts-data (dispatcher/posts-data)\n        next-posts (dissoc posts-data (:uuid activity-data))\n        ;; Remove the post from all the containers posts list\n        containers-key (dispatcher/containers-key org-slug)\n        change-data (dispatcher/change-data db org-slug)\n        org-data (get-in db org-data-key)\n        active-users (dispatcher/active-users org-slug db)\n        follow-publishers-list (dispatcher/follow-publishers-list org-slug db)\n        follow-boards-list (dispatcher/follow-boards-list org-slug db)\n        with-fixed-containers (reduce\n                               (fn [ndb ckey]\n                                 (let [container-rp-key (dispatcher/container-key org-slug ckey dispatcher/recently-posted-sort)\n                                       container-ra-key (dispatcher/container-key org-slug ckey dispatcher/recent-activity-sort)\n                                       rp-data (get-in ndb container-rp-key)\n                                       ra-data (get-in ndb container-ra-key)\n                                       rp? (map? rp-data)\n                                       ra? (map? ra-data)\n                                       updated-rp-data (when rp?\n                                                         (update rp-data :posts-list (fn [items-list]\n                                                                                      (filterv #(not= (:uuid %) (:uuid activity-data)) items-list))))\n                                       updated-ra-data (when ra?\n                                                         (update ra-data :posts-list (fn [items-list]\n                                                                                    (filterv #(not= (:uuid %) (:uuid activity-data)) items-list))))\n                                       parsed-rp-data (au/parse-container updated-rp-data change-data org-data active-users dispatcher/recently-posted-sort)\n                                       parsed-ra-data (au/parse-container updated-ra-data change-data org-data active-users dispatcher/recent-activity-sort)]\n                                    (as-> ndb tndb\n                                     (if rp?\n                                       (assoc-in tndb container-rp-key (dissoc parsed-rp-data :fixed-items))\n                                       tndb)\n                                     (if ra?\n                                       (assoc-in tndb container-ra-key (dissoc parsed-ra-data :fixed-items))\n                                       tndb))))\n                               db\n                               (keys (get-in db containers-key)))\n        ;; Remove the post from contributors lists\n        contributions-list-key (dispatcher/contributions-list-key org-slug)\n        with-fixed-contribs (reduce\n                             (fn [ndb ckey]\n                               (let [contrib-data-key (dispatcher/contributions-key org-slug ckey)\n                                     contrib-posts-list-key (conj contrib-data-key :posts-list)\n                                     contrib-data (get-in ndb contrib-data-key)\n                                     updated-contrib-data (update contrib-data :posts-list (fn [posts-list]\n                                                                                            (filterv #(not= (:uuid %) (:uuid activity-data)) posts-list)))\n                                     parsed-contrib-data (au/parse-contributions updated-contrib-data change-data org-data active-users follow-publishers-list dispatcher/recently-posted-sort)]\n                                  (assoc-in ndb contrib-data-key\n                                   (dissoc parsed-contrib-data :fixed-items))))\n                             with-fixed-containers\n                             (keys (get-in db contributions-list-key)))\n        ;; Remove the post from all the boards posts list too\n        boards-key (dispatcher/boards-key org-slug)\n        with-fixed-boards (reduce\n                           (fn [ndb ckey]\n                             (let [board-data-key (dispatcher/board-data-key org-slug ckey)\n                                   posts-list-key (conj board-data-key :posts-list)\n                                   board-data (get-in ndb board-data-key)\n                                   updated-board-data (update board-data :posts-list (fn [posts-list]\n                                                                                      (filterv #(not= (:uuid %) (:uuid activity-data)) posts-list)))\n                                   parsed-board-data (au/parse-board updated-board-data change-data active-users follow-boards-list dispatcher/recently-posted-sort)]\n                                (assoc-in ndb board-data-key (dissoc parsed-board-data :fixed-items))))\n                           with-fixed-contribs\n                           (keys (get-in db boards-key)))]\n    ;; Now if the post is the one being edited in cmail let's remove it from there too\n    (if (= (get-in db (conj dispatcher/cmail-data-key :uuid)) (:uuid activity-data))\n      (-> with-fixed-boards\n          (update-in contributions-count-key dec)\n          (assoc-in dispatcher/cmail-data-key {:delete true})\n          (assoc-in posts-key next-posts))\n      (assoc-in with-fixed-boards posts-key next-posts))))\n\n(defmethod dispatcher/action :activity-move\n  [db [_ activity-data org-slug board-data]]\n  (let [change-data (dispatcher/change-data db org-slug)\n        fixed-activity-data (au/parse-entry activity-data board-data change-data)\n        activity-key (dispatcher/activity-key\n                      org-slug\n                      (:uuid activity-data))]\n    (assoc-in db activity-key fixed-activity-data)))\n\n(defmethod dispatcher/action :activity-share-show\n  [db [_ activity-data container-element-id share-medium]]\n  (-> db\n    (assoc :activity-share {:share-data activity-data})\n    (assoc :activity-share-container container-element-id)\n    (assoc :activity-share-medium share-medium)\n    (dissoc :activity-shared-data)))\n\n(defmethod dispatcher/action :activity-share-hide\n  [db [_]]\n  (-> db\n    (dissoc :activity-share)\n    (dissoc :activity-share-medium)\n    (dissoc :activity-share-container)))\n\n(defmethod dispatcher/action :activity-share-reset\n  [db [_]]\n  (dissoc db :activity-shared-data))\n\n(defmethod dispatcher/action :activity-share\n  [db [_ share-data]]\n  (assoc db :activity-share-data share-data))\n\n(defmethod dispatcher/action :activity-share/finish\n  [db [_ success shared-data]]\n  (assoc db :activity-shared-data\n    (if success\n      (au/parse-entry shared-data (:board-slug shared-data) (dispatcher/change-data db))\n      {:error true})))\n\n(defmethod dispatcher/action :entry-revert [db [_ entry]]\n  ;; do nothing for now\n  db)\n\n(defmethod dispatcher/action :activity-get\n  [db [_ {:keys [org-slug board-slug board-uuid activity-uuid secure-uuid]}]]\n  (let [activity-key (if secure-uuid\n                       (dispatcher/secure-activity-key org-slug secure-uuid)\n                       (dispatcher/activity-key org-slug activity-uuid))]\n    (update-in db activity-key #(let [updated-activity-data {:loading true\n                                                             :uuid activity-uuid\n                                                             :board-slug board-slug\n                                                             :board-uuid board-uuid}]\n                                  (if (map? %)\n                                    (merge % updated-activity-data)\n                                    updated-activity-data)))))\n\n(defmethod dispatcher/action :activity-get/not-found\n  [db [_ org-slug activity-uuid secure-uuid]]\n  (let [activity-key (if secure-uuid\n                       (dispatcher/secure-activity-key org-slug secure-uuid)\n                       (dispatcher/activity-key org-slug activity-uuid))]\n    (assoc-in db activity-key :404)))\n\n(defmethod dispatcher/action :activity-get/failed\n  [db [_ org-slug activity-uuid secure-uuid]]\n  (let [activity-key (if secure-uuid\n                       (dispatcher/secure-activity-key org-slug secure-uuid)\n                       (dispatcher/activity-key org-slug activity-uuid))\n        old-activity-data (get-in db activity-key)\n        failed-activity-data (if (map? old-activity-data)\n                               (dissoc old-activity-data :loading)\n                               old-activity-data)]\n    (assoc-in db activity-key failed-activity-data)))\n\n(defmethod dispatcher/action :activity-get/finish\n  [db [_ status org-slug activity-data secure-uuid]]\n  (let [activity-uuid (:uuid activity-data)\n        board-data (au/board-by-uuid (:board-uuid activity-data))\n        activity-key (if secure-uuid\n                       (dispatcher/secure-activity-key org-slug secure-uuid)\n                       (dispatcher/activity-key org-slug activity-uuid))\n        fixed-activity-data (-> activity-data\n                             (au/parse-entry board-data (dispatcher/change-data db org-slug))\n                             (dissoc :loading))\n        update-cmail? (and (= (get-in db (conj dispatcher/cmail-data-key :uuid)) activity-uuid)\n                           (pos? (compare (:updated-at fixed-activity-data)\n                                          (get-in db (conj dispatcher/cmail-data-key :updated-at)))))]\n    (cond-> db\n     update-cmail? (update-in dispatcher/cmail-data-key #(merge % fixed-activity-data))\n     update-cmail? (update-in dispatcher/cmail-state-key assoc :key (utils/activity-uuid))\n     true          (assoc-in activity-key fixed-activity-data)\n     true          (as-> ndb\n                    (update-in ndb (dispatcher/user-notifications-key org-slug)\n                     #(notif-util/fix-notifications ndb %))))))\n\n(defmethod dispatcher/action :bookmark-toggle\n  [db [_ org-slug activity-uuid bookmark?]]\n  (let [bookmarks-count-key (conj (dispatcher/org-data-key org-slug) :bookmarks-count)\n        current-bookmarks-count (get-in db bookmarks-count-key)\n        activity-key (dispatcher/activity-key org-slug activity-uuid)\n        activity-data (get-in db activity-key)\n        bookmark-link-index (when activity-data\n                              (utils/index-of (:links activity-data) #(= (:rel %) \"bookmark\")))\n        next-activity-data* (when activity-data\n                             (if bookmark?\n                              (update activity-data :bookmarked-at #(utils/as-of-now))\n                              (dissoc activity-data :bookmarked-at)))\n        next-activity-data (when (and activity-data\n                                      bookmark-link-index)\n                             (assoc-in next-activity-data* [:links bookmark-link-index :method]\n                              (if bookmark? \"DELETE\" \"POST\")))\n        next-db (if activity-data\n                  (assoc-in db activity-key next-activity-data)\n                  db)\n        next-bookmarks-count (cond\n                               (and bookmark?\n                                    (not (:bookmarked-at activity-data)))\n                               (inc current-bookmarks-count)\n                               (and (not bookmark?)\n                                    (:bookmarked-at activity-data))\n                               (dec current-bookmarks-count)\n                               :else\n                               current-bookmarks-count)\n        tmp (add-remove-item-from-bookmarks next-db org-slug next-activity-data)\n        bk-key (dispatcher/container-key org-slug :bookmarks)]\n      (-> next-db\n       (add-remove-item-from-bookmarks org-slug next-activity-data)\n       (assoc-in bookmarks-count-key next-bookmarks-count))))\n\n(defmethod dispatcher/action :entry-save-with-board/finish\n  [db [_ org-slug fixed-board-data]]\n  (let [board-key (dispatcher/board-data-key org-slug (:slug fixed-board-data))\n        posts-key (dispatcher/posts-data-key org-slug)]\n  (-> db\n    (assoc-in board-key (dissoc fixed-board-data :fixed-items))\n    (update-in posts-key merge (get fixed-board-data :fixed-items))\n    (dissoc :section-editing)\n    (dissoc :entry-toggle-save-on-exit))))\n\n(defn- all-posts-get-finish\n  [db org-slug sort-type all-posts-data]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        prepare-all-posts-data (-> all-posts-data :collection (assoc :container-slug :all-posts))\n        fixed-all-posts-data (au/parse-container prepare-all-posts-data change-data org-data active-users sort-type)\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        merged-items (merge old-posts (:fixed-items fixed-all-posts-data))\n        container-key (dispatcher/container-key org-slug :all-posts sort-type)]\n    (as-> db ndb\n     (assoc-in ndb container-key (dissoc fixed-all-posts-data :fixed-items))\n     (assoc-in ndb posts-key merged-items)\n     (update-in ndb (dispatcher/user-notifications-key org-slug)\n      #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :all-posts-get/finish\n  [db [_ org-slug sort-type all-posts-data]]\n  (all-posts-get-finish db org-slug sort-type all-posts-data))\n\n(defmethod dispatcher/action :all-posts-refresh/finish\n  [db [_ org-slug sort-type all-posts-data]]\n  (all-posts-get-finish db org-slug sort-type all-posts-data))\n\n(defmethod dispatcher/action :all-posts-more\n  [db [_ org-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug :all-posts sort-type)\n        container-data (get-in db container-key)\n        next-posts-data (assoc container-data :loading-more true)]\n    (assoc-in db container-key next-posts-data)))\n\n(defmethod dispatcher/action :all-posts-more/finish\n  [db [_ org sort-type direction posts-data]]\n  (if posts-data\n    (let [org-data (dispatcher/org-data db org)\n          container-key (dispatcher/container-key org :all-posts sort-type)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-all-posts-data (merge (:collection posts-data) {:posts-list (:posts-list container-data)\n                                                                  :old-links (:links container-data)\n                                                                  :container-slug :all-posts})\n          active-users (dispatcher/active-users org db)\n          fixed-all-posts-data (au/parse-container prepare-all-posts-data (dispatcher/change-data db org) org-data active-users sort-type {:direction direction})\n          new-items-map (merge old-posts (:fixed-items fixed-all-posts-data))\n          new-container-data (-> fixed-all-posts-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n       (assoc-in ndb container-key new-container-data)\n       (assoc-in ndb posts-data-key new-items-map)\n       (update-in ndb (dispatcher/user-notifications-key org)\n        #(notif-util/fix-notifications ndb %))))\n    db))\n\n;; Bookmarks\n\n(defn- bookmarks-get-finish [db org-slug sort-type bookmarks-data]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        prepare-bookmarks-data (-> bookmarks-data :collection (assoc :container-slug :bookmarks))\n        fixed-bookmarks-data (au/parse-container prepare-bookmarks-data change-data org-data active-users dispatcher/recently-posted-sort)\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        merged-items (merge old-posts (:fixed-items fixed-bookmarks-data))\n        container-key (dispatcher/container-key org-slug :bookmarks)]\n    (as-> db ndb\n      (assoc-in ndb container-key (dissoc fixed-bookmarks-data :fixed-items))\n      (assoc-in ndb posts-key merged-items)\n      (update-in ndb (conj org-data-key :bookmarks-count) #(ou/disappearing-count-value % (:total-count fixed-bookmarks-data)))\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :bookmarks-get/finish\n  [db [_ org-slug sort-type bookmarks-data]]\n  (bookmarks-get-finish db org-slug sort-type bookmarks-data))\n\n(defmethod dispatcher/action :bookmarks-refresh/finish\n  [db [_ org-slug sort-type bookmarks-data]]\n  (bookmarks-get-finish db org-slug sort-type bookmarks-data))\n\n(defmethod dispatcher/action :bookmarks-more\n  [db [_ org-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug :bookmarks)\n        container-data (get-in db container-key)\n        next-posts-data (assoc container-data :loading-more true)\n        bookmarks-count-key (vec (conj (dispatcher/org-data-key org-slug) :bookmarks-count))]\n    (-> db\n     (assoc-in container-key next-posts-data)\n     (update-in bookmarks-count-key #(ou/disappearing-count-value % (:total-count next-posts-data))))))\n\n(defmethod dispatcher/action :bookmarks-more/finish\n  [db [_ org sort-type direction posts-data]]\n  (if posts-data\n    (let [org-data-key (dispatcher/org-data-key org)\n          org-data (get-in db org-data-key)\n          container-key (dispatcher/container-key org :bookmarks)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-bookmarks-data (merge (:collection posts-data) {:posts-list (:posts-list container-data)\n                                                                  :old-links (:links container-data)\n                                                                  :container-slug :bookmarks})\n          active-users (dispatcher/active-users org db)\n          fixed-bookmarks-data (au/parse-container prepare-bookmarks-data (dispatcher/change-data db org) org-data active-users dispatcher/recently-posted-sort {:direction direction})\n          new-items-map (merge old-posts (:fixed-items fixed-bookmarks-data))\n          new-container-data (-> fixed-bookmarks-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n        (assoc-in ndb container-key new-container-data)\n        (assoc-in ndb posts-data-key new-items-map)\n        (update-in ndb (conj org-data-key :bookmarks-count) #(ou/disappearing-count-value % (:total-count fixed-bookmarks-data)))\n        (update-in ndb (dispatcher/user-notifications-key org)\n         #(notif-util/fix-notifications ndb %))))\n    db))\n\n(defmethod dispatcher/action :remove-bookmark\n  [db [_ org-slug entry-data]]\n  (let [activity-key (dispatcher/activity-key org-slug (:uuid entry-data))\n        bookmarks-key (dispatcher/container-key org-slug :bookmarks)\n        bookmarks-data (get-in db bookmarks-key)\n        org-data-key (dispatcher/org-data-key org-slug)]\n    (-> db\n      (update-in (conj org-data-key :bookmarks-count) #(ou/disappearing-count-value % (dec %)))\n      (assoc-in activity-key entry-data)\n      (add-remove-item-from-bookmarks org-slug entry-data))))\n\n(defmethod dispatcher/action :add-bookmark\n  [db [_ org-slug activity-data]]\n  (let [org-data-key (dispatcher/org-data-key org-slug)]\n    (update-in db (conj org-data-key :bookmarks-count) #(ou/disappearing-count-value % (inc %)))))\n\n(defmethod dispatcher/action :activities-count\n  [db [_ org-slug items-count]]\n  (let [old-reads-data (get-in db dispatcher/activities-read-key)\n        ks (vec (map :item-id items-count))\n        vs (map #(zipmap [:count :reads :item-id]\n                         [(:count %)\n                          (get-in old-reads-data [(:item-id %) :reads])\n                          (:item-id %)]) items-count)\n        new-items-count (zipmap ks vs)\n        last-read-at-map (zipmap ks (map :last-read-at items-count))\n        activities-key (dispatcher/posts-data-key org-slug)]\n    (as-> db tdb\n     (reduce (fn [tdb [activity-uuid activity-last-read-at]]\n               (let [entry-data (dispatcher/entry-data org-slug activity-uuid tdb)]\n                 ;; Avoid setting the last-read-at if the entry is not loaded yet\n                 (if (map? entry-data)\n                   (assoc-in tdb (dispatcher/activity-last-read-at-key org-slug activity-uuid) activity-last-read-at)\n                   tdb)))\n      tdb\n      last-read-at-map)\n     (update-in tdb dispatcher/activities-read-key merge new-items-count))))\n\n(defmethod dispatcher/action :activity-reads\n  [db [_ org-slug item-id read-data-count read-data team-roster]]\n  (let [activity-data   (dispatcher/activity-data org-slug item-id db)\n        org-data        (dispatcher/org-data db org-slug)\n        roster-data     (or team-roster (dispatcher/team-roster (:team-id org-data) db))\n        board-data      (first (filter #(= (:slug %) (:board-slug activity-data)) (:boards org-data)))\n        fixed-read-data (vec (map #(assoc % :seen true) read-data))\n        team-users      (uu/filter-active-users (:users roster-data))\n        seen-ids        (set (map :user-id read-data))\n        private-access? (= (:access board-data) \"private\")\n        all-private-users (when private-access?\n                            (set (concat (:authors board-data) (:viewers board-data))))\n        filtered-users  (if private-access?\n                          (filterv #(all-private-users (:user-id %)) team-users)\n                          team-users)\n        all-ids         (set (map :user-id filtered-users))\n        unseen-ids      (clojure.set/difference all-ids seen-ids)\n        unseen-users    (vec (map (fn [user-id]\n                         (first (filter #(= (:user-id %) user-id) team-users))) unseen-ids))\n        current-user-id (j/user-id)\n        current-user-reads (filterv #(= (:user-id %) current-user-id) read-data)\n        last-read-at     (:read-at (last (sort-by :read-at current-user-reads)))\n        current-posts-uuids (map :uuid (dispatcher/filtered-posts-data db))]\n    (as-> db tdb\n     (assoc-in tdb (conj dispatcher/activities-read-key item-id) {:count read-data-count\n                                                                  :reads fixed-read-data\n                                                                  :item-id item-id\n                                                                  :unreads unseen-users\n                                                                  :private-access? private-access?})\n     (if (map? activity-data)\n       (assoc-in tdb (dispatcher/activity-last-read-at-key org-slug item-id) last-read-at)\n       tdb))))\n\n(defmethod dispatcher/action :uploading-video\n  [db [_ org-slug video-id]]\n  (let [uploading-video-key (dispatcher/uploading-video-key org-slug video-id)]\n    (assoc-in db uploading-video-key true)))\n\n(defmethod dispatcher/action :entry-auto-save/finish\n  [db [_ activity-data edit-key initial-entry-map]]\n  (let [org-slug (utils/post-org-slug activity-data)\n        board-slug (:board-slug activity-data)\n        activity-key (dispatcher/activity-key org-slug (:uuid activity-data))\n        activity-board-data (dispatcher/board-data db org-slug board-slug)\n        fixed-activity-data (au/parse-entry activity-data activity-board-data (dispatcher/change-data db org-slug))\n        ;; these are the data we need to move from the saved post to the editing map\n        ;; we don't have to override the keys that the user could have changed during the PATCH/POST request\n        keys-for-edit [:uuid :board-uuid :links :revision-id :secure-uuid :status]\n        current-edit (get db edit-key)\n        ;; if it's still the same board let's get the updated data from the autosave request\n        with-board-keys (if (= (:board-name current-edit) (:board-name initial-entry-map))\n                          (concat keys-for-edit [:board-slug :board-uuid])\n                          keys-for-edit)\n        is-same-video?(= (:video-id current-edit) (:video-id initial-entry-map))\n        ;; if it's the same video-id let's get video-processed from the server\n        with-video-keys (if is-same-video?\n                          (concat with-board-keys [:video-processed])\n                          with-board-keys)\n        ;; and set video-error to true if one of the 2 is tue\n        video-error (if is-same-video?\n                      (or (:video-error current-edit) (:video-error activity-data))\n                      (:video-error current-edit))\n        map-for-edit (merge (select-keys activity-data with-video-keys)\n                        {:auto-saving false\n                         :video-error video-error})]\n    (-> db\n      (assoc-in activity-key fixed-activity-data)\n      (dissoc :entry-toggle-save-on-exit)\n      (update-in [edit-key] merge map-for-edit))))\n\n(defmethod dispatcher/action :entry-revert/finish\n  [db [_ activity-data]]\n  (let [org-slug (utils/post-org-slug activity-data)\n        board-slug (:board-slug activity-data)\n        activity-key (dispatcher/activity-key org-slug (:uuid activity-data))]\n    ;; If board-slug is not present it means the entry was removed\n    (if (seq (:board-slug activity-data))\n      (let [activity-board-data (dispatcher/board-data db org-slug board-slug)\n            fixed-activity-data (au/parse-entry activity-data activity-board-data (dispatcher/change-data db org-slug))]\n        (assoc-in db activity-key fixed-activity-data))\n      (update-in db (butlast activity-key) dissoc (last activity-key)))))\n\n(defmethod dispatcher/action :mark-unread\n  [db [_ org-slug activity-data]]\n  (let [board-uuid (:board-uuid activity-data)\n        activity-uuid (:uuid activity-data)\n        section-change-key (vec (concat (dispatcher/change-data-key org-slug) [board-uuid :unread]))\n        activity-key (dispatcher/activity-key org-slug activity-uuid)\n        next-activity-data (-> db\n                            (get-in activity-key)\n                            (assoc :unread true)\n                            (dissoc :last-read-at))\n        activity-read-key (conj dispatcher/activities-read-key activity-uuid)]\n    (-> db\n      (update-in section-change-key #(vec (conj (or % []) activity-uuid)))\n      (assoc-in activity-key next-activity-data))))\n\n(defmethod dispatcher/action :mark-read\n  [db [_ org-slug activity-data dismiss-at]]\n  (let [board-uuid (:board-uuid activity-data)\n        activity-uuid (:uuid activity-data)\n        section-change-key (vec (concat (dispatcher/change-data-key org-slug) [board-uuid :unread]))\n        all-comments-data (dispatcher/activity-comments-data org-slug activity-uuid db)\n        comments-data (filterv #(not= (j/user-id) (-> % :author :user-id)) all-comments-data)\n        activity-key (dispatcher/activity-key org-slug activity-uuid)\n        old-activity-data (get-in db activity-key)\n        ;; Update the activity to read and update the last-activity-at with the max btw the current value\n        ;; and the created-at of the last comment.\n        next-activity-data (merge old-activity-data {:unread false\n                                                     :last-read-at dismiss-at\n                                                     :last-activity-at (if (and (seq comments-data)\n                                                                                (-> comments-data last :created-at\n                                                                                 (compare (:last-activity-at old-activity-data))\n                                                                                 pos?))\n                                                                         (-> comments-data last :created-at)\n                                                                         (:last-activity-at old-activity-data))})\n        activity-read-key (conj dispatcher/activities-read-key activity-uuid)]\n    (-> db\n      (update-in section-change-key (fn [unreads] (filterv #(not= % activity-uuid) (or unreads []))))\n      (assoc-in activity-key next-activity-data))))\n\n;; Inbox\n\n(defmethod dispatcher/action :inbox-get/finish\n  [db [_ org-slug sort-type inbox-data]]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        prepare-inbox-data (-> inbox-data :collection (assoc :container-slug :inbox))\n        fixed-inbox-data (au/parse-container prepare-inbox-data change-data org-data active-users sort-type)\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        merged-items (merge old-posts (:fixed-items fixed-inbox-data))\n        container-key (dispatcher/container-key org-slug :inbox sort-type)]\n    (as-> db ndb\n      (assoc-in ndb container-key (dissoc fixed-inbox-data :fixed-items))\n      (assoc-in ndb posts-key merged-items)\n      (assoc-in ndb (conj org-data-key :following-inbox-count) (:total-count fixed-inbox-data))\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :inbox-more\n  [db [_ org-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug :inbox sort-type)\n        container-data (get-in db container-key)\n        next-posts-data (assoc container-data :loading-more true)]\n    (assoc-in db container-key next-posts-data)))\n\n(defmethod dispatcher/action :inbox-more/finish\n  [db [_ org sort-type direction posts-data]]\n  (if posts-data\n    (let [org-data-key (dispatcher/org-data-key org)\n          org-data (get-in db org-data-key)\n          container-key (dispatcher/container-key org :inbox sort-type)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-inbox-data (merge (:collection posts-data) {:posts-list (:posts-list container-data)\n                                                              :old-links (:links container-data)\n                                                              :container-slug :inbox})\n          active-users (dispatcher/active-users org db)\n          fixed-inbox-data (au/parse-container prepare-inbox-data (dispatcher/change-data db org) org-data active-users sort-type {:direction direction})\n          new-items-map (merge old-posts (:fixed-items fixed-inbox-data))\n          new-container-data (-> fixed-inbox-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n        (assoc-in ndb container-key new-container-data)\n        (assoc-in ndb posts-data-key new-items-map)\n        (assoc-in ndb (conj org-data-key :following-inbox-count) (:total-count fixed-inbox-data))\n        (update-in ndb (dispatcher/user-notifications-key org)\n         #(notif-util/fix-notifications ndb %))))\n    db))\n\n(defmethod dispatcher/action :inbox/dismiss\n  [db [_ org-slug item-id]]\n  (if-let [activity-data (dispatcher/activity-data item-id)]\n    (let [inbox-key (dispatcher/container-key org-slug \"inbox\")\n          inbox-data (get-in db inbox-key)\n          without-item (-> inbox-data\n                         (update :posts-list (fn [posts-list] (filterv #(not= (:uuid %) item-id) posts-list)))\n                         (update :items-to-render (fn [posts-list] (filterv #(not= % item-id) posts-list))))\n          org-data-key (dispatcher/org-data-key org-slug)\n          update-count? (not= (-> inbox-data :posts-list count) (-> without-item :posts-list count))]\n      (-> db\n        (assoc-in inbox-key without-item)\n        (update-in (conj org-data-key :following-inbox-count) (if update-count? dec identity))))\n    db))\n\n(defmethod dispatcher/action :inbox/unread\n  [db [_ org-slug current-board-slug item-id]]\n  (if-let [activity-data (dispatcher/activity-data item-id)]\n    (let [inbox-key (dispatcher/container-key org-slug \"inbox\")\n          posts-list-key (conj inbox-key :posts-list)\n          items-to-render-key (conj inbox-key :items-to-render)\n          inbox-data (get-in db inbox-key)\n          next-db (if inbox-data\n                    (-> db\n                     (update-in posts-list-key (fn [posts-list] (->> activity-data item-from-entity (conj (set posts-list)) vec)))\n                     (update-in items-to-render-key (fn [posts-list] (->> activity-data item-from-entity (conj (set posts-list)) vec))))\n                    db)\n          activity-key (dispatcher/activity-key org-slug item-id)\n          activity-data (get-in db activity-key)\n          fixed-activity-data (update activity-data :links (fn [links]\n                               (mapv (fn [link]\n                                (if (= (:rel link) \"follow\")\n                                  (merge link {:href (string/replace (:href link) #\"/follow/?$\" \"/unfollow/\")\n                                               :rel \"unfollow\"})\n                                  link))\n                                 links)))\n          org-data-key (dispatcher/org-data-key org-slug)\n          update-count? (and inbox-data\n                             (not= (count (get-in db posts-list-key)) (count (get-in next-db posts-list-key))))]\n      (-> next-db\n       (update-in (conj org-data-key :following-inbox-count) (if update-count? inc identity))\n       (assoc-in activity-key fixed-activity-data)))\n    db))\n\n(defmethod dispatcher/action :inbox/dismiss-all\n  [db [_ org-slug]]\n  (let [inbox-key (dispatcher/container-key org-slug \"inbox\")\n        inbox-data (get-in db inbox-key)\n        without-items (-> inbox-data\n                       (assoc-in [:posts-list] [])\n                       (assoc-in [:items-to-render] []))\n        org-data-key (dispatcher/org-data-key org-slug)]\n    (-> db\n      (assoc-in inbox-key without-items)\n      (assoc-in (conj org-data-key :following-inbox-count) 0))))\n\n;; Following\n\n(defn- latest-seen-at [new-seen-at old-seen-at]\n  (if (pos? (compare new-seen-at old-seen-at)) new-seen-at old-seen-at))\n\n(defn- following-get-finish\n  [db org-slug sort-type current-container-slug keep-seen-at? following-data]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        container-key (dispatcher/container-key org-slug :following sort-type)\n        old-container-data (get-in db container-key)\n        prepare-following-data (-> following-data\n                                :collection\n                                (assoc :container-slug :following)\n                                (update :last-seen-at #(if (and keep-seen-at? (map? old-container-data)) (:last-seen-at old-container-data) %)))\n        fixed-following-data (au/parse-container prepare-following-data change-data org-data active-users sort-type)\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        merged-items (merge old-posts (:fixed-items fixed-following-data))\n        following-badge-key (dispatcher/following-badge-key org-slug)\n        badge-following? (some :unseen (:posts-list fixed-following-data))]\n    (as-> db ndb\n      (assoc-in ndb container-key (dissoc fixed-following-data :fixed-items))\n      (update-in ndb following-badge-key #(if (= (keyword current-container-slug) :following) false (boolean badge-following?)))\n      (assoc-in ndb posts-key merged-items)\n      (assoc-in ndb (conj org-data-key :following-count) (:total-count fixed-following-data))\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :following-get/finish\n  [db [_ org-slug sort-type current-container-slug keep-seen-at? following-data]]\n  (following-get-finish db org-slug sort-type current-container-slug keep-seen-at? following-data))\n\n(defmethod dispatcher/action :following-refresh/finish\n  [db [_ org-slug sort-type current-container-slug keep-seen-at? following-data]]\n  (following-get-finish db org-slug sort-type current-container-slug keep-seen-at? following-data))\n\n(defmethod dispatcher/action :following-more\n  [db [_ org-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug :following sort-type)\n        container-data (get-in db container-key)\n        next-posts-data (assoc container-data :loading-more true)]\n    (assoc-in db container-key next-posts-data)))\n\n(defmethod dispatcher/action :following-more/finish\n  [db [_ org sort-type direction posts-data]]\n  (if posts-data\n    (let [org-data-key (dispatcher/org-data-key org)\n          org-data (get-in db org-data-key)\n          container-key (dispatcher/container-key org :following sort-type)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-following-data (merge (:collection posts-data) {:posts-list (:posts-list container-data)\n                                                                  :old-links (:links container-data)\n                                                                  :container-slug :following\n                                                                  :last-seen-at (:last-seen-at container-data)\n                                                                  :next-seen-at (:next-seen-at container-data)})\n          active-users (dispatcher/active-users org db)\n          fixed-following-data (au/parse-container prepare-following-data (dispatcher/change-data db org) org-data active-users sort-type {:direction direction})\n          new-items-map (merge old-posts (:fixed-items fixed-following-data))\n          new-container-data (-> fixed-following-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n        (assoc-in ndb container-key new-container-data)\n        (assoc-in ndb posts-data-key new-items-map)\n        (assoc-in ndb (conj org-data-key :following-count) (:total-count fixed-following-data))\n        (update-in ndb (dispatcher/user-notifications-key org)\n         #(notif-util/fix-notifications ndb %))))\n    db))\n\n;; Replies\n\n(defn- replies-get-finish\n  [db org-slug sort-type current-container-slug keep-seen-at? replies-data]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        posts-data-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-data-key)\n        replies-container-key (dispatcher/container-key org-slug :replies sort-type)\n        old-container-data (get-in db replies-container-key)\n        prepare-replies-data (-> replies-data\n                              :collection\n                              (assoc :container-slug :replies)\n                              (update :last-seen-at #(if (and keep-seen-at? (map? old-container-data)) (:last-seen-at old-container-data) %)))\n        fixed-replies-data (au/parse-container prepare-replies-data change-data org-data active-users sort-type)\n        merged-items (merge old-posts (:fixed-items fixed-replies-data))\n        replies-badge-key (dispatcher/replies-badge-key org-slug)\n        badge-replies? (some :unseen-comments (:posts-list fixed-replies-data))]\n    (as-> db ndb\n      (assoc-in ndb replies-container-key (dissoc fixed-replies-data :fixed-items))\n      (update-in ndb replies-badge-key #(if (= (keyword current-container-slug) :replies) false (boolean badge-replies?)))\n      (assoc-in ndb posts-data-key merged-items)\n      (assoc-in ndb (conj org-data-key :replies-count) (:total-count fixed-replies-data))\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :replies-get/finish\n  [db [_ org-slug sort-type current-container-slug keep-seen-at? replies-data]]\n  (replies-get-finish db org-slug sort-type current-container-slug keep-seen-at? replies-data))\n\n(defmethod dispatcher/action :replies-refresh/finish\n  [db [_ org-slug sort-type current-container-slug keep-seen-at? replies-data]]\n  (replies-get-finish db org-slug sort-type current-container-slug keep-seen-at? replies-data))\n\n(defmethod dispatcher/action :replies-more\n  [db [_ org-slug sort-type]]\n  (let [replies-container-key (dispatcher/container-key org-slug :replies sort-type)\n        container-data (get-in db replies-container-key)\n        next-replies-data (assoc container-data :loading-more true)]\n    (assoc-in db replies-container-key next-replies-data)))\n\n(defmethod dispatcher/action :replies-more/finish\n  [db [_ org sort-type direction replies-data]]\n  (if replies-data\n    (let [org-data-key (dispatcher/org-data-key org)\n          org-data (get-in db org-data-key)\n          replies-container-key (dispatcher/container-key org :replies sort-type)\n          container-data (get-in db replies-container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-replies-data (merge (:collection replies-data) {:posts-list (:posts-list container-data)\n                                                                  :old-links (:links container-data)\n                                                                  :container-slug :replies\n                                                                  :last-seen-at (:last-seen-at container-data)\n                                                                  :next-seen-at (:next-seen-at container-data)})\n          active-users (dispatcher/active-users org db)\n          fixed-replies-data (au/parse-container prepare-replies-data (dispatcher/change-data db org) org-data active-users sort-type {:direction direction})\n          new-posts-map (merge old-posts (:fixed-items fixed-replies-data))\n          new-container-data (-> fixed-replies-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n        (assoc-in ndb replies-container-key new-container-data)\n        (assoc-in ndb posts-data-key new-posts-map)\n        (assoc-in ndb (conj org-data-key :replies-count) (:total-count fixed-replies-data))\n        (update-in ndb (dispatcher/user-notifications-key org)\n         #(notif-util/fix-notifications ndb %))))\n    db))\n\n;; Unfollowing\n\n(defn- unfollowing-get-finish\n  [db org-slug sort-type unfollowing-data]\n  (let [org-data-key (dispatcher/org-data-key org-slug)\n        org-data (get-in db org-data-key)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)\n        prepare-unfollowing-data (-> unfollowing-data :collection (assoc :container-slug :unfollowing))\n        fixed-unfollowing-data (au/parse-container prepare-unfollowing-data change-data org-data active-users sort-type)\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        merged-items (merge old-posts (:fixed-items fixed-unfollowing-data))\n        container-key (dispatcher/container-key org-slug :unfollowing sort-type)]\n    (as-> db ndb\n      (assoc-in ndb container-key (dissoc fixed-unfollowing-data :fixed-items))\n      (assoc-in ndb posts-key merged-items)\n      (update-in ndb (conj org-data-key :unfollowing-count) #(ou/disappearing-count-value % (:total-count fixed-unfollowing-data)))\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %)))))\n\n(defmethod dispatcher/action :unfollowing-get/finish\n  [db [_ org-slug sort-type unfollowing-data]]\n  (unfollowing-get-finish db org-slug sort-type unfollowing-data))\n\n(defmethod dispatcher/action :unfollowing-refresh/finish\n  [db [_ org-slug sort-type unfollowing-data]]\n  (unfollowing-get-finish db org-slug sort-type unfollowing-data))\n\n(defmethod dispatcher/action :unfollowing-more\n  [db [_ org-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug :unfollowing sort-type)\n        container-data (get-in db container-key)\n        next-posts-data (assoc container-data :loading-more true)]\n    (assoc-in db container-key next-posts-data)))\n\n(defmethod dispatcher/action :unfollowing-more/finish\n  [db [_ org sort-type direction posts-data]]\n  (if posts-data\n    (let [org-data-key (dispatcher/org-data-key org)\n          org-data (get-in db org-data-key)\n          container-key (dispatcher/container-key org :unfollowing sort-type)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-unfollowing-data (merge (:collection posts-data) {:posts-list (:posts-list container-data)\n                                                                    :old-links (:links container-data)\n                                                                    :container-slug :unfollowing})\n          active-users (dispatcher/active-users org db)\n          fixed-unfollowing-data (au/parse-container prepare-unfollowing-data (dispatcher/change-data db org) org-data active-users sort-type {:direction direction})\n          new-items-map (merge old-posts (:fixed-items fixed-unfollowing-data))\n          new-container-data (-> fixed-unfollowing-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more :fixed-items))]\n      (as-> db ndb\n        (assoc-in ndb container-key new-container-data)\n        (assoc-in ndb posts-data-key new-items-map)\n        (update-in ndb (conj org-data-key :unfollowing-count) #(ou/disappearing-count-value % (:total-count fixed-unfollowing-data)))\n        (update-in ndb (dispatcher/user-notifications-key org)\n         #(notif-util/fix-notifications ndb %))))\n    db))\n\n(defmethod dispatcher/action :following-badge/on\n  [db [_ org-slug]]\n  (assoc-in db (dispatcher/following-badge-key org-slug) true))\n\n(defmethod dispatcher/action :following-badge/off\n  [db [_ org-slug]]\n  (assoc-in db (dispatcher/following-badge-key org-slug) false))\n\n(defmethod dispatcher/action :replies-badge/on\n  [db [_ org-slug]]\n  (assoc-in db (dispatcher/replies-badge-key org-slug) true))\n\n(defmethod dispatcher/action :replies-badge/off\n  [db [_ org-slug]]\n  (assoc-in db (dispatcher/replies-badge-key org-slug) false))\n\n(defmethod dispatcher/action :container-seen\n  [db [_ org-slug container-id seen-at]]\n  ; (if org-slug\n  ;   (assoc-in db (dispatcher/container-seen-key org-slug container-id) seen-at)\n  ;   db)\n  db)\n\n(defmethod dispatcher/action :container-nav-in\n  [db [_ org-slug container-slug sort-type]]\n  (cond\n   (= container-slug :replies)\n   (assoc-in db (dispatcher/replies-badge-key org-slug) false)\n   (= container-slug :following)\n   (assoc-in db (dispatcher/following-badge-key org-slug) false)\n   :else\n   db))\n\n(defmethod dispatcher/action :container-nav-out\n  [db [_ org-slug container-slug sort-type]]\n  (let [container-key (dispatcher/container-key org-slug container-slug sort-type)\n        container-data (get-in db container-key)\n        org-data (dispatcher/org-data db org-slug)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)]\n    (-> db\n     (assoc-in (conj container-key :last-seen-at) (:next-seen-at container-data))\n     (au/update-container container-slug org-data change-data active-users))))\n\n(defmethod dispatcher/action :update-replies-comments\n  [db [_ org-slug current-board-slug]]\n  (let [org-data (dispatcher/org-data db org-slug)\n        change-data (dispatcher/change-data db org-slug)\n        active-users (dispatcher/active-users org-slug db)]\n    (au/update-replies-comments db org-data change-data active-users)))\n\n(defmethod dispatcher/action :update-container\n  [db [_ org-slug current-board-slug container-slug]]\n  (let [org-data (dispatcher/org-data db org-slug)\n        change-data (dispatcher/change-data db)\n        active-users (dispatcher/active-users org-slug db)\n        next-db (au/update-container db container-slug org-data change-data active-users)\n        badge-following? (when (and (not= current-board-slug :following)\n                                    (= container-slug :following))\n                           (some :unseen (:posts-list (dispatcher/following-data org-slug next-db))))\n        badge-replies? (when (and (not= (keyword current-board-slug) :replies)\n                                  (= container-slug :replies))\n                         (some :unseen-comments (:posts-list (dispatcher/replies-data org-slug next-db))))]\n    (-> next-db\n     (update-in (dispatcher/following-badge-key org-slug) #(boolean (or badge-following? %)))\n     (update-in (dispatcher/replies-badge-key org-slug) #(boolean (or badge-replies? %))))))\n\n(defmethod dispatcher/action :update-containers\n  [db [_ org-slug]]\n  (let [org-data (dispatcher/org-data db org-slug)\n        change-data (dispatcher/change-data db)\n        active-users (dispatcher/active-users org-slug db)]\n    (au/update-containers db org-data change-data active-users)))\n"]}