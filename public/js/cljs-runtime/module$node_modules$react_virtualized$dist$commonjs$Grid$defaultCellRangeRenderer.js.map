{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = defaultCellRangeRenderer;\n\nvar _types = require('./types');\n\n/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\n\nfunction defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n\n  var renderedCells = [];\n\n  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = rowIndex + '-' + columnIndex;\n      var style = void 0;\n\n      // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n\n      var renderedCell = void 0;\n\n      // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key];\n\n        // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","defaultCellRangeRenderer","_ref","cellCache","cellRenderer","columnSizeAndPositionManager","columnStartIndex","columnStopIndex","deferredMeasurementCache","horizontalOffsetAdjustment","isScrolling","isScrollingOptOut","parent","rowSizeAndPositionManager","rowStartIndex","rowStopIndex","styleCache","verticalOffsetAdjustment","visibleColumnIndices","visibleRowIndices","renderedCells","areOffsetsAdjusted","canCacheStyle","rowIndex","rowDatum","getSizeAndPositionOfCell","columnIndex","columnDatum","isVisible","start","stop","key","style","has","height","left","position","top","width","size","offset","cellRendererParams","renderedCell","type","__internalCellMeasurerFlag","props","children","undefined","__warnedAboutMissingStyle","console","warn","push"]
}
