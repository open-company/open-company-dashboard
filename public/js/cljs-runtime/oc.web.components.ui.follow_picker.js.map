{"version":3,"sources":["oc/web/components/ui/follow_picker.cljs"],"mappings":"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","names":["oc.web.components.ui.follow-picker/is-user?","item","oc.web.utils.activity.resource_type_QMARK_","oc.web.components.ui.follow-picker/sort-items","items","p1__46111#","cljs.core.sort_by","oc.web.utils.activity/board?","oc.web.components.ui.follow-picker/search-string","v","q","cuerdas.core/lower","cuerdas.core/includes?","oc.web.components.ui.follow-picker/search-item","or__4126__auto__","oc.web.components.ui.follow-picker/filter-item","s","current-user-id","and__4115__auto__","cljs.core.not_EQ_","oc.web.lib.utils/default-drafts-board-slug","cljs.core/not","cljs.core/seq","cljs.core/some","cljs.core.partial","cuerdas.core.split","cljs.core._EQ_","oc.web.components.ui.follow-picker/filter-sort-items","p1__46152#","cljs.core/filterv","rum.core/build-defc","p__46159","map__46160","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.interpreter/interpret","attrs46167","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","attrs46168","attrs46169","attrs46173","attrs46174","oc.web.components.ui.follow-picker/empty-user-component","rum.core/static","org-data","current-user-data","G__46183","oc.web.components.ui.invite-email/invite-email","oc.web.actions.nav-sidebar/show-org-settings","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.actions.nav-sidebar/show-user-settings","oc.web.components.ui.follow-picker/follow-picker-items","state","prefix","followers-boards-count","org.martinklepsch.derivatives/react","followers-publishers-count","is-mobile?","oc.web.lib.responsive/is-mobile-size?","iter__4529__auto__","s__46195","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__46197","cljs.core/chunk-buffer","i__46196","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46194","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","board?","oc.web.actions.nav-sidebar/show-section-editor","followers","followers-count","G__46210","G__46213","oc.web.components.ui.follow-button/follow-button","rum.core/build-defcs","attrs46239","oc.web.components.ui.follow-picker/follow-picker","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/strict-refresh-tooltips-mixin","oc.web.mixins.ui/on-window-click-mixin","e","cljs.core/deref","oc.web.lib.utils/event-inside?","rum.core/ref-node","cljs.core/reset!","oc.web.actions.user/load-follow-list","oc.web.actions.user/load-followers-count","oc.web.actions.user/refresh-follow-containers","all-active-users","follow-boards-list","cljs.core.map","follow-publishers-list","all-boards","p1__46214#","cljs.core.assoc","authors-uuids","cljs.core/set","all-authors","cljs.core/vals","p1__46215#","cljs.core.filter","G__46228","p1__46216#","all-items","G__46229","cljs.core/Keyword","cljs.core.concat","with-follow","p1__46217#","oc.web.lib.utils/in?","sorted-items","following-items","unfollowing-items","cljs.core.comp","show-following?","oc.web.actions.nav-sidebar/close-all-panels","oc.web.actions.nav-sidebar/show-section-add","p1__46218#","oc.web.lib.utils.link_for","G__46243","cljs.core/name","G__46244","js/Error","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.follow-picker\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.urls :as oc-urls]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.dropdown-list :refer (dropdown-list)]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.invite-email :refer (invite-email)]\n            [oc.web.components.ui.follow-button :refer (follow-button)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(defn- is-user? [item]\n  (activity-utils/resource-type? item :user))\n\n(defn- sort-items [items]\n  (sort-by #(if (activity-utils/board? %)\n              (:name %)\n              (:short-name %))\n   items))\n\n(defn- search-string [v q]\n  (-> v string/lower (string/includes? q)))\n\n(defn- search-item [item q]\n  (or (-> item :name (search-string q))\n      (-> item :slug (search-string q))\n      (-> item :first-name (search-string q))\n      (-> item :last-name (search-string q))\n      (-> item :email (search-string q))\n      (-> item :title (search-string q))\n      (-> item :location (search-string q))))\n\n(defn- filter-item [s current-user-id item q]\n  (and (or (and (is-user? item)\n                (not= current-user-id (:user-id item)))\n           (and (activity-utils/board? item)\n                (not= (:slug item) utils/default-drafts-board-slug)\n                (not (:publisher-board item))))\n        (or (not (seq q))\n            (search-item item q)\n            (some (partial search-item item) (string/split q #\"\\s\"))\n            (and (= q \"follow\")\n                 (:follow item))\n            (and (= q \"unfollow\")\n                 (not (:follow item))))))\n\n(defn- filter-sort-items [s current-user-id items q]\n  (sort-items (filterv #(filter-item s current-user-id % (string/lower q)) items)))\n\n(rum/defc empty-user-component < rum/static\n  [{:keys [org-data current-user-data]}]\n  [:div.follow-picker-empty-users\n    [:div.invite-users-box\n      [:div.invite-users-box-inner.group\n        [:div.invite-users-title\n          \"Invite your team to join you!\"]\n        (invite-email {:rows-num 3\n                       :hide-user-role true\n                       :save-title \"Send invites\"\n                       :saving-title \"Sending invites\"\n                       :saved-title \"Invites sent!\"})\n        [:div.invite-users-footer\n          [:span.invite-user-or\n            \"Or, \"]\n          [:button.mlb-reset.invite-link-bt\n            {:on-click #(nav-actions/show-org-settings :invite-email)}\n            \"generate an invite link to share\"]]]]\n    [:div.follow-picker-empty-header\n      \"People (1)\"]\n    [:div.follow-picker-empty-self-user\n      (user-avatar-image current-user-data)\n      [:span.user-name\n        (str (:name current-user-data) \" (you)\")]\n      [:span.user-role\n        (:title current-user-data)]\n      [:span.followers-count\n        ; \"No followers\"\n        ]\n      [:button.mlb-reset.edit-profile-bt\n        {:on-click #(nav-actions/show-user-settings :profile)}\n        \"Edit profile\"]]])\n\n(defn- follow-picker-items [state items prefix]\n  (let [followers-boards-count (drv/react state :followers-boards-count)\n        followers-publishers-count (drv/react state :followers-publishers-count)\n        is-mobile? (responsive/is-mobile-size?)]\n    (for [i items\n          :let [board? (activity-utils/board? i)]]\n      [:div.follow-picker-item-row.group\n        {:key (str prefix \"-picker-\" (if board? (:uuid i) (:user-id i)))\n         :class (when (:follow i) \"selected\")}\n        (if board?\n          [:div.follow-picker-board-item\n            (:name i)]\n          [:div.follow-picker-user-item\n            (user-avatar-image i)\n            [:span.user-name\n              (:name i)]\n            [:span.user-role\n              (:title i)]])\n        (when (and board?\n                   (not (:read-only i)))\n          [:button.mlb-reset.board-settings-bt\n            {:data-toggle (when-not is-mobile? \"tooltip\")\n             :data-placement \"top\"\n             :data-container \"body\"\n             :title (str (:name i) \" settings\")\n             :on-click #(nav-actions/show-section-editor (:slug i))}])\n        (let [followers (if board?\n                          (get followers-boards-count (:uuid i))\n                          (get followers-publishers-count (:user-id i)))\n              followers-count (:count followers)]\n          [:span.followers-count\n            (when (pos? followers-count)\n              (str followers-count \" follower\" (when (not= followers-count 1) \"s\")))])\n        (follow-button {:following (:follow i)\n                        :resource-type (:resource-type i)\n                        :resource-uuid (if board? (:uuid i) (:user-id i))})])))\n\n(rum/defcs follow-picker < rum/reactive\n\n (drv/drv :org-data)\n (drv/drv :active-users)\n (drv/drv :current-user-data)\n (drv/drv :follow-boards-list)\n (drv/drv :follow-publishers-list)\n (drv/drv :followers-boards-count)\n (drv/drv :followers-publishers-count)\n (rum/local \"\" ::query)\n (rum/local false ::saving)\n (rum/local :boards ::filter)\n (rum/local false ::filter-open)\n ui-mixins/strict-refresh-tooltips-mixin\n (ui-mixins/on-window-click-mixin (fn [s e]\n  (when (and @(::filter-open s)\n             (not (utils/event-inside? e (rum/ref-node s :follow-filter-bt))))\n    (reset! (::filter-open s) false))))\n {:init (fn [s]\n   ;; Refresh the following list\n   (user-actions/load-follow-list)\n   (user-actions/load-followers-count)\n   s)\n  :will-unmount (fn [s]\n   (user-actions/refresh-follow-containers)\n   s)}\n\n  [s]\n  (let [org-data (drv/react s :org-data)\n        current-user-data (drv/react s :current-user-data)\n        all-active-users (drv/react s :active-users)\n        follow-boards-list (map :uuid (drv/react s :follow-boards-list))\n        follow-publishers-list (map :user-id (drv/react s :follow-publishers-list))\n        all-boards (map #(assoc % :resource-type :board) (:boards org-data))\n        authors-uuids (->> org-data :authors (map :user-id) set)\n        all-authors (->> all-active-users\n                     vals\n                     (filter #(and (authors-uuids (:user-id %))\n                                   (not= (:user-id current-user-data) (:user-id %))))\n                     (map #(assoc % :resource-type :user)))\n        all-items (case @(::filter s)\n                   :users all-authors\n                   :boards all-boards\n                   (concat all-boards all-authors))\n        with-follow (map #(assoc % :follow (or (and (is-user? %)\n                                                    (utils/in? follow-publishers-list (:user-id %)))\n                                               (and (activity-utils/board? %)\n                                                    (utils/in? follow-boards-list (:uuid %)))))\n                      all-items)\n        sorted-items (filter-sort-items s (:user-id current-user-data) with-follow @(::query s))\n        following-items (filter :follow sorted-items)\n        unfollowing-items (filter (comp not :follow) sorted-items)\n        show-following? (or (not= (count all-authors) 1)\n                            (not= (count all-boards) 1))]\n    [:div.follow-picker\n      [:div.follow-picker-modal\n        [:button.mlb-reset.modal-close-bt\n          {:on-click #(nav-actions/close-all-panels)}]\n        [:div.follow-picker-header\n          [:button.mlb-reset.create-board-bt\n            {:on-click #(nav-actions/show-section-add)}\n            \"New topic\"]\n          [:h3.follow-picker-title\n            \"Personalize your Home feed\"]]\n        [:div.follow-picker-body\n          (if-not show-following?\n            [:div.follow-picker-empty-items\n              [:div.follow-picker-empty-icon]\n              [:div.follow-picker-empty-copy\n                \"There are no topics to follow yet. \"\n                (when (utils/link-for (:links org-data) \"create\")\n                  [:button.mlb-reset.follow-picker-empty-invite-bt\n                    {:on-click #(nav-actions/show-org-settings :invite-picker)}\n                    \"Add a topic to get started.\"])]\n              (empty-user-component {:org-data org-data :current-user-data current-user-data})]\n            [:div.follow-picker-body-inner.group\n              [:input.follow-picker-search-field-input.oc-input\n                {:value @(::query s)\n                 :type \"text\"\n                 :ref :query\n                 :class (name @(::filter s))\n                 :placeholder (case @(::filter s)\n                               :all    \"Find a topic or person\"\n                               :users  \"Find a person\"\n                               :boards \"Find a topic\")\n                 :on-change #(reset! (::query s) (.. % -target -value))}]\n              [:div.follow-picker-items-list.group\n                ;; Following\n                [:div.follow-picker-row-header.group\n                  (when (seq following-items)\n                    [:div.follow-picker-row-header-left\n                      \"Subscriptions\"])\n                  (comment ;; Hide filter for now\n                    [:div.follow-picker-row-header-right\n                      [:button.mlb-reset.follow-filter-bt\n                        {:ref :follow-filter-bt\n                         :on-click #(swap! (::filter-open s) not)}\n                        (case @(::filter s)\n                         :users \"Only people\"\n                         :boards \"Only topics\"\n                         \"All topics & people\")]\n                      (when @(::filter-open s)\n                        (dropdown-list {:items [{:value :all :label \"All topics & people\"}\n                                                {:value :users :label \"Only people\"}\n                                                {:value :boards :label \"Only topics\"}]\n                                        :value @(::filter s)\n                                        :on-change #(reset! (::filter s) (:value %))}))])]\n                (follow-picker-items s following-items \"follow\")\n                ;; Unfollowing\n                (when (seq unfollowing-items)\n                  [:div.follow-picker-row-header\n                    [:div.follow-picker-row-header-left.unfollow\n                      \"Suggestions\"]])\n                (when (seq unfollowing-items)\n                  (follow-picker-items s unfollowing-items \"unfollow\"))]])]]]))\n"]}