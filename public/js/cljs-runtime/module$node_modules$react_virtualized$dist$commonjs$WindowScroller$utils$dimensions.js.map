{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,mFAAf,CAAwG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6EhJC,QAASA,gBAAe,CAACC,OAAD,CAAU,CAChC,MAAaA,QAAb,GA7DmBC,MA6DnB,EAAyBC,QAAzB,CAAkCC,eAAlC,CACS,CACLC,IAAK,SAAA,EAAaH,OAAb,CAAsBA,MAAtB,CAA6BI,OAA7B,CAAuCH,QAAvC,CAAgDC,eAAhD,CAAgEG,SADhE,CAELC,KAAM,SAAA,EAAaN,OAAb,CAAsBA,MAAtB,CAA6BO,OAA7B,CAAuCN,QAAvC,CAAgDC,eAAhD,CAAgEM,UAFjE,CADT,CAMS,CACLL,IAAKJ,OAALI,CAAaE,SADR,CAELC,KAAMP,OAANO,CAAcE,UAFT,CAPuB,CA1ElCC,MAAA,CAAOC,cAAP,CAAsBb,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Cc,MAAO,CAAA,CADoC,CAA7C,CAGAd,QAAA,CAAQe,aAAR,CAqBAA,QAAsB,CAACC,aAAD;AAAgBC,KAAhB,CAAuB,CAC3C,MAAKD,cAAL,CAKoBA,aAAb,GAhBYb,MAgBZ,EACDe,KAIG,CAJOf,MAIP,CAHHgB,aAGG,CAHWD,KAGX,CAHmBC,WAGnB,CAFHC,KAEG,CAFUF,KAEV,CAFkBE,UAElB,CAAA,CACLC,OAA+B,QAAvB,GAAA,MAAOF,cAAP,CAAkCA,aAAlC,CAAgD,CADnD,CAELG,MAA6B,QAAtB,GAAA,MAAOF,MAAP,CAAiCA,KAAjC,CAA8C,CAFhD,CALF,EAUiBJ,aAnBjB,CAAQO,qBAAR,EAIP,CACS,CACLF,OAAQJ,KAARI,CAAcG,YADT,CAELF,MAAOL,KAAPK,CAAaG,WAFR,CAFkC,CApB7CzB,QAAA,CAAQ0B,iBAAR,CA8CAA,QAA0B,CAACxB,OAAD,CAAUyB,SAAV,CAAqB,CAC7C,GAAaA,SAAb,GArCmBxB,MAqCnB,EAA2BC,QAA3B,CAAoCC,eAApC,CAAqD,CACnD,IAAIuB,iBAAmBxB,QAAnBwB,CAA4BvB,eAC5BwB,QAAAA,CAA6B3B,OAhC5B,CAAQqB,qBAAR,EAiCDO,iBAAAA;AAA+BF,gBAjC9B,CAAQL,qBAAR,EAkCL,OAAO,CACLjB,IAAKuB,OAALvB,CAAiBA,GAAjBA,CAAuBwB,gBAAvBxB,CAAqCA,GADhC,CAELG,KAAMoB,OAANpB,CAAkBA,IAAlBA,CAAyBqB,gBAAzBrB,CAAuCA,IAFlC,CAJ4C,CAS/CsB,gBAAAA,CAAe9B,eAAA,CAAgB0B,SAAhB,CACfK,QAAAA,CAA8B9B,OAxC7B,CAAQqB,qBAAR,EAyCDU,UAAAA,CAAgCN,SAzC/B,CAAQJ,qBAAR,EA0CL,OAAO,CACLjB,IAAK0B,OAAL1B,CAAkBA,GAAlBA,CAAwByB,gBAAxBzB,CAAqCA,GAArCA,CAA2C2B,SAA3C3B,CAA0DA,GADrD,CAELG,KAAMuB,OAANvB,CAAmBA,IAAnBA,CAA0BsB,gBAA1BtB,CAAuCA,IAAvCA,CAA8CwB,SAA9CxB,CAA6DA,IAFxD,CAboC,CA7C/CT,QAAA,CAAQC,eAAR,CAA0BA,eARsH;",
"sources":["node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/dimensions.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDimensions = getDimensions;\nexports.getPositionOffset = getPositionOffset;\nexports.getScrollOffset = getScrollOffset;\n\n\n/**\n * Gets the dimensions of the element, accounting for API differences between\n * `window` and other DOM elements.\n */\n\nvar isWindow = function isWindow(element) {\n  return element === window;\n};\n\n// TODO Move this into WindowScroller and import from there\n\n\nvar getBoundingBox = function getBoundingBox(element) {\n  return element.getBoundingClientRect();\n};\n\nfunction getDimensions(scrollElement, props) {\n  if (!scrollElement) {\n    return {\n      height: props.serverHeight,\n      width: props.serverWidth\n    };\n  } else if (isWindow(scrollElement)) {\n    var _window = window,\n        innerHeight = _window.innerHeight,\n        innerWidth = _window.innerWidth;\n\n    return {\n      height: typeof innerHeight === 'number' ? innerHeight : 0,\n      width: typeof innerWidth === 'number' ? innerWidth : 0\n    };\n  } else {\n    return getBoundingBox(scrollElement);\n  }\n}\n\n/**\n * Gets the vertical and horizontal position of an element within its scroll container.\n * Elements that have been \u201cscrolled past\u201d return negative values.\n * Handles edge-case where a user is navigating back (history) from an already-scrolled page.\n * In this case the body\u2019s top or left position will be a negative number and this element\u2019s top or left will be increased (by that amount).\n */\nfunction getPositionOffset(element, container) {\n  if (isWindow(container) && document.documentElement) {\n    var containerElement = document.documentElement;\n    var elementRect = getBoundingBox(element);\n    var containerRect = getBoundingBox(containerElement);\n    return {\n      top: elementRect.top - containerRect.top,\n      left: elementRect.left - containerRect.left\n    };\n  } else {\n    var scrollOffset = getScrollOffset(container);\n    var _elementRect = getBoundingBox(element);\n    var _containerRect = getBoundingBox(container);\n    return {\n      top: _elementRect.top + scrollOffset.top - _containerRect.top,\n      left: _elementRect.left + scrollOffset.left - _containerRect.left\n    };\n  }\n}\n\n/**\n * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility\n * and API differences between `window` and other DOM elements.\n */\nfunction getScrollOffset(element) {\n  if (isWindow(element) && document.documentElement) {\n    return {\n      top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,\n      left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft\n    };\n  } else {\n    return {\n      top: element.scrollTop,\n      left: element.scrollLeft\n    };\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","getScrollOffset","element","window","document","documentElement","top","scrollY","scrollTop","left","scrollX","scrollLeft","Object","defineProperty","value","getDimensions","scrollElement","props","_window","innerHeight","innerWidth","height","width","getBoundingClientRect","serverHeight","serverWidth","getPositionOffset","container","containerElement","elementRect","containerRect","scrollOffset","_elementRect","_containerRect"]
}
