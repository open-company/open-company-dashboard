{"version":3,"sources":["oc/web/actions/poll.cljs"],"mappings":";AAWA,AAAA,AAAMA,AAAUC,AAAaC;AAA7B,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAmCH;AAAnC,AAAA,AAAA;;AACA,AAAMI,AAAS,AAACC;AACVC,AAAU,AAACC,AAAaH,AAASJ;AACjCQ,AAAS,AAAA,AAAA,AAAI,AAACC,AAAMV,AACT,AAACW,AAAI,AAAA,AAAA,AAACC,AAAOZ,AAAqB,AAACa,AAAQZ,AAC1CD,AAAoB,AAACa,AAAQZ;AAJ/C,AAKE,AAAA,AAAA,AAACa,AAAsBL,AAASF;;AAEpC,AAAA,AAAMQ,AAAaf,AAAaO;AAAhC,AACE,AAAAL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA2BJ,AAAa,AAAA,AAAYO;AAApD,AAAA,AAAA;;AACA,AAAA,AAAA,AAAA,AAAAS,AAACF,AAAuB,AAACH,AAAI,AAAA,AAACM,AAAKjB;AAAnC,AAA0D,AAAAgB,AAACE,AAAS,AAAA,AAAYX;;;AAChF,AAAAY,AAAwB,AAACE,AAA2B,AAAA,AAAYd;AAAhE,AAAA,AAAAY;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAc,AAAiBA,AAAcA;;AAD/C;;;AAGF,AAAA,AAAME,AAA2BtB,AAAaO;AAA9C,AACE,AAAAL,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAyCJ,AAAa,AAAA,AAAYO;AAAlE,AAAA,AAAA;;AACA,AAACQ,AAAYf,AAAaO;;AAE5B,AAAA,AAAMgB,AAAcd;AAApB,AACE,AAAA,AAAA,AAAA,AAAAe,AAACV,AAAuBL;AAAxB,AAAkC,AAAAe,AAAA,AAAA,AAACC;;;AAErC,AAAA,AAAMC,AAAcjB;AAApB,AACE,AAAA,AAAA,AAAA,AAAAkB,AAACb,AAAuBL;AAAxB,AAAkC,AAAAkB,AAAA,AAACT;;;AAErC,AAAA,AAAMU,AAAiBnB,AAASF,AAAUsB;AAA1C,AACE,AAAA,AAAA,AAACf,AAAsB,AAACH,AAAI,AAAA,AAACM,AAAKR,AAAqBoB;;AACvD,AAAA,AAAA,AAACC;AAAD,AAAgB,AAACC,AAA8B,AAAA,AAAYxB,AAAWsB;;;AAIxE,AAAA,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAAW7B;AAAjB,AAAA,AAAA+B,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA6BO;AAA7B,AACE,AAAMC,AAAe,AAACC,AAAc,AAAC3C,AAAuByC;AAA5D,AACE,AAAA,AAAA,AAAA,AAAAG,AAACpC,AAAuBL;AAAxB,AAAkC,AAAAyC,AAAA,AAAA,AAAA,AAACC,AAAkB,AAAC1B,AAAM,AAAA,AAAAyB,AAAa,AAACrC,AAAQ,AAAA,AAAWmC,AAAiBA,AACtD,AAACI;;;;AAH7D,AAAA,AAAA,AAAMd;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAKA,AAAA,AAAMW,AAAc5C,AAAS6C,AAASC;AAAtC,AACE,AAAA,AAAA,AAACzC,AAAsB,AAACH,AAAI,AAAA,AAAA,AAAA,AAACC,AAAOH,AAAmB,AAACI,AAAQyC,AAAmBC;;AAErF,AAAA,AAAMC,AAAc/C,AAASgD;AAA7B,AACE,AAAA,AAAA,AAAA,AAAAC,AAAC5C,AAAuBL;AAAxB,AAAkC,AAAAiD,AAAA,AAAA,AAAA,AAACP,AAAkB,AAACjC,AAAO,AAAA,AAAAwC,AAAa,AAAC7C,AAAQ4C,AAC3B,AAACL;;;AAE3D,AAAA,AAAMO,AAAepD,AAAUE,AAASsC;AAAxC,AACE,AAAA7C,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAmCK,AAAiBsC;AAApD,AAAA,AAAA;;AACA,AAAMa,AAAe,AAAA,AAAA,AAACC,AAAe,AAAA,AAAQtD;AAA7C,AACE,AAACuD,AAAUrD,AAASsC;;AACpB,AAACgB,AAAmBH,AAAeb,AAAW,AAAAiB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAoBV;AAApB,AAAAc,AAAAJ,AAAA,AAAyBM;AAAzB,AAC7C,AAAA,AAACC,AAAqCF,AAAO,AAAA,AAAIC,AAAQ,AAACE,AAAWlB;;;AAE1E,AAAA,AAAMmB,AAAuBnE,AAAUE,AAASgD;AAAhD,AACE,AAAAvD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAA4CK,AAAkBgD;AAA9D,AAAA,AAAA;;AACA,AAAMkB,AAAepE,AAAmB,AAAA,AAAA,AAACM,AAAQ4C;AAC3CmB,AAAkB,AAAA,AAAA,AAACf,AAAe,AAAA,AAAQc;AADhD,AAEE,AAACnB,AAAa/C,AAASgD;;AACvB,AAACoB,AAAsBD,AAAkB,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAAV,AAAAU,AAAA,AAAaT;AAAb,AAAAD,AAAAU,AAAA,AAAoBxB;AAApB,AAAAc,AAAAU,AAAA,AAAyBR;AAAzB,AACxC,AAAA,AAACC,AAAqCF,AAAO,AAAA,AAAIC,AAAQ,AAACE,AAAWlB;;;AAI1E,AAAA,AAAOyB,AAAmBC,AAAQC,AAAMC;AAAxC,AACE,AAAIA;AACF,AAACxE,AAAI,AAACM,AAAK,AAACmE,AAAI,AAAA,AAAQF,AAAQD;;AAChC,AAAA,AAAAI,AAACC;AAAD,AAAU,AAAAD,AAACE,AAAON;AAAS,AAAA,AAAQC;;;AAEvC,AAAA,AAAOM,AAAmBP,AAAQQ,AAAQnC;AAA1C,AACE,AAAMoC,AAEW,AAAA,AAAAE,AAACC;AAAD,AAAO,AAAAD,AAAA,AAACnE,AACA,AAAAmE,AAACZ,AAAkBC,AAAU,AAACa,AAAE,AAAA,AAAAF,AAActC;AAHlDmC,AACJE,AACA;AAFjB,AAIE,AAACI,AAAO,AAAA,AAACF,AAAeH,AAAWA;;AAEvC,AAAA,AAAMM,AAAYzF,AAAUE,AAAS6C;AAArC,AACE,AAAApD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA4BkD;AAA5B,AAAA,AAAA;;AACA,AAAM4B,AAAM,AAAA,AAAA,AAACe,AAAO1F,AAAoB,AAACM,AAAQyC;AAAjD,AACE,AAAAnC,AAAqB,AAAA,AAAC0C,AAAe,AAAA,AAAQqB;AAA7C,AAAA,AAAA/D;AAAA,AAAA,AAAAA,AAAW+E;AAAX,AACE,AAAMjB,AAAQ,AAAA,AAAU,AAAC3E;AAAzB,AACE,AAAA,AAAA,AAAA,AAAA6F,AAACrF,AAAuB,AAACH,AAAI,AAAA,AAACM,AAAKR;AAAnC,AAAwD,AAAA0F,AAACX,AAAkBP,AAAU3B;;;AACvF,AAAC8C,AAAcF,AAAU,AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApC,AAAA,AAAAoC,AAAA,AAAA,AAAA,AAAA,AAAAnC,AAAAC,AAAAkC,AAAAA;AAAA,AAAAjC,AAAAiC,AAAA,AAAahC;AAAb,AAAAD,AAAAiC,AAAA,AAAoB/C;AAApB,AAAAc,AAAAiC,AAAA,AAAyB/B;AAAzB,AACxB,AAAA,AAACC,AAAqCF,AAAO,AAAA,AAAIC,AAAQ,AAACE,AAAWlB;;;AAJxE;;;AAMJ,AAAA,AAAMgD,AAAchG,AAAUE,AAAS6C;AAAvC,AACE,AAAApD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA8BkD;AAA9B,AAAA,AAAA;;AACA,AAAM4B,AAAM,AAAA,AAAA,AAACe,AAAO1F,AAAoB,AAACM,AAAQyC;AAAjD,AACE,AAAAnC,AAAuB,AAAA,AAAC0C,AAAe,AAAA,AAAQqB;AAA/C,AAAA,AAAA/D;AAAA,AAAA,AAAAA,AAAWqF;AAAX,AACE,AAAMvB,AAAQ,AAAA,AAAU,AAAC3E;AAAzB,AACE,AAAA,AAAA,AAAA,AAAAmG,AAAC3F,AAAuB,AAAA,AAAA,AAAA,AAACF,AAAOH,AAAmB,AAACI,AAAQyC;AAA5D,AAAgF,AAAAmD,AAAA,AAACzB,AAAkBC;;;AACrG,AAACmB,AAAcI,AAAY,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAAC,AAAAuC,AAAAA;AAAA,AAAAtC,AAAAsC,AAAA,AAAarC;AAAb,AAAAD,AAAAsC,AAAA,AAAoBpD;AAApB,AAAAc,AAAAsC,AAAA,AAAyBpC;AAAzB,AAC1B,AAAA,AAACC,AAAqCF,AAAO,AAAA,AAAIC,AAAQ,AAACE,AAAWlB;;;AAJxE","names":["oc.web.actions.poll/add-poll","dispatch-key","poll-id","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cur-user","oc.web.dispatcher.current_user_data","poll-data","oc.web.utils.poll/poll-data","poll-key","cljs.core/coll?","cljs.core/vec","cljs.core.concat","cljs.core.keyword","oc.web.dispatcher/dispatch!","oc.web.actions.poll/remove-poll","p1__38822#","cljs.core.conj","cljs.core.dissoc","temp__5735__auto__","poll-element","oc.web.utils.poll/get-poll-portal-element","oc.web.actions.poll/remove-poll-for-max-retry","oc.web.actions.poll/show-preview","p1__38823#","cljs.core.assoc","oc.web.actions.poll/hide-preview","p1__38827#","oc.web.actions.poll/update-question","question","oc.web.lib.utils/after","oc.web.utils.poll/set-poll-element-question!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.poll/add-reply","p__38834","vec__38835","cljs.core.nth","seq38832","G__38833","cljs.core/first","cljs.core/next","self__4723__auto__","reply-body","new-reply-data","oc.web.utils.poll/poll-reply","p1__38828#","cljs.core.merge","oc.web.lib.utils/as-of-now","oc.web.actions.poll/update-reply","reply-id","body","oc.web.actions.poll/delete-reply","poll-reply-id","p1__38838#","oc.web.actions.poll/add-new-reply","add-reply-link","oc.web.lib.utils.link_for","oc.web.actions.poll.add_reply","oc.web.api/poll-add-reply","p__38839","map__38840","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","status","success","oc.web.actions.activity/activity-get-finish","oc.web.lib.json/json->cljs","oc.web.actions.poll/delete-existing-reply","reply-data","delete-reply-link","oc.web.api/poll-delete-reply","p__38842","map__38843","oc.web.actions.poll/update-reply-vote","user-id","reply","add?","cljs.core/set","p1__38845#","cljs.core/filterv","cljs.core.not_EQ_","oc.web.actions.poll/update-vote-reply","replies","reps-coll","cljs.core/vals","p1__38846#","cljs.core.mapv","cljs.core._EQ_","cljs.core/zipmap","oc.web.actions.poll/vote-reply","cljs.core.get_in","vote-link","p1__38847#","oc.web.api/poll-vote","p__38848","map__38849","oc.web.actions.poll/unvote-reply","unvote-link","p1__38851#","p__38852","map__38853"],"sourcesContent":["(ns oc.web.actions.poll\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.utils.poll :as pu]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.actions.activity :as activity-actions]))\n\n;; Polls\n\n(defn add-poll [dispatch-key poll-id]\n  (timbre/info \"Adding poll with id\" poll-id)\n  (let [cur-user (dis/current-user-data)\n        poll-data (pu/poll-data cur-user poll-id)\n        poll-key (if (coll? dispatch-key)\n                   (vec (concat dispatch-key [:polls (keyword poll-id)]))\n                   [dispatch-key :polls (keyword poll-id)])]\n    (dis/dispatch! [:input poll-key poll-data])))\n\n(defn remove-poll [dispatch-key poll-data]\n  (timbre/info \"Remove poll\" dispatch-key (:poll-uuid poll-data))\n  (dis/dispatch! [:update (vec (conj dispatch-key :polls)) #(dissoc % (:poll-uuid poll-data))])\n  (when-let [poll-element (pu/get-poll-portal-element (:poll-uuid poll-data))]\n    (.removeChild (.-parentElement poll-element) poll-element)))\n\n(defn remove-poll-for-max-retry [dispatch-key poll-data]\n  (timbre/info \"Remove poll for max retry\" dispatch-key (:poll-uuid poll-data))\n  (remove-poll dispatch-key poll-data))\n\n(defn show-preview [poll-key]\n  (dis/dispatch! [:update poll-key #(assoc % :preview true)]))\n\n(defn hide-preview [poll-key]\n  (dis/dispatch! [:update poll-key #(dissoc % :preview)]))\n\n(defn update-question [poll-key poll-data question]\n  (dis/dispatch! [:input (vec (conj poll-key :question)) question])\n  (utils/after 0 #(pu/set-poll-element-question! (:poll-uuid poll-data) question)))\n\n;; Replies\n\n(defn add-reply [poll-key & [reply-body]]\n  (let [new-reply-data (pu/poll-reply (dis/current-user-data) reply-body)]\n    (dis/dispatch! [:update poll-key #(merge % {:replies (assoc (:replies %) (keyword (:reply-id new-reply-data)) new-reply-data)\n                                                :updated-at (utils/as-of-now)})])))\n\n(defn update-reply [poll-key reply-id body]\n  (dis/dispatch! [:input (vec (concat poll-key [:replies (keyword reply-id) :body])) body]))\n\n(defn delete-reply [poll-key poll-reply-id]\n  (dis/dispatch! [:update poll-key #(merge % {:replies (dissoc (:replies %) (keyword poll-reply-id))\n                                              :updated-at (utils/as-of-now)})]))\n\n(defn add-new-reply [poll-data poll-key reply-body]\n  (timbre/info \"Adding new reply to\" poll-key \"body:\" reply-body)\n  (let [add-reply-link (utils/link-for (:links poll-data) \"reply\" \"POST\")]\n    (add-reply poll-key reply-body)\n    (api/poll-add-reply add-reply-link reply-body (fn [{:keys [status body success]}]\n     (activity-actions/activity-get-finish status (if success (json->cljs body) {}) nil)))))\n\n(defn delete-existing-reply [poll-data poll-key poll-reply-id]\n  (timbre/info \"Deleting existing reply from\" poll-key \"reply:\" poll-reply-id)\n  (let [reply-data (-> poll-data :replies (keyword poll-reply-id))\n        delete-reply-link (utils/link-for (:links reply-data) \"delete\" \"DELETE\")]\n    (delete-reply poll-key poll-reply-id)\n    (api/poll-delete-reply delete-reply-link (fn [{:keys [status body success]}]\n     (activity-actions/activity-get-finish status (if success (json->cljs body) {}) nil)))))\n\n;; Vote/unvote\n\n(defn- update-reply-vote [user-id reply add?]\n  (if add?\n    (vec (conj (set (:votes reply)) user-id))\n    (filterv #(not= % user-id) (:votes reply))))\n\n(defn- update-vote-reply [user-id replies reply-id]\n  (let [reps-coll (->> replies\n                   vals\n                   (mapv #(assoc % :votes\n                           (update-reply-vote user-id % (= (:reply-id %) reply-id)))))]\n    (zipmap (mapv :reply-id reps-coll) reps-coll)))\n\n(defn vote-reply [poll-data poll-key reply-id]\n  (timbre/info \"Voting reply\" reply-id)\n  (let [reply (get-in poll-data [:replies (keyword reply-id)])]\n    (when-let [vote-link (utils/link-for (:links reply) \"vote\")]\n      (let [user-id (:user-id (dis/current-user-data))]\n        (dis/dispatch! [:update (vec (conj poll-key :replies)) #(update-vote-reply user-id % reply-id)]))\n      (api/poll-vote vote-link (fn [{:keys [status body success]}]\n       (activity-actions/activity-get-finish status (if success (json->cljs body) {}) nil))))))\n\n(defn unvote-reply [poll-data poll-key reply-id]\n  (timbre/info \"Unvoting reply\" reply-id)\n  (let [reply (get-in poll-data [:replies (keyword reply-id)])]\n    (when-let [unvote-link (utils/link-for (:links reply) \"unvote\")]\n      (let [user-id (:user-id (dis/current-user-data))]\n        (dis/dispatch! [:update (concat poll-key [:replies (keyword reply-id) :votes]) #(update-reply-vote user-id % false)]))\n      (api/poll-vote unvote-link (fn [{:keys [status body success]}]\n       (activity-actions/activity-get-finish status (if success (json->cljs body) {}) nil))))))\n"]}