{"version":3,"sources":["oc/web/lib/jwt.cljs"],"mappings":";;AASA,AAAA,AAAMA,AAAQC;AAAd,AACE,AAAA,AACE,AAACE,AAAWF;AADd,AAAA,AAAAC,AAESE;AAFT,AAAAF,AAEmBG;AAFnB,AAGI,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAA6CP;AAA7C,AAAA,AAAA;;AAHJ;;AAAA,AAAA,AAAAC;;;;AAQF,AAAA,AAAMO;AAAN,AACE,AAAA,AAACC;;AAEH,AAAA,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AACM,AAACE,AAAsB,AAACN;;;AAD9B,AAAA,AAAA,AAAMI,AAEFG;AAFJ,AAGK,AAAAC,AAAQD;AAARC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AACQjB;AADR,AAAA,AAAA,AAAAiB,AAAA;AAAA;;AAEQ,AAAAA,AAAA,AAAA,AAACC;;;;AALd,AAAA,AAAA,AAAML;;AAAN,AASA,AAAA,AAAMM;AAAN,AACE,AAAA,AAACT;;AAEH,AAAA,AAAMU;AAAN,AACE,AAAAC,AAAQ,AAACF;AAATE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAcrB;AAAd,AAAA,AAAA,AAAAqB,AAAA;AAAA;;AAAqB,AAAAA,AAAA,AAAA,AAACH;;;AAExB,AAAA,AAAMI,AAASC;AAAf,AACE,AAAMC,AAAS,AAAI,AAACL,AAAK,AAACC,AAAc,AAACL;AAAzC,AACE,AAACU,AAAID,AAASD;;AAElB,AAAA,AAAMG;AAAN,AACE,AAAMC,AAAO,AAACC,AAAkB,AAAA,AAACN;AAAjC,AACE,AAACO,AAAEF,AAAO,AAACG,AAAO,AAAAC,AAAWJ;;AAEjC,AAAA,AAAMK;AAAN,AACE,AAAA,AAACH,AAAE,AAAA,AAACP;;AAEN,AAAA,AAAMW;AAAN,AACE,AAACC,AAAM,AAAA,AAACZ;;AAEV,AAAA,AAAMa;AAAN,AACE,AAAA,AAACb;;AAEH,AAAA,AAAMc,AAAWC;AAAjB,AACE,AAAMC,AAAO,AAAA,AAAChB;AAAd,AACE,AAAA,AAACiB,AAAOF,AAASC;;AAErB;;;;AAAA,AAAME,AAGHH;AAHH,AAIE,AAACI,AAAQ,AAAA,AAAA,AAAUJ;;AAErB,AAAA,AAAMK,AAA0BL;AAAhC,AACE,AAAMM,AAAM,AAAA,AAACrB;AAAb,AACE,AAAA,AAACiB,AAAOF,AAASM;;AAErB,AAAA,AAAMC,AAAeP;AAArB,AACE,AAAMQ,AAAW,AAAA,AAACvB;AAAlB,AAKE,AAACiB,AAAK,AAAAO;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAMxB;AAAN,AAAAyB,AAAAD,AAAA,AAAA,AAAQE;AAAR,AAAY,AAAM,AAACpB,AAAE,AAACW,AAAoBH,AAASd;AAAvC,AAA0C0B;;AAA1C;;AAA8CJ;;AAEpE,AAAM,AAAyBK,AAAW9B","names":["oc.web.lib.jwt/decode","encoded-jwt","e41052","js/module$node_modules$jwt_decode$lib$index","js/Object","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.lib.jwt/id-token","oc.web.lib.cookies/get-cookie","var_args","G__41054","oc.web.lib.jwt/get-id-token-contents","js/Error","oc.web.lib.jwt.get_id_token_contents","token","G__41055","cljs.core.js__GT_clj","oc.web.lib.jwt/jwt","oc.web.lib.jwt/get-contents","G__41056","oc.web.lib.jwt/get-key","k","contents","cljs.core.get","oc.web.lib.jwt/expired?","expire","goog.date.DateTime/fromTimestamp","cljs.core._EQ_","goog.date/min","js/Date","oc.web.lib.jwt/is-slack-org?","oc.web.lib.jwt/team-id","cljs.core/first","oc.web.lib.jwt/user-id","oc.web.lib.jwt/is-admin?","team-id","admins","cljs.core/some","oc.web.lib.jwt/slack-bots-team-key","cljs.core.keyword","oc.web.lib.jwt/user-is-part-of-the-team","teams","oc.web.lib.jwt/team-has-bot?","slack-bots","p__41057","vec__41058","cljs.core.nth","v","js/window"],"sourcesContent":["(ns oc.web.lib.jwt\n  (:require [oc.web.lib.cookies :as cook]\n            [taoensso.timbre :as timbre]\n            [goog.date.DateTime :as gdt]\n            [goog.date :as gd]\n            [\"jwt-decode\" :as jwt-decode]))\n\n;; jwt_decode\n\n(defn decode [encoded-jwt]\n  (try\n    (jwt-decode encoded-jwt)\n    (catch js/Object e\n      (timbre/warn \"Failed attempt to decode JWT:\" encoded-jwt)\n      nil)))\n\n;; ID Token\n\n(defn id-token []\n  (cook/get-cookie :id-token))\n\n(defn get-id-token-contents\n  ([] (get-id-token-contents (id-token)))\n  ([token]\n     (some-> token\n             decode\n             (js->clj :keywordize-keys true))))\n\n;; JWT\n\n(defn jwt []\n  (cook/get-cookie :jwt))\n\n(defn get-contents []\n  (some-> (jwt) decode (js->clj :keywordize-keys true)))\n\n(defn get-key [k]\n  (let [contents (if (jwt) (get-contents) (get-id-token-contents))]\n    (get contents k)))\n\n(defn expired? []\n  (let [expire (gdt/fromTimestamp (get-key :expire))]\n    (= expire (gd/min (js/Date.) expire))))\n\n(defn is-slack-org? []\n  (= (get-key :auth-source) \"slack\"))\n\n(defn team-id []\n  (first (get-key :teams)))\n\n(defn user-id []\n  (get-key :user-id))\n\n(defn is-admin? [team-id]\n  (let [admins (get-key :admin)]\n    (some #{team-id} admins)))\n\n(defn slack-bots-team-key\n  \"Keys of slack-bots are strings converted to keywords, since JSON adds the double quotes\n   when it gets keywordized on this side it becomes :\\\"team-id\\\".\"\n  [team-id]\n  (keyword (str \"\\\"\" team-id \"\\\"\")))\n\n(defn user-is-part-of-the-team [team-id]\n  (let [teams (get-key :teams)]\n    (some #{team-id} teams)))\n\n(defn team-has-bot? [team-id]\n  (let [slack-bots (get-key :slack-bots)]\n    ;; Since the team-id is a string on clj side the key in slakc-bots has quotes around that are\n    ;; interpreted as part of the key from the JSON parser.\n    ;; When decode keywordize the keys it keeps them in the key so we need to add them to check\n    ;; for the team value\n    (some (fn [[k v]] (when (= (slack-bots-team-key team-id) k) v)) slack-bots)))\n\n(set! (.-OCWebPrintJWTContents js/window) get-contents)"]}