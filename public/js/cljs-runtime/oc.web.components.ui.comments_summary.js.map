{"version":3,"sources":["oc/web/components/ui/comments_summary.cljs"],"mappings":"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","names":["oc.web.components.ui.comments-summary/get-author-name","author","oc.web.components.ui.comments-summary/comment-summary-string","authors","G__44489","cljs.core/count","cuerdas.core/capital","cljs.core/first","cljs.core/second","cljs.core.nth","oc.web.components.ui.comments-summary/max-face-pile","rum.core/build-defc","p__44491","map__44492","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","sablono.interpreter/interpret","oc.web.components.ui.comments-summary/comments-summary","rum.core/static","entry-data","comments-data","hide-label?","hide-face-pile?","new-comments-count","publisher?","add-comment-focus-prefix","show-bubble-icon?","current-activity-id","entry-comments","sorted-comments","comments-link","oc.web.lib.utils.link_for","comments-loaded?","cljs.core/seq","unwrapped-comments","cljs.core/vec","p1__44490#","cljs.core.mapcat","cljs.core.concat","comments-authors","cljs.core.map","cljs.core/vals","cljs.core/group-by","cljs.core.sort_by","cljs.core/reverse","comments-count","face-pile-count","x__4217__auto__","y__4218__auto__","is-mobile?","oc.web.lib.responsive/is-mobile-size?","faces-to-render","cljs.core.take","face-pile-width","show-new-tag?","e","temp__5735__auto__","add-comment-div","js/document","oc.web.actions.nav_sidebar.open_post_modal","oc.web.actions.comment/add-comment-focus","oc.web.utils.comment.add_comment_focus_value","cljs.core._EQ_","cljs.core.not_EQ_","cljs.core/not","iter__4529__auto__","s__44495","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__44497","cljs.core/chunk-buffer","i__44496","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44494","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","user-data","G__44498","G__44499","G__44500","G__44501","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.lib.responsive/is-tablet-or-mobile?","or__4126__auto__","oc.web.lib.utils/class-set","p__44502","map__44503","oc.web.components.ui.comments-summary/foc-comments-summary","oc.web.dispatcher.activity_sorted_comments_data","x__4214__auto__","y__4215__auto__","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.comments-summary\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [cuerdas.core :as string]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.comment :as cu]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.comment :as comment-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(defn get-author-name [author]\n  (if (:author? author)\n    \"you\"\n    (:short-name author)))\n\n(defn comment-summary-string [authors]\n  (case (count authors)\n    0 \"\"\n    1 (str (string/capital (get-author-name (first authors))) \" commented\")\n    2 (str (string/capital (get-author-name (first authors))) \" and \" (get-author-name (second authors)) \" commented\")\n    3 (str (string/capital (get-author-name (first authors))) \", \"\n           (get-author-name (second authors)) \" and \"\n           (get-author-name (nth authors 2)) \" commented\")\n    (str (string/capital (get-author-name (first authors))) \", \"\n         (get-author-name (second authors)) \" and \"\n         (- (count authors) 2) \" others commented\")))\n\n(def max-face-pile 3)\n\n(rum/defc comments-summary < rum/static\n  [{:keys [entry-data\n           comments-data\n           hide-label?\n           hide-face-pile?\n           new-comments-count\n           publisher?\n           add-comment-focus-prefix\n           show-bubble-icon?\n           current-activity-id]}]\n  (let [entry-comments (get comments-data (:uuid entry-data))\n        sorted-comments (:sorted-comments entry-comments)\n        comments-link (utils/link-for (:links entry-data) \"comments\")\n        comments-loaded? (seq sorted-comments)\n        unwrapped-comments (vec (mapcat #(concat [%] (:thread-children %)) sorted-comments))\n        comments-authors (if comments-loaded?\n                           (vec (map first (vals (group-by :user-id (map :author (sort-by :created-at unwrapped-comments))))))\n                           (reverse (:authors comments-link)))\n        comments-count (if comments-loaded?\n                         (count unwrapped-comments)\n                         (:count comments-link))\n        face-pile-count (if hide-face-pile?\n                          0\n                          (min max-face-pile (count comments-authors)))\n        is-mobile? (responsive/is-mobile-size?)\n        faces-to-render (take max-face-pile comments-authors)\n        face-pile-width (if (pos? face-pile-count)\n                          (if is-mobile?\n                            (+ 8 (* 12 face-pile-count))\n                            (+ 10 (* 12 face-pile-count)))\n                            0)\n        show-new-tag? (pos? new-comments-count)]\n    (when comments-count\n      [:div.is-comments\n        {:class (when show-new-tag? \"has-new-comments\")\n         :on-click (fn [e]\n                     ;; To avoid navigating to the post again and lose the coming from data\n                     ;; nav only when not in the expanded post\n                     (if (seq current-activity-id)\n                       (when-let [add-comment-div (.querySelector js/document \"div.add-comment\")]\n                         (.scrollIntoView add-comment-div #js {:behavior \"smooth\" :block \"center\"}))\n                       (nav-actions/open-post-modal entry-data true))\n                     (comment-actions/add-comment-focus (cu/add-comment-focus-value add-comment-focus-prefix (:uuid entry-data))))\n         :data-placement \"top\"\n         :data-toggle (when-not is-mobile? \"tooltip\")\n         :data-container \"body\"\n         :title (cond\n                 (zero? comments-count)\n                 \"Add a comment\"\n                 (= new-comments-count comments-count)\n                 (str new-comments-count \" new comment\" (when (not= new-comments-count 1) \"s\"))\n                 :else\n                 (str comments-count \" comment\" (when (not= comments-count 1) \"s\")\n                  (when (pos? new-comments-count)\n                    (str \", \" new-comments-count \" new\"))))}\n        ; Comments authors heads\n        (when show-bubble-icon?\n          [:div.is-comments-bubble])\n        (when (and (not hide-face-pile?)\n                  (or (not hide-label?)\n                      (not (zero? comments-count))))\n          [:div.is-comments-authors.group\n            {:style {:width (str face-pile-width \"px\")}\n             :class (when (> (count faces-to-render) 1) \"show-border\")}\n            (for [user-data faces-to-render]\n              [:div.is-comments-author\n                {:key (str \"entry-comment-author-\" (:uuid entry-data) \"-\" (:user-id user-data))}\n                (user-avatar-image user-data {:tooltip? (not (responsive/is-tablet-or-mobile?))})])])\n        (when (or show-bubble-icon?\n                  (and (not hide-label?)\n                       (pos? comments-count)))\n          ; Comments count\n          [:div.is-comments-summary\n            {:class (utils/class-set {(str \"comments-count-\" (:uuid entry-data)) true\n                                      :add-a-comment (not (pos? comments-count))})}\n            [:div.is-comments-summary-inner\n              (str\n               comments-count\n               (if show-new-tag?\n                 (when-not hide-label?\n                   (str \" new comment\" (when (not= new-comments-count 1) \"s\")))\n                 (when-not hide-label?\n                   (str \" comment\" (when (not= comments-count 1) \"s\")))))]])])))\n\n\n\n(rum/defc foc-comments-summary < rum/static\n  [{:keys [entry-data\n           add-comment-focus-prefix\n           current-activity-id\n           new-comments-count]}]\n  (let [sorted-comments (dis/activity-sorted-comments-data (:uuid entry-data))\n        comments-link (utils/link-for (:links entry-data) \"comments\")\n        comments-loaded? (seq sorted-comments)\n        comments-count (max 0 (if sorted-comments\n                                (count sorted-comments)\n                                (:count comments-link)))\n        is-mobile? (responsive/is-mobile-size?)]\n    (when comments-count\n      [:div.is-comments\n        {:on-click (fn [e]\n                     ;; To avoid navigating to the post again and lose the coming from data\n                     ;; nav only when not in the expanded post\n                     (if (seq current-activity-id)\n                       (when-let [add-comment-div (.querySelector js/document \"div.add-comment\")]\n                         (.scrollIntoView add-comment-div #js {:behavior \"smooth\" :block \"center\"}))\n                       (nav-actions/open-post-modal entry-data true))\n                     (comment-actions/add-comment-focus (cu/add-comment-focus-value add-comment-focus-prefix (:uuid entry-data))))\n         :data-placement \"top\"\n         :data-toggle (when-not is-mobile? \"tooltip\")\n         :data-container \"body\"\n         :title (str comments-count \" comment\" (when (not= comments-count 1) \"s\"))\n         :class (when (pos? new-comments-count) \"foc-new-comments\")}\n        ; Comments authors heads\n        [:div.is-comments-bubble]\n        ; Comments count\n        [:div.is-comments-summary\n          {:class (utils/class-set {(str \"comments-count-\" (:uuid entry-data)) true\n                                    :add-a-comment (zero? comments-count)})}\n          [:div.is-comments-summary-inner\n            comments-count\n            [:span.new-comments-count\n              \"(\" new-comments-count \" NEW)\"]]]])))"]}