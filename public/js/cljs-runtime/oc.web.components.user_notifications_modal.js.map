{"version":3,"sources":["oc/web/components/user_notifications_modal.cljs"],"mappings":"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","names":["oc.web.components.user-notifications-modal/change!","s","k","v","oc.web.dispatcher/dispatch!","oc.web.components.user-notifications-modal/save-clicked","cljs.core/compare-and-set!","cljs.core/deref","edit-user-profile","org.martinklepsch.derivatives/get-ref","current-user-data","oc.web.actions.user.user_profile_save","oc.web.components.user-notifications-modal/close-clicked","dismiss-action","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.components.user-notifications-modal/digest-time-label","t","time-string","cljs.core/name","minutes","cljs.core.subs","hours*","js/window","hours","rum.core/build-defcs","js/React.createElement","sablono.util/join-classes","cljs.core.into_array","iter__4529__auto__","s__46840","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__46842","cljs.core/chunk-buffer","i__46841","cljs.core/-nth","cljs.core/chunk-append","sablono.interpreter/interpret","cljs.core/chunk-cons","cljs.core/chunk","iter__46839","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","sablono.interpreter.create_element","p1__46832#","oc.web.components.user-notifications-modal/user-notifications-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/refresh-tooltips-mixin","oc.web.actions.user/get-user","_","new-state","user-data","and__4115__auto__","cljs.core/not","cljs.core/reset!","oc.web.lib.utils/after","org-data","org.martinklepsch.derivatives/react","user-profile-drv","bots-data","oc.web.lib.jwt/team-has-bot?","team-roster","slack-enabled?","oc.web.utils.user/user-has-slack-with-bot?","oc.web.actions.nav-sidebar/close-all-panels","oc.web.actions.nav-sidebar/show-user-settings","or__4126__auto__","oc.web.local-settings/digest-times","selected?","fexpr__46844","fexpr__46846","change-cb","cljs.core.disj","cljs.core.conj","G__46845","G__46847","oc.web.components.ui.carrot-checkbox/carrot-checkbox","oc.web.lib.responsive/is-mobile-size?","oc.web.utils.user/readable-tz","cljs.core._EQ_","p1__46833#","oc.web.local-settings/reminders-enabled?","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.user-notifications-modal\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.carrot-checkbox :refer (carrot-checkbox)]))\n\n(defn change! [s k v]\n  (dis/dispatch! [:input [:edit-user-profile k] v])\n  (dis/dispatch! [:input [:edit-user-profile :has-changes] true]))\n\n(defn save-clicked [s]\n  (when (compare-and-set! (::loading s) false true)\n    (let [edit-user-profile @(drv/get-ref s :edit-user-profile)\n          current-user-data @(drv/get-ref s :current-user-data)]\n      (user-actions/user-profile-save current-user-data edit-user-profile))))\n\n(defn close-clicked [current-user-data dismiss-action]\n  (if (:has-changes current-user-data)\n    (let [alert-data {:icon \"/img/ML/trash.svg\"\n                      :action \"user-profile-unsaved-edits\"\n                      :message \"Leave without saving your changes?\"\n                      :link-button-title \"Stay\"\n                      :link-button-cb #(alert-modal/hide-alert)\n                      :solid-button-style :red\n                      :solid-button-title \"Lose changes\"\n                      :solid-button-cb (fn []\n                                        (alert-modal/hide-alert)\n                                        (dismiss-action))}]\n      (alert-modal/show-alert alert-data))\n    (dismiss-action)))\n\n(defn- digest-time-label [t]\n  (let [time-string (name t)\n        minutes (subs time-string (- (count time-string) 2) (count time-string))\n        hours* (.parseInt js/window (subs time-string 0 (- (count time-string) 2)) 10)\n        hours (if (> hours* 12) (- hours* 12) hours*)]\n    (str  hours \":\" minutes (if (> hours* 11) \" PM\" \" AM\"))))\n\n(rum/defcs user-notifications-modal <\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :team-roster)\n  (drv/drv :edit-user-profile)\n  (drv/drv :current-user-data)\n  ;; Locals\n  (rum/local false ::loading)\n  (rum/local false ::show-success)\n  ;; Mixins\n  ui-mixins/refresh-tooltips-mixin\n  {:will-mount (fn [s]\n   (user-actions/get-user nil)\n   s)\n  :did-remount (fn [_ new-state]\n   (let [user-data (:user-data @(drv/get-ref new-state :edit-user-profile))]\n     (when (and @(::loading new-state)\n                (not (:has-changes user-data)))\n       (reset! (::show-success new-state) true)\n       (reset! (::loading new-state) false)\n       (utils/after 2500 (fn [] (reset! (::show-success new-state) false)))))\n   new-state)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        user-profile-drv (drv/react s :edit-user-profile)\n        current-user-data (:user-data user-profile-drv)\n        bots-data (jwt/team-has-bot? (:team-id org-data))\n        team-roster (drv/react s :team-roster)\n        slack-enabled? (user-utils/user-has-slack-with-bot? current-user-data bots-data team-roster)]\n    [:div.user-notifications-modal-container\n      [:button.mlb-reset.modal-close-bt\n        {:on-click #(close-clicked current-user-data nav-actions/close-all-panels)}]\n      [:div.user-notifications-modal\n        [:div.user-notifications-header\n          [:div.user-notifications-header-title\n            \"Notification settings\"]\n          [:button.mlb-reset.save-bt\n            {:on-click #(if (:has-changes current-user-data)\n                          (save-clicked s)\n                          (nav-actions/show-user-settings nil))\n             :class (when (or (not (:has-changes current-user-data))\n                              @(::show-success s)\n                              @(::loading s))\n                      \"disabled\")}\n           (if (:loading current-user-data)\n             \"Saving...\"\n             (if @(::show-success s)\n               \"Saved!\"\n               \"Save\"))]\n          [:button.mlb-reset.cancel-bt\n            {:on-click (fn [_] (close-clicked current-user-data #(nav-actions/show-user-settings nil)))}\n            \"Back\"]]\n        [:div.user-notifications-body\n          ; [:div.user-profile-modal-fields\n          ;   [:div.field-label \"Daily digest\"]\n          ;   [:select.field-value.oc-input\n          ;     {:value (:digest-medium current-user-data)\n          ;      :disabled (and (not slack-enabled?)\n          ;                     (not= (:digest-medium current-user-data) \"slack\"))\n          ;      :on-change #(change! s :digest-medium (.. % -target -value))}\n          ;     [:option\n          ;       {:value \"email\"}\n          ;       \"Via email\"]\n          ;     (when (or slack-enabled?\n          ;               (= (:digest-medium current-user-data) \"slack\"))\n          ;       [:option\n          ;         {:value \"slack\"\n          ;          :disabled (not slack-enabled?)}\n          ;         \"Via Slack\"])]\n          ;   [:div.field-description\n          ;     \"Wut will curate all the content you should see and deliver it to you directly each morning.\"]]\n          [:div.user-profile-modal-fields\n            [:div.field-label\n              \"The latest updates will be sent to you in a digest at your preferred times.\"]\n            [:div.field-value-group\n              (for [t ls/digest-times\n                    :let [selected? ((:digest-delivery current-user-data) t)\n                          change-cb #(change! s :digest-delivery (if selected? (disj (:digest-delivery current-user-data) t) (conj (:digest-delivery current-user-data) t)))]]\n                [:div.field-value.group\n                  {:key (name t)}\n                  (carrot-checkbox {:selected selected?\n                                    :disabled false\n                                    :did-change-cb change-cb})\n                  [:span.digest-time\n                    {:on-click change-cb}\n                    (digest-time-label t)]])]\n            [:div.field-description\n              \"Your timezone is \"\n              [:a\n                {:href \"?user-settings=profile\"\n                 :on-click #(nav-actions/show-user-settings :profile)\n                 :data-toggle (when-not (responsive/is-mobile-size?) \"tooltip\")\n                 :data-placement \"top\"\n                 :data-container \"body\"\n                 :title \"Change your timezone\"}\n                (user-utils/readable-tz (:timezone current-user-data))]\n              \".\"]]\n          [:div.user-profile-modal-fields\n            [:div.field-label \"Mentions:\"]\n            [:select.field-value.oc-input\n              {:value (:notification-medium current-user-data)\n               :on-change #(change! s :notification-medium (.. % -target -value))}\n              [:option\n                {:value \"email\"}\n                \"Via email\"]\n              (when (or slack-enabled?\n                        (= (:notification-medium current-user-data) \"slack\"))\n                [:option\n                  {:value \"slack\"\n                   :disabled (not slack-enabled?)}\n                  \"Via Slack\"])\n              [:option\n                {:value \"in-app\"}\n                \"In-app only\"]]\n            [:div.field-description\n              \"Notifications are sent in real-time if someone mentions you.\"]]\n          (when ls/reminders-enabled?\n            [:div.user-profile-modal-fields\n              [:div.field-label \"Recurring update reminders\"]\n              [:select.field-value.oc-input\n                {:value (:reminder-medium current-user-data)\n                 :on-change #(change! s :reminder-medium (.. % -target -value))}\n                [:option\n                  {:value \"email\"}\n                  \"Via email\"]\n                (when (or slack-enabled?\n                          (= (:reminder-medium current-user-data) \"slack\"))\n                  [:option\n                    {:value \"slack\"\n                     :disabled (not slack-enabled?)}\n                    \"Via Slack\"])\n                [:option\n                  {:value \"in-app\"}\n                  \"In-app only\"]]])]]]))"]}