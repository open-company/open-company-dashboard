{"version":3,"sources":["oc/web/components/payments_settings_modal.cljs"],"mappings":"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","names":["oc.web.components.payments-settings-modal/change-tab","s","tab","oc.web.dispatcher/dispatch!","oc.web.dispatcher/checkout-result-key","cljs.core/reset!","oc.web.components.payments-settings-modal/plan-amount-to-human","amount","currency","int-plan-amount","decimal-plan-amount*","cljs.core/mod","decimal-plan-amount","cljs.core._EQ_","currency-symbol","G__46813","oc.web.components.payments-settings-modal/plan-price","plan-data","quantity","cljs.core/not","cljs.core/seq","tier","cljs.core/first","p1__46814#","cljs.core/filterv","or__4126__auto__","and__4115__auto__","tier-price","oc.web.components.payments-settings-modal/plan-minimum-price","oc.web.components.payments-settings-modal/price-per-user","cljs.core/second","oc.web.components.payments-settings-modal/plan-description","plan-interval","G__46815","oc.web.components.payments-settings-modal/plan-label","plan-nickname","G__46816","oc.web.components.payments-settings-modal/date-string","linux-epoch","oc.web.lib.utils.js_date","oc.web.components.payments-settings-modal/is-trial?","subs-data","oc.web.actions.payments/default-trial-status","oc.web.components.payments-settings-modal/is-trial-expired?","oc.web.actions.payments/default-trial-expired-status","oc.web.components.payments-settings-modal/trial-remaining-days-string","subscription-data","remaining-seconds","oc.web.lib.utils/js-date","days-left","oc.web.components.payments-settings-modal/cancel-subscription","payments-data","alert-data","oc.web.components.ui.alert-modal/hide-alert","_","oc.web.actions.payments.delete_plan_subscription","oc.web.components.ui.alert-modal/show-alert","oc.web.components.payments-settings-modal/plan-summary","cljs.core/deref","oc.web.actions.payments/get-active-subscription","next-payment-due","current-plan","checkout-result","cuerdas.core/lower","iter__4529__auto__","s__46818","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__46820","cljs.core/chunk-buffer","i__46819","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46817","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","c","card","G__46821","G__46822","cuerdas.core/phrase","oc.web.lib.utils/add-zero","oc.web.actions.payments/add-payment-method","oc.web.components.ui.small-loading/small-loading","oc.web.components.payments-settings-modal/show-error-alert","oc.web.components.payments-settings-modal/default-minimum-price","oc.web.components.payments-settings-modal/save-plan-change","current-plan-data","oc.web.actions.payments.create_plan_subscription","success","oc.web.components.payments-settings-modal/different-plans-price","plans-data","annual-plan-data","p1__46823#","cljs.core.filter","monthly-plan-data","p1__46824#","annual-tier","p1__46825#","monthly-tier","p1__46826#","annual-price","monthly-price","diff-price","oc.web.components.payments-settings-modal/plan-change","initial-plan","monthly-plan","p1__46827#","annual-plan","p1__46828#","cljs.core.not_EQ_","p1__46829#","total-plan-price","different-plans-price-span","up-to","flat-amount","unit-amount","available-plans*","p1__46830#","cljs.core.mapv","cljs.core/PersistentHashMap","contains-current-subscription?","p1__46831#","cljs.core/some","available-plans","cljs.core.concat","has-payment-info?","is-annual-default-plan?","is-under-up-to?","G__46838","oc.web.components.ui.dropdown-list/dropdown-list","selected-item","G__46843","oc.web.actions.payments/default-positive-statuses","oc.web.actions.payments.add_payment_method","oc.web.urls/contact-mail-to","oc.web.components.payments-settings-modal/initial-setup","org.martinklepsch.derivatives/get-ref","org-data","current-user-data","oc.web.actions.nav-sidebar/close-all-panels","initial-plan-nickname","updating-plan","oc.web.dispatcher/checkout-update-plan-key","rum.core/build-defcs","p__46852","map__46853","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","attrs46856","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","attrs46855","oc.web.components.payments-settings-modal/payments-settings-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","oc.web.mixins.ui/refresh-tooltips-mixin","rum.core.local","oc.web.actions.payments.maybe_load_payments_data","org.martinklepsch.derivatives/react","payments-tab","is-change-tab?","oc.web.actions.nav-sidebar/show-org-settings","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.payments-settings-modal\n  (:require [rum.core :as rum]\n            [clojure.contrib.humanize :refer (intcomma)]\n            [org.martinklepsch.derivatives :as drv]\n            [cuerdas.core :as s]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.payments :as payments-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.dropdown-list :refer (dropdown-list)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]))\n\n(defn- change-tab [s tab]\n  ;; Reset the checkout result key so the user won't see the result message\n  ;; another anymore\n  (dis/dispatch! [:input [dis/checkout-result-key] nil])\n  ;; Remove it also from the local state\n  (reset! (::checkout-result s) nil)\n  ;; Change tab\n  (reset! (::payments-tab s) tab))\n\n(defn- plan-amount-to-human [amount currency]\n  (let [int-plan-amount (int (/ amount 100))\n        decimal-plan-amount* (mod amount 100)\n        decimal-plan-amount (if (= (-> decimal-plan-amount* str count) 1)\n                             (str \"0\" decimal-plan-amount*)\n                             (str decimal-plan-amount*))\n        currency-symbol (case currency\n                         \"usd\" \"$\"\n                         \"eur\" \"\u20ac\"\n                         (str currency \" \"))]\n    (str currency-symbol int-plan-amount \".\" decimal-plan-amount)))\n\n(defn- plan-price [plan-data quantity]\n  (if-not (seq (:tiers plan-data))\n    (plan-amount-to-human (* (:amount plan-data) quantity) (:currency plan-data))\n    (let [tier (first (filterv #(or (and (:up-to %) (<= quantity (:up-to %))) (not (:up-to %)))\n                (:tiers plan-data)))\n          tier-price (if (:up-to tier)\n                       (+ (:flat-amount tier) (* quantity (:unit-amount tier)))\n                       (* quantity (:unit-amount tier)))]\n      (plan-amount-to-human tier-price (:currency plan-data)))))\n\n(defn- plan-minimum-price [plan-data]\n  (let [tier (first (:tiers plan-data))]\n    (plan-amount-to-human (:flat-amount tier) (:currency plan-data))))\n\n(defn- price-per-user [plan-data]\n  (let [tier (second (:tiers plan-data))]\n    (plan-amount-to-human (:unit-amount tier) (:currency plan-data))))\n\n(defn- plan-description [plan-interval]\n  (case plan-interval\n   \"month\" \"monthly\"\n   \"annual\"))\n\n(defn- plan-label [plan-nickname]\n  (case plan-nickname\n   \"Annual\" (str plan-nickname \" (save 20%)\")\n   plan-nickname))\n\n(defn- date-string [linux-epoch]\n  (.toDateString (utils/js-date (* linux-epoch 1000))))\n\n(defn- is-trial? [subs-data]\n  (= (:status subs-data) payments-actions/default-trial-status))\n\n(defn- is-trial-expired? [subs-data]\n  (= (:status subs-data) payments-actions/default-trial-expired-status))\n\n(defn- trial-remaining-days-string [subscription-data]\n  (let [remaining-seconds (- (:trial-end subscription-data) (/ (.getTime (utils/js-date)) 1000))\n        days-left (inc (int (/ remaining-seconds (* 60 60 24))))]\n    (if (neg? remaining-seconds)\n      \"Your trial has ended. Please select a plan to continue.\"\n      (str \"Your trial is set to expire in \" days-left \" day\" (when-not (= days-left 1) \"s\") \". Please choose a plan.\"))))\n\n(defn- cancel-subscription [s payments-data]\n  (let [alert-data {:title \"Are you sure?\"\n                    :message \"Are you sure you want to cancel your current plan?\"\n                    :link-button-style :red\n                    :link-button-title \"No, keep it\"\n                    :link-button-cb #(alert-modal/hide-alert)\n                    :solid-button-style :green\n                    :solid-button-title \"Yes, cancel it\"\n                    :solid-button-cb (fn [_]\n                                         (reset! (::canceling-subscription s) true)\n                                         (payments-actions/delete-plan-subscription payments-data\n                                          #(reset! (::canceling-subscription s) false))\n                                         (alert-modal/hide-alert))}]\n    (alert-modal/show-alert alert-data)))\n\n(defn- plan-summary [s payments-data]\n  (let [subscription-data (payments-actions/get-active-subscription payments-data)\n        next-payment-due (date-string (-> payments-data :upcoming-invoice :next-payment-attempt))\n        current-plan (:plan subscription-data)\n        checkout-result @(::checkout-result s)\n        quantity (:quantity subscription-data)] ;; Number of active/unverified users\n    [:div.plan-summary\n      (when subscription-data\n        (if (:cancel-at-period-end? subscription-data)\n          [:div.plan-summary-details.success.bottom-margin\n            [:div.emoji-icon \"\ud83d\uddd3\"]\n            (str \"Your \" (s/lower (:nickname current-plan)) \" plan is set to cancel on \" (date-string (:current-period-end subscription-data)) \".\")]\n          [:div.plan-summary-details.success.bottom-margin\n            [:div.emoji-icon \"\ud83d\udc4d\"]\n            (str \"Your \" (s/lower (:nickname current-plan)) \" plan is active.\")]))\n      (when subscription-data\n        [:div.plan-summary-separator.bottom-margin])\n      (if (seq (:payment-methods payments-data))\n        [:div.plan-summary-details\n          [:strong \"Payment methods\"]\n          [:br]\n          (for [c (:payment-methods payments-data)\n                :let [card (:card c)]]\n            [:div.plan-summary-details-card-row\n              {:key (str \"pay-method-\" (:id c))\n               :class (when-not (:default? c) \"hidden\")}\n              (case (:brand card)\n               \"visa\" \"Visa\"\n               \"amex\" \"American Express\"\n               \"mastercard\" \"Mastercard\"\n               (s/phrase (:brand card)))\n               (when (seq (:last-4 card))\n                 (str \" ending in \" (:last-4 card)))\n               \", exp: \" (utils/add-zero (int (:exp-month card))) \"/\" (:exp-year card)])\n              [:button.mlb-reset.change-pay-method-bt\n                {:on-click #(payments-actions/add-payment-method payments-data)}\n                \"Update payment information\"]]\n        [:div.plan-summary-details\n          [:button.mlb-reset.change-pay-method-bt\n            {:on-click #(payments-actions/add-payment-method payments-data)}\n            \"Subscribe to Wut\"]])\n      (when (or (is-trial? subscription-data)\n                (is-trial-expired? subscription-data))\n        [:div.plan-summary-details.bottom-margin\n          [:strong \"Trial\"]\n          [:br]\n          (trial-remaining-days-string subscription-data)])\n      (when subscription-data\n        [:div.plan-summary-details.bottom-margin\n          [:strong \"Billing period\"]\n          [:br]\n          \"Plan billed \"\n          (plan-description (:interval current-plan)) \" (\" (plan-price current-plan quantity) \")\"\n          [:br]\n          (if (:cancel-at-period-end? subscription-data)\n            (str \"Your plan is scheduled to cancel on \" (date-string (:current-period-end subscription-data)))\n            (str \"Next payment due on \" next-payment-due))\n          [:button.mlb-reset.change-pay-method-bt\n            {:on-click #(change-tab s :change)}\n            \"Change\"]])\n      (when (and subscription-data\n                 (not (:cancel-at-period-end? subscription-data)))\n        [:div.plan-summary-details\n          [:button.mlb-reset.cancel-subscription-bt\n            {:on-click #(cancel-subscription s payments-data)}\n            \"Cancel subscription\"]\n          (when @(::canceling-subscription s)\n            (small-loading))])\n      (comment\n        [:div.plan-summary-separator]\n        [:div.plan-summary-details\n          [:button.mlb-reset.history-bt\n            \"Lookup billing history\"]]\n        [:div.plan-summary-separator]\n        [:div.plan-summary-details\n          \"Have a team of 250+\"\n          [:a.chat-with-us\n            {:class \"intercom-chat-link\"\n             :href oc-urls/contact-mail-to}\n            \"Chat with us\"]])]))\n\n(defn- show-error-alert [s]\n  (let [alert-data {:icon \"/img/ML/trash.svg\"\n                    :title \"Oops\"\n                    :message \"An error occurred while saving your change of plan, please try again.\"\n                    :solid-button-style :red\n                    :solid-button-title \"OK, got it\"\n                    :solid-button-cb alert-modal/hide-alert}]\n    (alert-modal/show-alert alert-data)))\n\n(def default-minimum-price 6000)\n\n(defn- save-plan-change [s payments-data current-plan-data]\n  (payments-actions/create-plan-subscription payments-data (:id current-plan-data)\n   (fn [success]\n     (reset! (::saving-plan s) false)\n     (if success\n       (do\n         (change-tab s :summary)\n         (reset! (::initial-plan s) (:nickname current-plan-data))\n         (reset! (::payments-plan s) (:nickname current-plan-data)))\n       (show-error-alert s)))))\n\n(defn- different-plans-price [plans-data quantity]\n  (let [annual-plan-data (first (filter #(= (:interval %) \"year\") plans-data))\n        monthly-plan-data (first (filter #(= (:interval %) \"month\") plans-data))\n        annual-tier (first (filterv #(or (and (:up-to %) (<= quantity (:up-to %)))\n                                         (not (:up-to %))) (:tiers annual-plan-data)))\n        monthly-tier (first (filterv #(or (and (:up-to %) (<= quantity (:up-to %)))\n                                          (not (:up-to %))) (:tiers monthly-plan-data)))\n        annual-price (if-not (nil? (:up-to annual-tier))\n                       (+ (:flat-amount annual-tier) (* quantity (:unit-amount annual-tier)))\n                       (* (int quantity) (int (:unit-amount annual-tier))))\n        monthly-price (if-not (nil? (:up-to monthly-tier))\n                       (+ (:flat-amount monthly-tier) (* quantity (:unit-amount monthly-tier)))\n                       (* quantity (:unit-amount monthly-tier)))\n        diff-price (- (* monthly-price 12) annual-price)]\n    (when (pos? diff-price)\n      [:span \" An annual plan saves you \"\n        [:strong (plan-amount-to-human diff-price (:currency annual-plan-data))]\n        \" per year.\"])))\n\n(defn- plan-change [s payments-data]\n  (let [initial-plan @(::initial-plan s)\n        current-plan (::payments-plan s)\n        subscription-data (payments-actions/get-active-subscription payments-data)\n        quantity (:quantity subscription-data) ;; Number of active/unverified users\n        monthly-plan (first (filter #(= (:interval %) \"month\") (:available-plans payments-data)))\n        annual-plan (first (filter #(= (:interval %) \"year\") (:available-plans payments-data)))\n        current-plan-data (if (and @(::plan-has-changed s)\n                                   (not= @current-plan initial-plan))\n                            (first (filter #(= (:nickname %) @current-plan) (:available-plans payments-data)))\n                            (:plan subscription-data))\n        total-plan-price (plan-price current-plan-data quantity)\n        different-plans-price-span (different-plans-price (:available-plans payments-data) quantity)\n        up-to (-> current-plan-data :tiers first :up-to)\n        flat-amount (plan-amount-to-human (-> current-plan-data :tiers first :flat-amount) (:currency current-plan-data))\n        unit-amount (if (seq (:tiers current-plan-data))\n                      (plan-amount-to-human (-> current-plan-data :tiers second :unit-amount) (:currency current-plan-data))\n                      (plan-amount-to-human (:amount current-plan-data) (:currency current-plan-data)))\n        available-plans* (mapv #(hash-map :value (:nickname %) :label (plan-label (:nickname %))) (:available-plans payments-data))\n        contains-current-subscription? (some #(= (:value %) (:nickname (:plan subscription-data))) available-plans*)\n        available-plans (if contains-current-subscription?\n                          available-plans*\n                          (concat\n                           [{:value (:nickname (:plan subscription-data)) :label (plan-label (:nickname (:plan subscription-data)))}]\n                           available-plans*))\n        has-payment-info? (seq (:payment-methods payments-data))\n        is-annual-default-plan? (= (:nickname current-plan-data) \"Annual\")\n        is-under-up-to? (< quantity up-to)]\n    [:div.plan-change\n      (when (and (or (is-trial? subscription-data)\n                     (is-trial-expired? subscription-data))\n                 (not has-payment-info?))\n        [:div.plan-change-details.expiration-trial.bottom-margin\n          [:div.emoji-icon \"\ud83d\uddd3\"]\n          (trial-remaining-days-string subscription-data)])\n      (when (and (is-trial? subscription-data)\n                 (not has-payment-info?))\n        [:div.plan-change-separator.bottom-margin])\n      [:button.mlb-reset.plans-dropdown-bt\n        {:on-click #(reset! (::show-plans-dropdown s) true)}\n        (or (:nickname current-plan-data) \"Free\")]\n      [:div.plan-change-dropdown\n        (when @(::show-plans-dropdown s)\n          (dropdown-list {:items available-plans\n                          :value @current-plan\n                          :on-blur #(reset! (::show-plans-dropdown s) false)\n                          :on-change (fn [selected-item]\n                                       (reset! (::plan-has-changed s) true)\n                                       (reset! (::show-plans-dropdown s) false)\n                                       (reset! current-plan (:value selected-item)))}))]\n      (if is-under-up-to?\n        [:div.plan-change-description\n          (str\n            \"The \"\n            (s/lower (:nickname current-plan-data))\n            \" plan \"\n            (when is-annual-default-plan?\n              (str \"is 20% lower than monthly. The \" (s/lower (:nickname current-plan-data)) \" plan \"))\n            \"starts at \")\n          [:strong flat-amount]\n          (str\n            \", which includes your first \" up-to\n            \" team members\"\n            \". Then it's \")\n          [:strong unit-amount ]\n          \" per additional person.\"\n          (when is-annual-default-plan?\n            different-plans-price-span)]\n        [:div.plan-change-description\n          (str\n            \"For your team of \"\n            quantity\n            (if (not= quantity 1)\n              \" people\"\n              \" person\")\n            \", your plan will cost \")\n          [:strong total-plan-price]\n          (str \n            \" per \" (:interval current-plan-data)\n            \" (\" quantity \" user\" (when (not= quantity 1) \"s\") \" X \" unit-amount \").\")\n          (when is-annual-default-plan?\n            different-plans-price-span)])\n      (when-not (payments-actions/default-positive-statuses (:status subscription-data))\n        [:div.plan-change-title\n          (str \"Due today: \" total-plan-price)])\n      [:button.mlb-reset.payment-info-bt\n        {:disabled (or @(::saving-plan s)\n                       @(::canceling-subscription s)\n                       (and has-payment-info?\n                            (= @current-plan initial-plan)\n                            (not (:cancel-at-period-end? subscription-data))))\n         :on-click (fn []\n                    (if has-payment-info?\n                      (if (:cancel-at-period-end? subscription-data)\n                        ;; If user cancelled we don't ask for confirmation,\n                        ;; let's restart the subscription immediately\n                        (do\n                          (reset! (::saving-plan s) true)\n                          (save-plan-change s payments-data current-plan-data))\n                        (let [alert-data {:title \"Are you sure?\"\n                                          :message \"Are you sure you want to change your current plan?\"\n                                          :link-button-style :red\n                                          :link-button-title \"No, keep it\"\n                                          :link-button-cb #(alert-modal/hide-alert)\n                                          :solid-button-style :green\n                                          :solid-button-title \"Yes, change it\"\n                                          :solid-button-cb (fn [_]\n                                                               (reset! (::saving-plan s) true)\n                                                               (save-plan-change s payments-data current-plan-data)\n                                                               (alert-modal/hide-alert))}]\n                          (alert-modal/show-alert alert-data)))\n                      (payments-actions/add-payment-method payments-data\n                       ;; In case user changed the plan let's add it to the callback\n                       ;; so we save once payment method is added\n                       (when (not= initial-plan @current-plan)\n                        current-plan-data))))}\n        (if has-payment-info?\n          (if (:cancel-at-period-end? subscription-data)\n            \"Subscribe to Wut\"\n            \"Change plan\")\n          \"Subscribe to Wut\")]\n      (when @(::saving-plan s)\n        (small-loading))\n     [:div.plan-change-separator]\n     [:div.plan-change-details\n       \"Have a question about billing?\"\n       [:br]\n       [:a.chat-with-us\n         {:class \"intercom-chat-link\"\n          :href oc-urls/contact-mail-to}\n         \"Chat with us\"]]\n     [:div.plan-change-details\n       \"Team of 250+? \"\n       [:a.chat-with-us\n         {:class \"intercom-chat-link\"\n          :href oc-urls/contact-mail-to}\n         \"Contact us\"]\n       \" about an enterprise plan.\"]]))\n\n(defn- initial-setup\n  \"Setup the view data, need to make sure the payments data have been loaded to show it.\"\n  [s]\n  (let [payments-data @(drv/get-ref s :payments)\n        org-data @(drv/get-ref s :org-data)\n        current-user-data @(drv/get-ref s :current-user-data)]\n    ;; If user is not an admin\n    (when (and org-data\n               current-user-data\n               (:role current-user-data)\n               (not= (:role current-user-data) :admin))\n      ;; Dismiss payments panel\n      (nav-actions/close-all-panels))\n    (when (and (not @(::initial-setup s))\n               payments-data)\n      (reset! (::initial-setup s) true)\n      (let [subscription-data (payments-actions/get-active-subscription payments-data)\n            initial-plan-nickname (or (-> subscription-data :plan :nickname) \"Monthly\") ;; Default to the monthly default plan\n            checkout-result @(drv/get-ref s dis/checkout-result-key)\n            has-payment-info? (seq (:payment-methods payments-data))\n            updating-plan (when checkout-result\n                            @(drv/get-ref s dis/checkout-update-plan-key))]\n        (reset! (::payments-tab s) (if (or (not (payments-actions/get-active-subscription payments-data))\n                                           (not has-payment-info?))\n                                     :change\n                                     :summary))\n        (reset! (::payments-plan s) initial-plan-nickname)\n        (reset! (::initial-plan s) initial-plan-nickname)\n        (reset! (::checkout-result s) checkout-result)))))\n\n(rum/defcs payments-settings-modal <\n  ;; Mixins\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :payments)\n  (drv/drv :current-user-data)\n  (drv/drv dis/checkout-result-key)\n  (drv/drv dis/checkout-update-plan-key)\n  ui-mixins/refresh-tooltips-mixin\n  ;; Locals\n  (rum/local false ::initial-setup)\n  (rum/local :summary ::payments-tab)\n  (rum/local nil ::payments-plan)\n  (rum/local false ::show-plans-dropdown)\n  (rum/local nil ::initial-plan)\n  (rum/local false ::plan-has-changed)\n  (rum/local false ::checkout-result)\n  (rum/local false ::saving-plan)\n  (rum/local false ::canceling-subscription)\n  {:will-mount (fn [s]\n    ;; Force refresh subscription data\n    (payments-actions/maybe-load-payments-data @(drv/get-ref s :org-data) true)\n    (initial-setup s)\n    s)\n    :will-update (fn [s]\n     (initial-setup s)\n     s)\n    :will-unmount (fn [s]\n     (dis/dispatch! [:input [dis/checkout-result-key] nil])\n     s)}\n  [s {:keys [org-data]}]\n  (let [org-data (drv/react s :org-data)\n        payments-tab (::payments-tab s)\n        is-change-tab? (= @payments-tab :change)\n        payments-data (drv/react s :payments)\n        has-payment-info? (seq (:payment-methods payments-data))]\n    [:div.payments-settings-modal\n      [:button.mlb-reset.modal-close-bt\n        {:on-click #(nav-actions/close-all-panels)}]\n      [:div.payments-settings-modal-container\n        [:div.payments-settings-header.group\n          [:div.payments-settings-header-title\n            (if (and is-change-tab?\n                     payments-data)\n             (if has-payment-info?\n               \"Change plan\"\n               \"Select a plan\")\n             \"Billing\")]\n          (when (and payments-data\n                     (not is-change-tab?)\n                     (nil? @(::checkout-result s)))\n            [:button.mlb-reset.save-bt\n              {:on-click #(change-tab s :change)\n               :disabled (or @(::saving-plan s)\n                             @(::canceling-subscription s))}\n              \"Change plan\"])\n          (when (and payments-data\n                     (nil? @(::checkout-result s))\n                     has-payment-info?)\n            [:button.mlb-reset.cancel-bt\n              {:on-click #(if is-change-tab?\n                            (change-tab s :summary)\n                            (nav-actions/show-org-settings nil))}\n              \"Back\"])]\n        [:div.payments-settings-body\n          (if-not payments-data\n            (small-loading)\n            (if is-change-tab?\n              (plan-change s payments-data)\n              (plan-summary s payments-data)))]]]))"]}