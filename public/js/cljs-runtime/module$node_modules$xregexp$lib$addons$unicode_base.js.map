{
"version":3,
"file":"module$node_modules$xregexp$lib$addons$unicode_base.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/xregexp/lib/addons/unicode-base.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$xregexp$lib$addons$unicode_base\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _getIterator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js/get-iterator\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\n/*!\n * XRegExp Unicode Base 4.3.0\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    (0, _forEach.default)(XRegExp).call(XRegExp, range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = charCode(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n\n    return output;\n  } // Generates an inverted BMP range on first use\n\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n\n    if (item.bmp && !item.isBmpLast) {\n      var _context;\n\n      combined = (0, _concat.default)(_context = \"[\".concat(item.bmp, \"]\")).call(_context, item.astral ? '|' : '');\n    }\n\n    if (item.astral) {\n      combined += item.astral;\n    }\n\n    if (item.isBmpLast && item.bmp) {\n      var _context2;\n\n      combined += (0, _concat.default)(_context2 = \"\".concat(item.astral ? '|' : '', \"[\")).call(_context2, item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\P{..} or \\p{^..}\n\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = (0, _includes.default)(flags).call(flags, 'A'); // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n\n    var slug = normalize(match[4] || match[3]); // Token data object\n\n    var item = unicode[slug];\n\n    if (match[1] === 'P' && match[2]) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n    }\n\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n    } // Switch to the negated form of the referenced Unicode token\n\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n\n      if (!unicode.hasOwnProperty(slug)) {\n        var _context3;\n\n        throw new ReferenceError((0, _concat.default)(_context3 = \"\".concat(ERR_UNKNOWN_REF + match[0], \" -> \")).call(_context3, item.inverseOf));\n      }\n\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n    }\n\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n\n      return cacheAstral(slug, isNegated);\n    }\n\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = (0, _getIterator2.default)(data), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n\n        unicode[normalize(item.name)] = item;\n\n        if (item.alias) {\n          unicode[normalize(item.alias)] = item;\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","_Object$defineProperty","value","default","_getIterator2","_includes","_concat","_forEach","_default","XRegExp","normalize","name","replace","toLowerCase","charCode","chr","esc","exec","dec","charCodeAt","invertBmp","range","output","lastEnd","call","m","start","concat","pad4","hex","unicode","_dec","_hex","_pad4","addToken","match","scope","flags","isNegated","isAstralMode","slug","item","SyntaxError","ERR_DOUBLE_NEG","hasOwnProperty","ERR_UNKNOWN_NAME","inverseOf","_context3","ReferenceError","ERR_UNKNOWN_REF","bmp","ERR_ASTRAL_ONLY","ERR_ASTRAL_IN_CLASS","prop","combined","isBmpLast","_context","astral","_context2","optionalFlags","leadChar","addUnicodeData","XRegExp.addUnicodeData","data","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","_step","next","done","Error","ERR_NO_NAME","ERR_NO_DATA","alias","err","return","cache","flush","_getUnicodeProperty","XRegExp._getUnicodeProperty"]
}
