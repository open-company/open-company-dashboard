{"version":3,"sources":["cljs_flux/dispatcher.cljs"],"mappings":"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","names":["cljs-flux.dispatcher/prefix","cljs-flux$dispatcher$IDispatcher$register$dyn","x__4428__auto__","m__4429__auto__","cljs-flux.dispatcher/register","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","cljs-flux$dispatcher$IDispatcher$unregister$dyn","cljs-flux.dispatcher/unregister","cljs-flux$dispatcher$IDispatcher$wait_for$dyn","cljs-flux.dispatcher/wait-for","cljs-flux$dispatcher$IDispatcher$dispatch$dyn","cljs-flux.dispatcher/dispatch","cljs-flux$dispatcher$IDispatcher$_invoke_callback$dyn","cljs-flux.dispatcher/-invoke-callback","cljs-flux.dispatcher/IDispatcher","this","callback","id","ids","payload","this__4380__auto__","k__4381__auto__","this__4382__auto__","k41103","else__4383__auto__","G__41112","cljs.core/Keyword","registered","dispatching?","pending-payload","token","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__41115","vec__41116","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__41102","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this41106","other41107","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__41131","cljs.core/keyword-identical?","expr__41132","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","cljs.core/PROTOCOL_SENTINEL","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","cljs-flux.dispatcher/Dispatcher","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__41108","extmap__4419__auto__","G__41242","cljs.core/record?","cljs-flux.dispatcher/->Dispatcher","cljs-flux.dispatcher/map->Dispatcher","_","f","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/assoc-in","cljs.core/dissoc","cljs.core/deref","G__41145","js/Error","seq__41152","chunk__41155","count__41156","i__41157","map__41183","cljs.core.apply","cljs.core/hash-map","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","map__41189","cljs.core/next","pending?","handled?","fexpr__41184","fexpr__41190","cljs.core/not","cljs.core.sort","cljs.core/keys","cljs.core/reset!","seq__41197","chunk__41198","count__41199","i__41200","seq__41211","chunk__41213","count__41214","i__41215","cljs.core.get_in","cljs-flux.dispatcher/dispatcher","cljs.core.atom"],"sourcesContent":["(ns cljs-flux.dispatcher)\n\n(def ^:private prefix \"ID_\")\n\n(defprotocol IDispatcher\n  (register [this callback]\n    \"Registers a callback to be invoked with every dispatched payload. Returns\n    a token that can be used with `wait-for`.\")\n  (unregister [this id]\n    \"Removes a callback based on its token.\")\n  (wait-for [this ids]\n    \"Waits for the callbacks specified to be invoked before continuing execution.\")\n  (dispatch [this payload]\n    \"Dispatches a payload to all registered callbacks\")\n  (-invoke-callback [this id]\n    \"Invoke the registered callback.\"))\n\n(defrecord Dispatcher [registered dispatching? pending-payload token]\n  IDispatcher\n  (register [_ f]\n    (let [id (str prefix (swap! token inc))]\n      (swap! registered assoc-in [id :callback] f)\n      id))\n\n  (unregister [_ id]\n    (swap! registered dissoc id))\n\n  (-invoke-callback [_ id]\n    (let [callback (:callback (get @registered id))]\n      (swap! registered assoc-in [id :pending?] true)\n      (callback @pending-payload)\n      (swap! registered assoc-in [id :handled?] true)))\n\n  (wait-for [this ids]\n    (when-not @dispatching?\n      (throw (js/Error. \"wait-for must be invoked while dispatching.\")))\n    (doseq [id ids\n            :let [{:keys [pending? handled? callback]} (@registered id)]\n            :when (not handled?)]\n      (cond\n        pending?\n        (throw (js/Error. (str \"Circular dependency detected while waiting for `\" id \"'.\")))\n\n        (some? callback)\n        (-invoke-callback this id)\n\n        :else\n        (throw (js/Error. (str \\` id \"' does not map to a registered callback.\"))))))\n\n  (dispatch [this payload]\n    (when @dispatching?\n      (throw (js/Error. \"Cannot dispatch in the middle of a dispatch.\")))\n    (let [ids (sort (keys @registered))]\n      (reset! pending-payload payload)\n      (reset! dispatching? true)\n      (doseq [id ids]\n        (swap! registered assoc-in [id :pending?] false)\n        (swap! registered assoc-in [id :handled?] false))\n      (try\n        (doseq [id ids :when (not (get-in @registered [id :pending?]))]\n          (-invoke-callback this id))\n        (finally\n          (reset! dispatching? false)\n          (reset! pending-payload nil))))))\n\n(defn dispatcher\n  \"Create and return Flux dispatcher instance\"\n  []\n  (map->Dispatcher {:registered (atom {})\n                    :dispatching? (atom false)\n                    :pending-payload (atom nil)\n                    :token (atom 0)}))\n"]}