shadow$provide.module$node_modules$$sentry$browser$dist$transports$xhr=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});var tslib_1=require("module$node_modules$tslib$tslib"),core_1=require("module$node_modules$$sentry$core$dist$index"),types_1=require("module$node_modules$$sentry$types$dist$index"),utils_1=require("module$node_modules$$sentry$utils$dist$index");global=function(_super){function XHRTransport(){var _this=null!==_super&&_super.apply(this,
arguments)||this;_this._disabledUntil=new Date(Date.now());return _this}tslib_1.__extends(XHRTransport,_super);XHRTransport.prototype.sendEvent=function(event){var _this=this;if(new Date(Date.now())<this._disabledUntil)return Promise.reject({event:event,reason:"Transport locked till "+this._disabledUntil+" due to too many requests.",status:429});var sentryReq=core_1.eventToSentryRequest(event,this._api);return this._buffer.add(new utils_1.SyncPromise(function(resolve,reject){var request=new XMLHttpRequest;
request.onreadystatechange=function(){if(4===request.readyState){var status=types_1.Status.fromHttpCode(request.status);if(status===types_1.Status.Success)resolve({status:status});else{if(status===types_1.Status.RateLimit){status=Date.now();var retryAfterHeader=request.getResponseHeader("Retry-After");_this._disabledUntil=new Date(status+utils_1.parseRetryAfterHeader(status,retryAfterHeader));utils_1.logger.warn("Too many requests, backing off till: "+_this._disabledUntil)}reject(request)}}};request.open("POST",
sentryReq.url);for(var header in _this.options.headers)_this.options.headers.hasOwnProperty(header)&&request.setRequestHeader(header,_this.options.headers[header]);request.send(sentryReq.body)}))};return XHRTransport}(require("module$node_modules$$sentry$browser$dist$transports$base").BaseTransport);exports.XHRTransport=global}
//# sourceMappingURL=module$node_modules$$sentry$browser$dist$transports$xhr.js.map
