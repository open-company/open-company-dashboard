{"version":3,"sources":["oc/web/stores/notifications.cljs"],"mappings":";AAeA,AAAA,AAAMA,AAAgBC,AAAOC;AAA7B,AACE,AAAM,AAAA,AAAKD;AAAX,AACE,AAACE,AAAM,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACC,AAAE,AAAA,AAAAF,AAAQ,AAAA,AAAKH;AAASC;;AAD3C;;;AAGF,AAAAK,AAAA,AAAA,AAAAC,AACGG;AADH,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AACOG;AADP,AAAAF,AAAAD,AAAA,AAAA,AACSI;AADT,AAEE,AAAMC,AAAsB,AAACC,AAAOJ,AAAGK;AACjCC,AAAI,AAACjB,AAAea,AAAkBC;AACtCI,AAAkB,AAAA,AAAAC,AAACC;AAAD,AAAS,AAACd,AAAE,AAAA,AAAAa,AAAQ,AAAA,AAAKN;AAAoBC;AAC/DO,AAAwB,AAAIJ,AACF,AAAI,AAAI,AAAA,AAAO,AAAA,AAASJ,AAAoB,AAAA,AAAO,AAAA,AAASI,AAC1D,AAAA,AAAA,AAACK,AAAMT,AACP,AAAA,AAAA,AAACU,AAAUV,AAA4BW,AAAI,AAAA,AAASP,AACtDJ;AAC1BY,AAAmB,AAACC,AAAKR,AAAkBG;AARjD,AASE,AAACM,AAAShB,AAAGK,AAA6BS;;AAE9C,AAAAlB,AAAA,AAAA,AAAAqB,AACGjB;AADH,AAAA,AAAAkB,AAAAD;AAAA,AAAAlB,AAAAmB,AAAA,AAAA,AACOjB;AADP,AAAAF,AAAAmB,AAAA,AAAA,AACShB;AADT,AAEE,AAAMC,AAAsB,AAACC,AAAOJ,AAAGK;AACjCS,AAAmB,AAAA,AAAAK,AAACzB;AAAD,AAAS,AAAC0B,AAAK,AAAA,AAAAD,AAAgB,AAAA,AAAajB;AAAoBC;AADzF,AAEE,AAACa,AAAShB,AAAGK,AAA6BS;;AAE9C,AAAAlB,AAAA,AAAA,AAAAyB,AACGrB;AADH,AAAA,AAAAsB,AAAAD;AAAA,AAAAtB,AAAAuB,AAAA,AAAA,AACOrB;AADP,AAAAF,AAAAuB,AAAA,AAAA,AACSC;AADT,AAEE,AAAMpB,AAAsB,AAACC,AAAOJ,AAAGK;AACjCS,AAAmB,AAAA,AAAAU,AAAC9B;AAAD,AAAS,AAAC0B,AAAK,AAAA,AAAAI,AAAQD;AAAiBpB;AADjE,AAEE,AAACa,AAAShB,AAAGK,AAA6BS","names":["oc.web.stores.notifications/find-duplicate","n-data","notifs","cljs.core/first","p1__38698#","cljs.core.filter","cljs.core._EQ_","oc.web.dispatcher/action","p__38700","vec__38701","cljs.core.nth","db","_","notification-data","current-notifications","cljs.core.get_in","oc.web.dispatcher/notifications-key","dup","old-notifications","p1__38699#","cljs.core.remove","fixed-notification-data","cljs.core.assoc","cljs.core.update_in","cljs.core/max","next-notifications","cljs.core.conj","cljs.core/assoc-in","p__38705","vec__38706","p1__38704#","cljs.core.not_EQ_","p__38710","vec__38711","notification-id","p1__38709#"],"sourcesContent":["(ns oc.web.stores.notifications\n  \"Notifications store is a list of notification having the following form:\n  {:title \\\"A string representing the title to show.\\\"\n   :description \\\"A string representing the description to show.\\\"\n   :server-error true // Only if representing a server error, mostly it changes color theme.\n   :app-update true // Only if representing an app update error, mostly it changes color theme.\n   :dismiss true // Show an X to remove the notification\n   :opac true // Apply opacity to all the contained elements\n   :expire 100 // Number of seconds after which the notification is removed, 0 is infinite.\n   :id :unique-id // Used to avoid showing 2 times the same notification.\n  }\"\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.utils :as utils]))\n\n(defn find-duplicate [n-data notifs]\n  (when (:id n-data)\n    (first (filter #(= (:id %) (:id n-data)) notifs))))\n\n(defmethod dispatcher/action :notification-add\n  [db [_ notification-data]]\n  (let [current-notifications (get-in db dispatcher/notifications-key)\n        dup (find-duplicate notification-data current-notifications)\n        old-notifications (remove #(= (:id %) (:id notification-data)) current-notifications)\n        fixed-notification-data (if dup\n                                  (if (or (zero? (:expire notification-data)) (zero? (:expire dup)))\n                                    (assoc notification-data :expire 0)\n                                    (update-in notification-data [:expire] max (:expire dup)))\n                                  notification-data)\n        next-notifications (conj old-notifications fixed-notification-data)]\n    (assoc-in db dispatcher/notifications-key next-notifications)))\n\n(defmethod dispatcher/action :notification-remove\n  [db [_ notification-data]]\n  (let [current-notifications (get-in db dispatcher/notifications-key)\n        next-notifications (filter #(not= (:created-at %) (:created-at notification-data)) current-notifications)]\n    (assoc-in db dispatcher/notifications-key next-notifications)))\n\n(defmethod dispatcher/action :notification-remove-by-id\n  [db [_ notification-id]]\n  (let [current-notifications (get-in db dispatcher/notifications-key)\n        next-notifications (filter #(not= (:id %) notification-id) current-notifications)]\n    (assoc-in db dispatcher/notifications-key next-notifications)))"]}