{"version":3,"sources":["oc/web/components/edit_recurring_update_modal.cljs"],"mappings":"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","names":["oc.web.components.edit-recurring-update-modal/cancel-clicked","reminder-data","dismiss-action","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.components.edit-recurring-update-modal/update-reminder","s","v","cljs.core/first","oc.web.actions.reminder/update-reminder","cljs.core.merge","oc.web.components.edit-recurring-update-modal/delete-reminder-clicked","cljs.core/deref","org.martinklepsch.derivatives/get-ref","oc.web.actions.reminder/delete-reminder","rum.core/build-defcs","js/React.createElement","sablono.util/join-classes","attrs46885","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","sablono.interpreter/create-element","attrs46884","oc.web.components.edit-recurring-update-modal/edit-recurring-update-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/on-window-click-mixin","e","cljs.core/not","oc.web.lib.utils/event-inside?","rum.core/ref-node","cljs.core/reset!","org.martinklepsch.derivatives/react","reminders-roster","users-list","on-label","G__46870","cljs.core/Keyword","occurrence-field-name","cljs.core.get","oc.web.utils.reminder/occurrence-fields","possible-values","oc.web.utils.reminder/occurrence-values","values","cljs.core.map","p__46871","vec__46872","cljs.core.nth","k","cljs.core/PersistentHashMap","occurrence-field","occurrence-field-value","occurrence-label-value","self-assignee?","cljs.core._EQ_","oc.web.lib.jwt/user-id","_","oc.web.actions.nav-sidebar/close-all-panels","save-disabled?","clojure.string/blank?","cljs.core/empty?","oc.web.actions.reminder/save-reminder","oc.web.actions.nav-sidebar/close-reminders","oc.web.actions.reminder/cancel-edit-reminder","oc.web.components.ui.small-loading/small-loading","cljs.core.swap_BANG_","oc.web.lib.utils/class-set","oc.lib.user.name_for","G__46886","oc.web.components.ui.dropdown-list/dropdown-list","or__4126__auto__","item","selected-user","p1__46869#","cljs.core.filter","clojure.string/trim","frequency-value","oc.web.utils.reminder/frequency-values","G__46890","old-freq","new-freq","with-freq","should-update-occurrence","cljs.core.not_EQ_","fexpr__46901","fexpr__46902","occurrence-value","cljs.core.get_in","with-occurrence","with-occurrence-value","cljs.core.assoc","G__46903","oc.web.lib.utils.link_for"],"sourcesContent":["(ns oc.web.components.edit-recurring-update-modal\n  (:require [rum.core :as rum]\n            [clojure.string :as s]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.utils.reminder :as reminder-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.reminder :as reminder-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.dropdown-list :refer (dropdown-list)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]))\n\n;; New/Edit reminder\n\n(defn cancel-clicked [reminder-data dismiss-action]\n  (if (:has-changes reminder-data)\n    (let [alert-data {:icon \"/img/ML/trash.svg\"\n                      :action \"reminders-unsaved-edits\"\n                      :message \"Leave without saving your changes?\"\n                      :link-button-title \"Stay\"\n                      :link-button-cb #(alert-modal/hide-alert)\n                      :solid-button-style :red\n                      :solid-button-title \"Lose changes\"\n                      :solid-button-cb #(do\n                                          (alert-modal/hide-alert)\n                                          (dismiss-action))}]\n      (alert-modal/show-alert alert-data))\n    (dismiss-action)))\n\n(defn- update-reminder [s v]\n  (let [reminder-data (first (:rum/args s))]\n    (reminder-actions/update-reminder (:uuid reminder-data) (merge v {:has-changes true}))))\n\n(defn- delete-reminder-clicked [s]\n  (let [reminder-data @(drv/get-ref s :reminder-edit)\n        alert-data {:icon \"/img/ML/trash.svg\"\n                      :action \"reminder-delete\"\n                      :message \"Delete this reminder?\"\n                      :link-button-title \"No\"\n                      :link-button-cb #(alert-modal/hide-alert)\n                      :solid-button-style :red\n                      :solid-button-title \"Yes\"\n                      :solid-button-cb #(do\n                                          (alert-modal/hide-alert)\n                                          (reminder-actions/delete-reminder (:uuid reminder-data)))}]\n    (alert-modal/show-alert alert-data)))\n\n(rum/defcs edit-recurring-update-modal <\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :reminder-edit)\n  (drv/drv :reminders-roster)\n  ;; Locals\n  (rum/local false ::assignee-dropdown)\n  (rum/local false ::frequency-dropdown)\n  (rum/local false ::on-dropdown)\n  ;; Mixins\n  (mixins/on-window-click-mixin (fn [s e]\n    (when (and (not (utils/event-inside? e (rum/ref-node s :frequency-dd-node)))\n               (not (utils/event-inside? e (rum/ref-node s :frequency-bt)))\n               (not (utils/event-inside? e (rum/ref-node s :on-dd-node)))\n               (not (utils/event-inside? e (rum/ref-node s :on-bt))))\n      (reset! (::frequency-dropdown s) false)\n      (reset! (::on-dropdown s) false)\n      (reset! (::assignee-dropdown s) false))))\n  [s]\n  (let [reminder-data (drv/react s :reminder-edit)\n        reminders-roster (drv/react s :reminders-roster)\n        users-list (:users-list reminders-roster)\n        ;; on label and value stuff\n        on-label (case (:frequency reminder-data)\n                  (:weekly :biweekly) \"On\"\n                  \"On the\")\n        occurrence-field-name (get reminder-utils/occurrence-fields (:frequency reminder-data))\n        possible-values (get reminder-utils/occurrence-values (:frequency reminder-data))\n        values (map (fn [[k v]] (hash-map :value k :label v)) possible-values)\n        occurrence-field (:occurrence-label reminder-data)\n        occurrence-field-value (get reminder-data occurrence-field)\n        occurrence-label-value (:occurrence-value reminder-data)\n        self-assignee? (= (jwt/user-id) (:user-id (:assignee reminder-data)))]\n    [:div.edit-recurring-update-modal-container\n      [:button.mlb-reset.modal-close-bt\n        {:on-click (fn [_] (cancel-clicked reminder-data nav-actions/close-all-panels))}]\n      [:div.edit-recurring-update-modal\n        [:div.edit-recurring-update-modal-header\n          [:div.edit-recurring-update-modal-header-title\n            \"Recurring updates\"]\n          (let [save-disabled? (or (s/blank? (:headline reminder-data))\n                                   (empty? (:assignee reminder-data))\n                                   (not (:frequency reminder-data))\n                                   (not (:occurrence-label reminder-data))\n                                   (not (get reminder-data (:occurrence-label reminder-data))))]\n            [:button.mlb-reset.save-bt\n              {:on-click #(when-not save-disabled?\n                            (reminder-actions/save-reminder reminder-data)\n                            (nav-actions/close-reminders))\n               :class (when save-disabled? \"disabled\")}\n              \"Save\"])\n          [:button.mlb-reset.cancel-bt\n            {:on-click (fn [_]\n                        (cancel-clicked reminder-data #(reminder-actions/cancel-edit-reminder)))}\n            \"Back\"]]\n        [:div.edit-recurring-update-body\n          [:div.field-label \"Assign to\"]\n          (if (empty? users-list)\n            [:div.loading-users (small-loading)]\n            [:div\n              {:class (when (empty? users-list) \"loading-users\")}\n              [:div.field-value.dropdown-field-value.oc-input\n                {:ref :assignee-bt\n                 :on-click #(when-not (empty? users-list)\n                              (swap! (::assignee-dropdown s) not)\n                              (reset! (::frequency-dropdown s) false)\n                              (reset! (::on-dropdown s) false))\n                 :class (utils/class-set {:placeholder (empty? (:assignee reminder-data))\n                                          :active @(::assignee-dropdown s)})}\n                (if (:assignee reminder-data)\n                  (str (user-lib/name-for (:assignee reminder-data)) (when self-assignee? \" (you)\"))\n                  \"Pick a user\")]\n              (when (empty? users-list)\n                (small-loading))\n              (when @(::assignee-dropdown s)\n                [:div.dropdown-container.users-list\n                  {:ref :assignee-dd-node}\n                  (dropdown-list {:items users-list\n                                  :value (or (:user-id (:assignee reminder-data)) (:value (first users-list)))\n                                  :on-change (fn [item]\n                                               (let [selected-user (first (filter #(= (:user-id %) (:value item)) (:items reminders-roster)))]\n                                                 (update-reminder s {:assignee selected-user}))\n                                               (reset! (::assignee-dropdown s) false))})])])\n          [:div.field-label \"To update the team about\"]\n          [:input.field-value.oc-input\n            {:value (or (:headline reminder-data) \"\")\n             :ref :reminder-title\n             :type \"text\"\n             :max-length 65\n             :placeholder \"CEO update, Week in review, etc.\"\n             :on-change #(update-reminder s {:headline (s/trim (.-value (rum/ref-node s :reminder-title)))})}]\n          [:div.field-label \"Every\"]\n          (let [frequency-value (get reminder-utils/frequency-values (:frequency reminder-data))]\n            [:div\n              [:div.field-value.dropdown-field-value.oc-input\n                {:ref :frequency-bt\n                 :on-click #(do\n                              (reset! (::assignee-dropdown s) false)\n                              (swap! (::frequency-dropdown s) not)\n                              (reset! (::on-dropdown s) false))\n                 :class (utils/class-set {:placeholder (empty? frequency-value)\n                                          :active @(::frequency-dropdown s)})}\n                (or frequency-value \"Pick a frequency\")]\n              (when @(::frequency-dropdown s)\n                [:div.dropdown-container\n                  {:ref :frequency-dd-node}\n                  (dropdown-list {:items [{:value :weekly :label (:weekly reminder-utils/frequency-values) :occurrence-value :friday}\n                                          {:value :biweekly :label (:biweekly reminder-utils/frequency-values) :occurrence-value :friday}\n                                          {:value :monthly :label (:monthly reminder-utils/frequency-values) :occurrence-value :first}\n                                          {:value :quarterly :label (:quarterly reminder-utils/frequency-values) :occurrence-value :first}]\n                                  :value (:frequency reminder-data)\n                                  :on-change (fn [item]\n                                               (let [old-freq (:frequency reminder-data)\n                                                     new-freq (:value item)\n                                                     with-freq {:frequency new-freq}\n                                                     occurrence-field-name (get reminder-utils/occurrence-fields (:value item))\n                                                     should-update-occurrence (and (not= new-freq old-freq)\n                                                                                   (or (not (#{:weekly :biweekly} new-freq))\n                                                                                       (not (#{:weekly :biweekly} old-freq))))\n                                                     occurrence-value (when should-update-occurrence\n                                                                       (get-in reminder-utils/occurrence-values [(:value item) (:occurrence-value item)]))\n                                                     with-occurrence (if should-update-occurrence\n                                                                      (merge with-freq {:occurrence-label occurrence-field-name\n                                                                                        occurrence-field-name (:occurrence-value item)})\n                                                                      with-freq)\n                                                     with-occurrence-value (if should-update-occurrence\n                                                                            (assoc with-occurrence :occurrence-value occurrence-value)\n                                                                            with-occurrence)]\n                                                 (update-reminder s with-occurrence-value))\n                                               (reset! (::frequency-dropdown s) false))})])])\n          [:div.field-label on-label]\n          [:div.field-value.dropdown-field-value.oc-input\n            {:ref :on-bt\n             :on-click #(do\n                          (reset! (::assignee-dropdown s) false)\n                          (reset! (::frequency-dropdown s) false)\n                          (swap! (::on-dropdown s) not))\n             :class (when @(::on-dropdown s) \"active\")}\n            occurrence-label-value]\n          (when @(::on-dropdown s)\n            [:div.dropdown-container\n              {:ref :on-dd-node}\n              (dropdown-list {:items values\n                              :value occurrence-field-value\n                              :on-change (fn [item]\n                                           (update-reminder s {occurrence-field-name (:value item)\n                                                               :occurrence-value (get-in reminder-utils/occurrence-values [(:frequency reminder-data) (:value item)])})\n                                           (reset! (::on-dropdown s) false))})])\n          (when (utils/link-for (:links reminder-data) \"delete\")\n            [:div.edit-recurring-update-footer.group\n              [:button.mlb-reset.delete-bt\n                {:on-click #(delete-reminder-clicked s)}\n                \"Delete recurring update\"]])]]]))"]}