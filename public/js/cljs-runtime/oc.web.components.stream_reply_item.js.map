{"version":3,"sources":["oc/web/components/stream_reply_item.cljs"],"mappings":"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","names":["oc.web.components.stream-reply-item/delete-clicked","e","entry-data","comment-data","clear-cell-measure-cb","alert-data","oc.web.components.ui.alert-modal/hide-alert","_","oc.web.actions.comment/delete-comment","oc.web.components.ui.alert-modal/show-alert","oc.web.components.stream-reply-item/finish-edit","s","cljs.core/reset!","oc.web.components.stream-reply-item/start-edit","oc.web.actions.comment/edit-comment","oc.web.components.stream-reply-item/quoted-reply-header","oc.web.components.stream-reply-item/reply-to","add-comment-focus-key","oc.web.actions.comment.reply_to","rum.core/build-defc","p__46446","map__46447","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.interpreter/interpret","oc.web.components.stream-reply-item/emoji-picker","rum.core/static","oc.web.lib.responsive/is-mobile-size?","oc.web.mixins.ui/no-scroll-mixin","add-emoji-cb","dismiss-cb","oc.web.lib.react-utils/build","js/module$node_modules$emoji_mart$dist$index","emoji","oc.web.components.stream-reply-item/emoji-picker-container","reply-data","seen-reply-cb","showing-picker?","cljs.core/deref","cljs.core/seq","cljs.core._EQ_","G__46449","oc.web.utils.reaction/can-pick-reaction?","goog.object/get","G__46450","oc.web.actions.comment/react-from-picker","rum.core/build-defcs","p__46454","map__46455","sablono.util/join-classes","attrs46458","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","attrs46460","attrs46462","attrs46466","attrs46471","attrs46473","attrs46477","oc.web.components.stream-reply-item/reply-comment","p1__46451#","oc.web.mixins.ui.on_click_out","cljs.core/compare-and-set!","rum.core.local","row-index","mouse-leave-cb","react-cb","reply-cb","emoji-picker","is-mobile?","member?","did-react-cb","current-user-id","reply-focus-value","replying-to","add-comment-force-update","add-comment-string-key","oc.web.dispatcher.add_comment_string_key","G__46457","oc.web.components.stream-comments/edit-comment","show-new-comment-tag","oc.web.lib.utils/class-set","cljs.core/fn?","G__46459","oc.web.components.ui.more-menu/more-menu","oc.web.lib.utils/hide-class","p1__46452#","comment-author","G__46461","G__46472","oc.web.components.ui.info-hover-views/user-info-hover","oc.web.components.ui.user-avatar/user-avatar-image","oc.web.urls.contributions","oc.web.lib.utils/event-stop","oc.web.actions.nav_sidebar.nav_to_author_BANG_","oc.web.lib.utils/activity-date-tooltip","oc.web.lib.utils/foc-date-time","G__46463","G__46464","G__46465","G__46467","G__46468","G__46469","G__46474","G__46475","G__46476","G__46478","G__46479","G__46480","or__4126__auto__","cljs.core.swap_BANG_","cljs.core/not","p1__46453#","oc.web.lib.utils/emojify","oc.web.utils.dom/onload-recalc-measure-class","G__46470","G__46481","oc.web.components.reactions/reactions","cljs.core/count","p__46482","map__46483","map__46484","attrs46487","attrs46492","attrs46493","attrs46494","attrs46495","oc.web.components.stream-reply-item/reply-top","oc.web.mixins.ui/refresh-tooltips-mixin","publisher","board-name","published-at","headline","links","add-comment-focus-prefix","read-data","show-wrt?","follow-link","oc.web.lib.utils.link_for","unfollow-link","G__46496","oc.web.components.ui.post-authorship/post-authorship","oc.web.lib.utils.js_date","oc.web.lib.utils.time_since","oc.web.actions.activity/entry-unfollow","G__46497","G__46498","G__46501","oc.web.components.ui.comments-summary/foc-comments-summary","G__46499","G__46500","G__46502","G__46503","oc.web.components.ui.wrt/wrt-count","p__46504","map__46505","oc.web.components.stream-reply-item/reply-item-unique-class","uuid","oc.web.components.stream-reply-item/add-comment-focus-prefix","cljs.core.rand","oc.web.components.stream-reply-item/reply-expand","oc.web.actions.reply/reply-expand","oc.web.components.stream-reply-item/reply-mark-seen","oc.web.actions.reply/reply-mark-seen","oc.web.components.stream-reply-item/replies-mark-seen","oc.web.actions.reply/replies-mark-seen","oc.web.components.stream-reply-item/reply-unwrap-body","oc.web.actions.reply/reply-unwrap-body","oc.web.components.stream-reply-item/replies-expand","oc.web.actions.reply/replies-expand","p__46507","map__46508","oc.web.components.stream-reply-item/comment-item","comments-loaded?","G__46511","fexpr__46510","G__46512","G__46513","p__46514","map__46515","oc.web.components.stream-reply-item/collapsed-comments-button","message","expand-cb","oc.web.components.stream-reply-item/setup-add-comment-focus-listener","goog.events/unlistenByKey","temp__33774__auto__","el","rum.core/dom-node","add-comment-element","p1__46517#","goog.events/listen","goog.events.EventType/BLUR","goog.events.EventType/FOCUS","p__46518","map__46519","map__46521","attrs46523","cljs.core.into_array","iter__4529__auto__","s__46527","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__46529","cljs.core/chunk-buffer","i__46528","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46526","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__46532","b__46534","i__46533","iter__46531","oc.web.components.stream-reply-item/stream-reply-item","rum.core/reactive","oc.web.mixins.ui/interactive-images-mixin","oc.web.mixins.ui/on-window-click-mixin","and__4115__auto__","oc.web.lib.utils/event-inside?","js/$","org.martinklepsch.derivatives.drv","oc.web.mixins.mention.oc_mentions_hover","add-comment-focus-listener","current-user-data","clear-cell-measure-cb*","_users-info-hover","org.martinklepsch.derivatives/react","_follow-publishers-list","_followers-publishers-count","unseen","replies-data","expanded-replies","comments-count","reply-item-class","add-comment-focus-value","oc.web.utils.comment.add_comment_focus_value","show-expand-replies?","cljs.core.filter","oc.web.lib.utils/after","reply-el","rum.core/ref-node","oc.web.lib.utils/button-clicked?","oc.web.lib.utils/input-clicked?","oc.web.lib.utils/anchor-clicked?","oc.web.lib.utils/content-editable-clicked?","oc.web.utils.dom/event-inside?","oc.web.utils.dom/event-cotainer-has-class","oc.web.actions.nav_sidebar.open_post_modal","G__46524","oc.web.components.ui.small-loading/small-loading","rum.core/with-key","G__46525","reply","G__46530","G__46535","oc.web.components.ui.add-comment/add-comment","oc.web.utils.dom/viewport-width","new-comment-data","oc.web.actions.reply/replies-add","oc.web.components.stream-reply-item/count-unseen-comments","items","cljs.core.reduce","c","item","p__46536","map__46537","oc.web.components.stream-reply-item/replies-refresh-button","props","items-to-render","replies-badge","delta-new-comments","show-refresh-button?","G__46539","oc.web.components.ui.refresh-button/refresh-button","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.stream-reply-item\n  (:require-macros [if-let.core :refer (when-let*)])\n  (:require [rum.core :as rum]\n            [goog.object :as gobj]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [clojure.data :as clj-data]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.comment :as cu]\n            [oc.web.utils.activity :as au]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.mixins.seen :as seen-mixins]\n            [oc.web.utils.ui :refer (ui-compose)]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.user :as user-actions]\n            [oc.web.actions.reply :as reply-actions]\n            [oc.web.lib.react-utils :as react-utils]\n            [oc.web.mixins.mention :as mention-mixins]\n            [oc.web.utils.reaction :as reaction-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.comment :as comment-actions]\n            [oc.web.components.ui.wrt :refer (wrt-count)]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.reactions :refer (reactions)]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.more-menu :refer (more-menu)]\n            [oc.web.components.ui.add-comment :refer (add-comment)]\n            [oc.web.components.stream-comments :refer (edit-comment)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.refresh-button :refer (refresh-button)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]\n            [oc.web.components.ui.post-authorship :refer (post-authorship)]\n            [oc.web.components.ui.info-hover-views :refer (user-info-hover)]\n            [oc.web.components.ui.comments-summary :refer (foc-comments-summary)]\n            [\"emoji-mart\" :as emoji-mart]))\n\n;; Comment delete\n\n(defn delete-clicked [e entry-data comment-data clear-cell-measure-cb]\n  (let [alert-data {:icon \"/img/ML/trash.svg\"\n                    :action \"delete-comment\"\n                    :message \"Delete this comment?\"\n                    :link-button-title \"No\"\n                    :link-button-cb #(alert-modal/hide-alert)\n                    :solid-button-style :red\n                    :solid-button-title \"Yes\"\n                    :solid-button-cb (fn [_]\n                                       (comment-actions/delete-comment entry-data comment-data)\n                                       (alert-modal/hide-alert)\n                                       (clear-cell-measure-cb))\n                    }]\n    (alert-modal/show-alert alert-data)))\n\n;; Comment edit\n\n(defn finish-edit [s clear-cell-measure-cb]\n  (reset! (::editing? s) false)\n  (clear-cell-measure-cb))\n\n(defn- start-edit [s entry-data comment-data clear-cell-measure-cb]\n  (comment-actions/edit-comment (:uuid entry-data) comment-data)\n  (reset! (::show-more-menu s) nil)\n  (reset! (::editing? s) true)\n  (clear-cell-measure-cb))\n\n;; Comment reply\n\n(defn- quoted-reply-header [comment-data]\n  (str \"<span class=\\\"oc-replying-to\\\" contenteditable=\\\"false\\\">\u21a9\ufe0e Replying to \" (-> comment-data :author :name) \"</span><br>\"))\n\n(defn- reply-to [comment-data add-comment-focus-key]\n  (comment-actions/reply-to add-comment-focus-key (str (quoted-reply-header comment-data) (:body comment-data)) true))\n\n;; Comment react\n\n(rum/defc emoji-picker < rum/static\n                         (when (responsive/is-mobile-size?)\n                           ui-mixins/no-scroll-mixin)\n  [{:keys [add-emoji-cb dismiss-cb]}]\n  [:div.emoji-picker-container\n    [:button.mlb-reset.close-bt\n      {:on-click dismiss-cb}\n      \"Cancel\"]\n    (react-utils/build (.-Picker emoji-mart)\n      {:native true\n       :autoFocus true\n       :onClick (fn [emoji _]\n                  (add-emoji-cb emoji))})])\n\n(defn- emoji-picker-container [s entry-data reply-data seen-reply-cb]\n  (let [showing-picker? (and (seq @(::show-picker s))\n                             (= @(::show-picker s) (:uuid reply-data)))]\n    (when showing-picker?\n      (emoji-picker {:dismiss-cb #(reset! (::show-picker s) nil)\n                     :add-emoji-cb (fn [emoji]\n                                     (when (reaction-utils/can-pick-reaction? (gobj/get emoji \"native\") (:reactions reply-data))\n                                       (seen-reply-cb (:uuid reply-data))\n                                       (comment-actions/react-from-picker entry-data reply-data\n                                        (gobj/get emoji \"native\")))\n                                     (reset! (::show-picker s) nil))}))))\n\n;; Comment row\n\n(rum/defcs reply-comment <\n  rum/static\n  (ui-mixins/on-click-out :more-bt-container\n   #(compare-and-set! (::show-more-menu %1) true false))\n  (rum/local false ::show-more-menu)\n  (rum/local false ::editing?)\n  [s {:keys [entry-data comment-data row-index mouse-leave-cb\n             react-cb reply-cb emoji-picker\n             is-mobile? member? showing-picker?\n             did-react-cb current-user-id reply-focus-value\n             replying-to add-comment-force-update clear-cell-measure-cb]}]\n  (if @(::editing? s)\n    (let [add-comment-string-key (dis/add-comment-string-key (:uuid entry-data)\n                                  (:reply-parent comment-data) (:uuid comment-data))]\n      (edit-comment {:activity-data entry-data\n                     :comment-data comment-data\n                     :dismiss-reply-cb #(finish-edit s clear-cell-measure-cb)\n                     :add-comment-did-change clear-cell-measure-cb\n                     :add-comment-cb clear-cell-measure-cb\n                     :edit-comment-key (get add-comment-force-update add-comment-string-key)}))\n    (let [show-new-comment-tag (:unseen comment-data)]\n      [:div.reply-comment-outer.open-reply\n        {:key (str \"reply-comment-\" (:created-at comment-data))\n         :data-comment-uuid (:uuid comment-data)\n         :data-unseen (:unseen comment-data)\n         :class (utils/class-set {:new-comment (:unseen comment-data)\n                                  :showing-picker showing-picker?})}\n        [:div.reply-comment\n          {:ref (str \"reply-comment-\" (:uuid comment-data))\n           :on-mouse-leave (fn [e]\n                             (compare-and-set! (::show-more-menu s) true false)\n                             (when (fn? mouse-leave-cb)\n                               (mouse-leave-cb e)))}\n          [:div.reply-comment-inner\n            (when is-mobile?\n              [:div.reply-comment-mobile-menu\n                (more-menu {:entity-data comment-data\n                            :external-share false\n                            :entity-type \"comment\"\n                            :can-react? true\n                            :react-cb react-cb\n                            :can-reply? true\n                            :reply-cb reply-cb})\n                emoji-picker])\n            [:div.reply-comment-right\n              [:div.reply-comment-header.group\n                {:class utils/hide-class}\n                [:div.reply-comment-author-right\n                  (let [comment-author (:author comment-data)]\n                    [:div.reply-comment-author-right-group\n                      {:class (when (:unseen comment-data) \"new-comment\")}\n                      [:div.reply-comment-author-name-container\n                        (user-info-hover {:user-data comment-author\n                                          :current-user-id current-user-id\n                                          :leave-delay? true})\n                        [:div.reply-comment-author-avatar\n                          (user-avatar-image comment-author)]\n                        [:a.reply-comment-author-name\n                          {:class (when (:user-id comment-author) \"clickable-name\")\n                           :href (when (:user-id comment-author)\n                                   (oc-urls/contributions (:user-id comment-author)))\n                           :on-click #(do\n                                        (utils/event-stop %)\n                                        (nav-actions/nav-to-author! % (:user-id comment-author) (oc-urls/contributions (:user-id comment-author))))}\n                          (:name comment-author)]]\n                      [:div.separator-dot]\n                      [:div.reply-comment-author-timestamp\n                        [:time\n                          {:date-time (:created-at comment-data)\n                           :data-toggle (when-not is-mobile? \"tooltip\")\n                           :data-placement \"top\"\n                           :data-container \"body\"\n                           :data-delay \"{\\\"show\\\":\\\"1000\\\", \\\"hide\\\":\\\"0\\\"}\"\n                           :data-title (utils/activity-date-tooltip comment-data)}\n                          (utils/foc-date-time (:created-at comment-data))]]])\n                  (when show-new-comment-tag\n                    [:div.separator-dot])\n                  (when show-new-comment-tag\n                    [:div.new-comment-tag])\n                  (if (responsive/is-mobile-size?)\n                    [:div.reply-comment-mobile-menu\n                      (more-menu comment-data nil {:external-share false\n                                                   :entity-type \"comment\"\n                                                   :can-react? true\n                                                   :react-cb react-cb\n                                                   :can-reply? true\n                                                   :reply-cb reply-cb})\n                      emoji-picker]\n                    [:div.reply-comment-floating-buttons\n                      {:key \"reply-comment-floating-buttons\"}\n                      (when (or (:can-edit comment-data)\n                                (:can-delete comment-data))\n                        [:div.more-bt-container\n                          {:ref :more-bt-container}\n                          [:button.mlb-reset.floating-bt.more-bt\n                            {:on-click #(swap! (::show-more-menu s) not)}]\n                          (when @(::show-more-menu s)\n                            [:div.comment-more-menu-container\n                              (when (:can-delete comment-data)\n                                [:button.mlb-reset.delete-bt\n                                  {:on-click #(delete-clicked % entry-data comment-data clear-cell-measure-cb)}\n                                  \"Delete\"])\n                              (when (:can-edit comment-data)\n                                [:button.mlb-reset.edit-bt\n                                  {:on-click #(start-edit s entry-data comment-data clear-cell-measure-cb)}\n                                  \"Edit\"])])])\n                      ;; Reply to comment\n                      [:button.mlb-reset.floating-bt.reply-bt\n                        {:data-toggle \"tooltip\"\n                         :data-placement \"top\"\n                         :on-click reply-cb\n                         :title \"Reply\"}]\n                      ;; React container\n                      [:div.react-bt-container\n                        [:button.mlb-reset.floating-bt.react-bt\n                          {:data-toggle \"tooltip\"\n                           :data-placement \"top\"\n                           :title \"Add reaction\"\n                           :on-click react-cb}]\n                        emoji-picker]])]]\n              [:div.reply-comment-content\n                [:div.reply-comment-body.oc-mentions.oc-mentions-hover\n                  {:dangerouslySetInnerHTML (utils/emojify (:body comment-data))\n                   :ref :reply-comment-body\n                   :data-row-index row-index\n                   :class (utils/class-set {:emoji-comment (:is-emoji comment-data)\n                                            utils/hide-class true\n                                            dom-utils/onload-recalc-measure-class true})}]]\n              (when (seq (:reactions comment-data))\n                [:div.reply-comment-reactions-footer.group\n                  (reactions {:entity-data comment-data\n                              :hide-picker (zero? (count (:reactions comment-data)))\n                              :did-react-cb did-react-cb\n                              :optional-activity-data entry-data})])]]]])))\n\n;; Reply header\n\n(rum/defc reply-top <\n  rum/static\n  ui-mixins/refresh-tooltips-mixin\n  [{{:keys [publisher board-name published-at headline links] :as entry-data} :entry-data\n    current-user-id :current-user-id add-comment-focus-prefix :add-comment-focus-prefix\n    read-data :read-data member? :member? show-wrt? :show-wrt?}]\n  (let [follow-link (utils/link-for links \"follow\")\n        unfollow-link (utils/link-for links \"unfollow\")]\n    [:div.reply-item-top\n      [:div.reply-item-header\n        (post-authorship {:activity-data entry-data\n                          :user-avatar? true\n                          :user-hover? true\n                          :board-hover? false\n                          :activity-board? true\n                          :leave-delay? true\n                          :current-user-id current-user-id})\n        [:div.separator-dot]\n        [:span.time-since\n          [:time\n            {:date-time published-at\n             :data-toggle (when-not (responsive/is-mobile-size?) \"tooltip\")\n             :data-placement \"top\"\n             :data-container \"body\"\n             :title (utils/activity-date-tooltip (utils/js-date published-at))}\n            (utils/time-since published-at [:short :lower-case])]]\n        (when (or follow-link unfollow-link)\n          [:button.mlb-reset.mute-bt\n            {:title (if follow-link\n                      \"Get notified about new activity\"\n                      \"Don't show future replies to this update\")\n             :class (if follow-link \"unfollowing\" \"following\")\n             :data-toggle (when-not (responsive/is-mobile-size?) \"tooltip\")\n             :data-placement \"top\"\n             :data-container \"body\"\n             :on-click #(activity-actions/entry-unfollow (:uuid entry-data))}])]\n      [:div.reply-item-title\n        headline]\n      [:div.reply-item-body.oc-mentions\n        {:data-itemuuid (:uuid entry-data)\n         :dangerouslySetInnerHTML {:__html (:body entry-data)}}]\n      [:div.reply-item-footer.group\n        (when member?\n          (reactions {:entity-data entry-data\n                      :only-thumb? true}))\n        [:div.reply-item-footer-mobile-group\n          (when member?\n            [:div.reply-item-comments-summary\n              ; {:on-click #(expand s true true)}\n              (foc-comments-summary {:entry-data entry-data\n                                     :add-comment-focus-prefix add-comment-focus-prefix})])\n          (when show-wrt?\n            [:div.reply-item-wrt\n              (wrt-count {:activity-data entry-data\n                          :read-data read-data})])]]]))\n\n(defn- reply-item-unique-class [{:keys [uuid]}]\n  (str \"reply-item-\" uuid))\n\n(defn- add-comment-focus-prefix []\n  (str \"reply-comment-\" (int (rand 10000)) \"-prefix\"))\n\n(defn- reply-expand [entry-data reply-data]\n  (reply-actions/reply-expand entry-data reply-data))\n\n(defn- reply-mark-seen [entry-data reply-data]\n  (reply-actions/reply-mark-seen entry-data reply-data))\n\n(defn- replies-mark-seen [entry-data]\n  (reply-actions/replies-mark-seen entry-data))\n\n(defn reply-unwrap-body [entry-data reply-data]\n  (reply-actions/reply-unwrap-body entry-data reply-data))\n\n(defn replies-expand [entry-data]\n  (reply-actions/replies-expand entry-data))\n\n(defn- comment-item\n  [s {:keys [entry-data reply-data is-mobile? seen-reply-cb member? add-comment-force-update\n             current-user-id reply-focus-value comments-loaded? clear-cell-measure-cb row-index]}]\n  (let [showing-picker? (and (seq @(::show-picker s))\n                             (= @(::show-picker s) (:uuid reply-data)))\n        replying-to (@(::replying s) (:uuid reply-data))]\n    [:div.reply-item-block.vertical-line.group\n      {:key (str \"reply-thread-item-\" (:uuid reply-data))}\n      (reply-comment {:entry-data entry-data\n                      :comment-data reply-data\n                      :row-index row-index\n                      :reply-focus-value reply-focus-value\n                      :is-mobile? is-mobile?\n                      :clear-cell-measure-cb clear-cell-measure-cb\n                      :react-cb #(when comments-loaded?\n                                   (reset! (::show-picker s) (:uuid reply-data)))\n                      :react-disabled? (not comments-loaded?)\n                      :reply-cb #(do\n                                   (reply-to reply-data reply-focus-value)\n                                   (clear-cell-measure-cb))\n                      :did-react-cb #(do\n                                      (seen-reply-cb (:uuid reply-data))\n                                      (clear-cell-measure-cb))\n                      :emoji-picker (when showing-picker?\n                                      (emoji-picker-container s entry-data reply-data seen-reply-cb))\n                      :showing-picker? showing-picker?\n                      :member? member?\n                      :current-user-id current-user-id\n                      :replying-to replying-to\n                      :add-comment-force-update add-comment-force-update})]))\n\n(rum/defc collapsed-comments-button <\n  rum/static\n  [{:keys [message expand-cb]}]\n  [:button.mlb-reset.view-more-bt\n    {:on-click expand-cb}\n    message])\n\n(defn- setup-add-comment-focus-listener [s]\n  (when @(::add-comment-focus-listener s)\n    (events/unlistenByKey @(::add-comment-focus-listener s)))\n  (when-let* [el (rum/dom-node s)\n              add-comment-element (.querySelector el (str \"div.add-comment-box-\" @(::add-comment-focus-prefix s) \" div.add-comment\"))]\n    (reset! (::add-comment-focus-listener s)\n     (events/listen add-comment-element #js [EventType/BLUR EventType/FOCUS]\n      #(reset! (::add-comment-focused s) (= (.-type %) EventType/FOCUS))))))\n\n(rum/defcs stream-reply-item <\n  rum/static\n  rum/reactive\n  (rum/local nil ::show-picker)\n  (rum/local #{} ::replying)\n  (rum/local nil ::add-comment-focus-prefix)\n  (rum/local nil ::add-comment-focus-listener)\n  (rum/local false ::add-comment-focused)\n  ui-mixins/refresh-tooltips-mixin\n  (ui-mixins/interactive-images-mixin \"div.reply-comment-body\")\n  (ui-mixins/on-window-click-mixin (fn [s e]\n   (when (and @(::show-picker s)\n              (not (utils/event-inside? e\n               (.get (js/$ \"div.emoji-mart\" (rum/dom-node s)) 0))))\n     (reset! (::show-picker s) nil))))\n  ;; Mentions:\n  (drv/drv :users-info-hover)\n  (drv/drv :follow-publishers-list)\n  (drv/drv :followers-publishers-count)\n  (drv/drv :current-user-data)\n  (mention-mixins/oc-mentions-hover {:click? true})\n  ;; Component life cycle\n  {:will-mount (fn [s]\n     (reset! (::add-comment-focus-prefix s) (add-comment-focus-prefix))\n   s)\n   :did-mount (fn [s]\n    (setup-add-comment-focus-listener s)\n   s)\n   :did-remount (fn [_ s]\n    (setup-add-comment-focus-listener s)\n   s)\n   :will-unmount (fn [s]\n    (when-let [add-comment-focus-listener @(::add-comment-focus-listener s)]\n      (events/unlistenByKey add-comment-focus-listener)\n      (reset! (::add-comment-focused s) false))\n   s)}\n  ;; Render\n  [s {member?               :member?\n      reply-data            :reply-data\n      show-wrt?             :show-wrt?\n      row-index             :row-index\n      read-data             :read-data\n      current-user-data     :current-user-data\n      clear-cell-measure-cb* :clear-cell-measure-cb\n      add-comment-force-update :add-comment-force-update}]\n  (let [_users-info-hover (drv/react s :users-info-hover)\n        _follow-publishers-list (drv/react s :follow-publishers-list)\n        _followers-publishers-count (drv/react s :followers-publishers-count)\n        {uuid             :uuid\n         publisher        :publisher\n         unseen           :unseen\n         published-at     :published-at\n         replies-data     :replies-data\n         expanded-replies :expanded-replies\n         comments-loaded? :comments-loaded?\n         comments-count   :comments-count\n         :as              entry-data}           reply-data\n        is-mobile? (responsive/is-mobile-size?)\n        reply-item-class (reply-item-unique-class entry-data)\n        add-comment-focus-value (cu/add-comment-focus-value @(::add-comment-focus-prefix s) uuid)\n        show-expand-replies? (and (not expanded-replies)\n                                  (seq (filter :collapsed replies-data)))\n        clear-cell-measure-cb #(when (fn? clear-cell-measure-cb*)\n                                 (utils/after 10 clear-cell-measure-cb*))]\n    [:div.reply-item.group\n      {:class (utils/class-set {:unseen unseen\n                                :open-item true\n                                :close-item true\n                                :reply-item-add-comment-focus @(::add-comment-focused s)\n                                reply-item-class true})\n       :data-activity-uuid uuid\n       :ref :reply-item\n       :on-click (fn [e]\n                   (let [reply-el (rum/ref-node s :reply-item)]\n                     (when (and (not (utils/button-clicked? e))\n                                (not (utils/input-clicked? e))\n                                (not (utils/anchor-clicked? e))\n                                (not (utils/content-editable-clicked? e))\n                                (not (dom-utils/event-inside? e (.querySelector reply-el \"div.emoji-mart\")))\n                                (not (dom-utils/event-inside? e (.querySelector reply-el \"div.add-comment-box-container\")))\n                                (not (dom-utils/event-cotainer-has-class e \"reply-comment-body\")))\n                       (nav-actions/open-post-modal entry-data false))))}\n      (reply-top {:entry-data entry-data\n                  :current-user-id (:user-id current-user-data)\n                  :member? member?\n                  :show-wrt? show-wrt?\n                  :add-comment-focus-prefix @(::add-comment-focus-prefix s)\n                  :read-data read-data})\n      (when (and (not comments-loaded?)\n                 expanded-replies)\n        [:div.reply-item-blocks.group\n          [:div.reply-item-loading.group\n            (small-loading)\n            [:span.reply-item-loading-inner\n              \"Loading more replies...\"]]])\n      [:div.reply-item-blocks.group\n        (when show-expand-replies?\n          (rum/with-key\n           (collapsed-comments-button {:expand-cb #(do\n                                                    (replies-expand entry-data)\n                                                    (clear-cell-measure-cb))\n                                       :message (str \"View all \" comments-count \" comments\")})\n           (str \"collapsed-comments-bt-\" uuid \"-\" comments-count)))\n        (for [reply replies-data\n              :when (or expanded-replies\n                        (not (:collapsed reply)))]\n          (comment-item s {:entry-data entry-data\n                           :reply-data reply\n                           :row-index row-index\n                           :is-mobile? is-mobile?\n                           :seen-reply-cb #(do\n                                            (reply-mark-seen entry-data reply)\n                                            (clear-cell-measure-cb))\n                           :clear-cell-measure-cb clear-cell-measure-cb\n                           :add-comment-force-update add-comment-force-update\n                           :member? member?\n                           :reply-focus-value add-comment-focus-value\n                           :comments-loaded? comments-loaded?\n                           :current-user-id (:user-id current-user-data)}))\n        (rum/with-key\n         (add-comment {:activity-data entry-data\n                       :collapse? true\n                       :add-comment-placeholder \"Reply...\"\n                       :internal-max-width (if is-mobile? (- (dom-utils/viewport-width) (* (+ 24 1) 2)) 524) ;; On mobile is screen width less the padding and border on both sides\n                       :add-comment-did-change #(clear-cell-measure-cb)\n                       :add-comment-cb (fn [new-comment-data]\n                                         (reply-actions/replies-add entry-data new-comment-data)\n                                         (clear-cell-measure-cb))\n                       :row-index row-index\n                       :add-comment-focus-prefix @(::add-comment-focus-prefix s)})\n         (str \"add-comment-\" @(::add-comment-focus-prefix s) \"-\" uuid))]]))\n\n(defn- count-unseen-comments [items]\n  (reduce (fn [c item]\n            (+ c (count (filter :unseen (:replies-data item)))))\n   0\n   items))\n\n(rum/defcs replies-refresh-button < rum/reactive\n  (drv/drv :replies-badge)\n  (rum/local 0 ::initial-unseen-comments)\n  {:will-mount (fn [s]\n    (let [props (-> s :rum/args first)]\n        (reset! (::initial-unseen-comments s) (count-unseen-comments (:items-to-render props))))\n    s)}\n  [s {:keys [items-to-render]}]\n  (let [replies-badge (drv/react s :replies-badge)\n        delta-new-comments (- (count-unseen-comments items-to-render) @(::initial-unseen-comments s))\n        show-refresh-button? (and replies-badge\n                                  (pos? delta-new-comments))]\n    (when show-refresh-button?\n      (refresh-button {:message (if (pos? delta-new-comments)\n                                  (str delta-new-comments \" unread comment\" (when-not (= delta-new-comments 1) \"s\"))\n                                  \"New replies available\")\n                       :visible show-refresh-button?\n                       :class-name :replies-refresh-button-container}))))"]}