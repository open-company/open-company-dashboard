{"version":3,"sources":["oc/web/ws/utils.cljs"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.ws.utils/sentry-report","p__41232","vec__41233","cljs.core.nth","seq41228","G__41229","cljs.core/first","cljs.core/next","G__41230","G__41231","self__4723__auto__","message","chsk-send!","ch-state","action-id","infos","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","connection-status","cljs.core/deref","ch-send-fn?","cljs.core/fn?","ctx","oc.web.lib.fullstory/session-url","oc.web.lib.sentry/capture-message-with-extra-context!","oc.web.ws.utils/real-send","service-name","args","e41245","cljs.core.apply","cljs.core/ExceptionInfo","e","oc.web.ws.utils.sentry_report","cljs.core/ffirst","cljs.core/rest","js/oc","js/oc.web","js/oc.web.ws","js/oc.web.ws.utils","js/oc.web.ws.utils.cmd-queue","oc.web.ws.utils/cmd-queue","cljs.core.atom","oc.web.ws.utils/buffer-cmd","service-key","cljs.core.keyword","service-queue","G__41251","service-next-queue","cljs.core.conj","cljs.core.swap_BANG_","cljs.core/assoc","oc.web.ws.utils/reset-queue","cljs.core/reset!","cljs.core.assoc","oc.web.ws.utils/send-queue","and__4115__auto__","cljs.core/count","G__41258","fexpr__41257","seq__41259","cljs.core/seq","chunk__41260","count__41261","i__41262","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","qargs","G__41266","fexpr__41265","oc.web.ws.utils/send!","oc.web.ws.utils/check-interval","last-interval","reconnect-cb","js/window","cljs.core/not","oc.web.lib.utils.js_date","oc.web.lib.utils/after","oc.web.local-settings/ws-monitor-interval","oc.web.ws.utils/reconnected","oc.web.ws.utils/report-invalid-jwt","rep","oc.web.lib.jwt/jwt","js/Date","oc.web.ws.utils/report-connect-timeout","oc.web.ws.utils/auth-check","channelsk","jwt-refresh-cb","success-cb","taoensso.sente/cb-success?","taoensso.sente/chsk-disconnect!","oc.web.lib.jwt/expired?","cljs.core._EQ_","oc.web.ws.utils/post-handshake-auth","auth-cb","oc.web.ws.utils/after"],"sourcesContent":["(ns oc.web.ws.utils\n  (:require [taoensso.timbre :as timbre]\n            [taoensso.sente :as s]\n            [oc.web.lib.jwt :as j]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.sentry :as sentry]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.fullstory :as fullstory]))\n\n;; Connection check\n\n(defn sentry-report [message chsk-send! ch-state & [action-id infos]]\n  (timbre/debug \"Sentry report:\" message)\n  (let [connection-status (when @ch-state\n                            @@ch-state)\n        ch-send-fn? (fn? @chsk-send!)\n        ctx {:action action-id\n             :connection-status connection-status\n             :send-fn ch-send-fn?\n             :infos infos\n             :sessionURL (fullstory/session-url)}]\n    (sentry/capture-message-with-extra-context! ctx message)\n    (timbre/error message ctx)))\n\n;; Real send\n\n(defn- real-send [service-name chsk-send! ch-state args]\n (try\n   (apply @chsk-send! args)\n   (catch ExceptionInfo e\n     (sentry-report (str \"Error sending event for \" service-name)\n      chsk-send! ch-state (ffirst args)\n      {:rest-args (rest (first args))\n       :ex-message (.-message e)}))))\n\n;; cmd queue\n(defonce cmd-queue (atom {}))\n\n(defn buffer-cmd [service-name args]\n  (timbre/debug \"Queuing message for\" service-name args)\n  (let [service-key (keyword service-name)\n        service-queue (service-key @cmd-queue)\n        service-next-queue (conj service-queue args)]\n    (swap! cmd-queue assoc service-key service-next-queue)))\n\n(defn reset-queue [service-name]\n  (timbre/debug \"Reset queue for\" service-name)\n  (reset! cmd-queue (assoc @cmd-queue (keyword service-name) [])))\n\n(defn send-queue [service-name chsk-send! ch-state]\n  (when (and @chsk-send! (:open? @@ch-state))\n    (timbre/debug \"Send queue for\" service-name (count ((keyword service-name) @cmd-queue)))\n    (doseq [qargs ((keyword service-name) @cmd-queue)]\n      (real-send service-name chsk-send! ch-state qargs))\n    (reset-queue service-name)))\n\n(defn send! [service-name chsk-send! ch-state args]\n  (timbre/debug \"Send!\" service-name args)\n  (if (and @chsk-send! (:open? @@ch-state))\n    (do\n      ;; empty queue first\n      (send-queue service-name chsk-send! ch-state)\n      ;; send current command\n      (real-send service-name chsk-send! ch-state args))\n    ;;disconnected\n    (buffer-cmd service-name args)))\n\n(defn check-interval [last-interval service-name chsk-send! ch-state reconnect-cb]\n  (timbre/debug \"Set check-interval for\" service-name)\n  (when @last-interval\n    (.clearInterval js/window @last-interval))\n  (reset! last-interval\n   (.setInterval js/window\n    #(when (or (not @ch-state)\n               (not @@ch-state)\n               (not (:open? @@ch-state)))\n       (timbre/debug \"WS check-interval connection down for\" service-name)\n       ;; WS connection is closed\n       (if (:udt-next-reconnect @@ch-state)\n         ;; There is an auto reconnect set, let's wait for it\n         (timbre/debug \"Will reconnect automatically at\" (utils/js-date (:udt-next-reconnect @@ch-state)))\n         ;; no auto reconnect, let's force a reconnect\n         (do\n           (timbre/debug \"No auto reconnect set, forcing reconnection\")\n           (sentry-report (str \"No auto reconnect set for\" service-name \". Forcing reconnect!\") chsk-send! ch-state)\n           (utils/after 0 reconnect-cb))))\n    (* ls/ws-monitor-interval 1000))))\n\n(defn reconnected [last-interval service-name chsk-send! ch-state reconnect-cb]\n  (timbre/debug \"Reconnect\" service-name)\n  (send-queue service-name chsk-send! ch-state)\n  (check-interval last-interval service-name chsk-send! ch-state reconnect-cb))\n\n(defn report-invalid-jwt [service-name ch-state rep]\n  (timbre/debug \"Report invalid-jwt\" service-name)\n  (let [connection-status (when @ch-state\n                            @@ch-state)\n        ctx {:jwt (j/jwt)\n             :connection-status connection-status\n             :timestamp (.getTime (new js/Date))\n             :rep rep\n             :sessionURL (fullstory/session-url)}]\n    (sentry/capture-message-with-extra-context! ctx (str service-name \" WS: not valid JWT\"))\n    (timbre/error service-name \"WS: not valid JWT\" ctx)))\n\n(defn report-connect-timeout [service-name ch-state]\n  (timbre/debug \"Report connection-timeout\" service-name)\n  (let [connection-status (when @ch-state\n                            @@ch-state)\n        ctx {:timestamp (.getTime (new js/Date))\n             :connection-status connection-status\n             :sessionURL (fullstory/session-url)}]\n    (sentry/capture-message-with-extra-context! ctx (str service-name \" WS: handshake timeout\"))\n    (timbre/error service-name \"WS: handshake timeout\" ctx)))\n\n(defn auth-check [service-name ch-state chsk-send! channelsk jwt-refresh-cb reconnect-cb success-cb rep]\n  (timbre/debug \"Auth-check\" service-name)\n  (if (and (s/cb-success? rep)\n           (:valid rep))\n    (when (fn? success-cb)\n      (success-cb rep))\n    (do\n      (timbre/warn \"Disconnecting client due to invalid JWT!\" rep)\n      (s/chsk-disconnect! @channelsk)\n      (cond\n        (j/expired?)\n        (jwt-refresh-cb reconnect-cb)\n        (= rep :chsk/timeout)\n        (do\n          (report-connect-timeout service-name ch-state)\n          ;; retry in 10 seconds if sente is not trying reconnecting\n          (when (and @ch-state\n                     (not (:udt-next-reconnect @@ch-state)))\n            (utils/after (* 10 1000)\n             (reconnect-cb))))\n        (or (= rep :chsk/closed)\n            (= rep \"closed\"))\n        (do\n          (sentry-report (str \"Auth failed for\" service-name) chsk-send! ch-state \"jwt-validation/auth-check\"\n           {:chsk/closed (= rep :chsk/closed)\n            :closed (= rep \"closed\")})\n          ;; retry in 10 seconds if sente is not trying reconnecting\n          (when (and @ch-state\n                     (not (:udt-next-reconnect @@ch-state)))\n            (utils/after (* 10 1000)\n             (reconnect-cb))))\n        :else\n        (report-invalid-jwt service-name ch-state rep)))))\n\n(defn post-handshake-auth [jwt-refresh-cb auth-cb]\n  (timbre/debug \"Trying post handshake jwt auth\")\n  (if (j/expired?)\n    (jwt-refresh-cb auth-cb)\n    (auth-cb)))\n\n(def after utils/after)"]}