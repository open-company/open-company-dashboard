{"version":3,"sources":["oc/web/stores/reply.cljs"],"mappings":"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","names":["oc.web.stores.reply/remove-collapse-items-inner","entry-uuid","entries","cljs.core.mapv","entry-data","cljs.core._EQ_","cljs.core.update","replies-data","p1__38653#","cljs.core/filterv","cljs.core/not","oc.web.utils.activity.resource_type_QMARK_","oc.web.stores.reply/remove-collapse-items","db","replies-key","cljs.core.update_in","cljs.core.conj","cljs.core.partial","oc.web.stores.reply/update-field","item","kv","fv","cljs.core/fn?","cljs.core.assoc","oc.web.stores.reply/update-reply-inner","reply-uuid-or-set","reply-data","or__4126__auto__","cljs.core/set?","G__38665","oc.web.stores.reply/update-reply","reply-uuid","oc.web.stores.reply/update-replies","oc.web.stores.reply/add-reply-inner","parsed-reply-data","with-seen","p1__38669#","cljs.core.map","cljs.core/vec","cljs.core.concat","oc.web.stores.reply/add-reply","oc.web.stores.reply/update-entry-inner","oc.web.stores.reply/update-entry","oc.web.dispatcher/action","p__38670","vec__38671","cljs.core.nth","_","org-slug","oc.web.dispatcher.container_key","oc.web.dispatcher/recent-activity-sort","p__38674","vec__38675","p__38678","vec__38679","p__38682","vec__38683","p__38686","vec__38687","p__38690","vec__38691","p__38694","vec__38695"],"sourcesContent":["(ns oc.web.stores.reply\n  (:require [oc.web.dispatcher :as dispatcher]\n            [oc.web.utils.comment :as cu]\n            [oc.web.utils.activity :as au]))\n\n;; Reply actions\n\n(defn remove-collapse-items-inner [entry-uuid entries]\n  (mapv (fn [entry-data]\n         (if (= (:uuid entry-data) entry-uuid)\n           (update entry-data :replies-data\n            (fn [replies-data]\n              (filterv #(not (au/resource-type? % :collapsed-comments)) replies-data)))\n           entry-data))\n   entries))\n\n(defn- remove-collapse-items [db replies-key entry-uuid]\n  (-> db\n   (update-in (conj replies-key :items-to-render) (partial remove-collapse-items-inner entry-uuid))\n   (update-in (conj replies-key :posts-list) (partial remove-collapse-items-inner entry-uuid))))\n\n(defn- update-field [item kv fv]\n  (if (fn? fv)\n    (update item kv fv)\n    (assoc item kv fv)))\n\n(defn update-reply-inner [entry-uuid reply-uuid-or-set kv fv entries]\n  (mapv (fn [entry-data]\n         (if (= (:uuid entry-data) entry-uuid)\n           (update entry-data :replies-data\n            (fn [replies-data]\n              (mapv (fn [reply-data]\n                      (if (or (= reply-uuid-or-set :all)\n                              (= reply-uuid-or-set (:uuid reply-data))\n                              (and (set? reply-uuid-or-set)\n                                   (reply-uuid-or-set (:uuid reply-data))))\n                        (update-field reply-data kv fv)\n                        reply-data))\n                replies-data)))\n           entry-data))\n   entries))\n\n(defn- update-reply [db replies-key entry-uuid reply-uuid kv fv]\n  (-> db\n   (update-in (conj replies-key :items-to-render) (partial update-reply-inner entry-uuid reply-uuid kv fv))\n   (update-in (conj replies-key :posts-list) (partial update-reply-inner entry-uuid reply-uuid kv fv))))\n\n(defn- update-replies [db replies-key entry-uuid kv fv]\n  (-> db\n   (update-in (conj replies-key :items-to-render) (partial update-reply-inner entry-uuid :all kv fv))\n   (update-in (conj replies-key :posts-list) (partial update-reply-inner entry-uuid :all kv fv))))\n\n(defn- add-reply-inner [entry-uuid parsed-reply-data entries]\n  (mapv (fn [entry-data]\n         (if (= (:uuid entry-data) entry-uuid)\n           (-> entry-data\n            (update :replies-data (fn [replies-data]\n                                    ;; Mark all previous comments as unseen when adding a new comment\n                                    (let [with-seen (map #(assoc % :unseen false) replies-data)]\n                                      (vec (concat with-seen [parsed-reply-data])))))\n            (assoc :unseen-comments false))\n           entry-data))\n   entries))\n\n(defn- add-reply [db replies-key entry-uuid parsed-reply-data]\n  (-> db\n   (update-in (conj replies-key :items-to-render) (partial add-reply-inner entry-uuid parsed-reply-data))\n   (update-in (conj replies-key :posts-list) (partial add-reply-inner entry-uuid parsed-reply-data))))\n\n(defn- update-entry-inner [entry-uuid kv fv entries]\n  (mapv (fn [entry-data]\n         (if (= (:uuid entry-data) entry-uuid)\n           (update-field entry-data kv fv)\n           entry-data))\n   entries))\n\n(defn- update-entry [db replies-key entry-uuid kv fv]\n  (-> db\n   (update-in (conj replies-key :items-to-render) (partial update-entry-inner entry-uuid kv fv))\n   (update-in (conj replies-key :posts-list) (partial update-entry-inner entry-uuid kv fv))))\n\n;; Store actions\n\n(defmethod dispatcher/action :reply-expand\n  [db [_ org-slug entry-data reply-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (update-reply db replies-key (:uuid entry-data) (:uuid reply-data) :collapsed false)))\n\n(defmethod dispatcher/action :reply-mark-seen\n  [db [_ org-slug entry-data reply-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (update-reply db replies-key (:uuid entry-data) (:uuid reply-data) :unseen false)))\n\n(defmethod dispatcher/action :reply-unwrap-body\n  [db [_ org-slug entry-data reply-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (update-reply db replies-key (:uuid entry-data) (:uuid reply-data) :unwrapped-body true)))\n\n(defmethod dispatcher/action :replies-entry-mark\n  [db [_ org-slug entry-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (update-replies db replies-key (:uuid entry-data) :unseen false)))\n\n(defmethod dispatcher/action :replies-expand\n  [db [_ org-slug entry-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (-> db\n     (update-entry replies-key (:uuid entry-data) :expanded-replies true)\n     (remove-collapse-items replies-key (:uuid entry-data)))))\n\n(defmethod dispatcher/action :replies-add\n  [db [_ org-slug entry-data parsed-reply-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    ;; Add the new comment as last comment\n    (add-reply db replies-key (:uuid entry-data) parsed-reply-data)))\n\n(defmethod dispatcher/action :reply-comments-loaded\n  [db [_ org-slug entry-data]]\n  (let [replies-key (dispatcher/container-key org-slug :replies dispatcher/recent-activity-sort)]\n    (update-replies db replies-key (:uuid entry-data) :comments-loaded? true)))"]}