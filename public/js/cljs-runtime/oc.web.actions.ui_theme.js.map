{"version":3,"sources":["oc/web/actions/ui_theme.cljs"],"mappings":"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","names":["oc.web.actions.ui-theme/ui-theme-cookie-name-suffix","oc.web.actions.ui-theme/ui-theme-class-name-prefix","oc.web.actions.ui-theme/ui-theme-values","oc.web.actions.ui-theme/ui-theme-default-value","oc.web.actions.ui-theme/dark-allowed-path?","js/window","cljs.core/seq","cljs.core/not","oc.web.actions.ui-theme/ui-theme-cookie-name","cljs.core/name","oc.web.actions.ui-theme/save-ui-theme-cookie","v","oc.web.lib.cookies.set_cookie_BANG_","oc.web.actions.ui-theme/read-ui-theme-cookie","cookie-val","oc.web.lib.cookies/get-cookie","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.keyword","oc.web.actions.ui-theme/set-ui-theme-class","mode","html-el","js/document","dommy.core.remove_class_BANG_","dommy.core.add_class_BANG_","oc.web.actions.ui-theme/support-system-dark-mode?","or__4126__auto__","oc.shared.useragent/desktop-app?","oc.shared.useragent/mac?","js/window.matchMedia","oc.web.actions.ui-theme/system-ui-theme-enabled?","and__4115__auto__","js/OCCarrotDesktop","js/OCCarrotDesktop.isDarkMode","oc.web.actions.ui-theme/computed-value","cljs.core._EQ_","oc.web.actions.ui-theme/get-ui-theme-setting","current-mode","oc.web.actions.ui-theme/set-ui-theme","fixed-value","oc.web.dispatcher/dispatch!","oc.web.dispatcher/ui-theme-key","js/oc","js/oc.web","js/oc.web.actions","js/oc.web.actions.ui-theme","js/oc.web.actions.ui-theme.visibility-change-listener","oc.web.actions.ui-theme/visibility-change-listener","cljs.core.atom","oc.web.actions.ui-theme/setup-ui-theme","cur-val","computed-val","p1__51337#","cljs.core.swap_BANG_","oc.web.dispatcher/app-state","cljs.core/assoc-in","cljs.core/deref","goog.events/unlistenByKey","cljs.core/reset!","goog.events/listen","goog.events.EventType/VISIBILITYCHANGE"],"sourcesContent":["(ns oc.web.actions.ui-theme\n  \"Add the proper class to the html elemenet when the app starts and when the system mode changes.\n   NB: The list of the routes not allowed to get dark mode is in the static-js.js file.\"\n  (:require [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [taoensso.timbre :as timbre]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [oc.web.dispatcher :as dis]\n            [oc.shared.useragent :as ua]\n            [oc.web.lib.cookies :as cook]))\n\n(def ^:private ui-theme-cookie-name-suffix :ui-theme)\n\n(def ^:private ui-theme-class-name-prefix :theme-mode)\n\n(def ^:private ui-theme-values #{:dark :light :auto})\n\n(def ^:private ui-theme-default-value :auto)\n\n(defn- dark-allowed-path? []\n  (-> (.. js/window -location -pathname)\n      (.match (.-OCWebUIThemeAllowedPathRegExp js/window))\n      seq\n      not))\n\n(defn ui-theme-cookie-name []\n  (str (name ui-theme-cookie-name-suffix)))\n\n(defn save-ui-theme-cookie [v]\n  (cook/set-cookie! (ui-theme-cookie-name) (name v) (* 60 60 24 365)))\n\n(defn read-ui-theme-cookie []\n  (let [cookie-val (cook/get-cookie (ui-theme-cookie-name))]\n    (timbre/debug \"Reading theme from cookie:\" cookie-val)\n    (if (seq cookie-val)\n      (keyword cookie-val)\n      ui-theme-default-value)))\n\n(defn- set-ui-theme-class [mode]\n  (let [html-el (sel1 [:html])]\n    (dommy/remove-class! (sel1 [:html]) (str (name ui-theme-class-name-prefix) \"-dark\"))\n    (dommy/remove-class! (sel1 [:html]) (str (name ui-theme-class-name-prefix) \"-light\"))\n    (dommy/add-class! (sel1 [:html]) (str (name ui-theme-class-name-prefix) \"-\" (name mode)))))\n\n(defn support-system-dark-mode? []\n  (or ;; Electron wrapper on mac has always support for auto dark mode\n      (and ua/desktop-app?\n           ua/mac?)\n      ;; On web we need to check if the media query is supported\n      (and (exists? js/window.matchMedia)\n           (or (.-matches (.matchMedia js/window \"(prefers-color-scheme: dark)\"))\n               (.-matches (.matchMedia js/window \"(prefers-color-scheme: light)\"))))))\n\n(defn system-ui-theme-enabled? []\n  (if (and ua/mac?\n           ua/desktop-app?\n           (exists? js/OCCarrotDesktop.isDarkMode))\n    (js/OCCarrotDesktop.isDarkMode)\n    (.-matches (.matchMedia js/window \"(prefers-color-scheme: dark)\"))))\n\n(defn computed-value [v]\n  (if (dark-allowed-path?)\n    (if (= v :auto)\n      (if (support-system-dark-mode?)\n        (if (system-ui-theme-enabled?)\n          :dark\n          :light)\n        ui-theme-default-value)\n     v)\n   :light))\n\n(defn get-ui-theme-setting []\n  (let [current-mode (read-ui-theme-cookie)]\n    (or current-mode ui-theme-default-value)))\n\n(defn ^:export set-ui-theme [v]\n  (let [fixed-value (or v :auto)]\n    (timbre/debug \"Saving theme:\" (name fixed-value) \"(\" v \")\")\n    (save-ui-theme-cookie fixed-value)\n    (set-ui-theme-class (computed-value fixed-value))\n    (dis/dispatch! [:input dis/ui-theme-key {:setting-value fixed-value :computed-value (computed-value fixed-value)}])))\n\n(defonce visibility-change-listener (atom nil))\n\n(defn setup-ui-theme []\n  (let [cur-val (get-ui-theme-setting)\n        computed-val (computed-value cur-val)]\n    (timbre/info \"Theme:\" (name cur-val) \"->\" (name computed-val))\n    (set-ui-theme-class computed-val)\n    ;; FIXME: use swap! instead of dis/dispatch! since the multimethod have not been intialized yet\n    ;; at this point.\n    (swap! dis/app-state #(assoc-in % dis/ui-theme-key {:setting-value cur-val :computed-value computed-val}))\n    (when (support-system-dark-mode?)\n      (set! (.-onchange (.matchMedia js/window \"(prefers-color-scheme: light)\"))\n       #(when (= (get-ui-theme-setting) :auto)\n          (set-ui-theme :auto)))\n      (when @visibility-change-listener\n        (events/unlistenByKey @visibility-change-listener))\n      (reset! visibility-change-listener\n       (events/listen js/document EventType/VISIBILITYCHANGE\n        #(when (and (= (.-visibilityState js/document) \"visible\")\n                    (= (get-ui-theme-setting) :auto))\n            (set-ui-theme :auto)))))))\n\n(setup-ui-theme)\n"]}