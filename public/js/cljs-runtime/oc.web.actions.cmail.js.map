{"version":3,"sources":["oc/web/actions/cmail.cljs"],"mappings":"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","names":["oc.web.actions.cmail/get-entry-cache-key","entry-uuid","or__4126__auto__","oc.web.dispatcher.current_org_slug","oc.web.actions.cmail/remove-cached-item","item-uuid","oc.web.lib.user-cache/remove-item","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.cmail/load-cached-item","p__42276","vec__42277","cljs.core.nth","seq42272","G__42273","cljs.core/first","cljs.core/next","G__42274","self__4723__auto__","entry-data","edit-key","completed-cb","cache-key","oc.web.lib.user-cache/get-item","item","err","cljs.core/not","cljs.core/map?","cljs.core._EQ_","entry-to-save","cljs.core.merge","cljs.core/select-keys","oc.web.dispatcher/dispatch!","cljs.core/fn?","oc.web.actions.cmail/get-default-section","p__42296","vec__42297","seq42295","self__4724__auto__","cljs.core/seq","editable-boards","cljs.core/vals","oc.web.dispatcher.editable_boards_data","cookie-value","oc.web.utils.activity/last-used-section","board-from-cookie","p1__42291#","cljs.core/some","filtered-boards","p1__42292#","cljs.core/filterv","and__4115__auto__","oc.web.local-settings/publisher-board-enabled?","board-data","cljs.core.sort_by","oc.web.actions.cmail/get-board-for-edit","p__42311","vec__42312","seq42310","board-slug","sorted-editable-boards","p1__42308#","p1__42309#","oc.web.dispatcher.current_board_slug","oc.web.lib.utils/default-drafts-board-slug","oc.web.lib.utils.link_for","oc.web.actions.cmail.get_default_section","oc.web.actions.cmail/get-entry-with-uuid","p__42326","vec__42327","seq42323","G__42324","G__42325","loaded-cb","oc.web.dispatcher.activity_data","cljs.core.not_EQ_","oc.web.api/get-entry-with-uuid","p__42337","map__42338","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","status","success","body","oc.web.lib.json/json->cljs","oc.web.lib.utils/after","oc.web.actions.cmail/edit-open-cookie","oc.web.lib.jwt/user-id","oc.web.dispatcher.org_data","oc.web.actions.cmail/cmail-fullscreen-cookie","oc.web.actions.cmail/cmail-fullscreen-save","fullscreen?","oc.web.lib.cookies.set_cookie_BANG_","oc.web.actions.cmail/save-edit-open-cookie","oc.web.actions.cmail/cmail-show","p__42350","vec__42351","seq42348","G__42349","initial-entry-data","cmail-state","fixed-cmail-state","cljs.core.dissoc","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.actions.cmail.load_cached_item","oc.web.dispatcher/cmail-data-key","oc.web.dispatcher/cmail-state-key","oc.web.actions.cmail/cmail-expand","oc.web.actions.cmail/cmail-reset","oc.web.lib.utils/activity-uuid","oc.web.actions.cmail/cmail-hide","oc.web.utils.dom/unlock-page-scroll","oc.web.actions.cmail/cmail-fullscreen","current-state","oc.web.dispatcher.cmail_state","oc.web.lib.utils.scroll_to_y","oc.web.utils.dom/lock-page-scroll","p1__42357#","oc.web.actions.cmail/cmail-toggle-fullscreen","next-fullscreen-value","p1__42360#","oc.web.actions.cmail/cmail-toggle-must-see","p1__42361#","js/oc","js/oc.web","js/oc.web.actions","js/oc.web.actions.cmail","js/oc.web.actions.cmail.cmail-reopen-only-one","oc.web.actions.cmail/cmail-reopen-only-one","cljs.core.atom","oc.web.actions.cmail/cmail-reopen?","cljs.core/compare-and-set!","oc.web.lib.responsive/is-mobile-size?","cljs.core/contains?","oc.web.dispatcher.query_params","new-data","oc.web.actions.cmail.get_board_for_edit","oc.web.dispatcher.query_param","with-headline","cljs.core.assoc","oc.web.actions.cmail.cmail_show","temp__5735__auto__","edit-activity-param","oc.web.lib.cookies/get-cookie","vec__42370","activity-uuid","clojure.string.split","edit-activity-data","oc.web.actions.cmail.get_entry_with_uuid"],"sourcesContent":["(ns oc.web.actions.cmail\n  (:require [defun.core :refer (defun)]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.utils.activity :as au]\n            [oc.web.lib.user-cache :as uc]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.lib.json :refer (json->cljs)]))\n\n;; Cached items\n\n(defn get-entry-cache-key\n  [entry-uuid]\n  (str (or\n        entry-uuid\n        (dis/current-org-slug))\n   \"-entry-edit\"))\n\n(defn remove-cached-item\n  [item-uuid]\n  (uc/remove-item (get-entry-cache-key item-uuid)))\n\n(defn load-cached-item\n  [entry-data edit-key & [completed-cb]]\n  (let [cache-key (get-entry-cache-key (:uuid entry-data))]\n    (uc/get-item cache-key\n     (fn [item err]\n       (if (and (not err)\n                (map? item)\n                (= (:updated-at entry-data) (:updated-at item)))\n         (let [entry-to-save (merge item (select-keys entry-data [:links :board-slug :board-name :publisher-board]))]\n           (dis/dispatch! [:input [edit-key] entry-to-save]))\n         (do\n           ;; If we got an item remove it since it won't be used\n           ;; since we have an updated version of it already\n           (when item\n             (remove-cached-item (:uuid entry-data)))\n           (dis/dispatch! [:input [edit-key] entry-data])))\n       (when (fn? completed-cb)\n         (completed-cb))))))\n\n;; Last used and default section for editing\n\n(defn get-default-section [& [editable-boards]]\n  (let [editable-boards (or editable-boards (vals (dis/editable-boards-data (dis/current-org-slug))))\n        cookie-value (au/last-used-section)\n        board-from-cookie (when cookie-value\n                            (some #(when (and (not (:draft %)) (= (:slug %) cookie-value)) %)\n                             editable-boards))\n        filtered-boards (filterv #(and (not (:draft %))\n                                       ;; Pick publisher board only if they are enabled\n                                       (or (and (:publisher-board %)\n                                                ls/publisher-board-enabled?)\n                                           (not (:publisher-board %))))\n                         editable-boards)\n        board-data (or board-from-cookie (first (sort-by :name filtered-boards)))]\n    (when board-data\n      {:board-name (:name board-data)\n       :board-slug (:slug board-data)\n       :publisher-board (:publisher-board board-data)})))\n\n(defn get-board-for-edit [& [board-slug editable-boards]]\n  (let [sorted-editable-boards (sort-by :name editable-boards)\n        board-data (or\n                    (some #(when (= (:slug %) board-slug) %) sorted-editable-boards)\n                    (some #(when (= (:slug %) (dis/current-board-slug)) %) sorted-editable-boards)\n                    (first sorted-editable-boards))]\n    (if (or (not board-data)\n            (= (:slug board-data) utils/default-drafts-board-slug)\n            (:draft board-data)\n            (not (utils/link-for (:links board-data) \"create\")))\n      (get-default-section sorted-editable-boards)\n      {:board-name (:name board-data)\n       :board-slug (:slug board-data)\n       :publisher-board (:publisher-board board-data)})))\n\n;; Entry\n\n(defn get-entry-with-uuid [board-slug entry-uuid & [loaded-cb]]\n  (let [entry-data (dis/activity-data entry-uuid)]\n    (when (and (not= entry-data :404)\n               (or board-slug\n                   (:board-slug entry-data)))\n      (dis/dispatch! [:activity-get {:org-slug (dis/current-org-slug) :board-slug (or board-slug (:board-slug entry-data)) :activity-uuid entry-uuid}])\n      (api/get-entry-with-uuid (dis/current-org-slug) board-slug entry-uuid\n       (fn [{:keys [status success body]}]\n        (cond\n          (= status 404)\n          (dis/dispatch! [:activity-get/not-found (dis/current-org-slug) entry-uuid nil])\n          (not success)\n          (dis/dispatch! [:activity-get/failed (dis/current-org-slug) entry-uuid nil])\n          :else\n          (dis/dispatch! [:activity-get/finish status (dis/current-org-slug) (when success (json->cljs body)) nil]))\n        (when (fn? loaded-cb)\n          (utils/after 100 #(loaded-cb success status))))))))\n\n;; Cmail\n\n(defn edit-open-cookie []\n  (str \"edit-open-\" (jwt/user-id) \"-\" (:slug (dis/org-data))))\n\n(defn- cmail-fullscreen-cookie []\n  (str \"cmail-fullscreen-\" (jwt/user-id)))\n\n(defn- cmail-fullscreen-save [fullscreen?]\n  (cook/set-cookie! (cmail-fullscreen-cookie) fullscreen? (* 60 60 24 30)))\n\n(defn- save-edit-open-cookie [entry-data]\n  (cook/set-cookie! (edit-open-cookie) (or (str (:board-slug entry-data) \"/\" (:uuid entry-data)) true) (* 60 60 24 365)))\n\n(defn cmail-show [initial-entry-data & [cmail-state]]\n  (let [fixed-cmail-state (dissoc cmail-state :auto)]\n    (when-not (:collapsed cmail-state)\n      (cook/remove-cookie! (cmail-fullscreen-cookie)))\n    (when (and (not (:auto cmail-state))\n               (not (:collapsed cmail-state)))\n      (save-edit-open-cookie initial-entry-data))\n    (load-cached-item initial-entry-data (first dis/cmail-data-key)\n     #(dis/dispatch! [:input dis/cmail-state-key fixed-cmail-state]))))\n\n(defn cmail-expand [initial-entry-data cmail-state]\n  (cook/remove-cookie! (cmail-fullscreen-cookie))\n  (save-edit-open-cookie initial-entry-data)\n  (load-cached-item initial-entry-data (first dis/cmail-data-key)\n   #(dis/dispatch! [:input dis/cmail-state-key (merge cmail-state {:collapsed false})])))\n\n(defn cmail-reset []\n  (dis/dispatch! [:input dis/cmail-data-key (get-default-section)])\n  (dis/dispatch! [:input dis/cmail-state-key {:collapsed true :key (utils/activity-uuid)}]))\n\n(defn cmail-hide []\n  (cook/remove-cookie! (edit-open-cookie))\n  (cmail-reset)\n  (dom-utils/unlock-page-scroll))\n\n(defn cmail-fullscreen []\n  (let [current-state (dis/cmail-state)]\n    (cmail-fullscreen-save true)\n    (utils/scroll-to-y 0 0)\n    (dom-utils/lock-page-scroll)\n    (dis/dispatch! [:update dis/cmail-state-key #(merge % {:fullscreen true :collapsed false})])))\n\n(defn cmail-toggle-fullscreen []\n  (let [next-fullscreen-value (not (:fullscreen (dis/cmail-state)))]\n    (cmail-fullscreen-save next-fullscreen-value)\n    (when next-fullscreen-value\n      (utils/scroll-to-y 0 0))\n    (if next-fullscreen-value\n      (dom-utils/lock-page-scroll)\n      (dom-utils/unlock-page-scroll))\n    (dis/dispatch! [:update dis/cmail-state-key #(merge % {:fullscreen next-fullscreen-value})])))\n\n(defn cmail-toggle-must-see []\n  (dis/dispatch! [:update dis/cmail-data-key #(merge % {:must-see (not (:must-see %))\n                                                        :has-changes true})]))\n\n(defonce cmail-reopen-only-one (atom false))\n\n(defn cmail-reopen? []\n  (when (compare-and-set! cmail-reopen-only-one false true)\n      ;; Make sure the new param is alone and not with an access param that means\n      ;; it was adding a slack team or bot\n      (utils/after 100\n       ;; If cmail is already open let's not reopen it\n       #(when (or (not (dis/cmail-state))\n                  (:collapsed (dis/cmail-state)))\n          (let [cmail-state {:auto true\n                             ;; reopen fullscreen on desktop, mobile doesn't use it\n                             :fullscreen (not (responsive/is-mobile-size?))\n                             :collapsed false\n                             :key (utils/activity-uuid)}]\n            (if (and (contains? (dis/query-params) :new)\n                     (not (contains? (dis/query-params) :access)))\n              ;; We have the new GET parameter, let's open a new post with the specified headline if any\n              (let [new-data (get-board-for-edit (dis/query-param :new))\n                    with-headline (if (dis/query-param :headline)\n                                   (assoc new-data :headline (dis/query-param :headline))\n                                   new-data)]\n                (when new-data\n                  (cmail-show with-headline cmail-state)))\n              ;; We have the edit paramter or the edit cookie saved\n              (when-let [edit-activity-param (or (dis/query-param :edit) (cook/get-cookie (edit-open-cookie)))]\n                (if (= edit-activity-param \"true\")\n                  ;; If it's simply true open a new post with the data saved in the local DB\n                  (cmail-show {} cmail-state)\n                  ;; If it's composed by board-slug/activity-uuid\n                  (let [[board-slug activity-uuid] (clojure.string/split edit-activity-param #\"/\")\n                        edit-activity-data (dis/activity-data activity-uuid)]\n                    (if edit-activity-data\n                      ;; Open the activity in edit if it's already present in the app-state\n                      (cmail-show edit-activity-data cmail-state)\n                      ;; Load it from the server if it's not\n                      (when (and board-slug activity-uuid)\n                        (get-entry-with-uuid board-slug activity-uuid\n                         (fn [success status]\n                           (when success\n                             (cmail-show (dis/activity-data activity-uuid) cmail-state)))))))))))))))"]}