{"version":3,"sources":["oc/web/actions/search.cljs"],"mappings":";AAaA,AAAA,AAAMA,AACHC;AADH,AAEE,AAAA,AAAA,AAACC,AAA2CD;;AAE9C,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAACD;;AAEH,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAACF;;AAEH,AAAA,AAAMG;AAAN,AACE,AAAA,AAAA,AAACH;;AAEH,AAAKI,AAAsB,AAAA,AAAuB,AAACC;AAEnD,AAAA,AAAKC;AAEL,AAAA,AAAMC;AAAN,AACE,AAAMC,AAAI,AAACC,AAAgBL;AAA3B,AACE,AAAI,AAACM,AAAIF;AACP,AAAA,AAAA,AAAKA,AAAIG,AAAeC,AAAQC;;AADlC;;;AAIJ;;;;AAAA,AAAMC,AAGHC,AAAaC;AAHhB,AAIE,AAAMC,AAAc,AAACC,AAAWH;AAAhC,AACE,AAAI,AAACL,AAAIO;AACP,AACE,AAAM,AAAI,AAACE,AAAIH,AACL,AAAA,AAAG,AAACI,AAAMH;AADpB,AAEE,AAAMI,AAAa,AAACC,AAAiB,AAACf,AAAgBU;AAChDM,AAAY,AAACC,AAAKH;AAClBI,AAAc,AAAI,AAAAC,AAAKV;AAAL,AAAA,AAAAU;AACG,AACST,AAAcU,AAAK,AAAA,AAAA,AAACC,AAAW,AAACC,AAAEN,AAElCN,AAAca,AAAQ,AAAA,AAAA,AAACF,AAAW,AAACC,AAAEN,AAErCA,AAAYI,AAAK,AAAA,AAAA,AAACC,AAAW,AAACC,AAAEZ,AAEhCM,AAAYO,AAAQ,AAAA,AAAA,AAACF,AAAW,AAACC,AAAEZ;;AAR/CS;;AASF,AAACI,AAAQT,AACTA;AAChBU,AAAS,AAACC,AAAKP,AAAcR;AAC7BgB,AAAS,AAAA,AAAKF,AAAS,AAACG,AAAU5B,AAAuB6B,AAAQC;AAdvE,AAeE,AAACC,AAAiBjC,AAAsB6B,AAAQK;;AAjBpD;;AAkBA,AAACnC;;AACD,AAAA,AAAA,AAACH,AAA0CiB;;AAC3C,AAACsB,AAAU,AAAA,AAAO,AAACC,AAAsBvB,AAAcnB;;AACzD,AAACG;;;AAEP,AAAA,AAAMwC,AAAgBC,AAAaC;AAAnC,AACE,AAAMC,AAAa,AAACC,AAAyB,AAAA,AAAOH;AAC9CI,AAAa,AAAKC,AAAQC;AAAb,AACE,AAAID;AACH,AACE,AAAA,AAAA,AAAC/C;;AACD,AAAA,AAACiD,AAAe,AAACC,AAAYP;;AAC/B,AAAMQ,AAAQ,AAAA,AAACtB,AAAEmB;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMI,AAEmB,AAAA,AAAA,AAAID,AACF,AAAA,AAAA,AAAIA,AAKIE;AATnC,AAUE,AAACC,AAAuBF;;;AAhBhD,AAiBE,AAAIR;AACF,AAAA,AAAA,AAACE;;AACD,AAACS,AAAkC,AAAA,AAAab,AAAc,AAAA,AAAOA,AAAcI","names":["oc.web.actions.search/query-finished","result","oc.web.dispatcher/dispatch!","oc.web.actions.search/reset","oc.web.actions.search/inactive","oc.web.actions.search/active","oc.web.actions.search/search-history-cookie","oc.web.lib.jwt/user-id","oc.web.actions.search/search-history-length","oc.web.actions.search/search-history","res","oc.web.lib.cookies/get-cookie","cljs.core/seq","js/$.parseJSON","cljs.core.js__GT_clj","cljs.core/vec","oc.web.actions.search/query","search-query","auto-search?","trimmed-query","oc.web.lib.utils/trim","cljs.core/not","cljs.core/count","temp-history","oc.web.lib.utils/vec-dissoc","last-search","cljs.core/last","temp-history*","and__4115__auto__","cljs.core/rest","cuerdas.core.join","cljs.core._EQ_","cljs.core/butlast","with-new","cljs.core.conj","history","cljs.core/take-last","cljs.core/clj->js","js/JSON.stringify","oc.web.lib.cookies.set_cookie_BANG_","oc.web.lib.cookies/default-cookie-expire","oc.web.api/query","oc.web.dispatcher.org_data","oc.web.actions.search/result-clicked","entry-result","url","post-loaded?","oc.web.dispatcher.activity_data","open-post-cb","success","status","oc.web.lib.utils/after","oc.web.router/nav!","is-404?","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.actions.cmail.get_entry_with_uuid"],"sourcesContent":["(ns oc.web.actions.search\n  (:require [cuerdas.core :as s]\n            [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.router :as router]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.actions.cmail :as cmail-actions]        \n            [oc.web.components.ui.alert-modal :as alert-modal]))\n\n\n(defn query-finished\n  [result]\n  (dispatcher/dispatch! [:search-query/finish result]))\n\n(defn reset []\n  (dispatcher/dispatch! [:search-reset]))\n\n(defn inactive []\n  (dispatcher/dispatch! [:search-inactive]))\n\n(defn active []\n  (dispatcher/dispatch! [:search-active]))\n\n(def search-history-cookie (str \"search-history-\" (jwt/user-id)))\n\n(def search-history-length 5)\n\n(defn search-history []\n  (let [res (cook/get-cookie search-history-cookie)]\n    (if (seq res)\n      (->> res js/$.parseJSON js->clj vec)\n      #{})))\n\n(defn query\n  \"Use the search service to query for results.\n   Keep tracl of the last \"\n  [search-query auto-search?]\n  (let [trimmed-query (utils/trim search-query)]\n    (if (seq trimmed-query)\n      (do\n        (when (or (not auto-search?)\n                  (> (count trimmed-query) 2))\n          (let [temp-history (utils/vec-dissoc (search-history) trimmed-query)\n                last-search (last temp-history)\n                temp-history* (if (and auto-search?\n                                     (or ; User added one letter to the beginning\n                                         (->> trimmed-query rest (s/join \"\") (= last-search))\n                                         ; User added one letter to the end\n                                         (->> trimmed-query butlast (s/join \"\") (= last-search))\n                                         ; User removed one letter from the beginning\n                                         (->> last-search rest (s/join \"\") (= trimmed-query))\n                                         ; User removed one letter from the end\n                                         (->> last-search butlast (s/join \"\") (= trimmed-query))))\n                                (butlast temp-history)\n                                temp-history)\n                with-new (conj temp-history* trimmed-query)\n                history  (->> with-new (take-last search-history-length) clj->js js/JSON.stringify)]\n            (cook/set-cookie! search-history-cookie history cook/default-cookie-expire)))\n        (active)\n        (dispatcher/dispatch! [:search-query/start trimmed-query])\n        (api/query (:uuid (dispatcher/org-data)) trimmed-query query-finished))\n      (reset))))\n\n(defn result-clicked [entry-result url]\n  (let [post-loaded? (dispatcher/activity-data (:uuid entry-result))\n        open-post-cb (fn [success status]\n                       (if success\n                        (do\n                          (dispatcher/dispatch! [:search-result-clicked])\n                          (utils/after 10 (router/nav! url)))\n                        (let [is-404? (= status 404)\n                              alert-data {:icon \"/img/ML/trash.svg\"\n                                          :action \"search-result-load-failed\"\n                                          :title (if is-404? \"Post moved or deleted\" \"An error occurred\")\n                                          :message (if is-404?\n                                                     \"The selected update was moved to another team or deleted.\"\n                                                     \"An error occurred while loading the selected post. Please try again.\")\n                                          :solid-button-style :red\n                                          :solid-button-title \"Ok\"\n                                          :solid-button-cb alert-modal/hide-alert}]\n                          (alert-modal/show-alert alert-data))))]\n    (if post-loaded?\n      (open-post-cb true nil)\n      (cmail-actions/get-entry-with-uuid (:board-slug entry-result) (:uuid entry-result) open-post-cb))))"]}