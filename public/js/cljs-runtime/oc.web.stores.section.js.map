{"version":3,"sources":["oc/web/stores/section.cljs"],"mappings":";AAWA,AAAAA,AAAA,AAAA,AAAAC,AACGG;AADH,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AACOG;AADP,AAAAF,AAAAD,AAAA,AAAA,AACSI;AADT,AAAAH,AAAAD,AAAA,AAAA,AACkBK;AADlB,AAAAJ,AAAAD,AAAA,AAAA,AAC+BM;AAD/B,AAAAL,AAAAD,AAAA,AAAA,AACyCO;AADzC,AAEE,AAAMC,AAAW,AAAI,AAAA,AAAYD,AACd,AAAA,AAACE,AAAOP,AACRA;AACbQ,AAAa,AAAA,AAAUH;AACvBI,AAAmB,AAACC,AAAeL,AAAa,AAACM,AAAuBX,AAAI,AAACY,AAAyB,AAACC,AAA+BT;AACtIU,AAAiB,AAACC,AAAOf,AAAG,AAACgB,AAA0Bd,AAAS,AAAA,AAAOG,AAAcD;AACrFa,AAAkB,AAAI,AAAAC,AAAK,AAAA,AAAYb;AAAjB,AAAA,AAAAa;AACK,AAAA,AAAgBlB;;AADrBkB;;AAEFJ,AACAL;AACpBU,AAAU,AAACC,AAA0BlB;AACrCmB,AAAa,AAACC,AAAM,AAACP,AAAOf,AAAGmB,AACX,AAAA,AAAcV;AAClCc,AAAkB,AAAIf,AACF,AAACgB,AAASlB,AAAWa,AAAUE,AAC/Bf;AACpBmB,AAAiB,AAACC,AAAE,AAAA,AAAOrB,AAAcsB;AACzCC,AAAqB,AAACC,AAAI,AAAA,AAACC,AAAK,AAACC,AAAwB7B;AAjB/D,AAkBMqB,AACH,AAACC,AAAS,AAACR,AAA0Bd,AAAS,AAAA,AAAOG,AAAcD,AACvC,AAAA,AAACG,AAAOU,AACpC,AAAA,AAAAe,AAACC,AAAUL,AAGX,AAAMO;AAHN,AAAiC,AAAIV;AACF,AAAAO,AAACE,AAA8B,AAAA,AAAc7B;;AAD/C2B;;;AAGjC,AACC,AAAA,AAAAI,AAACH,AAAUE,AAAI,AAACE,AAAkCnC;AAAlD,AACE,AAAAkC,AAACE,AAA6BH;;;AAYtC,AAAAvC,AAAA,AAAA,AAAA2C,AACGvC;AADH,AAAA,AAAAwC,AAAAD;AAAA,AAAAxC,AAAAyC,AAAA,AAAA,AACOvC;AADP,AAAAF,AAAAyC,AAAA,AAAA,AACSC;AADT,AAEEzC;;AAEF,AAAAJ,AAAA,AAAA,AAAA8C,AACG1C;AADH,AAAA,AAAA2C,AAAAD;AAAA,AAAA3C,AAAA4C,AAAA,AAAA,AACO1C;AADP,AAAAF,AAAA4C,AAAA,AAAA,AACStC;AADT,AAEE,AAAMH,AAAS,AAAC0C,AAAuBvC;AACjCF,AAAa,AAAA,AAAOE;AACpBwC,AAAU,AAAC7B,AAA0Bd,AAASC;AAE9CM,AAAmB,AAACqC,AAAezC,AAAa,AAACM,AAAuBX,AAAI,AAACY,AAAyB,AAACC;AACvGkC,AAAe,AAAChC,AAAOf,AAAG6C;AAG1BG,AAAgB,AAAC1B,AAAMb,AACN,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwC,AAAYF;AATpC,AAUM/C,AACH,AAACwB,AAASqB,AAAUG,AACpB,AAAA,AAACzC,AACD,AAAM4B;AAAN,AACC,AAAA,AAAAe,AAACjB,AAAUE,AAAI,AAACE,AAAkCnC;AAAlD,AACE,AAAAgD,AAACZ,AAA6BH;;;AAEtC,AAAAvC,AAAA,AAAA,AAAAuD,AACGnD;AADH,AAAA,AAAAoD,AAAAD;AAAA,AAAApD,AAAAqD,AAAA,AAAA,AACOnD;AADP,AAEE,AAAA,AAACM,AAAOP;;AAEV,AAAAJ,AAAA,AAAA,AAAAyD,AACGrD;AADH,AAAA,AAAAsD,AAAAD;AAAA,AAAAtD,AAAAuD,AAAA,AAAA,AACOrD;AADP,AAAAF,AAAAuD,AAAA,AAAA,AACSC;AADT,AAAAxD,AAAAuD,AAAA,AAAA,AACcE;AADd,AAEE,AAAMnD,AAAa,AAAA,AAAkBL;AAC/ByD,AAAsB,AAAA,AAAAC,AAACC;AAAD,AAAU,AAACC,AAAK,AAAA,AAAAF,AAAa,AAAA,AAAUH;AAC9B,AAAA,AAAwBlD;AACvDwD,AAAgB,AAAA,AAAAC,AAACH;AAAD,AAAU,AAAAG,AAACF,AAAO,AAAA,AAAUL;AAAO,AAAA,AAAUlD;AAC7D0D,AAAgB,AAAA,AAAAC,AAACL;AAAD,AAAU,AAAAK,AAACJ,AAAO,AAAA,AAAUL;AAAO,AAAA,AAAUlD;AAC7D4D,AAAa,AAAI,AAAAC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA,AAAmBV,AAAAA;AACrB,AAAC3B,AAAI,AAACC,AAAK+B,AAAgB,AAAA,AAAUN,AACrCM;AACfM,AAAa,AAAI,AAAA,AAACzC,AAAE8B,AACL,AAAC3B,AAAI,AAACC,AAAKiC,AAAgB,AAAA,AAAUR,AACrCQ;AACfK,AAAmB,AAACvC,AAAI,AAACC,AAAK2B,AAAsBF;AAX1D,AAYE,AAAA,AAACc,AAAMrE,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACsB,AAAMjB,AACuB4D,AACAE,AACcC;;AAEvD,AAAAxE,AAAA,AAAA,AAAA0E,AACGtE;AADH,AAAA,AAAAuE,AAAAD;AAAA,AAAAvE,AAAAwE,AAAA,AAAA,AACOtE;AADP,AAAAF,AAAAwE,AAAA,AAAA,AACShB;AADT,AAEE,AAAMlD,AAAa,AAAA,AAAkBL;AAC/BwE,AAAsB,AAAA,AAAAC,AAACd;AAAD,AAAU,AAACC,AAAK,AAAA,AAAAa,AAAa,AAAA,AAAUlB;AAC9B,AAAA,AAAwBlD;AACvD4D,AAAa,AAAA,AAAAS,AAACf;AAAD,AAAU,AAAAe,AAACd,AAAO,AAAA,AAAUL;AAAO,AAAA,AAAUlD;AAC1D8D,AAAa,AAAA,AAAAQ,AAAChB;AAAD,AAAU,AAAAgB,AAACf,AAAO,AAAA,AAAUL;AAAO,AAAA,AAAUlD;AAJhE,AAKE,AAAA,AAACgE,AAAMrE,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACsB,AAAMjB,AACuB4D,AACAE,AACcK;;AAEvD,AAAA5E,AAAA,AAAA,AAAAgF,AACG5E;AADH,AAAA,AAAA6E,AAAAD;AAAA,AAAA7E,AAAA8E,AAAA,AAAA,AACO5E;AADP,AAAAF,AAAA8E,AAAA,AAAA,AACSC;AADT,AAEE,AAAIA;AAEF,AAAA,AAACvE,AAAOP;;AAERA;;;AAEJ,AAAAJ,AAAA,AAAA,AAAAmF,AACG/E;AADH,AAAA,AAAAgF,AAAAD;AAAA,AAAAhF,AAAAiF,AAAA,AAAA,AACO/E;AADP,AAAAF,AAAAiF,AAAA,AAAA,AACS9E;AADT,AAAAH,AAAAiF,AAAA,AAAA,AACkB7E;AADlB,AAEE,AAAM8E,AAAY,AAACC,AAAqBhF,AAASC;AAC3CgF,AAAiB,AAACtD,AAAI,AAAA,AAACC,AAAK,AAACC,AAAwB7B;AACrDkF,AAAmB,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAC5D,AAAE,AAAA,AAAA2D,AAAUlF;AAAc,AAACY,AAAOf,AAAGmF;AAClEhE,AAAU,AAACC,AAA0BlB;AACrCqF,AAAU,AAACxE,AAAOf,AAAGmB;AACrBqE,AAAc,AAAC7B,AAAQ,AAAK8B;AAAL,AAAQ,AAAC7B,AAAK,AAAA,AAAa6B,AAAGtF;AAC9B,AAACuF,AAAKH;AAC7BI,AAAY,AAAC5E,AAAOf,AAAG4F;AACvBC,AAAuB,AAACC,AACA,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAK,AAACC,AAAI,AAAA,AAAAF;AAAY,AAAA,AAACG,AAAe,AAAA,AAAAH;;AAAtC;;AACR,AAAA,AAACI,AAAcf;AACxCgB,AAAQ,AAAI,AAAAlF,AAAK,AAAA,AAAYyE;AAAjB,AAAA,AAAAzE;AACK2E;;AADL3E;;AAEElB,AACH,AAACwB,AAAS,AAAA,AAACM,AAAK8D,AAAiC,AAACS,AAClD,AAAA,AAAA,AAAA,AAAA,AAAC7E,AAAS8E,AAAuC,AAAA,AAAOT,AACP,AAAA,AAAOA,AACF,AAAA,AAAkBA,AACzE7F;AAlBhB,AAmBMoG,AACF,AAACnE,AAAU,AAACsE,AAAQtB,AAAauB,AAAO,AAACC,AAAKxB,AAC9C,AAACZ,AAAMlD,AAAU,AAACuF,AAAO,AAAA,AAACC,AAAUnB,AAAeA,AACnD,AAACnB,AAAMc,AAAiBC,AACxB,AAAA,AAAC7E;;AAEP,AAAAX,AAAA,AAAA,AAAAgH,AACG5G;AADH,AAAA,AAAA6G,AAAAD;AAAA,AAAA7G,AAAA8G,AAAA,AAAA,AACO5G;AADP,AAAAF,AAAA8G,AAAA,AAAA,AACSC;AADT,AAAA/G,AAAA8G,AAAA,AAAA,AACqBE;AADrB,AAEE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAwCJ;AAAxC,AAAA,AAAA;;AACA,AAAIA;AACF,AAAMK,AAAS,AAACC,AAAoBpH;AAC9BqH,AAAgB,AAAC1G,AAAuBX;AACxCsH,AAAgB,AAAChG,AAAM+F,AAAgBP;AAF7C,AAME,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAoCI;AAApC,AAAA,AAAA;;AACItH,AAGF,AAACwB,AAAS,AAAC+F,AAA2B,AAAA,AAAOJ,AAAWG;;AAC5DtH;;;AAEJ,AAAA,AAAMwH,AAA6BH,AAAgBI,AAAQC,AAAaC;AAAxE,AACE,AAAMC,AAA0B,AAACC,AAAIR,AAAgBK;AAC/CI,AAAW,AAAAC,AAAI,AAAA,AAASH;AAAb,AAAA,AAAAG;AAAAA;;AAAA;;;AACXC,AAAY,AAAA,AAAAC,AAACjC;AAAD,AAAS,AAAAiC,AAACrE,AAAO6D;AAASK;AACtCI,AAAW,AAAAH,AAAI,AAAA,AAASH;AAAb,AAAA,AAAAG;AAAAA;;AAAA;;;AACXI,AAAY,AAAA,AAAAC,AAACpC;AAAD,AAAS,AAAAoC,AAACxE,AAAO6D;AAASS;AACtCG,AAA2B,AAAA,AAAA,AAAA,AAAA,AAAIT,AACF,AAAA,AAAA,AAACvD,AAAMuD,AACEI,AACAG,AACMT,AACNM,AACAG;AAX5C,AAYE,AAAC9D,AAAMgD,AAAgBK,AAAaW;;AAExC,AAAAzI,AAAA,AAAA,AAAA0I,AACGtI;AADH,AAAA,AAAAuI,AAAAD;AAAA,AAAAvI,AAAAwI,AAAA,AAAA,AACOtI;AADP,AAAAF,AAAAwI,AAAA,AAAA,AACSrI;AADT,AAAAH,AAAAwI,AAAA,AAAA,AACkBzB;AADlB,AAEE,AAAMW,AAAQ,AAAA,AAAUX;AAClBY,AAAa,AAAA,AAAeZ;AAC5B0B,AAAW,AAACjB,AAA2BrH;AACvCmH,AAAgB,AAACtG,AAAOf,AAAGwI;AAHjC,AAIE,AAAChH,AAASxB,AAAGwI,AAAW,AAAChB,AAA4BH,AAAgBI,AAAQC,AAAaZ;;AAE9F,AAAA,AAAM2B,AAA0BpB,AAAgBI,AAAQC,AAAaC;AAArE,AACE,AAAMC,AAA0B,AAACC,AAAIR,AAAgBK;AAC/CI,AAAW,AAAAC,AAAI,AAAA,AAASH;AAAb,AAAA,AAAAG;AAAAA;;AAAA;;;AACXC,AAAY,AAACnG,AAAI,AAAC6G,AAAI,AAAC5G,AAAKgG,AAAWL;AACvCS,AAAW,AAAAH,AAAI,AAAA,AAASH;AAAb,AAAA,AAAAG;AAAAA;;AAAA;;;AACXI,AAAY,AAACtG,AAAI,AAAC6G,AAAI,AAAC5G,AAAKoG,AAAWT;AACvCY,AAA2B,AAAA,AAAA,AAAA,AAAA,AAAIT,AACF,AAAA,AAAA,AAACvD,AAAMuD,AACEI,AACAG,AACMT,AACNM,AACAG;AAX5C,AAYE,AAAC9D,AAAMgD,AAAgBK,AAAaW;;AAExC,AAAAzI,AAAA,AAAA,AAAA+I,AACG3I;AADH,AAAA,AAAA4I,AAAAD;AAAA,AAAA5I,AAAA6I,AAAA,AAAA,AACO3I;AADP,AAAAF,AAAA6I,AAAA,AAAA,AACS1I;AADT,AAAAH,AAAA6I,AAAA,AAAA,AACkB9B;AADlB,AAEE,AAAMW,AAAQ,AAAA,AAAUX;AAClBY,AAAa,AAAA,AAAeZ;AAC5B0B,AAAW,AAACjB,AAA2BrH;AACvCmH,AAAgB,AAACtG,AAAOf,AAAGwI;AAHjC,AAIE,AAAChH,AAASxB,AAAGwI,AAAW,AAACC,AAAyBpB,AAAgBI,AAAQC,AAAaZ;;AAE3F,AAAAlH,AAAA,AAAA,AAAAiJ,AACG7I;AADH,AAAA,AAAA8I,AAAAD;AAAA,AAAA9I,AAAA+I,AAAA,AAAA,AACO7I;AADP,AAAAF,AAAA+I,AAAA,AAAA,AACS5I;AADT,AAAAH,AAAA+I,AAAA,AAAA,AACkBC;AADlB,AAAAhJ,AAAA+I,AAAA,AAAA,AAC6B1I;AAD7B,AAEE,AAAM4I,AAAc,AAAChI,AAA0Bd,AAAS6I,AAAW3I;AAC7D6I,AAAe,AAAClI,AAAOf,AAAGgJ;AAC1BE,AAAoB,AAAA,AAAA,AAAC7E,AAAM4E;AAFjC,AAGE,AAACzH,AAASxB,AAAGgJ,AAAcE;;AAE/B,AAAAtJ,AAAA,AAAA,AAAAuJ,AACGnJ;AADH,AAAA,AAAAoJ,AAAAD;AAAA,AAAApJ,AAAAqJ,AAAA,AAAA,AACOnJ;AADP,AAAAF,AAAAqJ,AAAA,AAAA,AACSC;AADT,AAAAtJ,AAAAqJ,AAAA,AAAA,AACaE;AADb,AAAAvJ,AAAAqJ,AAAA,AAAA,AACmBhJ;AADnB,AAAAL,AAAAqJ,AAAA,AAAA,AAC6BG;AAD7B,AAAAxJ,AAAAqJ,AAAA,AAAA,AACuCpG;AADvC,AAEE,AAAIA;AACF,AAAMgG,AAAc,AAAChI,AAA0BqI,AAAIC,AAAMlJ;AACnD6I,AAAe,AAAClI,AAAOf,AAAGgJ;AAC1BQ,AAAe,AAACpI,AAA0BiI;AAC1C9D,AAAU,AAACxE,AAAOf,AAAGwJ;AACrBC,AAAmB,AAAA,AAAA,AAAA,AAACnI,AAAM0B,AAA6B,AAAA,AAAaiG,AACd,AAAA,AAAQA;AAC9DS,AAAiB,AAAChJ,AAAe+I,AAAmB,AAAC9I,AAAuBX,AAAI,AAACY,AAAyB,AAACC,AAA+B0I;AAC1II,AAAc,AAACrI,AAAMiE,AAAU,AAAA,AAAcmE;AAC7CE,AAAuBF,AACH,AAAA,AAACrF,AAAiBkF,AAClB,AAAA,AAAChJ;AAV3B,AAWMP,AACF,AAACwB,AAASwH,AAAcY,AACxB,AAACpI,AAASgI,AAAeG,AACzB,AAAMxH;AAAN,AACC,AAAA,AAAA0H,AAAC5H,AAAUE,AAAI,AAACE,AAAkCgH;AAAlD,AACE,AAAAQ,AAACvH,AAA6BH;;;AACrCnC;;;AAEJ,AAAAJ,AAAA,AAAA,AAAAkK,AACG9J;AADH,AAAA,AAAA+J,AAAAD;AAAA,AAAA/J,AAAAgK,AAAA,AAAA,AACO9J;AADP,AAAAF,AAAAgK,AAAA,AAAA,AACSC;AADT,AAEE,AAAA,AAAC3F,AAAMrE,AAA4BgK;;AAErC,AAAApK,AAAA,AAAA,AAAAqK,AACGjK;AADH,AAAA,AAAAkK,AAAAD;AAAA,AAAAlK,AAAAmK,AAAA,AAAA,AACOjK;AADP,AAAAF,AAAAmK,AAAA,AAAA,AACShK;AADT,AAAAH,AAAAmK,AAAA,AAAA,AACkBpD;AADlB,AAEE,AAAMqD,AAAiB,AAAA,AAAmBrD;AACpCY,AAAa,AAAA,AAAeZ;AAC5BW,AAAQ,AAAA,AAAUX;AAClB0B,AAAW,AAACjB,AAA2BrH;AACvCmH,AAAgB,AAACtG,AAAOf,AAAGwI;AAC3BZ,AAA0B,AAACC,AAAIR,AAAgB8C;AAC/CC,AAAW,AAACC,AAAU,AAAA,AAASzC,AAA2BH;AAC1D6C,AAAW,AAACD,AAAU,AAAA,AAASzC,AAA2BH;AAC1D8C,AAAgB,AAAA,AAAAC,AAAC7G;AAAD,AAAU,AAAA6G,AAAC5G,AAAO6D;AAAS,AAAA,AAASG;AACpD6C,AAAgB,AAAA,AAAAC,AAAC/G;AAAD,AAAU,AAAA+G,AAAC9G,AAAO6D;AAAS,AAAA,AAASG;AACpD+C,AAAmC/C,AACH,AAAA,AAACvD,AAAckG,AACf,AAAA,AAAClG,AAAcoG;AAC/CG,AAA0B,AAAC/C,AAAIR,AAAgBK;AAC/CmD,AAAgB,AAACC,AAAO,AAAA,AAASF,AAA2B,AAAA,AAAA,AAAIR,AAAY3C;AAC5EsD,AAAgB,AAACD,AAAO,AAAA,AAASF,AAA2B,AAAA,AAAA,AAAIN,AAAY7C;AAC5EuD,AAAmCJ,AACH,AAAA,AAACvG,AAAcwG,AACf,AAAA,AAACxG,AAAc0G;AAC/CE,AAAqB5D,AACH,AAAChD,AAAM8F,AAAiBQ,AACxB,AAACtG,AAAMqD,AAAasD;AArB5C,AAsBE,AAACxJ,AAASxB,AAAGwI,AAAWyC","names":["oc.web.dispatcher/action","p__43842","vec__43843","cljs.core.nth","db","_","org-slug","section-slug","sort-type","section-data","db-loading","cljs.core.dissoc","with-entries","fixed-section-data","oc.web.utils.activity/parse-board","oc.web.dispatcher.change_data","oc.web.dispatcher.active_users","oc.web.dispatcher.follow_boards_list","old-section-data","cljs.core.get_in","oc.web.dispatcher.board_data_key","with-current-edit","and__4115__auto__","posts-key","oc.web.dispatcher/posts-data-key","merged-items","cljs.core.merge","with-merged-items","cljs.core/assoc-in","is-drafts-board?","cljs.core._EQ_","oc.web.lib.utils/default-drafts-board-slug","org-drafts-count-key","cljs.core/vec","cljs.core.conj","oc.web.dispatcher/org-data-key","p1__43840#","cljs.core.update_in","oc.web.utils.org/disappearing-count-value","ndb","p1__43841#","oc.web.dispatcher/user-notifications-key","oc.web.utils.notification.fix_notifications","p__43846","vec__43847","section-uuid","p__43852","vec__43853","oc.web.lib.utils/section-org-slug","board-key","oc.web.utils.activity.parse_board","old-board-data","next-board-data","cljs.core/select-keys","p1__43850#","p__43863","vec__43864","p__43870","vec__43871","user","user-type","current-notifications","p1__43867#","cljs.core/filterv","cljs.core.not_EQ_","current-authors","p1__43868#","current-viewers","p1__43869#","next-authors","fexpr__43878","next-viewers","next-notifications","cljs.core.assoc","p__43887","vec__43888","private-notifications","p1__43880#","p1__43881#","p1__43882#","p__43922","vec__43923","success","p__43929","vec__43930","section-key","oc.web.dispatcher.board_key","org-sections-key","remaining-sections","p1__43926#","cljs.core.remove","old-posts","removed-posts","p","cljs.core/vals","cmail-state","oc.web.dispatcher/cmail-state-key","first-editable-section","cljs.core/first","p1__43927#","cljs.core.filter","cljs.core/not","oc.web.lib.utils.link_for","cljs.core.sort_by","next-db","oc.web.lib.utils/activity-uuid","oc.web.dispatcher/cmail-data-key","cljs.core/butlast","cljs.core/dissoc","cljs.core/last","cljs.core/zipmap","cljs.core.map","p__43940","vec__43941","change-data","replace-change-data?","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","org-data","oc.web.dispatcher.org_data","old-change-data","new-change-data","oc.web.dispatcher/change-data-key","oc.web.stores.section/update-unseen-unread-remove","item-id","container-id","new-changes","old-container-change-data","cljs.core.get","old-unseen","or__4126__auto__","next-unseen","p1__43957#","old-unread","next-unread","p1__43958#","next-container-change-data","p__43960","vec__43961","change-key","oc.web.stores.section/update-unseen-unread-add","cljs.core/seq","p__43970","vec__43971","p__43974","vec__43975","board-slug","container-key","container-data","next-container-data","p__43980","vec__43981","org","board","direction","posts-data-key","prepare-board-data","fixed-posts-data","new-items-map","new-container-data","p1__43978#","p__43984","vec__43985","board-data","p__43990","vec__43991","old-container-id","is-unseen?","oc.web.lib.utils/in?","is-unread?","next-old-unseen","p1__43988#","next-old-unread","p1__43989#","next-old-container-change-data","new-container-change-data","next-new-unseen","cljs.core.concat","next-new-unread","next-new-container-change-data","next-change-data"],"sourcesContent":["(ns oc.web.stores.section\n  (:require [taoensso.timbre :as timbre]\n            [cljs-flux.dispatcher :as flux]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.lib.time :as oc-time]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.notification :as notif-util]\n            [oc.web.utils.org :as ou]\n            [oc.web.utils.activity :as au]))\n\n(defmethod dispatcher/action :section\n  [db [_ org-slug section-slug sort-type section-data]]\n  (let [db-loading (if (:is-loaded section-data)\n                     (dissoc db :loading)\n                     db)\n        with-entries (:entries section-data)\n        fixed-section-data (au/parse-board section-data (dispatcher/change-data db) (dispatcher/active-users) (dispatcher/follow-boards-list) sort-type)\n        old-section-data (get-in db (dispatcher/board-data-key org-slug (:slug section-data) sort-type))\n        with-current-edit (if (and (:is-loaded section-data)\n                                   (:entry-editing db))\n                            old-section-data\n                            fixed-section-data)\n        posts-key (dispatcher/posts-data-key org-slug)\n        merged-items (merge (get-in db posts-key)\n                            (:fixed-items fixed-section-data))\n        with-merged-items (if with-entries\n                            (assoc-in db-loading posts-key merged-items)\n                            db-loading)\n        is-drafts-board? (= (:slug section-data) utils/default-drafts-board-slug)\n        org-drafts-count-key (vec (conj (dispatcher/org-data-key org-slug) :drafts-count))]\n    (-> with-merged-items\n     (assoc-in (dispatcher/board-data-key org-slug (:slug section-data) sort-type)\n                                 (dissoc with-current-edit :fixed-items))\n     (update-in org-drafts-count-key #(if is-drafts-board?\n                                        (ou/disappearing-count-value % (:total-count section-data))\n                                        %))\n     (as-> ndb\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %))))))\n\n; (defn fix-posts-new-label\n;   [db changes]\n;   (let [posts-data (dispatcher/posts-data db)\n;         org-slug (:org (:router-path db))]\n;     (reduce\n;       #(let [posts-key (dispatcher/activity-key org-slug (:uuid %2))]\n;           (update-in %1 posts-key merge {:unread (au/entry-unread? %2 changes)}))\n;       db\n;       (vals posts-data))))\n\n(defmethod dispatcher/action :section-change\n  [db [_ section-uuid]]\n  db)\n\n(defmethod dispatcher/action :section-edit-save/finish\n  [db [_ section-data]]\n  (let [org-slug (utils/section-org-slug section-data)\n        section-slug (:slug section-data)\n        board-key (dispatcher/board-data-key org-slug section-slug)\n        ;; Parse the new section data\n        fixed-section-data (au/parse-board section-data (dispatcher/change-data db) (dispatcher/active-users) (dispatcher/follow-boards-list))\n        old-board-data (get-in db board-key)\n        ;; Replace the old section data\n        ;; w/o overriding the posts and links to avoid breaking pagination\n        next-board-data (merge fixed-section-data\n                         (select-keys old-board-data [:posts-list :items-to-render :fixed-items :links]))]\n    (-> db\n     (assoc-in board-key next-board-data)\n     (dissoc :section-editing)\n     (as-> ndb\n      (update-in ndb (dispatcher/user-notifications-key org-slug)\n       #(notif-util/fix-notifications ndb %))))))\n\n(defmethod dispatcher/action :section-edit/dismiss\n  [db [_]]\n  (dissoc db :section-editing))\n\n(defmethod dispatcher/action :private-section-user-add\n  [db [_ user user-type]]\n  (let [section-data (:section-editing db)\n        current-notifications (filterv #(not= (:user-id %) (:user-id user))\n                                       (:private-notifications section-data))\n        current-authors (filterv #(not= % (:user-id user)) (:authors section-data))\n        current-viewers (filterv #(not= % (:user-id user)) (:viewers section-data))\n        next-authors (if (#{:admin :author} user-type)\n                       (vec (conj current-authors (:user-id user)))\n                       current-authors)\n        next-viewers (if (= user-type :viewer)\n                       (vec (conj current-viewers (:user-id user)))\n                       current-viewers)\n        next-notifications (vec (conj current-notifications user))]\n    (assoc db :section-editing\n           (merge section-data {:has-changes true\n                                :authors next-authors\n                                :viewers next-viewers\n                                :private-notifications next-notifications}))))\n\n(defmethod dispatcher/action :private-section-user-remove\n  [db [_ user]]\n  (let [section-data (:section-editing db)\n        private-notifications (filterv #(not= (:user-id %) (:user-id user))\n                                       (:private-notifications section-data))\n        next-authors (filterv #(not= % (:user-id user)) (:authors section-data))\n        next-viewers (filterv #(not= % (:user-id user)) (:viewers section-data))]\n    (assoc db :section-editing\n           (merge section-data {:has-changes true\n                                :authors next-authors\n                                :viewers next-viewers\n                                :private-notifications private-notifications}))))\n\n(defmethod dispatcher/action :private-section-kick-out-self/finish\n  [db [_ success]]\n  (if success\n    ;; Force board editing dismiss\n    (dissoc db :section-editing)\n    ;; An error occurred while kicking the user out, no-op to let the user retry\n    db))\n\n(defmethod dispatcher/action :section-delete\n  [db [_ org-slug section-slug]]\n  (let [section-key (dispatcher/board-key org-slug section-slug)\n        org-sections-key (vec (conj (dispatcher/org-data-key org-slug) :boards))\n        remaining-sections (remove #(= (:slug %) section-slug) (get-in db org-sections-key))\n        posts-key (dispatcher/posts-data-key org-slug)\n        old-posts (get-in db posts-key)\n        removed-posts (filterv (fn [p] (not= (:board-slug p) section-slug))\n                               (vals old-posts))\n        cmail-state (get-in db dispatcher/cmail-state-key)\n        first-editable-section (first\n                                (filter #(and (not (:draft %)) (utils/link-for (:links %) \"create\"))\n                                 (sort-by :name remaining-sections)))\n        next-db (if (and (:collapsed cmail-state)\n                         first-editable-section)\n                  (-> db\n                   (assoc-in (conj dispatcher/cmail-state-key :key) (utils/activity-uuid))\n                   (assoc-in dispatcher/cmail-data-key {:board-name (:name first-editable-section)\n                                                        :board-slug (:slug first-editable-section)\n                                                        :publisher-board (:publisher-board first-editable-section)}))\n                  db)]\n    (-> next-db\n      (update-in (butlast section-key) dissoc (last section-key))\n      (assoc posts-key (zipmap (map :uuid removed-posts) removed-posts))\n      (assoc org-sections-key remaining-sections)\n      (dissoc :section-editing))))\n\n(defmethod dispatcher/action :container/status\n  [db [_ change-data replace-change-data?]]\n  (timbre/debug \"Change status received:\" change-data)\n  (if change-data\n    (let [org-data (dispatcher/org-data db)\n          old-change-data (dispatcher/change-data db)\n          new-change-data (merge old-change-data change-data)\n          ; active-users (dispatcher/active-users (:slug org-data) db)\n          ; follow-publishers-list (dispatcher/follow-publishers-list (:slug org-data) db)\n          ]\n      (timbre/debug \"Change status data:\" new-change-data)\n      (-> db\n        ; (fix-posts-new-label new-change-data)\n        ; (au/update-all-containers org-data change-data active-users follow-publishers-list)\n        (assoc-in (dispatcher/change-data-key (:slug org-data)) new-change-data)))\n    db))\n\n(defn update-unseen-unread-remove [old-change-data item-id container-id new-changes]\n  (let [old-container-change-data (get old-change-data container-id)\n        old-unseen (or (:unseen old-container-change-data) [])\n        next-unseen (filter #(not= % item-id) old-unseen)\n        old-unread (or (:unread old-container-change-data) [])\n        next-unread (filter #(not= % item-id) old-unread)\n        next-container-change-data (if old-container-change-data\n                                     (assoc old-container-change-data\n                                      :unseen next-unseen\n                                      :unread next-unread)\n                                     {:container-id container-id\n                                      :unseen next-unseen\n                                      :unread next-unread})]\n    (assoc old-change-data container-id next-container-change-data)))\n\n(defmethod dispatcher/action :item-delete/unseen\n  [db [_ org-slug change-data]]\n  (let [item-id (:item-id change-data)\n        container-id (:container-id change-data)\n        change-key (dispatcher/change-data-key org-slug)\n        old-change-data (get-in db change-key)]\n    (assoc-in db change-key (update-unseen-unread-remove old-change-data item-id container-id change-data))))\n\n(defn update-unseen-unread-add [old-change-data item-id container-id new-changes]\n  (let [old-container-change-data (get old-change-data container-id)\n        old-unseen (or (:unseen old-container-change-data) [])\n        next-unseen (vec (seq (conj old-unseen item-id)))\n        old-unread (or (:unread old-container-change-data) [])\n        next-unread (vec (seq (conj old-unread item-id)))\n        next-container-change-data (if old-container-change-data\n                                     (assoc old-container-change-data\n                                      :unseen next-unseen\n                                      :unread next-unread)\n                                     {:container-id container-id\n                                      :unseen next-unseen\n                                      :unread next-unread})]\n    (assoc old-change-data container-id next-container-change-data)))\n\n(defmethod dispatcher/action :item-add/unseen\n  [db [_ org-slug change-data]]\n  (let [item-id (:item-id change-data)\n        container-id (:container-id change-data)\n        change-key (dispatcher/change-data-key org-slug)\n        old-change-data (get-in db change-key)]\n    (assoc-in db change-key (update-unseen-unread-add old-change-data item-id container-id change-data))))\n\n(defmethod dispatcher/action :section-more\n  [db [_ org-slug board-slug sort-type]]\n  (let [container-key (dispatcher/board-data-key org-slug board-slug sort-type)\n        container-data (get-in db container-key)\n        next-container-data (assoc container-data :loading-more true)]\n    (assoc-in db container-key next-container-data)))\n\n(defmethod dispatcher/action :section-more/finish\n  [db [_ org board sort-type direction next-board-data]]\n  (if next-board-data\n    (let [container-key (dispatcher/board-data-key org board sort-type)\n          container-data (get-in db container-key)\n          posts-data-key (dispatcher/posts-data-key org)\n          old-posts (get-in db posts-data-key)\n          prepare-board-data (merge next-board-data {:posts-list (:posts-list container-data)\n                                                     :old-links (:links container-data)})\n          fixed-posts-data (au/parse-board prepare-board-data (dispatcher/change-data db) (dispatcher/active-users) (dispatcher/follow-boards-list) direction)\n          new-items-map (merge old-posts (:fixed-items fixed-posts-data))\n          new-container-data (-> fixed-posts-data\n                              (assoc :direction direction)\n                              (dissoc :loading-more))]\n      (-> db\n        (assoc-in container-key new-container-data)\n        (assoc-in posts-data-key new-items-map)\n        (as-> ndb\n         (update-in ndb (dispatcher/user-notifications-key org)\n          #(notif-util/fix-notifications ndb %)))))\n    db))\n\n(defmethod dispatcher/action :setup-section-editing\n  [db [_ board-data]]\n  (assoc db :initial-section-editing board-data))\n\n(defmethod dispatcher/action :item-move\n  [db [_ org-slug change-data]]\n  (let [old-container-id (:old-container-id change-data)\n        container-id (:container-id change-data)\n        item-id (:item-id change-data)\n        change-key (dispatcher/change-data-key org-slug)\n        old-change-data (get-in db change-key)\n        old-container-change-data (get old-change-data old-container-id)\n        is-unseen? (utils/in? (:unseen old-container-change-data) item-id)\n        is-unread? (utils/in? (:unread old-container-change-data) item-id)\n        next-old-unseen (filterv #(not= % item-id) (:unseen old-container-change-data))\n        next-old-unread (filterv #(not= % item-id) (:unread old-container-change-data))\n        next-old-container-change-data (-> old-container-change-data\n                                        (assoc :unseen next-old-unseen)\n                                        (assoc :unread next-old-unread))\n        new-container-change-data (get old-change-data container-id)\n        next-new-unseen (concat (:unseen new-container-change-data) (if is-unseen? [item-id] []))\n        next-new-unread (concat (:unread new-container-change-data) (if is-unread? [item-id] []))\n        next-new-container-change-data (-> new-container-change-data\n                                        (assoc :unseen next-new-unseen)\n                                        (assoc :unread next-new-unread))\n        next-change-data (-> old-change-data\n                          (assoc old-container-id next-old-container-change-data)\n                          (assoc container-id next-new-container-change-data))]\n    (assoc-in db change-key next-change-data)))\n"]}