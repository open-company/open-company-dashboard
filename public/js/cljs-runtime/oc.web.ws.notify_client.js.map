{"version":3,"sources":["oc/web/ws/notify_client.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.ws","js/oc.web.ws.notify-client","js/oc.web.ws.notify-client.channelsk","oc.web.ws.notify-client/channelsk","cljs.core.atom","js/oc.web.ws.notify-client.ch-chsk","oc.web.ws.notify-client/ch-chsk","js/oc.web.ws.notify-client.ch-state","oc.web.ws.notify-client/ch-state","js/oc.web.ws.notify-client.chsk-send!","oc.web.ws.notify-client/chsk-send!","js/oc.web.ws.notify-client.ch-pub","oc.web.ws.notify-client/ch-pub","cljs.core.async.chan","js/oc.web.ws.notify-client.last-ws-link","oc.web.ws.notify-client/last-ws-link","js/oc.web.ws.notify-client.last-interval","oc.web.ws.notify-client/last-interval","js/oc.web.ws.notify-client.publication","oc.web.ws.notify-client/publication","cljs.core.async.pub","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.ws.notify-client/send!","seq42781","G__42782","cljs.core/first","cljs.core/next","self__4723__auto__","chsk-send!","args","oc.web.ws.utils/send!","oc.web.ws.notify-client/notifications-watch","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.ws.notify_client.send_BANG_","oc.web.ws.notify-client/subscribe","topic","handler-fn","ws-nc-chan","cljs.core.async.sub","c__27167__auto__","cljs.core.async.impl.dispatch/run","f__27168__auto__","switch__27075__auto__","state_42847","state_val_42848","statearr-42849","cljs.core.async.impl.ioc-helpers/take!","inst_42845","cljs.core.async.impl.ioc-helpers/return-chan","inst_42841","inst_42842","statearr-42850","statearr-42851","statearr-42852","state-machine__27076__auto__","ret-value__27077__auto__","result__27078__auto__","cljs.core/keyword-identical?","ex__27079__auto__","e42853","statearr-42854","cljs.core/seq","statearr-42855","state__27169__auto__","statearr-42856","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/oc.web.ws.notify-client.event-handler","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__42857","cljs.core/MultiFn","cljs.core.symbol","oc.web.ws.notify-client/event-handler","event","_","r","state_42881","state_val_42882","inst_42875","inst_42876","inst_42877","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_42879","statearr-42888","e42889","statearr-42890","statearr-42891","statearr-42897","body","state_42909","state_val_42910","inst_42903","inst_42904","inst_42905","inst_42907","statearr-42917","e42918","statearr-42919","statearr-42920","statearr-42921","state_42928","state_val_42929","inst_42922","inst_42923","inst_42924","inst_42926","statearr-42955","e42956","statearr-42957","statearr-42958","statearr-42959","js/oc.web.ws.notify-client.-event-msg-handler","fexpr__42963","oc.web.ws.notify-client/-event-msg-handler","p__42964","map__42965","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","oc.web.ws.notify-client/event-msg-handler","ev-msg","id","?data","p__42970","map__42971","p__42977","map__42978","vec__42991","cljs.core.nth","old-state-map","new-state-map","e","taoensso.truss.impl/-dummy-error","e42994","js/Error","taoensso.truss.impl/-invar-violation!","cljs.core/vector?","p__42998","map__42999","p__43001","map__43002","auth-cb","cljs.core.partial","oc.web.ws.utils/auth-check","oc.web.actions.jwt/jwt-refresh","G__43004","cljs.core/deref","G__43005","oc.web.ws.notify-client/reconnect","oc.web.lib.jwt/user-id","oc.web.ws.utils/post-handshake-auth","oc.web.lib.jwt/jwt","vec__43006","?uid","?csrf-token","?handshake-data","oc.web.ws.notify-client/stop-router!","taoensso.sente/chsk-disconnect!","oc.web.ws.notify-client/start-router!","taoensso.sente/start-client-chsk-router!","oc.web.ws.utils/reconnected","G__43019","G__43020","ws-link","uid","ws-uri","goog.Uri/parse","ws-domain","ws-org-path","cljs.core/not","and__4115__auto__","map__43033","chsk","ch-recv","send-fn","state","x","G__43034","G__43035","taoensso.sente/make-channel-socket!","oc.web.local-settings/jwt-cookie-secure","cljs.core/reset!","cljs.core/remove-watch","cljs.core/add-watch","key","a","old-state","new-state","oc.web.utils.ws-client-ids/notify-client-id"],"sourcesContent":["(ns oc.web.ws.notify-client\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]\n                   [taoensso.encore :refer (have)])\n  (:require [cljs.core.async :refer [chan <! >! timeout pub sub unsub unsub-all]]\n            [goog.Uri :as guri]\n            [taoensso.sente :as s]\n            [taoensso.timbre :as timbre]\n            [oc.web.lib.jwt :as j]\n            [oc.lib.time :as time]\n            [oc.web.actions.jwt :as ja]\n            [oc.web.local-settings :as ls]\n            [oc.web.ws.utils :as ws-utils]\n            [oc.web.utils.ws-client-ids :as ws-client-ids]))\n\n;; Sente WebSocket atoms\n(defonce channelsk (atom nil))\n(defonce ch-chsk (atom nil))\n(defonce ch-state (atom nil))\n(defonce chsk-send! (atom nil))\n(defonce ch-pub (chan))\n\n(defonce last-ws-link (atom nil))\n\n(defonce last-interval (atom nil))\n\n;; Publication that handlers will subscribe to\n(defonce publication\n  (pub ch-pub :topic))\n\n;; Send wrapper\n\n(defn- send! [chsk-send! & args]\n  (ws-utils/send! \"Notify\" chsk-send! ch-state args))\n\n(defn notifications-watch []\n  (timbre/debug \"Watching notifications.\")\n  (send! chsk-send! [:watch/notifications {}]))\n\n;; Auth\n\n(defn subscribe\n  [topic handler-fn]\n  (let [ws-nc-chan (chan)]\n    (sub publication topic ws-nc-chan)\n    (go-loop []\n      (handler-fn (<! ws-nc-chan))\n      (recur))))\n\n;; Event handler\n\n(defmulti event-handler\n  \"Multimethod to handle our internal events\"\n  (fn [event & _]\n    (timbre/debug \"event-handler\" event)\n    event))\n\n(defmethod event-handler :default\n  [_ & r]\n  (timbre/info \"No event handler defined for\" _))\n\n(defmethod event-handler :chsk/ws-ping\n  [_ & r]\n  (go (>! ch-pub { :topic :chsk/ws-ping })))\n\n;; ex: {:user-id \"e392-488b-9915\", :notifications (...)}\n(defmethod event-handler :user/notifications\n  [_ body]\n  (timbre/debug \"Notifications list event\" body)\n  (go (>! ch-pub { :topic :user/notifications :data body })))\n\n(defmethod event-handler :user/notification\n  [_ body]\n  (timbre/debug \"Live notification event\" body)\n  (go (>! ch-pub { :topic :user/notification :data body })))\n\n;; Sente events handlers\n\n(defmulti -event-msg-handler\n  \"Multimethod to handle Sente `event-msg`s\"\n  :id ; Dispatch on event-id\n  )\n\n(defn event-msg-handler\n  \"Wraps `-event-msg-handler` with logging, error catching, etc.\"\n  [{:as ev-msg :keys [id ?data event]}]\n  (-event-msg-handler ev-msg))\n\n(defmethod -event-msg-handler :default\n  [{:as ev-msg :keys [event]}]\n  ; Default/fallback case (no other matching handler)\n  (timbre/warn \"Unhandled event: \" event))\n\n(defmethod -event-msg-handler :chsk/state\n  [{:as ev-msg :keys [?data]}]\n  (let [[old-state-map new-state-map] (have vector? ?data)]\n    (if (:first-open? new-state-map)\n      (timbre/debug \"Channel socket successfully established!: \" new-state-map)\n      (timbre/debug \"Channel socket state change: \" new-state-map))))\n\n(defmethod -event-msg-handler :chsk/recv\n  [{:as ev-msg :keys [?data]}]\n  (timbre/debug \"Push event from server: \" ?data)\n  (apply event-handler ?data))\n\n(declare reconnect)\n\n(defmethod -event-msg-handler :chsk/handshake\n  [{:as ev-msg :keys [?data]}]\n  (let [auth-cb (partial ws-utils/auth-check \"Notify\" ch-state chsk-send!\n                 channelsk ja/jwt-refresh #(reconnect @last-ws-link (j/user-id)) notifications-watch)]\n    (ws-utils/post-handshake-auth ja/jwt-refresh\n     #(send! chsk-send! [:auth/jwt {:jwt (j/jwt)}] 60000 auth-cb)))\n  (let [[?uid ?csrf-token ?handshake-data] ?data]\n    (timbre/debug \"Handshake:\" ?uid ?csrf-token ?handshake-data)))\n\n;; ----- Sente event router (our `event-msg-handler` loop) -----\n\n(defn  stop-router! []\n  (when @channelsk\n    (s/chsk-disconnect! @channelsk)\n    (timbre/info \"Connection closed\")))\n\n(defn start-router! []\n  (s/start-client-chsk-router! @ch-chsk event-msg-handler)\n  (timbre/info \"Connection estabilished\")\n  (ws-utils/reconnected last-interval \"Notify\" chsk-send! ch-state\n   #(reconnect @last-ws-link (j/user-id))))\n\n(defn reconnect\n  \"Connect or reconnect the WebSocket connection to the notify service\"\n  [ws-link uid]\n  (let [ws-uri (guri/parse (:href ws-link))\n        ws-domain (str (.getDomain ws-uri) (when (.getPort ws-uri) (str \":\" (.getPort ws-uri))))\n        ws-org-path (.getPath ws-uri)]\n    (if (or (not @ch-state)\n            (not (:open? @@ch-state)))\n\n      ;; Need a connection to notification service\n      (do\n        (timbre/debug \"Reconnect for\" (:href ws-link) \"and\" uid \"current state:\" @ch-state)\n        ; if the path is different it means\n        (when (and @ch-state\n                   (:open? @@ch-state))\n          (timbre/info \"Closing previous connection\")\n          (stop-router!))\n        (timbre/info \"Attempting notification service connection to:\" ws-domain)\n        (let [{:keys [chsk ch-recv send-fn state] :as x} (s/make-channel-socket! ws-org-path\n                                                          {:type :auto\n                                                           :host ws-domain\n                                                           :protocol (if ls/jwt-cookie-secure :https :http)\n                                                           :packer :edn\n                                                           :uid uid\n                                                           :params {:user-id uid}})]\n            (reset! channelsk chsk)\n            (reset! ch-chsk ch-recv)\n            (reset! chsk-send! send-fn)\n            (when @ch-state\n              (remove-watch @ch-state :notify-client-state-watcher))\n            (reset! ch-state state)\n            (add-watch @ch-state :notify-client-state-watcher\n             (fn [key a old-state new-state]\n               (reset! ws-client-ids/notify-client-id (:uid new-state))))\n            (start-router!)))\n      (notifications-watch))))"]}