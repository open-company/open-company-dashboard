{"version":3,"sources":["oc/web/components/theme_settings_modal.cljs"],"mappings":"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","names":["oc.web.components.theme-settings-modal/automatically-chosen-copy","rum.core/build-defcs","map__40461","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","p1__40459#","attrs40463","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.theme-settings-modal/theme-settings-modal","rum.core/static","s","theme-data","setting-value","computed-value","oc.web.utils.dom/event-inside?","rum.core/ref-node","oc.web.actions.nav-sidebar/close-all-panels","oc.web.actions.nav-sidebar/hide-theme-settings","oc.web.actions.ui-theme/support-system-dark-mode?","G__40466","p1__40460#","oc.web.components.ui.carrot-checkbox/carrot-checkbox","cljs.core._EQ_","oc.web.actions.ui-theme/set-ui-theme","G__40471","G__40481","oc.web.components.ui.carrot-option-button/carrot-option-button","G__40476","G__40486"],"sourcesContent":["(ns oc.web.components.theme-settings-modal\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.actions.ui-theme :as theme-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.carrot-checkbox :refer (carrot-checkbox)]\n            [oc.web.components.ui.carrot-option-button :refer (carrot-option-button)]))\n\n(def automatically-chosen-copy\n  [:div.theme-description\n    \"Chosen automatically by your OS\"])\n\n(rum/defcs theme-settings-modal <\n  rum/static\n  [s theme-data]\n  (let [{:keys [setting-value computed-value]} theme-data]\n    [:div.theme-settings-modal\n      {:on-click #(when-not (dom-utils/event-inside? % (rum/ref-node s :theme-settings))\n                    (nav-actions/close-all-panels))}\n      [:button.mlb-reset.modal-close-bt\n        {:on-click nav-actions/close-all-panels}]\n      [:div.theme-settings\n        {:ref :theme-settings}\n        [:div.theme-settings-header\n          [:div.theme-settings-header-title\n            \"Theme\"]\n          [:button.mlb-reset.cancel-bt\n            {:on-click #(nav-actions/hide-theme-settings)}\n            \"Back\"]]\n        [:div.theme-settings-body\n          (when (theme-actions/support-system-dark-mode?)\n            [:div.theme-settings-auto-container\n              (carrot-checkbox {:selected (= setting-value :auto)\n                                :did-change-cb #(theme-actions/set-ui-theme (if % :auto computed-value))})\n              [:span.auto-label\n                {:on-click #(theme-actions/set-ui-theme (if (= setting-value :auto) computed-value :auto))}\n                \"Sync with OS settings\"]])\n          [:div.theme-settings-rows\n            [:button.mlb-reset.theme-settings-row.light-theme\n              {:class (when (= computed-value :light) \"active\")\n               :on-click #(theme-actions/set-ui-theme :light)}\n              (carrot-option-button {:selected (= setting-value :light)\n                                     :disabled false\n                                     :did-change-cb #(theme-actions/set-ui-theme :light)})\n              [:span.theme-name \"Light\"]\n              [:span.theme-icon]\n              (when (and (= computed-value :light)\n                         (= setting-value :auto))\n                automatically-chosen-copy)]\n            [:button.mlb-reset.theme-settings-row.dark-theme\n              {:class (when (= computed-value :dark) \"active\")\n               :on-click #(theme-actions/set-ui-theme :dark)}\n              (carrot-option-button {:selected (= setting-value :dark)\n                                     :disabled false\n                                     :did-change-cb #(theme-actions/set-ui-theme :dark)})\n              [:span.theme-name \"Dark\"]\n              [:span.theme-icon]\n              (when (and (= computed-value :dark)\n                         (= setting-value :auto))\n                automatically-chosen-copy)]]]]]))"]}