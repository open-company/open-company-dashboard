{"version":3,"sources":["oc/web/components/ui/sections_picker.cljs"],"mappings":"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","names":["oc.web.components.ui.sections-picker/self-board-name","oc.web.components.ui.sections-picker/self-board","user-data","oc.web.lib.utils/default-section-slug","oc.web.components.ui.sections-picker/distance-from-bottom","oc.web.components.ui.sections-picker/calc-max-height","s","win-height","or__4126__auto__","js/document","js/window","dom-node","rum.core/dom-node","scroll-top","body-rect","elem-rect","offset-top","cljs.core/reset!","x__4214__auto__","y__4215__auto__","rum.core/build-defcs","p__39420","map__39421","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.interpreter/attributes","sablono.interpreter/interpret","oc.web.components.ui.sections-picker/sections-picker","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","_","active-slug","on-change","moving?","current-user-data","org-data","org.martinklepsch.derivatives/react","editable-boards","cljs.core/vals","author?","cljs.core.not_EQ_","user-publisher-board","p1__39418#","cljs.core/some","and__4115__auto__","cljs.core._EQ_","filtered-boards","cljs.core.filter","cljs.core.comp","cljs.core/not","sorted-boards","cljs.core.sort_by","fixed-publisher-board","all-sections","oc.web.local-settings/publisher-board-enabled?","cljs.core/cons","container-style","cljs.core/deref","scroller-style","is-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","cljs.core/count","iter__4529__auto__","s__39424","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__39426","cljs.core/chunk-buffer","i__39425","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39423","cljs.core/chunk-rest","cljs.core/first","cljs.core/rest","b","active","self-board?","fixed-board","p1__39419#","cljs.core.update","oc.web.lib.utils/class-set","G__39428","fexpr__39427","G__39433","fexpr__39432","cljs.core/fn?","G__39429","G__39436","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.sections-picker\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.responsive :as responsive]))\n\n(def self-board-name \"All\")\n\n(defn- self-board [user-data]\n  {:name \"\"\n   :slug utils/default-section-slug\n   :publisher-board true\n   :access \"team\"\n   :authors [(:user-id user-data)]})\n\n(def distance-from-bottom 80)\n\n(defn calc-max-height [s]\n  (let [win-height (or (.-clientHeight (.-documentElement js/document))\n                       (.-innerHeight js/window))\n        dom-node (rum/dom-node s)\n        scroll-top (.-scrollTop (.-scrollingElement js/document))\n        body-rect (.getBoundingClientRect (.-body js/document))\n        elem-rect (.getBoundingClientRect dom-node)\n        offset-top (- (.-top elem-rect) (+ (.-top body-rect) scroll-top))]\n    (reset! (::container-max-height s) (max 239 (- win-height offset-top 8 distance-from-bottom)))))\n\n(rum/defcs sections-picker < ;; Mixins\n                             rum/reactive\n                             ;; Derivatives\n                             (drv/drv :org-data)\n                             (drv/drv :editable-boards)\n                             ;; Locals\n                             (rum/local nil ::container-max-height)\n                             ;; Local mixins\n                             {:did-mount (fn [s]\n                               (calc-max-height s)\n                               s)\n                              :did-remount (fn [_ s]\n                               (calc-max-height s)\n                               s)}\n  [s {:keys [active-slug on-change moving? current-user-data]}]\n  (let [org-data (drv/react s :org-data)\n        editable-boards (vals (drv/react s :editable-boards))\n        author? (not= (:role current-user-data) :viewer)\n        user-publisher-board (some #(when (and (:publisher-board %)\n                                               (= (-> % :author :user-id) (:user-id current-user-data)))\n                                      %)\n                              editable-boards)\n        filtered-boards (filter (comp not :publisher-board) editable-boards)\n        sorted-boards (sort-by :name filtered-boards)\n        fixed-publisher-board (or user-publisher-board (self-board current-user-data))\n        all-sections (if (and author? ls/publisher-board-enabled?)\n                       (cons fixed-publisher-board sorted-boards)\n                       sorted-boards)\n        container-style (if @(::container-max-height s)\n                          {:max-height (str @(::container-max-height s) \"px\")}\n                          {})\n        scroller-style  (if @(::container-max-height s)\n                          {:max-height (str (- @(::container-max-height s) 55) \"px\")}\n                          {})\n        is-mobile? (responsive/is-tablet-or-mobile?)]\n    [:div.sections-picker\n      {:style container-style}\n      [:div.sections-picker-content\n        {:style scroller-style}\n        (when (pos? (count all-sections))\n          (for [b all-sections\n                :let [active (= (:slug b) active-slug)\n                      self-board? (:publisher-board b)\n                      fixed-board (if (and author? (not self-board?) active)\n                                    ;; When user selects again the currently selected board,\n                                    ;; unselect it and go back to publisher board if he has/can have one\n                                    fixed-publisher-board\n                                    (update b :name #(if self-board?\n                                                       self-board-name\n                                                       %)))]]\n            [:div.sections-picker-section\n              {:key (str \"sections-picker-\" (:uuid b))\n               :class (utils/class-set {:active active\n                                        :has-access-icon (#{\"public\" \"private\"} (:access b))\n                                        :publisher-board (:publisher-board b)})\n               :on-click #(when (fn? on-change)\n                            (on-change fixed-board))}\n              [:div.sections-picker-section-name\n                (if self-board?\n                  self-board-name\n                  (:name b))]\n              (case (:access b)\n                \"private\" [:div.private-icon]\n                \"public\" [:div.public-icon]\n                nil)]))]]))"]}