{"version":3,"sources":["oc/web/components/cmail.cljs"],"mappings":"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","names":["oc.web.components.cmail/self-board-name","oc.web.components.cmail/board-tooltip","oc.web.components.cmail/media-attachment-dismiss-picker","s","cljs.core/deref","cljs.core/reset!","oc.web.components.cmail/attachment-upload-failed-cb","state","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.lib.utils/after","oc.web.components.cmail/attachment-upload-success-cb","res","url","goog.object/get","cljs.core/not","size","mimetype","filename","createdat","oc.web.lib.utils/js-date","prefix","oc.web.lib.jwt/get-key","oc.web.lib.utils.date_string","subtitle","clojure.contrib.humanize.filesize","icon","oc.web.utils.activity/icon-for-mimetype","attachment-data","oc.web.actions.activity/add-attachment","cljs.core/first","oc.web.dispatcher/cmail-data-key","oc.web.components.cmail/attachment-upload-error-cb","error","oc.web.components.cmail/add-attachment","oc.web.lib.image_upload.upload_BANG_","cljs.core.partial","oc.web.components.cmail/body-element","js/document","oc.web.components.cmail/cleaned-body","temp__5735__auto__","body-el","oc.web.lib.utils/clean-body-html","oc.web.components.cmail/real-close","oc.web.actions.cmail/cmail-hide","oc.web.components.cmail/headline-element","rum.core/ref-node","oc.web.components.cmail/fix-headline","headline","oc.web.lib.utils/trim","cuerdas.core/replace","or__4126__auto__","oc.web.components.cmail/clean-body","oc.web.dispatcher/dispatch!","cljs.core.conj","var_args","G__45851","oc.web.components.cmail/autosave","js/Error","oc.web.components.cmail.autosave","reset-cmail?","cmail-data","org.martinklepsch.derivatives/get-ref","section-editing","oc.web.actions.activity.entry_save_on_exit","p1__45849#","oc.web.actions.cmail/cmail-reset","oc.web.components.cmail/debounced-autosave!","oc.web.components.cmail/cancel-autosave!","oc.web.components.cmail/cancel-clicked","clean-fn","dismiss-modal?","oc.web.actions.activity/entry-clear-local-cache","oc.web.components.cmail/body-on-change","oc.web.components.cmail/setup-top-padding","oc.web.components.cmail/headline-on-change","clean-headline","post-button-title","cljs.core/seq","p1__45857#","cljs.core.merge","oc.web.components.cmail/fullscreen-focus-headline","headline-el","and__4115__auto__","oc.web.lib.utils/to-end-of-content-editable","oc.web.components.cmail/setup-headline","goog.events/listen","goog.events.EventType/INPUT","js/emojiAutocomplete","oc.web.components.cmail/headline-on-paste","e","oc.web.lib.utils/event-stop","clipboardData","js/window","pasted-data","js/replaceSelectedText","cljs.core._EQ_","oc.web.components.cmail/add-emoji-cb","oc.web.components.cmail/is-publishable?","oc.web.components.cmail/maybe-publish","retry","latest-cmail-data","G__45866","G__45867","oc.web.components.cmail/real-post-action","oc.web.actions.activity.entry_publish","cljs.core.dissoc","G__45870","oc.web.components.cmail.real_post_action","fixed-headline","published?","_","p1__45868#","updated-cmail-data","oc.web.actions.activity.entry_save","oc.web.components.cmail/post-clicked","oc.web.components.cmail/fix-tooltips","G__45877","js/$","rum.core/dom-node","oc.web.components.cmail/delete-clicked","activity-data","post-type","oc.web.actions.activity/activity-delete","p1__45878#","oc.web.components.cmail/win-width","oc.web.components.cmail/calc-video-height","oc.web.lib.responsive/is-tablet-or-mobile?","oc.web.lib.utils/calc-video-height","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.components.cmail/collapse-if-needed","p__45883","vec__45884","cljs.core.nth","seq45880","G__45881","cljs.core/next","self__4723__auto__","cmail-state","showing-section-picker?","event-in?","oc.web.lib.utils/event-inside?","oc.web.components.cmail/close-cmail","oc.web.utils.activity/has-content?","cljs.core.assoc","cljs.core.keyword","oc.web.components.cmail/reset-cmail","initial-body","oc.web.utils.activity/empty-body-html","initial-headline","oc.web.lib.utils/emojify","body-text","oc.web.actions.nux/dismiss-add-post-tooltip","oc.web.lib.responsive/is-mobile-size?","oc.web.utils.dom/lock-page-scroll","oc.web.components.cmail/hide-section-picker","oc.web.components.cmail/clear-delayed-show-section-picker","delayed-show-section-picker","oc.web.components.cmail/maybe-hide-section-picker","oc.web.components.cmail/show-section-picker","v","oc.web.components.cmail/maybe-show-section-picker","oc.web.components.cmail/toggle-section-picker","rum.core/build-defcs","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","attrs45915","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","p1__45906#","attrs45923","attrs45926","oc.web.components.cmail/cmail","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/render-on-resize","oc.web.mixins.ui/refresh-tooltips-mixin","oc.web.mixins.ui/on-window-click-mixin","oc.web.mixins.ui.on_click_out","p1__45898#","p2__45899#","js/goog.async.Debouncer","cljs.core.not_EQ_","follow-boards-list","following-board?","p1__45900#","cljs.core/some","current-board-slug","posting-to-current-board?","to-url","oc.web.urls.following","oc.web.urls.board","oc.web.actions.nav_sidebar.nav_to_url_BANG_","oc.web.actions.nux/dismiss-edit-tooltip","goog.events/unlistenByKey","oc.web.utils.dom/unlock-page-scroll","debounced-autosave","is-mobile?","_current-board-slug","org.martinklepsch.derivatives/react","cmail-data*","p1__45901#","cljs.core.update","payments-data","show-paywall-alert?","oc.web.actions.payments/show-paywall-alert?","video-size","show-edit-tooltip","publishable?","show-post-bt-tooltip?","post-tt-kw","disabled?","working?","unpublished?","did-pick-section","board-data","note","dismiss-action","has-changes","cljs.core/fn?","current-user-data","editable-boards","show-section-picker?","oc.web.local-settings/publisher-board-enabled?","cljs.core/count","oc.web.lib.utils/class-set","oc.web.actions.cmail/cmail-expand","el","G__45914","oc.web.components.ui.trial-expired-banner/trial-expired-alert","G__45916","oc.web.components.ui.post-to-button/post-to-button","G__45917","oc.web.components.ui.sections-picker/sections-picker","oc.web.lib.utils/hide-class","oc.web.utils.activity/headline-placeholder","oc.web.lib.utils/default-body-placeholder","G__45918","oc.web.components.rich-body-editor/rich-body-editor","is-uploading?","G__45919","G__45920","G__45921","p1__45907#","oc.web.components.ui.stream-attachments/stream-attachments","oc.web.actions.activity/remove-attachment","G__45922","oc.web.components.ui.poll/polls-wrapper","oc.web.lib.jwt/user-id","G__45927","G__45928","G__45929","oc.web.components.ui.emoji-picker/emoji-picker","p1__45908#"],"sourcesContent":["(ns oc.web.components.cmail\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [org.martinklepsch.derivatives :as drv]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [taoensso.timbre :as timbre]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.activity :as au]\n            [oc.web.utils.ui :as ui-utils]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.lib.image-upload :as iu]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.actions.routing :as routing-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.actions.payments :as payments-actions]\n            [oc.web.components.ui.poll :refer (polls-wrapper)]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.trial-expired-banner :refer (trial-expired-alert)]\n            [oc.web.components.ui.emoji-picker :refer (emoji-picker)]\n            [oc.web.components.rich-body-editor :refer (rich-body-editor)]\n            [oc.web.components.ui.sections-picker :refer (sections-picker)]\n            [oc.web.components.ui.stream-attachments :refer (stream-attachments)]\n            [oc.web.components.ui.post-to-button :refer (post-to-button)]\n            [goog.dom :as gdom]\n            [goog.Uri :as guri]\n            [goog.object :as gobj]\n            [clojure.contrib.humanize :refer (filesize)])\n  (:import [goog.async Debouncer]))\n\n(def self-board-name \"All\")\n(def board-tooltip \"Select a topic\")\n\n;; Attachments handling\n\n(defn media-attachment-dismiss-picker\n  \"Called every time the image picke close, reset to inital state.\"\n  [s]\n  (when-not @(::media-attachment-did-success s)\n    (reset! (::media-attachment s) false)))\n\n(defn attachment-upload-failed-cb [state]\n  (let [alert-data {:icon \"/img/ML/error_icon.png\"\n                    :action \"attachment-upload-error\"\n                    :title \"Sorry!\"\n                    :message \"An error occurred with your file.\"\n                    :solid-button-title \"OK\"\n                    :solid-button-cb #(alert-modal/hide-alert)}]\n    (alert-modal/show-alert alert-data)\n    (utils/after 10 #(do\n                       (reset! (::media-attachment-did-success state) false)\n                       (media-attachment-dismiss-picker state)))))\n\n(defn attachment-upload-success-cb [state res]\n  (reset! (::media-attachment-did-success state) true)\n  (let [url (gobj/get res \"url\")]\n    (if-not url\n      (attachment-upload-failed-cb state)\n      (let [size (gobj/get res \"size\")\n            mimetype (gobj/get res \"mimetype\")\n            filename (gobj/get res \"filename\")\n            createdat (utils/js-date)\n            prefix (str \"Uploaded by \" (jwt/get-key :name) \" on \" (utils/date-string createdat [:year]) \" - \")\n            subtitle (str prefix (filesize size :binary false :format \"%.2f\" ))\n            icon (au/icon-for-mimetype mimetype)\n            attachment-data {:file-name filename\n                             :file-type mimetype\n                             :file-size size\n                             :file-url url}]\n        (reset! (::media-attachment state) false)\n        (activity-actions/add-attachment (first dis/cmail-data-key) attachment-data)\n        (utils/after 1000 #(reset! (::media-attachment-did-success state) false))))))\n\n(defn attachment-upload-error-cb [state res error]\n  (attachment-upload-failed-cb state))\n\n(defn add-attachment [s]\n  (reset! (::media-attachment s) true)\n  (iu/upload!\n   nil\n   (partial attachment-upload-success-cb s)\n   nil\n   (partial attachment-upload-error-cb s)\n   (fn []\n     (utils/after 400 #(media-attachment-dismiss-picker s)))))\n\n;; Data handling\n\n(defn- body-element []\n  (sel1 [:div.rich-body-editor]))\n\n(defn- cleaned-body []\n  (when-let [body-el (body-element)]\n    (utils/clean-body-html (.-innerHTML body-el))))\n\n(defn real-close []\n  (cmail-actions/cmail-hide))\n\n(defn headline-element [s]\n  (rum/ref-node s \"headline\"))\n\n(defn- fix-headline [headline]\n  (utils/trim (string/replace (or headline \"\") #\"\\n\" \"\")))\n\n(defn- clean-body [s]\n  (when (body-element)\n    (dis/dispatch! [:input (conj dis/cmail-data-key :body) (cleaned-body)])))\n\n;; Local cache for outstanding edits\n\n(defn autosave\n  ([s] (autosave s false))\n  ([s reset-cmail?]\n  (let [cmail-data @(drv/get-ref s :cmail-data)\n        section-editing @(drv/get-ref s :section-editing)]\n    (activity-actions/entry-save-on-exit (first dis/cmail-data-key) cmail-data (cleaned-body) section-editing\n     (when reset-cmail? #(when % (cmail-actions/cmail-reset)))))))\n\n(defn debounced-autosave!\n  [s]\n  (.fire @(::debounced-autosave s)))\n\n(defn cancel-autosave!\n  [s]\n  (.stop @(::debounced-autosave s)))\n\n;; Close dismiss handling\n\n(defn cancel-clicked [s]\n  (let [cmail-data @(drv/get-ref s :cmail-data)\n        clean-fn (fn [dismiss-modal?]\n                    (activity-actions/entry-clear-local-cache (:uuid cmail-data) (first dis/cmail-data-key) cmail-data)\n                    (when dismiss-modal?\n                      (alert-modal/hide-alert))\n                    (real-close))]\n    (if @(::uploading-media s)\n      (let [alert-data {:icon \"/img/ML/trash.svg\"\n                        :action \"dismiss-edit-uploading-media\"\n                        :message (str \"Leave before finishing upload?\")\n                        :link-button-title \"Stay\"\n                        :link-button-cb #(alert-modal/hide-alert)\n                        :solid-button-style :red\n                        :solid-button-title \"Cancel upload\"\n                        :solid-button-cb #(clean-fn true)}]\n        (alert-modal/show-alert alert-data))\n      (if (:has-changes cmail-data)\n        (let [alert-data {:icon \"/img/ML/trash.svg\"\n                          :action \"dismiss-edit-dirty-data\"\n                          :message (str \"Leave without saving your changes?\")\n                          :link-button-title \"Stay\"\n                          :link-button-cb #(alert-modal/hide-alert)\n                          :solid-button-style :red\n                          :solid-button-title \"Lose changes\"\n                          :solid-button-cb #(clean-fn true)}]\n          (alert-modal/show-alert alert-data))\n        (clean-fn false)))))\n\n;; Data change handling\n\n(defn body-on-change [state]\n  (dis/dispatch! [:input (conj dis/cmail-data-key :has-changes) true])\n  (debounced-autosave! state)\n  (when-let [body-el (body-element)]\n    (reset! (::last-body state) (.-innerHTML body-el))))\n\n(defn- setup-top-padding [s]\n  (when-let [headline (headline-element s)]\n    (when (-> s (drv/get-ref :cmail-state) deref :fullscreen)\n      (reset! (::top-padding s) (.. headline -parentElement -scrollHeight)))))\n\n(defn- headline-on-change [state]\n  (when-let [headline (headline-element state)]\n    (let [clean-headline (fix-headline (.-innerText headline))\n          post-button-title (when-not (seq clean-headline) :title)]\n      (dis/dispatch! [:update dis/cmail-data-key #(merge % {:headline clean-headline\n                                                            :has-changes true})])\n      (reset! (::post-tt-kw state) post-button-title)\n      (debounced-autosave! state))\n    (setup-top-padding state)))\n\n;; Headline setup and paste handler\n\n(defn- fullscreen-focus-headline [state]\n  (let [headline-el  (headline-element state)]\n    (when (and (-> state (drv/get-ref :cmail-state) deref :fullscreen)\n               headline-el)\n      (utils/to-end-of-content-editable headline-el))))\n\n(defn- setup-headline [state]\n  (when-let [headline-el  (headline-element state)]\n    (reset! (::headline-input-listener state) (events/listen headline-el EventType/INPUT #(headline-on-change state)))\n    (js/emojiAutocomplete)\n    (fullscreen-focus-headline state)))\n\n(defn headline-on-paste\n  \"Avoid to paste rich text into headline, replace it with the plain text clipboard data.\"\n  [state e]\n  ; Prevent the normal paste behavior\n  (utils/event-stop e)\n  (let [clipboardData (or (.-clipboardData e) (.-clipboardData js/window))\n        pasted-data   (.getData clipboardData \"text/plain\")]\n    ; replace the selected text of headline with the text/plain data of the clipboard\n    (js/replaceSelectedText pasted-data)\n    ; call the headline-on-change to check for content length\n    (headline-on-change state)\n    (when (= (.-activeElement js/document) (.-body js/document))\n      (when-let [headline-el (headline-element state)]\n        ; move cursor at the end\n        (utils/to-end-of-content-editable headline-el)))))\n\n(defn add-emoji-cb [s]\n  (utils/after 180\n   #(do\n     (headline-on-change s)\n     (body-on-change s))))\n\n(defn- is-publishable? [cmail-data]\n  (and (seq (fix-headline (:headline cmail-data)))\n       (seq (:board-slug cmail-data))))\n\n(declare real-post-action)\n\n(defn- maybe-publish [s retry]\n  (let [latest-cmail-data @(drv/get-ref s :cmail-data)\n        section-editing @(drv/get-ref s :section-editing)]\n    (if (and (:auto-saving latest-cmail-data)\n             (< retry 10))\n      (utils/after 250 #(real-post-action s (inc retry)))\n      (do\n        (reset! (::publishing s) true)\n        (activity-actions/entry-publish (dissoc latest-cmail-data :status) section-editing (first dis/cmail-data-key))))))\n\n(defn- real-post-action\n  ([s] (real-post-action s 0))\n  ([s retry]\n   (let [cmail-data @(drv/get-ref s :cmail-data)\n         fixed-headline (fix-headline (:headline cmail-data))\n         published? (= (:status cmail-data) \"published\")]\n     (if (is-publishable? cmail-data)\n       (let [_ (dis/dispatch! [:update dis/cmail-data-key #(merge % {:headline fixed-headline})])\n             updated-cmail-data @(drv/get-ref s :cmail-data)\n             section-editing @(drv/get-ref s :section-editing)]\n         (if published?\n           (do\n             (reset! (::saving s) true)\n             (activity-actions/entry-save (first dis/cmail-data-key) updated-cmail-data section-editing))\n           (maybe-publish s retry)))\n        (do\n          (reset! (::show-post-tooltip s) true)\n          (utils/after 3000 #(reset! (::show-post-tooltip s) false))\n          (reset! (::disable-post s) false))))))\n\n(defn post-clicked [s]\n  (clean-body s)\n  (reset! (::disable-post s) true)\n  (cancel-autosave! s)\n  (real-post-action s))\n\n(defn fix-tooltips\n  \"Fix the tooltips\"\n  [s]\n  (doto (.find (js/$ (rum/dom-node s)) \"[data-toggle=\\\"tooltip\\\"]\")\n    (.tooltip \"hide\")\n    (.tooltip \"fixTitle\")))\n\n;; Delete handling\n\n(defn delete-clicked [s e activity-data]\n  (if (or (:uuid activity-data)\n           (:links activity-data)\n           (:auto-saving activity-data))\n    (let [post-type (if (= (:status activity-data) \"published\")\n                      \"post\"\n                      \"draft\")\n          alert-data {:icon \"/img/ML/trash.svg\"\n                      :action \"delete-entry\"\n                      :message (str \"Delete this \" post-type \"?\")\n                      :link-button-title \"No\"\n                      :link-button-cb #(alert-modal/hide-alert)\n                      :solid-button-style :red\n                      :solid-button-title \"Yes\"\n                      :solid-button-cb #(do\n                                         (activity-actions/activity-delete activity-data)\n                                         (alert-modal/hide-alert))\n                      }]\n      (alert-modal/show-alert alert-data))\n    (do\n      ;; In case the data are queued up to be saved but the request didn't started yet\n      (when (:has-changes activity-data)\n        ;; Remove them\n        (dis/dispatch! [:update dis/cmail-data-key #(dissoc % :has-changes)]))\n      (cmail-actions/cmail-hide))))\n\n(defn win-width []\n  (or (.-clientWidth (.-documentElement js/document))\n      (.-innerWidth js/window)))\n\n(defn calc-video-height [s]\n  (when (responsive/is-tablet-or-mobile?)\n    (reset! (::mobile-video-height s) (utils/calc-video-height (win-width)))))\n\n(defn- collapse-if-needed [s & [e]]\n  (let [cmail-data @(drv/get-ref s :cmail-data)\n        cmail-state @(drv/get-ref s :cmail-state)\n        showing-section-picker? @(::show-section-picker s)\n        event-in? (if e\n                    (utils/event-inside? e (rum/dom-node s))\n                    false)]\n    (when-not (or (:fullscren cmail-state)\n                  (:collapsed cmail-state)\n                  event-in?\n                  (:has-changes cmail-data)\n                  (:auto-saving cmail-data)\n                  (:uuid cmail-data)\n                  showing-section-picker?)\n      (real-close)\n      (.blur (headline-element s)))))\n\n(defn close-cmail [s e]\n  (let [cmail-data (-> s (drv/get-ref :cmail-data) deref)]\n    (if (au/has-content? (assoc cmail-data :body (cleaned-body)))\n      (autosave s true)\n      (activity-actions/activity-delete cmail-data))\n    (if (and (-> cmail-data :status keyword (= :published))\n             (:has-changes cmail-data))\n      (cancel-clicked s)\n      (cmail-actions/cmail-hide))))\n\n(defn- reset-cmail [s]\n  (let [cmail-data @(drv/get-ref s :cmail-data)\n        cmail-state @(drv/get-ref s :cmail-state)\n        initial-body (if (seq (:body cmail-data))\n                       (:body cmail-data)\n                       au/empty-body-html)\n        initial-headline (utils/emojify\n                           (if (seq (:headline cmail-data))\n                             (:headline cmail-data)\n                             \"\"))\n        body-text (.text (.html (js/$ \"<div/>\") initial-body))]\n    (when-not (seq (:uuid cmail-data))\n      (nux-actions/dismiss-add-post-tooltip))\n    (reset! (::last-body s) initial-body)\n    (reset! (::initial-body s) initial-body)\n    (reset! (::initial-headline s) initial-headline)\n    (reset! (::initial-uuid s) (:uuid cmail-data))\n    (reset! (::publishing s) (:publishing cmail-data))\n    (reset! (::show-placeholder s) (not (.match initial-body #\"(?i).*(<iframe\\s?.*>).*\")))\n    (reset! (::post-tt-kw s) (when-not (seq (:headline cmail-data)) :title))\n    (reset! (::latest-key s) (:key cmail-state))\n    (utils/after 300 #(setup-headline s))\n    (when (responsive/is-mobile-size?)\n      (dom-utils/lock-page-scroll))))\n\n(defn- hide-section-picker [s]\n  (reset! (::show-section-picker s) false))\n\n(defn- clear-delayed-show-section-picker [s]\n  (let [delayed-show-section-picker (::delayed-show-section-picker s)]\n    (when @delayed-show-section-picker\n      (.clearTimeout js/window @delayed-show-section-picker)\n      (reset! delayed-show-section-picker nil))))\n\n(defn- maybe-hide-section-picker [s]\n  (clear-delayed-show-section-picker s)\n  (when (= @(::show-section-picker s) :hover)\n    (hide-section-picker s)))\n\n(defn- show-section-picker [s v]\n  (reset! (::show-section-picker s) v)\n  (reset! (::delayed-show-section-picker s) nil))\n\n(defn- maybe-show-section-picker [s]\n  (when-not @(::show-section-picker s)\n    (clear-delayed-show-section-picker s)\n    (reset! (::delayed-show-section-picker s) (utils/after 720 #(show-section-picker s :hover)))))\n\n(defn- toggle-section-picker [s]\n  (if (= @(::show-section-picker s) :click)\n    (hide-section-picker s)\n    (show-section-picker s :click)))\n\n(rum/defcs cmail < rum/reactive\n                   ;; Derivatives\n                   (drv/drv :cmail-state)\n                   (drv/drv :cmail-data)\n                   (drv/drv :section-editing)\n                   (drv/drv :show-edit-tooltip)\n                   (drv/drv :current-user-data)\n                   (drv/drv :payments)\n                   (drv/drv :follow-boards-list)\n                   (drv/drv :editable-boards)\n                   (drv/drv :board-slug)\n                   ;; Locals\n                   (rum/local \"\" ::initial-body)\n                   (rum/local \"\" ::initial-headline)\n                   (rum/local true ::show-placeholder)\n                   (rum/local nil ::initial-uuid)\n                   (rum/local nil ::headline-input-listener)\n                   (rum/local nil ::uploading-media)\n                   (rum/local false ::saving)\n                   (rum/local false ::publishing)\n                   (rum/local false ::disable-post)\n                   (rum/local nil ::debounced-autosave)\n                   (rum/local 0 ::mobile-video-height)\n                   (rum/local false ::media-attachment-did-success)\n                   (rum/local nil ::media-attachment)\n                   (rum/local nil ::latest-key)\n                   (rum/local false ::show-post-tooltip)\n                   (rum/local false ::show-section-picker)\n                   (rum/local nil ::delayed-show-section-picker)\n                   (rum/local nil ::last-body)\n                   (rum/local nil ::post-tt-kw)\n                   (rum/local 68 ::top-padding)\n                   (rum/local false ::last-fullscreen-state)\n                   ;; Mixins\n                   (mixins/render-on-resize calc-video-height)\n                   mixins/refresh-tooltips-mixin\n                   ;; Go back to collapsed state on desktop if user didn't touch anything\n                   (when-not (responsive/is-mobile-size?)\n                     (mixins/on-window-click-mixin collapse-if-needed))\n                   ;; Dismiss sectoins picker on window clicks, slightly delay it to avoid\n                   ;; conflicts with the collapse cmail listener\n                   (mixins/on-click-out :section-picker-container (fn [s e] (hide-section-picker s)))\n\n                   (mixins/on-click-out :cmail-container #(when (and (not (responsive/is-mobile-size?))\n                                                                     (-> %1 (drv/get-ref :cmail-state) deref :fullscreen))\n                                                            (close-cmail %1 %2)))\n\n                   {:will-mount (fn [s]\n                    (reset-cmail s)\n                    (reset! (::last-fullscreen-state s) (-> s (drv/get-ref :cmail-state) deref :fullscreen))\n                    s)\n                   :did-mount (fn [s]\n                    (calc-video-height s)\n                    (reset! (::debounced-autosave s) (Debouncer. #(autosave s) 2000))\n                    (setup-top-padding s)\n                    s)\n                   :will-update (fn [s]\n                    (let [cmail-state @(drv/get-ref s :cmail-state)]\n                      ;; If the state key changed let's reset the initial values\n                      (when (not= @(::latest-key s) (:key cmail-state))\n                        (when @(::latest-key s)\n                          (reset-cmail s))\n                        (when-not @(::latest-key s)\n                          (reset! (::latest-key s) (:key cmail-state)))))\n                    s)\n                   :did-update (fn [s]\n                    (when-let [cmail-state @(drv/get-ref s :cmail-state)]\n                      (when-not (= (:fullscreen cmail-state) @(::last-fullscreen-state s))\n                        (when (:fullscreen cmail-state)\n                          (fullscreen-focus-headline s))\n                        (reset! (::last-fullscreen-state s) (:fullscreen cmail-state))))\n                    s)\n                   :before-render (fn [s]\n                    ;; Handle saving/publishing states to dismiss the component\n                    (when-let [cmail-data @(drv/get-ref s :cmail-data)]\n                      ;; Did activity get removed here or in another client?\n                      (when (:delete cmail-data)\n                        (real-close))\n                      ;; Saving\n                      (when (and @(::saving s)\n                                 (not (:loading cmail-data)))\n                        (reset! (::saving s) false)\n                        (reset! (::disable-post s) false)\n                        (when-not (:error cmail-data)\n                          (utils/after 100 real-close)))\n                      ;; Publish\n                      (when (and @(::publishing s)\n                                 (not (:publishing cmail-data)))\n                        (reset! (::publishing s) false)\n                        (reset! (::disable-post s) false)\n                        (when-not (:error cmail-data)\n                          (when (seq (:board-slug cmail-data))\n                            ;; Redirect to the publishing board if the slug is available\n                            (real-close)\n                            (utils/after 180 (fn []\n                             (let [follow-boards-list @(drv/get-ref s :follow-boards-list)\n                                   following-board? (some #(when (= (:slug %) (:board-slug cmail-data)) %) follow-boards-list)\n                                   current-board-slug @(drv/get-ref s :board-slug)\n                                   posting-to-current-board? (= (keyword current-board-slug) (keyword (:board-slug cmail-data)))\n                                   to-url (if (and following-board?\n                                                   (not posting-to-current-board?))\n                                            ;; If user is following the board they posted to\n                                            ;; and they are in home\n                                            {:slug \"following\"\n                                             :url (oc-urls/following)\n                                             :refresh false}\n                                            ;; Redirect to the posting board in every other case\n                                            {:slug (:board-slug cmail-data)\n                                             :url (oc-urls/board (:board-slug cmail-data))\n                                             :refresh true})]\n                               (nav-actions/nav-to-url! nil (:slug to-url) (:url to-url) 0 (:refresh to-url)))))))))\n                    s)\n                   :after-render (fn [s]\n                    (fix-tooltips s)\n                    s)\n                   :will-unmount (fn [s]\n                    (nux-actions/dismiss-edit-tooltip)\n                    (when @(::headline-input-listener s)\n                      (events/unlistenByKey @(::headline-input-listener s))\n                      (reset! (::headline-input-listener s) nil))\n                    (when (responsive/is-mobile-size?)\n                      (dom-utils/unlock-page-scroll))\n                    (when-let [debounced-autosave @(::debounced-autosave s)]\n                      (.dispose debounced-autosave))\n                    s)}\n  [s]\n  (let [is-mobile? (responsive/is-tablet-or-mobile?)\n        _current-board-slug (drv/react s :board-slug)\n        cmail-state (drv/react s :cmail-state)\n        cmail-data* (drv/react s :cmail-data)\n        cmail-data (update cmail-data* :board-name\n                    #(if (:publisher-board cmail-data*)\n                       self-board-name\n                       %))\n        payments-data (drv/react s :payments)\n        show-paywall-alert? (payments-actions/show-paywall-alert? payments-data)\n        published? (= (:status cmail-data) \"published\")\n        video-size (if is-mobile?\n                     {:width (win-width)\n                      :height @(::mobile-video-height s)}\n                     {:width 548\n                      :height (utils/calc-video-height 548)})\n        show-edit-tooltip (and (drv/react s :show-edit-tooltip)\n                               (not (seq @(::initial-uuid s))))\n        publishable? (is-publishable? cmail-data)\n        show-post-bt-tooltip? (not publishable?)\n        post-tt-kw @(::post-tt-kw s)\n        disabled? (or show-post-bt-tooltip?\n                      show-paywall-alert?\n                      (not publishable?)\n                      @(::publishing s)\n                      @(::disable-post s))\n        working? (or (and published?\n                          @(::saving s))\n                     (and (not published?)\n                          @(::publishing s)))\n        unpublished? (not= (:status cmail-data) \"published\")\n        post-button-title (if (= (:status cmail-data) \"published\")\n                            \"Save\"\n                            \"Share update\")\n        did-pick-section (fn [board-data note dismiss-action]\n                           (hide-section-picker s)\n                           (when (and board-data\n                                      (seq (:name board-data)))\n                            (let [has-changes (or (:has-changes cmail-data)\n                                                  (seq (:uuid cmail-data))\n                                                  (:auto-saving cmail-data))]\n                              (dis/dispatch! [:input dis/cmail-data-key\n                               (merge cmail-data {:board-slug (:slug board-data)\n                                                  :board-name (:name board-data)\n                                                  :board-access (:access board-data)\n                                                  :publisher-board (:publisher-board board-data)\n                                                  :has-changes has-changes\n                                                  :invite-note note})])\n                              (when has-changes\n                                (debounced-autosave! s)))\n                            (when (fn? dismiss-action)\n                              (dismiss-action))))\n        current-user-data (drv/react s :current-user-data)\n        editable-boards (drv/react s :editable-boards)\n        show-section-picker? (or ;; Publisher board can still be creaeted\n                                 (and (not (some :publisher-board editable-boards))\n                                      ls/publisher-board-enabled?\n                                      (pos? (count editable-boards)))\n                                 (> (count editable-boards) 1))]\n    [:div.cmail-outer\n      {:class (utils/class-set {:quick-post-collapsed (or (:collapsed cmail-state) show-paywall-alert?)\n                                :show-trial-expired-alert show-paywall-alert?\n                                :fullscreen (and (not (:collapsed cmail-state))\n                                                 (:fullscreen cmail-state))})\n       :on-click (when (and (not is-mobile?)\n                            (:collapsed cmail-state)\n                            (not show-paywall-alert?)\n                            (not (:fullscreen cmail-state)))\n                   (fn [e]\n                      (nux-actions/dismiss-add-post-tooltip)\n                      (cmail-actions/cmail-expand cmail-data cmail-state)\n                      (utils/after 280\n                       #(when-let [el (headline-element s)]\n                          (utils/to-end-of-content-editable el)))))}\n      (when (and show-paywall-alert?\n                 (:collapsed cmail-state))\n        (trial-expired-alert {:top \"48px\" :left \"50%\"}))\n      [:div.cmail-container\n        {:ref :cmail-container}\n        [:div.cmail-mobile-header\n          [:button.mlb-reset.mobile-close-bt\n            {:on-click (partial close-cmail s)}]\n          [:div.cmail-mobile-header-right\n            [:button.mlb-reset.mobile-attachment-button\n              {:on-click #(add-attachment s)}]\n            [:div.post-button-container.group\n              (post-to-button {:on-submit #(post-clicked s)\n                               :disabled disabled?\n                               :title post-button-title\n                               :post-tt-kw post-tt-kw\n                               :force-show-tooltip @(::show-post-tooltip s)})]]]\n        [:div.dismiss-inline-cmail-container\n          {:class (when unpublished? \"long-tooltip\")}\n          [:button.mlb-reset.dismiss-inline-cmail\n            {:on-click (partial close-cmail s)\n             :data-toggle (when-not is-mobile? \"tooltip\")\n             :data-placement \"top\"\n             :title (if unpublished?\n                      \"Save & Close\"\n                      \"Close\")}]]\n        [:div.cmail-content-outer\n          {:class (utils/class-set {:showing-edit-tooltip show-edit-tooltip})\n           :style (when (and (not is-mobile?)\n                             (:fullscreen cmail-state))\n                    {:padding-top (str @(::top-padding s) \"px\")})}\n          [:div.cmail-content\n            {:class (when show-section-picker? \"section-picker-visible\")}\n            (when is-mobile?\n              [:div.section-picker-bt-container\n                {:ref :section-picker-container}\n                [:span.post-to \"Post to\"]\n                [:button.mlb-reset.section-picker-bt\n                  {:on-click #(toggle-section-picker s)}\n                  (:board-name cmail-data)]\n                (when @(::show-section-picker s)\n                  [:div.section-picker-container\n                    (sections-picker {:active-slug (:board-slug cmail-data)\n                                      :on-change did-pick-section\n                                      :current-user-data current-user-data})])])\n            ; Headline element\n            [:div.cmail-content-headline-container.group\n              [:div.cmail-content-headline.emoji-autocomplete.emojiable\n                {:class utils/hide-class\n                 :content-editable true\n                 :key (str \"cmail-headline-\" (:key cmail-state))\n                 :placeholder au/headline-placeholder\n                 :ref \"headline\"\n                 :on-paste    #(headline-on-paste s %)\n                 :on-key-down (fn [e]\n                                (utils/after 10 #(headline-on-change s))\n                                (cond\n                                  (and (.-metaKey e)\n                                       (= \"Enter\" (.-key e)))\n                                  (post-clicked s)\n                                  (and (= (.-key e) \"Enter\")\n                                       (not (.-metaKey e)))\n                                  (do\n                                    (utils/event-stop e)\n                                    (utils/to-end-of-content-editable (body-element)))))\n                 :dangerouslySetInnerHTML @(::initial-headline s)}]]\n            (when-not is-mobile?\n              [:div.cmail-content-collapsed-placeholder\n                (str utils/default-body-placeholder \"...\")])\n            (rich-body-editor {:on-change (partial body-on-change s)\n                               :use-inline-media-picker true\n                               :static-positioned-media-picker true\n                               :media-picker-initially-visible false\n                               :media-picker-container-selector \"div.cmail-outer div.cmail-container div.cmail-footer div.cmail-footer-media-picker-container\"\n                               :initial-body @(::initial-body s)\n                               :show-placeholder @(::show-placeholder s)\n                               :show-h2 true\n                               ;; Block the rich-body-editor component when\n                               ;; the current editing post has been created already\n                               :paywall? show-paywall-alert?\n                               :placeholder (str utils/default-body-placeholder \"...\")\n                               :dispatch-input-key (first dis/cmail-data-key)\n                               :cmd-enter-cb #(post-clicked s)\n                               :upload-progress-cb (fn [is-uploading?]\n                                                     (reset! (::uploading-media s) is-uploading?))\n                               :media-config [\"poll\" \"code\" \"gif\" \"photo\" \"video\"]\n                               :classes (str (when-not show-paywall-alert? \"emoji-autocomplete \") \"emojiable \" utils/hide-class)\n                               :cmail-key (:key cmail-state)\n                               :attachments-enabled true})\n            ; Attachments\n            (stream-attachments (:attachments cmail-data) nil\n             #(activity-actions/remove-attachment (first dis/cmail-data-key) %))\n            (when (seq (:polls cmail-data))\n              (polls-wrapper {:polls-data (:polls cmail-data)\n                              :editing? true\n                              :current-user-id (jwt/user-id)\n                              :container-selector \"div.cmail-content\"\n                              :dispatch-key (first dis/cmail-data-key)\n                              :activity-data cmail-data}))]]\n      [:div.cmail-footer\n        [:div.post-button-container.group\n          (post-to-button {:on-submit #(post-clicked s)\n                           :disabled disabled?\n                           :title post-button-title\n                           :post-tt-kw post-tt-kw\n                           :force-show-tooltip @(::show-post-tooltip s)\n                           :show-on-hover true})]\n        [:div.section-picker-bt-container\n          {:class (when-not show-section-picker? \"hidden\")\n           :on-mouse-leave #(maybe-hide-section-picker s)\n           :on-mouse-enter #(maybe-show-section-picker s)\n           :ref :section-picker-container}\n          [:button.mlb-reset.section-picker-bt\n            {:on-click #(toggle-section-picker s)\n             :data-placement \"top\"\n             :data-toggle \"tooltip\"\n             :title board-tooltip}\n            (:board-name cmail-data)]\n          (when @(::show-section-picker s)\n            [:div.section-picker-container\n              (sections-picker {:active-slug (:board-slug cmail-data)\n                                :on-change did-pick-section\n                                :current-user-data current-user-data})])]\n        (emoji-picker {:add-emoji-cb (partial add-emoji-cb s)\n                       :width 24\n                       :height 32\n                       :position \"bottom\"\n                       :default-field-selector \"div.cmail-content div.rich-body-editor\"\n                       :container-selector \"div.cmail-content\"})\n        [:button.mlb-reset.attachment-button\n          {:on-click #(add-attachment s)\n           :data-toggle \"tooltip\"\n           :data-placement \"top\"\n           :data-container \"body\"\n           :title \"Add attachment\"}]\n        [:div.cmail-footer-media-picker-container.group]\n        [:div.cmail-footer-right\n          ; (when-not (:fullscreen cmail-state)\n          ;   [:div.fullscreen-bt-container\n          ;     [:button.mlb-reset.fullscreen-bt\n          ;       {:on-click #(cmail-actions/cmail-toggle-fullscreen)\n          ;        :data-toggle (when-not is-mobile? \"tooltip\")\n          ;        :data-placement \"top\"\n          ;        :title \"Fullscreen\"}]])\n          (when (:uuid cmail-data)\n            [:div.delete-bt-container\n              [:button.mlb-reset.delete-bt\n                {:on-click #(delete-clicked s % cmail-data)\n                 :data-toggle (when-not is-mobile? \"tooltip\")\n                 :data-placement \"top\"\n                 :title \"Delete\"}]])]]]]))\n"]}