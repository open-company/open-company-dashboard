{"version":3,"sources":["oc/web/stores/reaction.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.stores","js/oc.web.stores.reaction","js/oc.web.stores.reaction.reactions-atom","oc.web.stores.reaction/reactions-atom","cljs.core.atom","oc.web.stores.reaction/make-activity-index","uuid","cljs.core.keyword","oc.web.stores.reaction/make-comment-index","js/oc.web.stores.reaction.reducer","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__43625","cljs.core/MultiFn","cljs.core.symbol","oc.web.stores.reaction/reducer","p__43626","vec__43629","seq__43631","cljs.core/seq","first__43633","cljs.core/first","cljs.core/next","db","action-type","_","cljs.core/some","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.stores.reaction/reactions-dispatch","oc.web.dispatcher/actions","payload","cljs.core.swap_BANG_","oc.web.dispatcher/app-state","oc.web.stores.reaction/handle-reaction-to-entry-finish","activity-data","reaction","reaction-data","activity-key","activity-uuid","next-reactions-loading","oc.web.lib.utils/vec-dissoc","updated-activity-data","cljs.core.assoc","cljs.core/assoc-in","cljs.core/keys","next-reaction-data","cljs.core/name","reactions-data","or__4126__auto__","reaction-idx","p1__43639#","oc.web.lib.utils/index-of","cljs.core._EQ_","next-reactions-data","cljs.core/count","oc.web.stores.reaction/handle-reaction-to-entry","old-reactions-loading","cljs.core.conj","oc.web.dispatcher/action","p__43677","vec__43678","cljs.core.nth","p__43681","vec__43682","map__43685","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","status","reaction-key","p__43691","vec__43692","oc.web.stores.reaction/update-entry-reaction-data","add-event?","interaction-data","entry-data","p1__43695#","reaction-found","old-reaction-data","is-current-user","oc.web.lib.jwt/get-key","authors-fn","cljs.core/conj","with-authors","G__43696","G__43697","G__43698","G__43699","with-reacted","new-reactions-data","new-entry-data","oc.web.stores.reaction/update-entry-reaction","item-uuid","entries-key","cljs.core/deref","keys","cljs.core.remove","cljs.core/nil?","new-data","p1__43704#","cljs.core.mapcat","cljs.core/PersistentVector","cljs.core.get_in","cljs.core.partition","cljs.core.filter","cljs.core/second","cljs.core.map","cljs.core/vec","p1__43707#","p2__43708#","cljs.core.reduce","oc.web.stores.reaction/get-comments-data","data-key","comments-data","comment-idx","p1__43715#","oc.web.stores.reaction/update-comments-data","data","comment-data","p1__43716#","cljs.core.merge","G__43725","G__43726","G__43728","G__43729","new-comment-data","new-comments-data","oc.web.stores.reaction/update-comment-reaction","comments-key","p1__43737#","p1__43738#","p2__43739#","oc.web.stores.reaction/update-reaction","with-updated-comment","with-updated-activity","p__43754","vec__43759","p__43763","vec__43764","oc.web.stores.reaction/index-comments","ra","org","board-slug","comments","acc","comment","idx","comment-key","oc.web.dispatcher/activity-comments-key","oc.web.stores.reaction/index-posts","posts","post","oc.web.dispatcher/activity-key","next-acc","p__43775","vec__43776","sort-type","fixed-body","cljs.core/vals","p__43785","vec__43786","direction","p__43790","vec__43791","p__43794","vec__43795","p__43799","vec__43804","p__43807","vec__43808","p__43811","vec__43812","section-slug","board-data","fixed-board-data","oc.web.utils.activity/parse-board","oc.web.dispatcher.change_data","oc.web.dispatcher.active_users","oc.web.dispatcher.follow_boards_list","p__43815","vec__43816","org-slug","G__43820","fexpr__43819","p__43821","vec__43822","G__43831","fexpr__43830","p__43832","vec__43833","map__43836","success","error","body","G__43839","fexpr__43838"],"sourcesContent":["(ns oc.web.stores.reaction\n  (:require [taoensso.timbre :as timbre]\n            [cljs-flux.dispatcher :as flux]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.activity :as au]\n            [oc.web.dispatcher :as dispatcher]))\n\n;; Store reaction and related data\n(defonce reactions-atom (atom {}))\n\n(defn make-activity-index [uuid]\n  (keyword (str \"activity-\" uuid)))\n\n(defn make-comment-index [uuid]\n  (keyword (str \"comment-\" uuid)))\n\n;; Reducers used to watch for reaction dispatch data\n(defmulti reducer (fn [db [action-type & _]]\n                    (when-not (some #{action-type} [:update :input])\n                      (timbre/debug \"Dispatching reaction reducer:\" action-type))\n                    action-type))\n\n(def reactions-dispatch\n  (flux/register\n   dispatcher/actions\n   (fn [payload]\n     (swap! dispatcher/app-state reducer payload))))\n\n;; Handle dispatch events\n(defn handle-reaction-to-entry-finish\n  [db activity-data reaction reaction-data activity-key]\n  (let [activity-uuid (:uuid activity-data)\n        next-reactions-loading (utils/vec-dissoc (:reactions-loading activity-data) reaction)]\n    (if (nil? reaction-data)\n      (let [updated-activity-data (assoc activity-data :reactions-loading next-reactions-loading)]\n        (assoc-in db activity-key updated-activity-data))\n      (let [reaction (first (keys reaction-data))\n            next-reaction-data (assoc (get reaction-data reaction) :reaction (name reaction))\n            reactions-data (or (:reactions activity-data) [])\n            reaction-idx (utils/index-of reactions-data #(= (:reaction %) (name reaction)))\n            next-reactions-data (if (or (neg? reaction-idx) (nil? reaction-idx))\n                                  (assoc reactions-data (count reactions-data) next-reaction-data)\n                                  (assoc reactions-data reaction-idx next-reaction-data))\n            updated-activity-data (-> activity-data\n                                   (assoc :reactions-loading next-reactions-loading)\n                                   (assoc :reactions next-reactions-data))]\n        (assoc-in db activity-key updated-activity-data)))))\n\n(defn handle-reaction-to-entry [db activity-data reaction-data activity-key]\n  (let [old-reactions-loading (or (:reactions-loading activity-data) [])\n        next-reactions-loading (conj old-reactions-loading (:reaction reaction-data))\n        updated-activity-data (assoc activity-data :reactions-loading next-reactions-loading)]\n    (assoc-in db activity-key updated-activity-data)))\n\n(defmethod dispatcher/action :handle-reaction-to-entry\n  [db [_ activity-data reaction-data activity-key]]\n  (handle-reaction-to-entry-finish db activity-data (:reaction reaction-data) {(keyword (:reaction reaction-data)) reaction-data} activity-key))\n\n(defmethod dispatcher/action :react-from-picker/finish\n  [db [_ {:keys [status activity-data reaction reaction-data activity-key]}]]\n  (if (and (>= status 200)\n           (< status 300))\n    (let [reaction-key (first (keys reaction-data))\n          reaction (name reaction-key)]\n      (handle-reaction-to-entry-finish db activity-data reaction reaction-data activity-key))\n    ;; Wait for the entry refresh if it didn't\n    db))\n\n(defmethod dispatcher/action :activity-reaction-toggle/finish\n  [db [_ activity-data reaction reaction-data activity-key]]\n  (handle-reaction-to-entry-finish db activity-data reaction reaction-data activity-key))\n\n(defn- update-entry-reaction-data\n  [add-event? interaction-data entry-data]\n  (when entry-data\n    (let [reaction-data (assoc (:interaction interaction-data) :count (:count interaction-data))\n          reaction (:reaction reaction-data)\n          reactions-data (:reactions entry-data)\n          reaction-idx (utils/index-of reactions-data #(= (:reaction %) reaction))\n          reaction-found (and (number? reaction-idx) (>= reaction-idx 0))\n          old-reaction-data (when reaction-found\n                             (get reactions-data reaction-idx))\n          is-current-user (= (jwt/get-key :user-id) (:user-id (:author reaction-data)))\n          authors-fn (if add-event? conj utils/vec-dissoc)\n          with-authors (-> reaction-data\n                        (assoc :authors (authors-fn (:authors old-reaction-data) (:name (:author reaction-data))))\n                        (assoc :author-ids (authors-fn (:author-ids old-reaction-data) (:user-id (:author reaction-data)))))\n          with-reacted (if is-current-user\n                         ;; If the reaction is from the current user we need to\n                         ;; update the reacted, the links are the one coming with\n                         ;; the WS message\n                         (assoc with-authors :reacted add-event?)\n                         ;; If it's a reaction from another user we need to\n                         ;; survive the reacted and the links from the reactions\n                         ;; we already have\n                         (assoc with-authors :reacted (if old-reaction-data (:reacted old-reaction-data) false)))\n          new-reactions-data (if reactions-data\n                               (assoc reactions-data (if reaction-found reaction-idx\n                                                      (count reactions-data)) with-reacted)\n                               [with-reacted])\n          new-entry-data (assoc entry-data :reactions new-reactions-data)]\n      new-entry-data)))\n\n(defn- update-entry-reaction\n  [db interaction-data add-event?]\n  (let [item-uuid (:resource-uuid interaction-data)\n        entries-key (get @reactions-atom (make-activity-index item-uuid))\n        ;; look for data in the board\n        keys (remove nil? [entries-key])\n        new-data (->> (mapcat #(vector %\n                                (update-entry-reaction-data add-event? interaction-data\n                                 (get-in db %)))\n                       keys)\n                  (partition 2)\n                  (filter second) ;; remove nil data\n                  (map vec))]\n    (when (seq new-data)\n      (reduce #(assoc-in %1 (first %2) (second %2)) db new-data))))\n\n(defn- get-comments-data\n  [db data-key item-uuid]\n  (let [comments-data (get-in db data-key)\n        comment-idx (utils/index-of comments-data #(= item-uuid (:uuid %)))]\n    (when comment-idx\n      {:index comment-idx :data comments-data})))\n\n(defn- update-comments-data\n  [add-event? interaction-data data]\n  (when data\n    (let [reaction-data (:interaction interaction-data)\n          reaction (:reaction reaction-data)\n          comment-data (nth (:data data) (:index data))\n          reactions-data (:reactions comment-data)\n          reaction-idx (utils/index-of reactions-data #(= (:reaction %) reaction))]\n      (let [\n          is-current-user (= (jwt/get-key :user-id) (:user-id (:author reaction-data)))\n          old-reaction-data (if reaction-idx\n                              (nth reactions-data reaction-idx)\n                              ;; In case we don't have an old reaction\n                              ;; grab the links from the WS message and set reacted\n                              ;; true only if the reaction is coming from the current user\n                              ;; and is an add interaction\n                              {:reacted (when is-current-user\n                                          add-event?)\n                               :authors []\n                               :author-ids []\n                               :links (:links reaction-data)})\n          authors-fn (if add-event? conj utils/vec-dissoc)\n          with-reacted (merge reaction-data {:count (:count interaction-data)\n                                             :reacted (:reacted old-reaction-data)\n                                             :authors (authors-fn (:authors old-reaction-data)\n                                                       (:name (:author reaction-data)))\n                                             :author-ids (authors-fn (:author-ids old-reaction-data)\n                                                          (:user-id (:author reaction-data)))\n                                             :links (:links old-reaction-data)})\n          new-reactions-data (if reaction-idx\n                               (assoc reactions-data reaction-idx with-reacted)\n                               (conj (or reactions-data []) with-reacted))\n          new-comment-data (assoc comment-data :reactions new-reactions-data)\n          new-comments-data (assoc (:data data) (:index data) new-comment-data)]\n      new-comments-data))))\n\n(defn- update-comment-reaction\n  [db interaction-data add-event?]\n  (let [item-uuid (:resource-uuid interaction-data)\n        comments-key (get @reactions-atom (make-comment-index item-uuid))\n        ;; look for data in the board\n        keys (remove nil? [comments-key])\n        new-data (->> (mapcat #(vector %\n                                       (update-comments-data\n                                        add-event?\n                                        interaction-data\n                                        (get-comments-data db % item-uuid)))\n                              keys)\n                      (partition 2)\n                      (filter second) ;; remove nil data\n                      (map vec))]\n    (when (seq new-data)\n      (reduce #(assoc-in %1 (first %2) (second %2)) db new-data))))\n\n(defn- update-reaction\n  [db interaction-data add-event?]\n  (let [with-updated-comment (update-comment-reaction db interaction-data add-event?)\n        with-updated-activity (update-entry-reaction db interaction-data add-event?)]\n    (or with-updated-comment with-updated-activity db)))\n\n(defmethod dispatcher/action :ws-interaction/reaction-add\n  [db [_ interaction-data]]\n  (update-reaction db interaction-data true))\n\n(defmethod dispatcher/action :ws-interaction/reaction-delete\n  [db [_ interaction-data]]\n  (update-reaction db interaction-data false))\n\n;; Reaction store specific reducers\n(defmethod reducer :default [db payload]\n  ;; ignore state changes not specific to reactions\n  db)\n\n;; This function is used to store the comment uuid and the comments key to\n;; find that comment in the app state.  The reaction store can then find the\n;; key by the comment uuid. It does NOT change the app state.\n(defn- index-comments\n  [ra org board-slug activity-uuid comments]\n  (reduce (fn [acc comment]\n            (let [idx (make-comment-index (:uuid comment))\n                  comment-key (dispatcher/activity-comments-key\n                               org\n                               activity-uuid)]\n              (assoc acc idx comment-key)))\n          ra comments))\n\n;; This is used to store the relationship between an activity uuid that has\n;; reactions with the activity key in the app state. When a related reaction\n;; is then needed you can search for the key by the activity uuid. It does not\n;; change the app state.\n(defn- index-posts\n  [ra org posts]\n  (reduce (fn [acc post]\n            (let [board-slug (:board-slug post)\n                  activity-uuid (:uuid post)\n                  idx (make-activity-index activity-uuid)\n                  activity-key (dispatcher/activity-key\n                                org\n                                activity-uuid)\n                  next-acc (index-comments acc org board-slug activity-uuid (:comments post))]\n              (assoc next-acc idx activity-key)))\n          ra posts))\n\n(defmethod reducer :all-posts-get/finish\n  [db [_ org sort-type fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :all-posts-more/finish\n  [db [_ org sort-type direction fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :inbox-get/finish\n  [db [_ org sort-type fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :bookmarks-get/finish\n  [db [_ org sort-type fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :following-get/finish\n  [db [_ org sort-type fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :unfollowing-get/finish\n  [db [_ org sort-type fixed-body]]\n  (swap! reactions-atom index-posts org (-> fixed-body :fixed-items vals))\n  db)\n\n(defmethod reducer :section\n  [db [_ org section-slug sort-type board-data]]\n  (let [fixed-board-data (au/parse-board board-data (dispatcher/change-data db)\n                          (dispatcher/active-users org db) (dispatcher/follow-boards-list org db)\n                          sort-type)]\n    (swap! reactions-atom index-posts org (-> fixed-board-data :fixed-items vals)))\n  db)\n\n(defmethod reducer :ws-interaction/comment-add\n  [db [_ org-slug entry-data interaction-data]]\n  (let [activity-uuid (:resource-uuid interaction-data)\n        activity-key (@reactions-atom (make-activity-index activity-uuid))\n        board-slug (nth activity-key 2)]\n    (when activity-key\n      (swap! reactions-atom index-comments\n             org-slug\n             board-slug\n             activity-uuid\n             [(:interaction interaction-data)])))\n  db)\n\n(defmethod reducer :ws-interaction/comment-delete\n  [db [_ org-slug interaction-data]]\n  (let [activity-uuid (:resource-uuid interaction-data)\n        activity-key (@reactions-atom (make-activity-index activity-uuid))\n        board-slug (nth activity-key 2)]\n    (when activity-key\n      (swap! reactions-atom index-comments\n             org-slug\n             board-slug\n             activity-uuid\n             [(:interaction interaction-data)])))\n  db)\n\n(defmethod reducer :comments-get/finish\n  [db [_ {:keys [success error body activity-uuid]}]]\n  (let [activity-key (@reactions-atom (make-activity-index activity-uuid))\n        org (first activity-key)\n        board-slug (nth activity-key 2)]\n    (when activity-key\n      (swap! reactions-atom index-comments\n             org\n             board-slug\n             activity-uuid\n             (:items (:collection body)))))\n  db)\n"]}