{"version":3,"sources":["oc/web/components/ui/wrt.cljs"],"mappings":";AAoBA,AAAA,AAAOA,AAAiBC,AAAKC;AAA7B,AACE,AAAMC,AAAc,AAAAC,AAAI,AAAA,AAAOH;AAAX,AAAA,AAAAG;AAAAA;;AAAiB,AAAA,AAAK,AAAA,AAAaH,AAAU,AAAA,AAAYA;;;AAA7E,AACE,AAAAG,AAAI,AAACC,AAAiB,AAACC,AAAa,AAAA,AAAQL,AAAOC;AAAnD,AAAA,AAAAE;AAAAA;;AAAA,AAAAA,AACI,AAACC,AAAiB,AAACC,AAAaH,AAAeD;AADnD,AAAA,AAAAE;AAAAA;;AAAA,AAAAA,AAEI,AAACC,AAAiB,AAACC,AAAa,AAAA,AAAaL,AAAOC;AAFxD,AAAA,AAAAE;AAAAA;;AAGI,AAACC,AAAiB,AAACC,AAAa,AAAA,AAAYL,AAAOC;;;;;AAE3D,AAAA,AAAOK,AAAcC;AAArB,AACE,AAAA,AAACC,AAAO,AAAA,AAAiBD;;AACzB,AAAA,AAACC,AAAO,AAAA,AAASD;;AACjB,AAAA,AAACC,AAAO,AAAA,AAAkBD;;AAE5B,AAAA,AAAOE,AAAYC,AAAQC;AAA3B,AACE,AAAAC,AACO,AAAA,AAAAO,AAACC;AAAD,AAAW,AAAI,AAACC,AAAE,AAAA,AAAAF,AAAaT;AAApB;;AAAA;;AAAsDC;AADxEC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAwBM;AAElBI,AAAmB,AAACC,AAAQC,AAAkBN;AAFpD,AAGE,AAACO,AAAI,AAACC,AAAOC,AAAK,AAACC,AAAOX,AAAUK;;AAExC,AAAA,AAAMO,AAAgBC,AAAIC;AAA1B,AACE,AAAAC,AAAMF;AAANE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACO,AAAA,AAAA,AAAkBD;;;AADzB;AAAA;;;AAAA;AAAA;;;;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAAF;;;;AAKF,AAAA,AAAAG,AAAOE,AAAW9B;AAAlB,AAAA,AAAA6B,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAAC,AAAAqB,AAAAA;AAAA,AAAApB,AAAAoB,AAAA,AAA4BE;AAA5B,AAAAtB,AAAAoB,AAAA,AAA8CG;AAA9C,AAAAvB,AAAAoB,AAAA,AAA4DI;AAA5D,AAAAxB,AAAAoB,AAAA,AAAuEK;AAAvE,AACE,AAAA,AAAA,AAAA,AAAA,AAAMC,AACyB,AAAA,AAA6B,AAAA,AAAWH;AACjEI,AAAU,AAAC7B,AAAM8B,AACN,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAq5EgC,AAAAkJ,AAAAvJ;AAr5EhCM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AACW,AAAK,AAACC,AAAI,AAAA,AAAOD,AACZ,AAACE,AAAK,AAAA,AAAU9B,AAAmB,AAAA,AAAU4B,AAC7C,AAACC,AAAI,AAAA,AAAAE,AAACrD,AAAK,AAAA,AAAkBT,AAAG,AAAA,AAAU2D;AAH1D,AAIWI,AAAW,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAJpE,AAAA,AAAA,AAAAiB,AAAAJ,AAAA,AAKE,AAAA,AAAUY,AACV,AAACM,AAAM9B,AACN,AAAI,AAAA+B,AAAKH;AAAL,AAAA,AAAAG;AACK,AAAA,AAACpD,AAAE,AAAA,AAAsB6C;;AAD9BO;;AAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG2B,AAAA,AAAeH,AACjB,AAAA,AAAKA,AAItB,AAAA,AAAQJ;;AAfnB,AAAA,AAAAV,AAAA;;;;AAAA,AAAA,AAAAA,AAAA;;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AACW,AAAK,AAACC,AAAI,AAAA,AAAOD,AACZ,AAACE,AAAK,AAAA,AAAU9B,AAAmB,AAAA,AAAU4B,AAC7C,AAACC,AAAI,AAAA,AAAAE,AAACrD,AAAK,AAAA,AAAkBT,AAAG,AAAA,AAAU2D;AAH1D,AAIWI,AAAW,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAJpE,AAAA,AAAAuB,AAAA,AAKE,AAAA,AAAUE,AACV,AAACM,AAAM9B,AACN,AAAI,AAAA+B,AAAKH;AAAL,AAAA,AAAAG;AACK,AAAA,AAACpD,AAAE,AAAA,AAAsB6C;;AAD9BO;;AAPP,AAAAZ,AAAA,AAAAI,AAAAnB,AAOG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAG2B,AAAA,AAAewB,AACjB,AAAA,AAAKA,AAItB,AAAA,AAAQJ;;AAfnB,AAAA,AAAAD,AAAAnB;;;;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAAD,AAAQL;;AAHzB,AAmBE,AAACkC,AAAM,AAAA,AAAkBnE,AAAGqC,AAAM,AAAC+B,AAAO,AAACC,AAAKjC,AAAW,AAAA,AAACkC,AAAO,AAACxB,AAAMV;;AAC1E,AAAA,AAACnC,AAAO,AAAA,AAAsBD;;AAC9B,AAACuE,AAAgCvC,AAAc,AAACwC,AAAKpC,AACpD,AAAAqC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApE,AAAA,AAAAoE,AAAA,AAAA,AAAA,AAAA,AAAAnE,AAAAC,AAAAkE,AAAAA;AAAA,AAAAjE,AAAAiE,AAAA,AAAaC;AAAb,AAAAlE,AAAAiE,AAAA,AAAqBE;AAArB,AACE,AAAA,AAAC3E,AAAO,AAAA,AAAsBD;;AAC9B,AAAI2E;AACF,AAAME,AAAc,AAACtE,AAAM8B,AACN,AAAAC,AAAA,AAAAwC;AAAA,AAAA,AAAAtC,AAAA,AAAA;AAAA,AAAA,AAAAsC,AAAAA;;AAAA,AAAA,AAAArC,AAAA,AAAAC,AAAAoC;AAAA,AAAA,AAAArC;AAAA,AAAA,AAAAqC,AAAArC;AAAA,AAAA,AAAA,AAAAE,AAAAmC;AAAA,AAAAlC,AA83EqB,AAAAkJ,AAAAhH;AA93ErBjC,AAAA,AAAAC,AAAAF;AAAAmC,AAAA,AAAA/B,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAmC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAnC;AAAA,AAAA,AAAAK,AAAAN,AAAAoC,AAAM7E;AAAN,AAAA,AACYwD,AAAE,AAAA,AAACwB;AAADD;AAAA,AAAO,AAAM,AAACpE,AAAE,AAAA,AAAAoE,AAAa/E;AAAtB,AAAA+E;;AAAA;;;AAAkCjD;AAC3C8B,AAAW,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAFrE,AAAA,AAAA,AAAAiB,AAAA4B,AAAA,AAGE,AAAA,AAAUpB,AACV,AAAI,AAAAO,AAAKH;AAAL,AAAA,AAAAG;AACK,AAAA,AAACpD,AAAE,AAAA,AAAsB6C;;AAD9BO;;AAEF,AAAI,AAAAA,AAAKH;AAAL,AAAA,AAAAG;AAAA,AACK,AAACxB,AAAI,AAAA,AAAeqB,AACpB,AAAA,AAACF,AAAK,AAAA,AAAeE;;AAF1BG;;AAGF,AAAA,AAAA,AAAkB,AAAA,AAAeH,AACjC,AACF,AAAA,AAAiB,AAAA,AAAQJ;;AAX7B,AAAA,AAAAqB,AAAA;;;;AAAA;;;;;AAAA,AAAA5B,AAAA,AAAAC,AAAA0B,AAAA,AAAAE,AAAA,AAAA1B,AAAAuB;;AAAA,AAAA1B,AAAA,AAAAC,AAAA0B,AAAA;;;AAAA,AAAA,AAAAvB,AAAAsB,AAAM3E;AAAN,AAAA,AACYwD,AAAE,AAAA,AAACwB;AAADD;AAAA,AAAO,AAAM,AAACpE,AAAE,AAAA,AAAAoE,AAAa/E;AAAtB,AAAA+E;;AAAA;;;AAAkCjD;AAC3C8B,AAAW,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAFrE,AAAA,AAAAuB,AAAA,AAGE,AAAA,AAAUE,AACV,AAAI,AAAAO,AAAKH;AAAL,AAAA,AAAAG;AACK,AAAA,AAACpD,AAAE,AAAA,AAAsB6C;;AAD9BO;;AAEF,AAAI,AAAAA,AAAKH;AAAL,AAAA,AAAAG;AAAA,AACK,AAACxB,AAAI,AAAA,AAAeqB,AACpB,AAAA,AAACF,AAAK,AAAA,AAAeE;;AAF1BG;;AANR,AAAAe,AAAA,AAAAvB,AAAAoB,AASM,AAAA,AAAA,AAAkB,AAAA,AAAef,AACjC,AACF,AAAA,AAAiB,AAAA,AAAQJ;;;AAX7B;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAc,AAAC+B,AAAKjC;;AADzC,AAcE,AAAC+B,AAAM,AAAA,AAAkBnE,AAAGqC,AAAMwC;;AACpC,AAACV,AAAM,AAAA,AAAkBnE,AAAGqC,AAC3B,AAAC9B,AAAM8B,AACN,AAAAC,AAAA,AAAA8C;AAAA,AAAA,AAAA5C,AAAA,AAAA;AAAA,AAAA,AAAA4C,AAAAA;;AAAA,AAAA,AAAA3C,AAAA,AAAAC,AAAA0C;AAAA,AAAA,AAAA3C;AAAA,AAAA,AAAA2C,AAAA3C;AAAA,AAAA,AAAA,AAAAE,AAAAyC;AAAA,AAAAxC,AA82EwC,AAAAkJ,AAAA1G;AA92ExCvC,AAAA,AAAAC,AAAAF;AAAAyC,AAAA,AAAArC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzC;AAAA,AAAA,AAAAK,AAAAN,AAAA0C,AAAMnF;AAAN,AAAA,AAAA,AAAAgD,AAAAkC,AACC;AACE,AAAA,AAAA,AAACG;;AAAD,AAAmB,AAACrB,AAAM,AAAA,AAAkBnE,AAAGyF,AAAOtF;;;;AADxD,AAAA,AAEGA;;;;AAHJ,AAAA,AAAAmF,AAAA;;;;AAAA;;;;;AAAA,AAAAlC,AAAA,AAAAC,AAAAgC,AAAA,AAAAE,AAAA,AAAAhC,AAAA6B;;AAAA,AAAAhC,AAAA,AAAAC,AAAAgC,AAAA;;;AAAA,AAAA,AAAA7B,AAAA4B,AAAMjF;AAAN,AAAA,AAAAsD,AACC;AACE,AAAA,AAAA,AAAC+B;;AAAD,AAAmB,AAACrB,AAAM,AAAA,AAAkBnE,AAAGyF,AAAOtF;;;;AADxD,AAAA,AAEGA;;AAHJ,AAAAoF,AAAA,AAAA7B,AAAA0B;;;AAAA;;;;AAAA,AAAA;;AAAA,AAAA,AAAA9C,AAAc,AAAC+B,AAAKjC;;;;;AAK/B,AAAA,AAAAsD,AAAOE,AAAe5F;AAAtB,AAAA,AAAA2F,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArF,AAAA,AAAAqF,AAAA,AAAA,AAAA,AAAA,AAAApF,AAAAC,AAAAmF,AAAAA;AAAAA,AAAoDG;AAApD,AAAArF,AAAAkF,AAAA,AAAgCE;AAAhC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAME,AAEqB,AAAA,AAAA,AAA2EF;AAFtG,AAImC,AAACG;AAJpC,AAAA,AAAA,AAAA,AAAA,AAOmC;AAAA,AACC,AAAClE,AAAU9B,AAAE8F;;AACb,AAACE;;AATrC,AAUE,AAACC,AAAuBF;;AAE5B,AAAA,AAAAG,AAAA,AAAWM,AA4BRxG,AAAEmH;AA5BL,AAAA,AAAA,AA6BQnF,AAAc,AAAA,AAACoF,AAAUpH;AACzB+B,AAAkB,AAAA,AAACqF,AAAUpH;AAC7BqH,AAAiB,AAAA,AAACD,AAAUpH;AAC5BsH,AAAW,AAAA,AAAatF;AACxBuF,AAAW,AAAA,AAACH,AAAUpH;AACtBwH,AAAU,AAAMD,AAAWE;AAAAA,AAChB,AAAA,AAACC,AAAOD,AAAY,AAAKE;AAAL,AACE,AAAIL;AACF,AAAA,AAAAM,AAACC;AAAD,AAAS,AAAChE,AAAK,AAAA,AAAA+D,AAAa,AAAA,AAAU7F;AAAoB4F;;AAC1DA;;;AAJzB,AAKC,AAAA,AAACD,AAAOD,AAAU,AAAKK;AAAL,AACE,AAAIR;AACF,AAAA,AAAAS,AAACF;AAAD,AAAS,AAAChE,AAAK,AAAA,AAAAkE,AAAa,AAAA,AAAUhG;AAAoB+F;;AAC1DA;;;;AACjCE,AAAQ,AAAA,AAAOhG;AACfiG,AAAW,AAAC/G,AAAI,AAACF,AAAQC,AAAkB,AAAA,AAAQuG;AACnDU,AAAS,AAACC,AAAI,AAAA,AAACC,AAAaH;AAC5BI,AAAa,AAACnH,AAAI,AAACF,AAAQC,AAAkB,AAAA,AAAUuG;AACvDc,AAAU,AAACtH,AAAQC,AAAkB,AAACI,AAAO4G,AAAWI;AACxDE,AAAW,AAAA,AAAQf;AACnB9H,AAAM,AAAA,AAASM;AACfwI,AAAY,AAAA,AAAA1E,AAAChE,AAAcJ;AAC3B+I,AAAU,AAAA,AAAazI;AACvB0I,AAAe,AAAAC,AAAA,AAAA7E,AAAO2E;AAAPE,AAAA,AAAA,AAAAA,AAAAjH,AAAA,AAAAiH,AAAA;AAAA,AAAA,AAAAA;AAAA;AACO,AAAA,AAAAC,AAACC;AAAD,AAAU,AAAAD,AAACpJ,AAAkB,AAACM,AAAa,AAAAF,AAAA,AAAAkE,AAAKpE;AAAL,AAAA,AAAAE;AAAAA;;AAAA;;;AAAiB0I;;;AADnE;AAEQL;;;AAFR;AAGUI;;;;AAHV,AAAA,AAAA1G,AAAA,AAAA,AAAAgH;;;;AAIfG,AAAsB,AAAC5I,AAAW,AAAA,AAAU6B,AAAmB2G;AAC/DK,AAAW,AAACC;AACZC,AAAa,AAAA,AAAK,AAAA,AAAG,AAAG,AAACnG,AAAMmF,AAAY,AAACnF,AAAMwF;AAClDY,AAAQ,AAAA,AAAU/B;AAClBjF,AAAe,AAACsB,AAAM,AAAC2F,AAAkBD;AACzCE,AAAiB,AAAA,AAAAC,AAACR;AAAD,AAAU,AAAK,AAACjF,AAAI,AAAA,AAAAE,AAACrD,AAAK,AAAA,AAAkBT,AAAG,AAAA,AAAAqJ,AAChC,AAACxF,AAAK,AAAA,AAAAwF,AAAa,AAAA,AAAUtH;AAC3CsG;AA/D1B,AAAA,AAAAlC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAiEkB,AAAA,AAAAtC,AAAK,AAAA,AAA2B9D;AAC9B,AAAU,AAAAoG,AAACkD,AAAsB,AAAA,AAACpC,AAAalH;AAA/C;;AAAA,AACE,AAAA,AAACC,AAAO,AAAA,AAA2BD;;;AACrC,AAAU,AAAAoG,AAACkD,AAAsB,AAAA,AAACpC,AAAalH;AAA/C;;AAAA,AACE,AAACuJ;;;AArEvB,AAAA,AAAApD,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAuEmBkD;AAvEnB,AA2EoB,AAAA,AAAAzF,AAAO,AAAA,AAA2B9D;AAAlC,AACE,AAAU,AAAAqG,AAACiD,AAAsB,AAAA,AAACpC,AAAalH;AAA/C;AAAA,AACE,AAAA,AAACC,AAAO,AAAA,AAA2BD;;;AACnC,AAAAqG,AAACoD;;AAHL;;AA3EpB,AAAAnD,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI,AAyEgB,AAAA,AAAA,AAACiD,AAA0B,AAAC5F,AAAI,AAAA,AAAQ4D,AAQjC+B,AAIf,AAAA,AAAA3F,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAQ,AAAA,AAAQ4D,AACd,AAACkC,AAAAA,AAAAA,AAgBkB,AAAA,AAAA,AAAI,AAAA,AAAC5I,AAAE,AAAC6I,AAAwB,AAACC,AASlC,AAAA,AAAA9F,AAAA,AAAA,AAAO,AAAA,AAAoB9D,AAAG,AAAA,AAA0BiJ,AAI9D,AAAA,AAAKA,AAEX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAACnI,AAAE,AAACgC,AAAMwF,AAAW,AAACxF,AAAMmF,AAE5B,AAAA,AAACnH,AAAI,AAACgC,AAAMmF,AAEZ,AAAA,AAAO,AAACnF,AAAMmF,AAGd,AAAA,AAAA,AAAA,AAAK,AAACnF,AAAMmF,AAEX,AAACnF,AAAMwF,AAEP,AAAA,AAAA,AAAA,AAAM,AAAA,AAAkBd;AAG3B,AAAM,AAAAtD,AAAK,AAAA,AAAkBsD;AAAvB,AAAA,AAAAtD;AACK,AAAC2F,AAAexC,AAAiB,AAAA,AAAarF;;AADnDkC;;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGgB,AAAC4F,AAAgC,AAAA,AAAa9H;AAH9D,AAAA,AAKA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAA8B,AAAA,AAAK,AAAA,AAAG,AAAChB,AAAMsG,AACT,AAAA,AAAsBpJ;AADlC,AAGgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC4F,AAAc5F,AAAkBgC,AACID,AACPqH,AACIlH,AACA,AAACY,AAAMuF;AA3DjE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoDQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQkB,AAAA,AAAA,AAAA,AAAUU;AA5DpC,AAmEoB,AAAC5E,AAAM,AAAA,AAA2BnE,AAAG4D;AAnEzD,AAoEgB,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAO,AAAA,AAA2B9D,AAC1C,AAAA,AAAA8D,AAACxC,AAAgBmH,AAAU,AAAC3F,AAAMwF,AACpC,AAAA,AAAAxE,AAAA,AAAO,AAAA,AAA2B9D,AAChC,AAAA+J,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAjG,AAAA,AAAA,AAAAkG,AACgC,AAAA,AAAC1I,AAAoB,AAACwB,AAAMwF,AAE5B,AAAA,AAAChH,AAAqB,AAACwB,AAAMwF,AAE7B,AAAA,AAAChH,AAAuB,AAACwB,AAAMwF,AACtCG;AANzB,AAO6B,AACC,AAACxI,AAAOwI,AAAU,AAAA,AAAAuB;;AAClB,AAAA,AAAC/J,AAAO,AAAA,AAA2BD;;AACnC,AAAA,AAACC,AAAOP;;AAVtC,AAAA,AAAAqK,AAAAA,AAACE,AAAAA,AAAAA;AADH,AAYF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAoG,AAAM,AAAA,AAAApG,AAAA,AAAChD,AAAG2H,AAGK/I;AAHf,AAOmB,AAAM,AAAA,AAACoB,AAAE,AAAAoJ;AAAT,AACE,AAACnK,AAAaC;;AADhB;;AAPnB,AAAA,AAAAmK;AAAA,AASmB,AAAClK,AAAOP,AAAM,AAAA,AAAAyK;AA3FrC,AAAA,AAkFI,AAWE,AAAA7H,AAAA,AAAA8H;AAAA,AAAA,AAAA5H,AAAA,AAAA;AAAA,AAAA,AAAA4H,AAAAA;;AAAA,AAAA,AAAA3H,AAAA,AAAAC,AAAA0H;AAAA,AAAA,AAAA3H;AAAA,AAAA,AAAA2H,AAAA3H;AAAA,AAAA,AAAA,AAAAE,AAAAyH;AAAA,AAAAxH,AA0qEqC,AAAAkJ,AAAA1B;AA1qErCvH,AAAA,AAAAC,AAAAF;AAAAyH,AAAA,AAAArH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAyH,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAzH;AAAA,AAAA,AAAAK,AAAAN,AAAA0H,AAAM3G;AAAN,AAAA,AACY6G,AAAoB,AAAA,AAAA1G,AAACrD,AAAK,AAAA,AAAkBT,AAAG,AAAA,AAAU2D;AACzD8G,AAAoB,AAAC3J,AAAE,AAAA,AAAUiB,AAAmB,AAAA,AAAU4B;AAC9DI,AAAoB,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAH9E,AAAA,AAAA,AAAAiB,AAAAkH,AAAA,AAAA,AAAA,AAAA,AAAA,AAKU,AAAA,AAAsB,AAAA,AAAU1G,AAC9B,AAAA,AAAA,AAAC6F,AAAuB,AAAAtF,AAAK,AAAA,AAAOP;AAAZ,AAAA,AAAAO;AAAe,AAAA,AAAAJ,AAAA,AAAChD,AAAG2H;;AAAnBvE;;AANpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMY,AACwBsG,AAEtB,AAAA,AAAA,AAAA,AAAM,AAAA,AAAO7G,AACrB,AAAC+G,AAAAA,AAAAA,AAAkB/G,AAAAA,AAEnB,AAACgH,AAAkBhH,AACnB,AAAA,AAAA,AAAA,AAAM8G,AAGN,AAAI,AAAA,AAAO9G,AAET,AAACiH,AAAe,AAAC9K,AAAa,AAAC+K,AAAiB,AAAA,AAAUlH,AAC1D,AAAA,AAAI6G,AACF,AAAA,AAAI,AAAA,AAAC1J,AAAE0J,AAELA,AAGR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAK,AAAC5G,AAAI,AAAA,AAAOD,AACZ,AAAK8G,AACL,AAAC7G,AAAI4G;;AAFhB,AAIgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1I,AAAU9B,AAAkBgC,AACID,AACN4B,AACGzB;;AAP9C,AAAA;;AAzBJ,AAAA,AAAAoI,AAAA;;;;AAAA;;;;;AAAA,AAAAlH,AAAA,AAAAC,AAAAgH,AAAA,AAAAE,AAAA,AAAAhH,AAAA6G;;AAAA,AAAAhH,AAAA,AAAAC,AAAAgH,AAAA;;;AAAA,AAAA,AAAA7G,AAAA4G,AAAMzG;AAAN,AAAA,AACY6G,AAAoB,AAAA,AAAA1G,AAACrD,AAAK,AAAA,AAAkBT,AAAG,AAAA,AAAU2D;AACzD8G,AAAoB,AAAC3J,AAAE,AAAA,AAAUiB,AAAmB,AAAA,AAAU4B;AAC9DI,AAAoB,AAACtD,AAAI,AAAA,AAAckD,AAAG,AAACK,AAAQ,AAAA,AAAe9B;AAH9E,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAA,AAKU,AAAA,AAAsB,AAAA,AAAUE,AAC9B,AAAA,AAAA,AAAC6F,AAAuB,AAAAtF,AAAK,AAAA,AAAOP;AAAZ,AAAA,AAAAO;AAAe,AAAA,AAAAJ,AAAA,AAAChD,AAAG2H;;AAAnBvE;;AANpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMY,AACwBsG,AAEtB,AAAA,AAAA,AAAA,AAAM,AAAA,AAAO7G,AACrB,AAAC+G,AAAAA,AAAAA,AAAkB/G,AAAAA,AAEnB,AAACgH,AAAkBhH,AACnB,AAAA,AAAA,AAAA,AAAM8G,AAGN,AAAI,AAAA,AAAO9G,AAET,AAACiH,AAAe,AAAC9K,AAAa,AAAC+K,AAAiB,AAAA,AAAUlH,AAC1D,AAAA,AAAI6G,AACF,AAAA,AAAI,AAAA,AAAC1J,AAAE0J,AAELA,AAGR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAK,AAAC5G,AAAI,AAAA,AAAOD,AACZ,AAAK8G,AACL,AAAC7G,AAAI4G;;AAFhB,AAIgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC1I,AAAU9B,AAAkBgC,AACID,AACN4B,AACGzB;;AAhClD,AAAAqI,AAAA,AAAA7G,AAAA0G,AAyBI,AAAA;;;AAzBJ;;;;AAAA,AAAA;;AAAA,AAAA,AAAA9H,AAAQwG;;AAlLtB,AAAA,AAAA,AAAiBrC,AAEA,AAAA,AAACC,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AACD,AAAA,AAACA,AAED,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AAEDC,AACAC,AACAC,AAEa,AAAK9G;AAAL,AACX,AAAAyC,AAAA,AAAAqB,AAA0B,AAAA,AAACiD,AAAY/G;AAAvC,AAAA,AAAAyC;AAAA,AAAA,AAAAA,AAAWT;AAAX,AACE,AAACgF,AAAoC,AAAA,AAAOhF;;AAD9C;;AAEAhC;AAtBnB,AAuBgC,AAAKA;AAAL,AACb,AAAA,AAAA8D,AAAO,AAAA,AAAiB9D;AAAxB,AACG,AAAM,AAAA,AAAA,AAACiH,AAAiB,AAAA,AAAkBjH;AAA1C,AACE,AAAQ,AAAA,AAACkH,AAAalH;;AADxB;;AADH;;AAGAA;AA3BnB;AAqNA,AAAA,AAAO8K,AAAsBC;AAA7B,AACE,AAAMC,AAAc,AAAA,AAAM,AAAS,AAACC,AAAKF;AACnCG,AAAmB,AAAGF,AAAc,AAAa,AAAoBG;AACrEC,AAAW,AAAeC;AAFhC,AAGE,AAAIH,AAAmB,AAAA,AAAGE;;AAE9B,AAAA,AAAAE,AAAA,AAAAC,AAAUE;AAAV,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlL,AAAA,AAAAkL,AAAA,AAAA,AAAA,AAAA,AAAAjL,AAAAC,AAAAgL,AAAAA;AAAA,AAAA/K,AAAA+K,AAAA,AACWxJ;AADX,AAAAvB,AAAA+K,AAAA,AACyBhE;AADzB,AAAA,AAAA,AAEQQ,AAAQ,AAAA,AAAOhG;AACfsF,AAAW,AAAA,AAAatF;AACxB2J,AAAY,AAAI,AAAAzH,AAAKoD;AAAL,AAAA,AAAApD;AACK,AAAA,AAAelC;;AADpBkC;;AAEH,AAAA,AAAK,AAAA,AAAQsD,AACb,AAAA,AAAQA;AACrBuB,AAAW,AAACC;AARpB,AAAA,AAAAzC,AASI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAACqF,AAAKpE,AAEM,AAAA,AAAA,AAAA,AAAUuB,AAGhB,AAAA,AAAA,AAAA,AAAA,AACE,AAAA,AAACjI,AAAE6K,AAEH,AAAA,AAAMA,AACN,AAAA,AAAKA;AATnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAckB,AAACE,AAAqB7D;AAdxC,AAeM2D;AAxBV,AAAA,AAAsBD","names":["oc.web.components.ui.wrt/filter-by-query","user","query","complete-name","or__4126__auto__","cuerdas.core/includes?","cuerdas.core/lower","oc.web.components.ui.wrt/reset-search","s","cljs.core/reset!","oc.web.components.ui.wrt/sort-users","user-id","users","map__45762","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","self-user","other-users","p1__45761#","cljs.core/group-by","cljs.core._EQ_","sorted-other-users","cljs.core.sort_by","oc.lib.user/name-for","cljs.core/vec","cljs.core.remove","cljs.core/nil?","cljs.core.concat","oc.web.components.ui.wrt/dropdown-label","val","total","G__45769","cljs.core/Keyword","js/Error","p__45771","map__45772","oc.web.components.ui.wrt/remind-to","current-user-data","activity-data","users-list","slack-bot-data","wrt-share-base","wrt-share","cljs.core/merge","iter__4529__auto__","s__45775","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__45777","cljs.core/chunk-buffer","i__45776","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__45774","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","u","cljs.core/not","cljs.core.not_EQ_","cljs.core/deref","slack-user","cljs.core.keyword","cljs.core.merge","and__4115__auto__","cljs.core.swap_BANG_","cljs.core/zipmap","cljs.core/keys","cljs.core.repeat","oc.web.actions.activity.activity_share","cljs.core/vals","p__45781","map__45782","success","body","noticed-users","s__45785","b__45787","i__45786","iter__45784","p1__45770#","cljs.core/some","s__45790","b__45792","i__45791","iter__45789","oc.web.lib.utils/after","cljs.core/dissoc","p__45798","map__45799","oc.web.components.ui.wrt/remind-to-all","unopened-count","props","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","rum.core/build-defcs","js/React.createElement","p1__45805#","p1__45806#","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.ui.wrt/wrt","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/no-scroll-mixin","oc.web.mixins.ui/first-render-mixin","oc.web.mixins.ui/refresh-tooltips-mixin","org.martinklepsch.derivatives/get-ref","oc.web.actions.activity/request-reads-data","cljs.core/compare-and-set!","rum.core/ref-node","org-data","org.martinklepsch.derivatives/react","current-org-slug","is-author?","read-data*","read-data","rd","cljs.core.update","unreads","p1__45801#","cljs.core.filter","reads","p1__45802#","item-id","seen-users","seen-ids","cljs.core/set","cljs.core.map","unseen-users","all-users","read-count","lower-query","list-view","filtered-users","G__45810","p1__45803#","cljs.core/filterv","sorted-filtered-users","is-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","seen-percent","team-id","oc.web.lib.jwt/team-has-bot?","remind-all-users","p1__45804#","oc.web.lib.utils/event-inside?","oc.web.actions.nav-sidebar/hide-wrt","oc.web.lib.utils/class-set","oc.web.lib.utils/event-stop","oc.web.components.ui.small-loading/small-loading","oc.web.actions.ui-theme/computed-value","oc.web.actions.ui-theme/get-ui-theme-setting","oc.web.dispatcher.board_data","oc.web.actions.nav-sidebar/show-section-editor","G__45817","p1__45807#","oc.web.components.ui.dropdown-list/dropdown-list","p1__45808#","p1__45809#","s__45819","b__45821","i__45820","iter__45818","user-sending-notice","is-self-user?","oc.web.components.ui.user-avatar/user-avatar-image","oc.lib.user.name_for","cuerdas.core/capital","oc.web.lib.utils/time-since","oc.web.components.ui.wrt/under-middle-screen?","el","el-offset-top","js/$","fixed-top-position","js/document","win-height","js/window","rum.core/build-defc","p__45828","map__45829","oc.web.components.ui.wrt/wrt-count","rum.core/static","reads-count","cljs.core/map?","oc.web.actions.nav-sidebar/show-wrt","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.wrt\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.utils.activity :as au]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.actions.ui-theme :as ui-theme]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.components.ui.dropdown-list :refer (dropdown-list)]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(defn- filter-by-query [user query]\n  (let [complete-name (or (:name user) (str (:first-name user) \" \" (:last-name user)))]\n    (or (string/includes? (string/lower (:email user)) query)\n        (string/includes? (string/lower complete-name) query)\n        (string/includes? (string/lower (:first-name user)) query)\n        (string/includes? (string/lower (:last-name user)) query))))\n\n(defn- reset-search [s]\n  (reset! (::search-active s) false)\n  (reset! (::query s) \"\")\n  (reset! (::search-focused s) false))\n\n(defn- sort-users [user-id users]\n  (let [{:keys [self-user other-users]}\n         (group-by #(if (= (:user-id %) user-id) :self-user :other-users) users)\n        sorted-other-users (sort-by user-lib/name-for other-users)]\n    (vec (remove nil? (concat self-user sorted-other-users)))))\n\n(defn dropdown-label [val total]\n  (case val\n    :all (str \"Everyone (\" total \")\")\n    :seen \"Viewed\"\n    :unseen \"Unopened\"))\n\n(defn- remind-to [s {:keys [current-user-data activity-data users-list slack-bot-data]}]\n  (let [wrt-share-base {:note \"When you have a moment, please check out this post.\"\n                        :subject (str \"You may have missed: \" (:headline activity-data))}\n        wrt-share (apply merge\n                   (for [u users-list\n                        :when (and (not (:seen u))\n                                   (not= (:user-id current-user-data) (:user-id u))\n                                   (not (get @(::sending-notice s) (:user-id u))))\n                        :let [slack-user (get (:slack-users u) (keyword (:slack-org-id slack-bot-data)))]]\n                    {(:user-id u)\n                     (merge wrt-share-base\n                      (if (and slack-user\n                               (= (:notification-medium u) \"slack\"))\n                        {:medium \"slack\"\n                         :channel {:slack-org-id (:slack-org-id slack-user)\n                                   :channel-id (:id slack-user)\n                                   :channel-name \"Wut\"\n                                   :type \"user\"}}\n                        {:medium \"email\"\n                         :to [(:email u)]}))}))]\n    (swap! (::sending-notice s) merge (zipmap (keys wrt-share) (repeat (count wrt-share) :loading)))\n    (reset! (::show-remind-all-bt s) false)\n    (activity-actions/activity-share activity-data (vals wrt-share)\n     (fn [{:keys [success body]}]\n       (reset! (::show-remind-all-bt s) true)\n       (if success\n         (let [noticed-users (apply merge\n                              (for [user-id (keys wrt-share)\n                                    :let [u (some #(when (= (:user-id %) user-id) %) users-list)\n                                          slack-user (get (:slack-users u) (keyword (:slack-org-id slack-bot-data)))]]\n                               {(:user-id u)\n                                (if (and slack-user\n                                         (= (:notification-medium u) \"slack\"))\n                                  (if (and slack-user\n                                           (seq (:display-name slack-user))\n                                           (not= (:display-name slack-user) \"-\"))\n                                    (str \"Sent to: @\" (:display-name slack-user) \" (Slack)\")\n                                    (str \"Sent via Slack\"))\n                                  (str \"Sent to: \" (:email u)))}))]\n\n           (swap! (::sending-notice s) merge noticed-users))\n         (swap! (::sending-notice s) merge\n          (apply merge\n           (for [user-id (keys wrt-share)]\n            (do\n              (utils/after 5000 #(swap! (::sending-notice s) dissoc user-id))\n              {user-id \"An error occurred, please retry...\"})))))))))\n\n(defn- remind-to-all [s {:keys [unopened-count] :as props}]\n  (let [alert-data {:emoji-icon \"\ud83d\udc4c\"\n                    :action \"remind-all-unseens\"\n                    :message (str \"Do you want to send a reminder to everyone that hasn\u2019t opened it? (\" unopened-count \" users)\")\n                    :link-button-title \"No\"\n                    :link-button-cb #(alert-modal/hide-alert)\n                    :solid-button-style :red\n                    :solid-button-title \"Yes, remind them\"\n                    :solid-button-cb (fn []\n                                      (remind-to s props)\n                                      (alert-modal/hide-alert))}]\n    (alert-modal/show-alert alert-data)))\n\n(rum/defcs wrt < rum/reactive\n                 ;; Derivatives\n                 (drv/drv :wrt-read-data)\n                 (drv/drv :wrt-activity-data)\n                 (drv/drv :current-user-data)\n                 (drv/drv :org-slug)\n                 ;; Locals\n                 (rum/local false ::search-active)\n                 (rum/local false ::search-focused)\n                 (rum/local \"\" ::query)\n                 (rum/local false ::list-view-dropdown-open)\n                 (rum/local :all ::list-view) ;; :seen :unseen\n                 (rum/local {} ::sending-notice)\n                 (rum/local true ::show-remind-all-bt)\n\n                 mixins/no-scroll-mixin\n                 mixins/first-render-mixin\n                 mixins/refresh-tooltips-mixin\n\n                 {:will-mount (fn [s]\n                   (when-let [activity-data @(drv/get-ref s :wrt-activity-data)]\n                     (activity-actions/request-reads-data (:uuid activity-data)))\n                   s)\n                  :after-render (fn [s]\n                   (when @(::search-active s)\n                      (when (compare-and-set! (::search-focused s) false true)\n                        (.focus (rum/ref-node s :search-field))))\n                   s)}\n  [s org-data]\n  (let [activity-data (drv/react s :wrt-activity-data)\n        current-user-data (drv/react s :current-user-data)\n        current-org-slug (drv/react s :org-slug)\n        is-author? (:publisher? activity-data)\n        read-data* (drv/react s :wrt-read-data)\n        read-data (as-> read-data* rd\n                   (update rd :unreads (fn [unreads]\n                                         (if is-author?\n                                           (filter #(not= (:user-id %) (:user-id current-user-data)) unreads)\n                                           unreads)))\n                   (update rd :reads (fn [reads]\n                                       (if is-author?\n                                         (filter #(not= (:user-id %) (:user-id current-user-data)) reads)\n                                         reads))))\n        item-id (:uuid activity-data)\n        seen-users (vec (sort-by user-lib/name-for (:reads read-data)))\n        seen-ids (set (map :user-id seen-users))\n        unseen-users (vec (sort-by user-lib/name-for (:unreads read-data)))\n        all-users (sort-by user-lib/name-for (concat seen-users unseen-users))\n        read-count (:count read-data)\n        query (::query s)\n        lower-query (string/lower @query)\n        list-view (::list-view s)\n        filtered-users (case @list-view\n                         :all (filterv #(filter-by-query % (string/lower (or @query \"\"))) all-users)\n                         :seen seen-users\n                         :unseen unseen-users)\n        sorted-filtered-users (sort-users (:user-id current-user-data) filtered-users)\n        is-mobile? (responsive/is-tablet-or-mobile?)\n        seen-percent (int (* (/ (count seen-users) (count all-users)) 100))\n        team-id (:team-id org-data)\n        slack-bot-data (first (jwt/team-has-bot? team-id))\n        remind-all-users (filterv #(and (not (get @(::sending-notice s) (:user-id %)))\n                                        (not= (:user-id %) (:user-id current-user-data)))\n                          unseen-users)]\n    [:div.wrt-popup-container\n      {:on-click #(if @(::list-view-dropdown-open s)\n                    (when-not (utils/event-inside? % (rum/ref-node s :wrt-pop-up-tabs))\n                      (reset! (::list-view-dropdown-open s) false))\n                    (when-not (utils/event-inside? % (rum/ref-node s :wrt-popup))\n                      (nav-actions/hide-wrt)))}\n      [:button.mlb-reset.modal-close-bt\n        {:on-click nav-actions/hide-wrt}]\n      [:div.wrt-popup\n        {:class (utils/class-set {:loading (not (:reads read-data))})\n         :ref :wrt-popup\n         :on-click #(when @(::list-view-dropdown-open s)\n                      (when-not (utils/event-inside? % (rum/ref-node s :wrt-pop-up-tabs))\n                        (reset! (::list-view-dropdown-open s) false))\n                        (utils/event-stop %))}\n        [:div.wrt-popup-header\n          [:button.mlb-reset.mobile-close-bt\n            {:on-click nav-actions/hide-wrt}]\n          [:div.wrt-popup-header-title\n            \"Post analytics\"]]\n        ;; Show a spinner on mobile if no data is loaded yet\n        (if-not (:reads read-data)\n          (small-loading)\n          [:div.wrt-popup-inner\n            [:div.wrt-chart-container\n              [:div.wrt-chart\n                [:svg\n                  {:width \"116px\"\n                   :height \"116px\"\n                   :viewBox \"0 0 116 116\"\n                   :version \"1.1\"\n                   :xmlns \"http://www.w3.org/2000/svg\"\n                   :xmlnsXlink \"http://www.w3.org/1999/xlink\"}\n                  [:circle.wrt-donut-ring\n                    {:cx \"58px\"\n                     :cy \"58px\"\n                     :r \"50px\"\n                     :fill \"transparent\"\n                     :stroke (if (= (ui-theme/computed-value (ui-theme/get-ui-theme-setting)) :dark) \"#DDDDDD\" \"#ECECEC\")\n                     :stroke-width \"16px\"}]\n                  [:circle.wrt-donut-segment\n                    {:cx \"58\"\n                     :cy \"58\"\n                     :r \"50\"\n                     :fill \"transparent\"\n                     :stroke \"#6833F1\"\n                     :stroke-width \"16\"\n                     :class (when @(:first-render-done s) (str \"wrt-donut-segment-\" seen-percent))}]\n                  [:g.wrt-chart-text\n                    [:text.wrt-chart-number\n                      {:x \"50%\" :y \"50%\"}\n                      (str seen-percent \"%\")]]]]\n              [:div.wrt-chart-label\n                (cond \n                  (= (count all-users) (count seen-users))\n                  \"\ud83d\udc4f Everyone has seen this post!\"\n                  (= 1 (count seen-users))\n                  \"1 person has viewed this post.\"\n                  (zero? (count seen-users))\n                  \"No one has viewed this post.\"\n                  :else\n                  (str (count seen-users)\n                   \" of \"\n                   (count all-users)\n                   \" people viewed this \"\n                   (when (:private-access? read-data)\n                     \"private \")\n                   \"post.\"))\n                (when (and (:private-access? read-data)\n                           (dis/board-data current-org-slug (:board-slug activity-data)))\n                  [:button.mlb-reset.manage-section-bt\n                    {:on-click #(nav-actions/show-section-editor (:board-slug activity-data))}\n                    \"Manage team members?\"])\n                (when (and (> (count remind-all-users) 1)\n                           @(::show-remind-all-bt s))\n                  [:button.mlb-reset.send-to-all-bt\n                    {:on-click #(remind-to-all s {:activity-data activity-data\n                                                  :current-user-data current-user-data\n                                                  :users-list remind-all-users\n                                                  :slack-bot-data slack-bot-data\n                                                  :unopened-count (count unseen-users)})\n                     :data-toggle (when-not is-mobile? \"tooltip\")\n                     :data-placement \"top\"\n                     :title \"Send a reminder to everyone that hasn\u2019t opened it\"}\n                    \"Send reminders\"])]]\n            [:div.wrt-popup-tabs\n              {:ref :wrt-pop-up-tabs}\n              [:div.wrt-popup-tabs-select.oc-input\n                {:on-click #(swap! (::list-view-dropdown-open s) not)\n                 :class (when @(::list-view-dropdown-open s) \"active\")}\n                (dropdown-label @list-view (count all-users))]\n              (when @(::list-view-dropdown-open s)\n                (dropdown-list {:items [{:value :all\n                                         :label (dropdown-label :all (count all-users))}\n                                        {:value :seen\n                                         :label (dropdown-label :seen (count all-users))}\n                                        {:value :unseen\n                                         :label (dropdown-label :unseen (count all-users))}]\n                                 :value @list-view\n                                 :on-change #(do\n                                              (reset! list-view (:value %))\n                                              (reset! (::list-view-dropdown-open s) false)\n                                              (reset! query \"\"))}))]\n            (when (= @list-view :all)\n              [:div.wrt-popup-search-container.group\n                [:input.wrt-popup-query.oc-input\n                  {:value @query\n                   :type \"text\"\n                   :placeholder \"Search by name...\"\n                   :ref :search-field\n                   :on-key-up #(when (= (.-key %) \"Escape\")\n                                 (reset-search s))\n                   :on-change #(reset! query (.. % -target -value))}]])\n            [:div.wrt-popup-list\n              (for [u sorted-filtered-users\n                    :let [user-sending-notice (get @(::sending-notice s) (:user-id u))\n                          is-self-user?       (= (:user-id current-user-data) (:user-id u))\n                          slack-user          (get (:slack-users u) (keyword (:slack-org-id slack-bot-data)))]]\n                [:div.wrt-popup-list-row\n                  {:key (str \"wrt-popup-row-\" (:user-id u))\n                   :class (utils/class-set {:seen (and (:seen u) (= @list-view :all))\n                                            :sent user-sending-notice})}\n                  [:div.wrt-popup-list-row-avatar\n                    {:class (when (:seen u) \"seen\")}\n                    (user-avatar-image u)]\n                  [:div.wrt-popup-list-row-name\n                    (user-lib/name-for u)\n                    (when is-self-user?\n                      \" (you)\")]\n                  [:div.wrt-popup-list-row-seen\n                    (if (:seen u)\n                      ;; Show time the read happened\n                      (string/capital (string/lower (utils/time-since (:read-at u))))\n                      (if user-sending-notice\n                        (if (= user-sending-notice :loading)\n                          \"Sending...\"\n                          user-sending-notice)\n                        \"Unopened\"))]\n                  ;; Send reminder button\n                  (when (and (not (:seen u))\n                             (not is-self-user?)\n                             (not user-sending-notice))\n                    [:button.mlb-reset.send-reminder-bt\n                      {:on-click #(remind-to s {:activity-data activity-data\n                                                :current-user-data current-user-data\n                                                :users-list [u]\n                                                :slack-bot-data slack-bot-data})}\n                      \"Remind\"])])]])]]))\n\n(defn- under-middle-screen? [el]\n  (let [el-offset-top (aget (.offset (js/$ el)) \"top\")\n        fixed-top-position (- el-offset-top (.-scrollTop (.-scrollingElement js/document)))\n        win-height (.-innerHeight js/window)]\n    (>= fixed-top-position (/ win-height 2))))\n\n(rum/defc wrt-count < rum/static\n  [{:keys [activity-data read-data]}]\n  (let [item-id (:uuid activity-data)\n        is-author? (:publisher? activity-data)\n        reads-count (if (and is-author?\n                             (:last-read-at activity-data))\n                     (dec (:count read-data))\n                     (:count read-data))\n        is-mobile? (responsive/is-tablet-or-mobile?)]\n    (when (map? read-data)\n      [:div.wrt-count-container\n        {:data-toggle (when-not is-mobile? \"tooltip\")\n         :data-placement \"top\"\n         :data-container \"body\"\n         :title (cond\n                  (= reads-count 1)\n                  \"1 person viewed\"\n                  (pos? reads-count)\n                  (str reads-count \" people viewed\")\n                  :else\n                  \"No views yet\")}\n        [:div.wrt-count\n          {:ref :wrt-count\n           :on-click #(nav-actions/show-wrt item-id)}\n          reads-count]])))\n"]}