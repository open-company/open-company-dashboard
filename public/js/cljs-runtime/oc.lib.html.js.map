{"version":3,"sources":["oc/lib/html.cljc"],"mappings":";AAMA,AAAA,AAAOA,AAAoBC;AAA3B,AACE,AAAA,AAAMC;AAAN,AAOK,AAAMC,AAAM,AAACC,AAAK,AAAA,AAAA,AAAaH;AACzBI,AAAI,AAACC,AAAQ,AAACF,AAAKF,AAAmBC;AAD5C,AAAA,AAAA,AAAA,AAEaE,AACH,AAAUA;;AAE3B,AAAA,AAAOE,AAAKC;AAAZ,AAIM,AAACJ,AAAKI;;AAEZ,AAAA,AAAOC,AAAUD;AAAjB,AAIM,AAAWA;;AAEjB,AAAA,AAAOE,AAAWC;AAAlB,AAIKA;;AAEL;;;;;;;AAAA,AAAMC,AAMHC;AANH,AAOE,AAAAC,AAA6C,AAACd,AAAmBa;AAAjEC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAOM;AAAP,AAAAF,AAAAJ,AAAA,AAAwBO;AAClBC,AAAM,AAAA,AAACC;AADb,AAEE,AAAAC,AAAiBJ;AAAjB,AAAA,AAAA,AAAUK;;AAAV,AAAA,AAAA,AAAAD,AAAUC;AAAV,AACE,AAAMjB,AAAwC,AAAMa,AAAUI;AACxDC,AAAI,AAACnB,AAAIC;AADf,AAEE,AAAA,AAAAW,AAAWG;AAAX;AAAA,AACE,AAAI,AAAA,AAACK,AAAE,AAACC,AAAU,AAACnB,AAASD;AAC1B,AAAMqB,AAAM,AAACnB,AAAU,AAAA,AAAOgB;AACxBI,AAAO,AAACpB,AAAU,AAAA,AAAOgB;AAD/B,AAEE,AAAM,AAAK,AAAA,AAAAP,AAACY,AAAKT,AACN,AAAI,AAAIO,AAAM,AAAA,AAAGC,AACb,AAAIA,AAAO,AAAA,AAAGD;AAF7B,AAGE,AAAA,AAAA,AAAA,AAAA,AAACG,AAAOV,AAEM,AAAI,AAAA,AAAOI,AACT,AAAA,AAAOA,AACP,AAAA,AAAOA;;AAPzB;;AAQF,AAAA,AAAA,AAAA,AAACM,AAAOV,AAAa,AAAA,AAAOI,AAAkC,AAAA,AAAOA;;;;AAf7E,AAAA,AAAA,AAAUD;;;;AAAV;;;;AAFF,AAAAN,AAkBGG;;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKW","names":["oc.lib.html/thumbnail-elements","body","thumbnail-selector","$body","js/$","els","cljs.core.js__GT_clj","oc.lib.html/$el","el","oc.lib.html/tag-name","oc.lib.html/read-size","size","oc.lib.html/first-body-thumbnail","html-body","map__48159","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/deref","els-count","thumb-els","found","cljs.core.atom","n__4613__auto__","el-num","$el","cljs.core._EQ_","cuerdas.core/lower","width","height","cljs.core/not","cljs.core/reset!","oc.lib.html/allowed-block-elements"],"sourcesContent":["(ns oc.lib.html\n  \"Functions related to processing HTML.\"\n  (:require [cuerdas.core :as str]\n            #?(:clj [jsoup.soup :as soup]))\n  #?(:clj (:import [org.owasp.html HtmlPolicyBuilder Sanitizers])))\n\n(defn- thumbnail-elements [body]\n  (let [thumbnail-selector \"img:not(.emojione):not([data-media-type='image/gif']), iframe\"]\n    #?(:clj\n       (let [parsed-body (soup/parse body)\n             els (.select parsed-body thumbnail-selector)]\n        {:elements els\n         :count (count els)})\n       :cljs\n       (let [$body (js/$ (str \"<div>\" body \"</div>\"))\n             els (js->clj (js/$ thumbnail-selector $body))]\n         {:elements els\n          :count (.-length els)}))))\n\n(defn- $el [el]\n  #?(:clj\n      el\n     :cljs\n      (js/$ el)))\n\n(defn- tag-name [el]\n  #?(:clj\n      (.tagName el)\n     :cljs\n      (.-tagName el)))\n\n(defn- read-size [size]\n  #?(:clj\n     (Integer/parseInt (re-find #\"\\A-?\\d+\" size))\n     :cljs\n     size))\n\n(defn first-body-thumbnail\n  \"\n  Given an entry body get the first thumbnail available.\n  Thumbnail type: image, video or chart.\n  This rely on the similitudes between jQuery and soup parsed objects like the attr function.\n  \"\n  [html-body]\n  (let [{els-count :count thumb-els :elements} (thumbnail-elements html-body)\n        found (atom nil)]\n    (dotimes [el-num els-count]\n      (let [el #?(:clj (nth thumb-els el-num) :cljs (aget thumb-els el-num))\n            $el ($el el)]\n        (when-not @found\n          (if (= (str/lower (tag-name el)) \"img\")\n            (let [width (read-size (.attr $el \"width\"))\n                  height (read-size (.attr $el \"height\"))]\n              (when (and (not @found)\n                         (or (<= width (* height 2))\n                             (<= height (* width 2))))\n                (reset! found\n                  {:type \"image\"\n                   :thumbnail (if (.attr $el \"data-thumbnail\")\n                                (.attr $el \"data-thumbnail\")\n                                (.attr $el \"src\"))})))\n            (reset! found {:type (.attr $el \"data-media-type\") :thumbnail (.attr $el \"data-thumbnail\")})))))\n    @found))\n\n(def allowed-block-elements [\"span\" \"img\" \"a\" \"iframe\" \"pre\" \"code\" \"div\" \"mark\"])\n\n#?(:clj\n   (def user-input-html-policy\n     (let [string-array     (fn [sa] (into-array java.lang.String sa))\n           iframe-src-regex #\"^https://((www\\.)?youtube.com|player.vimeo.com|(www\\.)?loom.com)/.*\"]\n       (.. (HtmlPolicyBuilder.)\n           ;; -- common --\n           (allowCommonBlockElements)\n           (allowCommonInlineFormattingElements)\n           (allowStyling)\n           (allowStandardUrlProtocols)\n           (allowElements (string-array allowed-block-elements))\n           ;; -- span --\n           (allowWithoutAttributes (string-array [\"span\"]))\n           (allowAttributes (string-array [\"class\"\n                                           \"data-first-name\"\n                                           \"data-last-name\"\n                                           \"data-slack-username\"\n                                           \"data-user-id\"\n                                           \"data-email\"\n                                           \"data-avatar-url\"\n                                           \"data-found\"\n                                           \"data-auto-link\"\n                                           \"data-href\"]))\n             (onElements (string-array [\"span\"]))\n           ;; -- images --\n           (allowAttributes (string-array [\"src\"\n                                           \"alt\"\n                                           \"class\"\n                                           \"data-media-type\"\n                                           \"data-thumbnail\"]))\n             (onElements (string-array [\"img\"]))\n           ;; -- anchors / links --\n           (allowAttributes (string-array [\"href\"\n                                           \"target\"]))\n             (onElements (string-array [\"a\"]))\n             (requireRelNofollowOnLinks)\n           ;; -- iframes (embeds) --\n           (allowAttributes (string-array [\"src\"]))\n             (matching iframe-src-regex)\n             (onElements (string-array [\"iframe\"]))\n           (allowAttributes (string-array [\"class\"\n                                           \"width\"\n                                           \"height\"\n                                           \"data-media-type\"\n                                           \"frameborder\"\n                                           \"webkitallowfullscreen\"\n                                           \"mozallowfullscreen\"\n                                           \"allowfullscreen\"\n                                           \"data-thumbnail\"\n                                           \"data-video-type\"\n                                           \"data-video-id\"]))\n             (onElements (string-array [\"iframe\"]))\n            ;; -- pre --\n           (allowAttributes (string-array [\"class\"\n                                           \"data-disable-toolbar\"]))\n             (onElements (string-array [\"pre\"]))\n           ;; -- code --\n           (allowAttributes (string-array [\"class\"\n                                           \"data-disable-toolbar\"]))\n             (onElements (string-array [\"code\"]))\n           ;; -- div for polls --\n           (allowAttributes (string-array [\"class\"\n                                           \"contenteditable\"\n                                           \"data-media-type\"\n                                           \"data-poll-id\"\n                                           \"data-question\"\n                                           \"data-disable-toolbar\"\n                                           \"id\"]))\n             (onElements (string-array [\"div\"]))\n           ;; -- Mark for highlighter button --\n           (allowAttributes (string-array [\"class\"]))\n             (onElements (string-array [\"mark\"]))\n           (toFactory)))))\n\n#?(:clj\n   (defn sanitize-html\n     \"Sanitizes HTML content assumed to have been created by a (untrusted) user.\"\n     [html-str]\n     (.sanitize user-input-html-policy html-str)\n     ))\n\n#?(:clj\n   (defn strip-html-tags\n     \"Reduces an html string to only its textual content, removing all tags. Takes\n     optional args:\n       - `:decode-entities?` if true, will decode HTML entities (e.g. &#64;)\"\n     [html-str & {:keys [decode-entities?] :as opts}]\n     (let [policy    (.toFactory (HtmlPolicyBuilder.))\n           sanitized (.sanitize policy html-str)]\n       (if-not decode-entities?\n         sanitized\n         (.text (soup/parse sanitized))))))\n"]}