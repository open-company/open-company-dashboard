{"version":3,"sources":["oc/web/components/user_info_modal.cljs"],"mappings":"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","names":["rum.core/build-defcs","p__44528","map__44529","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","p1__44526#","attrs44540","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","attrs44537","attrs44538","attrs44539","oc.web.components.user-info-modal/user-info-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","s","user-data","org-data","my-profile?","and__4115__auto__","oc.web.lib.jwt/jwt","member?","team-role","oc.web.utils.user.get_user_type","panel-stack","org.martinklepsch.derivatives/react","followers-publishers-count","followers-count","oc.web.lib.utils/event-inside?","rum.core/ref-node","oc.web.actions.nav-sidebar/close-all-panels","cljs.core/count","oc.web.actions.nav-sidebar/show-user-settings","G__44541","G__44542","oc.web.components.ui.user-avatar/user-avatar-image","oc.lib.user.name_for","cljs.core.not_EQ_","p1__44527#","oc.web.actions.nav_sidebar.nav_to_author_BANG_","oc.web.urls.contributions","cljs.core/some","cljs.core/seq","cljs.core/vals","cljs.core/select-keys","temp__5735__auto__","timezone-location-string","oc.web.utils.user.timezone_location_string","iter__4529__auto__","s__44544","cljs.core/LazySeq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__44546","cljs.core/chunk-buffer","i__44545","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__44543","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","s__44558","b__44560","i__44559","iter__44557","slack-user","clojure.string/starts-with?","cljs.core.filter","s__44548","b__44550","i__44549","vec__44551","cljs.core.nth","iter__44547","vec__44554","s__44562","b__44564","i__44563","vec__44565","iter__44561","vec__44568","k","v","cljs.core/name","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.user-info-modal\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [clojure.string :as string]\n            [oc.web.lib.utils :as utils]\n            [oc.lib.user :as lib-user]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.urls :as oc-urls]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(rum/defcs user-info-modal < rum/reactive\n                             (drv/drv :panel-stack)\n                             (drv/drv :followers-publishers-count)\n  [s {:keys [user-data org-data]}]\n  (let [my-profile? (and (jwt/jwt)\n                         (:self? user-data))\n        member? (:member? org-data)\n        team-role (when member? (user-utils/get-user-type user-data org-data))\n        panel-stack (drv/react s :panel-stack)\n        followers-publishers-count (drv/react s :followers-publishers-count)\n        followers-count (get followers-publishers-count (:user-id user-data))]\n    [:div.user-info-modal\n      {:on-click #(when-not (utils/event-inside? % (rum/ref-node s :user-info))\n                    (nav-actions/close-all-panels))}\n      [:button.mlb-reset.modal-close-bt\n        {:on-click nav-actions/close-all-panels}]\n      [:div.user-info\n        {:ref :user-info}\n        [:div.user-info-header\n          [:div.user-info-header-title\n            (if my-profile? \"My profile\" \"Profile\")]\n          (when (> (count panel-stack) 1)\n            [:button.mlb-reset.cancel-bt\n              {:on-click #(nav-actions/show-user-settings nil)}\n              \"Back\"])\n          (when my-profile?\n            [:button.mlb-reset.save-bt\n              {:on-click #(nav-actions/show-user-settings :profile)}\n              \"Edit profile\"])]\n        [:div.user-info-body\n          (user-avatar-image user-data {:preferred-avatar-size 240})\n          [:div.user-info-name\n            (lib-user/name-for user-data)]\n          (when (:title user-data)\n            [:div.user-info-title\n              (:title user-data)])\n          (when (pos? followers-count)\n            [:div.user-info-followers-count\n              (str followers-count \" follower\" (when (not= followers-count 1) \"s\"))])\n          (when member?\n            [:button.mlb-reset.view-posts-bt\n              {:on-click #(do\n                            (nav-actions/close-all-panels)\n                            (nav-actions/nav-to-author! % (:user-id user-data) (oc-urls/contributions (:user-id user-data))))}\n              (if my-profile?\n                \"View my posts\"\n                \"View posts\")])\n          (when (some seq (vals (-> user-data (select-keys [:location :timezone :email :profiles :slack-users]))))\n            [:div.user-info-about\n              (when (:blurb user-data)\n                [:p.user-info-about-blurb\n                  (:blurb user-data)])\n              (when-let [timezone-location-string (user-utils/timezone-location-string user-data true)]\n                [:div.user-info-about-location\n                  timezone-location-string])\n              (when (:email user-data)\n                [:div.user-info-about-email\n                  [:a\n                    {:href (str \"mailto:\" (:email user-data))\n                     :target \"_blank\"}\n                    (:email user-data)]])\n              (when (:slack-users user-data)\n                (for [slack-user (vals (:slack-users user-data))\n                      :when (and (seq (:display-name slack-user))\n                                 (not= (:display-name slack-user) \"-\"))]\n                  [:div.user-info-about-slack\n                    {:key (str \"slack-user-\" (:slack-org-id slack-user) \"-\" (:id slack-user))}\n                    (if (string/starts-with? (:display-name slack-user) \"@\")\n                      (:display-name slack-user)\n                      (str \"@\" (:display-name slack-user)))]))\n              (when (seq (filter seq (vals (:profiles user-data))))\n                [:div.user-info-about-profiles\n                  (for [[k v] (:profiles user-data)\n                        :when (seq v)]\n                    [:a\n                      {:class (name k)\n                       :key (str \"profile-\" (name k))\n                       :target \"_blank\"\n                       :href (if (or (string/starts-with? v \"http\")\n                                     (string/starts-with? v \"//\"))\n                               v\n                               (str \"https://\" v))}])])])]]]))\n"]}