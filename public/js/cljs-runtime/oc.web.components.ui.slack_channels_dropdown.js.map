{"version":3,"sources":["oc/web/components/ui/slack_channels_dropdown.cljs"],"mappings":"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","names":["oc.web.components.ui.slack-channels-dropdown/filter-team-channels","channels","s","look-for","cuerdas.core/lower","cuerdas.core/starts-with?","cuerdas.core/strip-prefix","p1__46188#","cljs.core/filterv","cuerdas.core/includes?","rum.core/build-defcs","p__46198","map__46199","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","p1__46191#","sablono.util/join-classes","sablono.interpreter/create-element","p1__46192#","sablono.interpreter/interpret","oc.web.components.ui.slack-channels-dropdown/slack-channels-dropdown","rum.core.local","rum.core/reactive","oc.web.mixins.ui.on_click_out","e","cljs.core/deref","cljs.core/reset!","org.martinklepsch.derivatives.drv","initial-value","cljs.core.nth","cljs.core/not","org.martinklepsch.derivatives/get-ref","temp__5735__auto__","team-data","oc.web.dispatcher/dispatch!","o","disabled","on-change","on-intermediate-change","data","slack-teams","org.martinklepsch.derivatives/react","oc.web.lib.utils/event-stop","or__4126__auto__","oc.web.lib.utils/after","cljs.core/fn?","G__46205","iter__4529__auto__","s__46207","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__46209","cljs.core/chunk-buffer","i__46208","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46206","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","t","chs","and__4115__auto__","show-slack-team-name","s__46222","b__46224","i__46223","p1__46193#","iter__46221","s__46234","b__46236","i__46235","iter__46233","c","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.slack-channels-dropdown\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [cuerdas.core :as string]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :refer (on-click-out)]))\n\n(defn filter-team-channels [channels s]\n  (let [look-for (string/lower\n                   (if (string/starts-with? s \"#\")\n                     (string/strip-prefix s \"#\")\n                     s))]\n    (filterv #(string/includes? (string/lower (:name %)) look-for) channels)))\n\n(rum/defcs slack-channels-dropdown < (rum/local nil ::show-channels-dropdown)\n                                     (rum/local nil ::field-value)\n                                     (rum/local nil ::team-channels-requested)\n                                     (rum/local \"\" ::slack-channel)\n                                     (rum/local false ::typing)\n                                     rum/reactive\n                                     (on-click-out (fn [s e]\n                                      (when @(::show-channels-dropdown s)\n                                       (reset! (::show-channels-dropdown s) false))))\n                                     (drv/drv :team-data)\n                                     (drv/drv :team-channels)\n                                     {:will-mount (fn [s]\n                                       (let [initial-value (:initial-value (nth (:rum/args s) 0))]\n                                          (reset! (::slack-channel s) initial-value))\n                                       (when (and (not @(drv/get-ref s :team-channels))\n                                                  (not @(::team-channels-requested s)))\n                                         (when-let [team-data @(drv/get-ref s :team-data)]\n                                           (reset! (::team-channels-requested s) true)\n                                           (dis/dispatch! [:channels-enumerate (:team-id team-data)])))\n                                       s)\n                                      :did-remount (fn [o s]\n                                       (when (and (not @(drv/get-ref s :team-channels))\n                                                  (not @(::team-channels-requested s)))\n                                         (when-let [team-data @(drv/get-ref s :team-data)]\n                                           (reset! (::team-channels-requested s) true)\n                                           (dis/dispatch! [:channels-enumerate (:team-id team-data)])))\n                                       s)}\n  [s {:keys [disabled initial-value on-change on-intermediate-change] :as data}]\n  (let [slack-teams (drv/react s :team-channels)]\n    [:div.slack-channels-dropdown\n      {:class (if disabled \"disabled\" \"\")\n       :on-click #(when-not disabled\n                    (reset! (::typing s) false)\n                    (reset! (::show-channels-dropdown s) (not @(::show-channels-dropdown s)))\n                    (utils/event-stop %))}\n      [:input.board-edit-slack-channel.oc-input\n        {:value (or @(::slack-channel s) \"\")\n         :placeholder (if disabled \"Not connected\" \"Select a channel...\")\n         :on-focus (fn []\n                    (utils/after\n                     100\n                     #(do (reset! (::typing s) false) (reset! (::show-channels-dropdown s) true))))\n         :on-change #(do\n                       (reset! (::typing s) true)\n                       (when (fn? on-intermediate-change)\n                         (on-intermediate-change (.. % -target -value)))\n                       (reset! (::slack-channel s) (.. % -target -value)))\n         :disabled disabled}]\n      (when @(::show-channels-dropdown s)\n        [:div.slack-channels-dropdown-list\n          (for [t slack-teams\n                :let [chs (if (and @(::typing s) @(::slack-channel s))\n                            (filter-team-channels (:channels t) @(::slack-channel s))\n                            (:channels t))\n                      show-slack-team-name (and (> (count slack-teams) 1)\n                                                (pos? (count chs)))]]\n            [:div.slack-team\n              {:class (when show-slack-team-name \"show-slack-name\")\n               :key (str \"slack-chs-dd-\" (:slack-org-id t))}\n              (when show-slack-team-name\n                [:div.slack-team-name (:name t)])\n              (for [c chs]\n               [:div.channel.group\n                 {:value (:id c)\n                  :key (str \"slack-chs-dd-\" (:slack-org-id t) \"-\" (:id c))\n                  :on-click #(do\n                                (on-change t c)\n                                (utils/event-stop %)\n                                (reset! (::slack-channel s) (str \"#\" (:name c)))\n                                (reset! (::show-channels-dropdown s) false)\n                                (reset! (::typing s) false))}\n                  [:span.ch-prefix \"#\"]\n                  [:span.ch (:name c)]])])])]))"]}