{"version":3,"sources":["oc/web/components/ui/alert_modal.cljs"],"mappings":"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","names":["oc.web.components.ui.alert-modal/show-alert","modal-data","oc.web.dispatcher/dispatch!","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/dismiss-modal","oc.web.components.ui.alert-modal/close-clicked","s","cljs.core/reset!","oc.web.lib.utils/after","oc.web.components.ui.alert-modal/link-button-clicked","alert-modal","e","oc.web.lib.utils/event-stop","cljs.core/fn?","fexpr__45695","oc.web.components.ui.alert-modal/solid-button-clicked","fexpr__45696","oc.web.components.ui.alert-modal/bottom-button-clicked","fexpr__45697","rum.core/build-defcs","js/React.createElement","sablono.util/join-classes","p1__45700#","attrs45708","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","oc.web.components.ui.alert-modal/alert-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","oc.web.mixins.ui/no-scroll-mixin","oc.web.mixins.ui/first-render-mixin","cljs.core/deref","org.martinklepsch.derivatives/get-ref","cljs.core/not","org.martinklepsch.derivatives/react","action","cljs.core/empty?","has-buttons","or__4126__auto__","oc.web.lib.utils/class-set","cljs.core/seq","oc.web.lib.utils/cdn","p1__45701#","cljs.core/name","p1__45702#","p1__45703#"],"sourcesContent":["(ns oc.web.components.ui.alert-modal\n  (:require [rum.core :as rum]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]))\n\n(defn show-alert [modal-data]\n  (dis/dispatch! [:input [:alert-modal] modal-data]))\n\n(defn hide-alert []\n  (dis/dispatch! [:input [:alert-modal :dismiss] true]))\n\n(defn dismiss-modal []\n  (dis/dispatch! [:input [:alert-modal] nil]))\n\n(defn close-clicked [s]\n  (reset! (::dismiss s) true)\n  (utils/after 180 dismiss-modal))\n\n(defn link-button-clicked [alert-modal e]\n  (utils/event-stop e)\n  (when (fn? (:link-button-cb alert-modal))\n    ((:link-button-cb alert-modal))))\n\n(defn solid-button-clicked [alert-modal e]\n  (utils/event-stop e)\n  (when (fn? (:solid-button-cb alert-modal))\n    ((:solid-button-cb alert-modal))))\n\n(defn bottom-button-clicked [alert-modal e]\n  (utils/event-stop e)\n  (when (fn? (:bottom-button-cb alert-modal))\n    ((:bottom-button-cb alert-modal))))\n\n(rum/defcs alert-modal < rum/reactive\n                         ;; Derivatives\n                         (drv/drv :alert-modal)\n                         ;; Locals\n                         (rum/local false ::dismiss)\n                         ;; Mixins\n                         mixins/no-scroll-mixin\n                         mixins/first-render-mixin\n\n                         {:after-render (fn [s]\n                                          (let [alert-modal @(drv/get-ref s :alert-modal)]\n                                            (when (and (not @(::dismiss s))\n                                                       (:dismiss alert-modal))\n                                              (close-clicked s)))\n                                          s)}\n  \"Customizable alert modal. It gets the following property from the :alert-modal derivative:\n   :icon The src to use for an image, it's encapsulated in utils/cdn.\n   :emoji-icon The emoji char to use instead of an image at the top.\n   :title The title of the view.\n   :message A description message to show in the view.\n   :link-button-style The color of the font for the link button\n   :link-button-title The title for the first button, it's black link styled.\n   :link-button-cb The function to execute when the first button is clicked.\n   :solid-button-style The style of the button: default green, :red.\n   :solid-button-title The title for the second button, it's green solid styled.\n   :solid-button-cb The function to execute when the second button is clicked.\n   :bottom-button-style The style for the button at the bottom of the view.\n   :bottom-button-title The title for the bottom button, it's green solid styled.\n   :bottom-button-cb The function to execute when the bottom button is clicked.\"\n  [s]\n  (let [alert-modal (drv/react s :alert-modal)\n        action (if (empty? (:action alert-modal)) \"no-action\" (:action alert-modal))\n        has-buttons (or (:link-button-title alert-modal)\n                        (:solid-button-title alert-modal))]\n    [:div.alert-modal-container\n      {:class (utils/class-set {:will-appear (or @(::dismiss s) (not @(:first-render-done s)))\n                                :appear (and (not @(::dismiss s)) @(:first-render-done s))\n                                action true})\n       :on-click #(when-not has-buttons\n                    (hide-alert))}\n      [:div.modal-wrapper\n        [:button.mlb-reset.modal-close-bt\n          {:on-click #(if (fn? (:link-button-cb alert-modal))\n                        (link-button-clicked alert-modal %)\n                        (close-clicked s))}]\n        [:div.alert-modal\n          {:class (utils/class-set {:has-buttons has-buttons\n                                    :has-bottom-button (seq (:bottom-button-title alert-modal))})}\n          (if (:emoji-icon alert-modal)\n            [:div.alert-modal-emoji-icon (:emoji-icon alert-modal)]\n            (when (:icon alert-modal)\n              [:img.alert-modal-icon {:src (utils/cdn (:icon alert-modal))}]))\n          (when (:title alert-modal)\n            [:div.alert-modal-title\n              (:title alert-modal)])\n          (when (:message alert-modal)\n            [:div.alert-modal-message\n              (:message alert-modal)])\n          (when has-buttons\n            [:div.alert-modal-buttons.group\n              {:class (utils/class-set {:single-button (or (not (:link-button-title alert-modal))\n                                                           (not (:solid-button-title alert-modal)))})}\n              (when (:link-button-title alert-modal)\n                [:button.mlb-reset.mlb-link-black\n                  {:on-click #(link-button-clicked alert-modal %)\n                   :class (when (:link-button-style alert-modal) (name (:link-button-style alert-modal)))}\n                  (:link-button-title alert-modal)])\n              (when (:solid-button-title alert-modal)\n                [:button.mlb-reset.mlb-default\n                  {:on-click #(solid-button-clicked alert-modal %)\n                   :class (when (:solid-button-style alert-modal) (name (:solid-button-style alert-modal)))}\n                  (:solid-button-title alert-modal)])])\n          (when (seq (:bottom-button-title alert-modal))\n            [:button.mlb-reset.bottom-button\n              {:on-click #(bottom-button-clicked alert-modal %)\n               :class (when (:bottom-button-style alert-modal) (name (:bottom-button-style alert-modal)))}\n              (:bottom-button-title alert-modal)])]]]))"]}