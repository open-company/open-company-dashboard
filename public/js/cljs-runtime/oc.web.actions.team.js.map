{"version":3,"sources":["oc/web/actions/team.cljs"],"mappings":"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","names":["oc.web.actions.team/roster-get","roster-link","oc.web.api/get-team","p__38432","map__38433","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","success","body","status","fixed-body","oc.web.lib.json/json->cljs","users","fixed-roster-data","oc.web.dispatcher/dispatch!","oc.web.dispatcher.current_org_slug","activities-read","oc.web.dispatcher/activity-read-data","seq__38435","cljs.core/seq","chunk__38436","count__38437","i__38438","vec__38445","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__38448","cljs.core/first","cljs.core/next","activity-uuid","read-data","p__38451","map__38452","oc.web.actions.team/enumerate-channels-cb","team-id","channels","oc.web.actions.team/enumerate-channels","team-data","org-data","oc.web.dispatcher.org_data","enumerate-link","oc.web.lib.utils.link_for","oc.web.api/enumerate-channels","cljs.core.partial","oc.web.actions.team/team-get","team-link","p__38454","map__38455","oc.web.lib.utils/after","oc.web.actions.org/maybe-show-integration-added-notification?","oc.web.actions.team/force-team-refresh","oc.web.dispatcher.team_data","oc.web.actions.team/read-teams","teams","current-panel","cljs.core/last","cljs.core/deref","oc.web.dispatcher/app-state","load-delay","fexpr__38457","seq__38458","chunk__38460","count__38461","i__38462","team","channels-link","oc.web.lib.utils/maybe-after","p__38464","map__38465","oc.web.actions.team/teams-get-cb","oc.web.actions.team/teams-get","auth-settings","oc.web.dispatcher.auth_settings","oc.web.api/get-teams","oc.web.actions.team/teams-get-if-needed","teams-data-requested","oc.web.dispatcher.teams_data_requested","teams-data","oc.web.dispatcher.teams_data","and__4115__auto__","cljs.core/empty?","cljs.core/not","oc.web.actions.team/refresh-team-data","oc.web.actions.org.get_org","p__38467","map__38468","oc.web.actions.team/author-change-cb","oc.web.actions.team/remove-author","author","remove-author-link","oc.web.api/remove-author","oc.web.actions.team/add-author","add-author-link","oc.web.api/add-author","p__38470","map__38471","oc.web.actions.team/admin-change-cb","user","oc.web.actions.team/add-admin","add-admin-link","oc.web.api/add-admin","oc.web.actions.team/remove-admin","remove-admin-link","oc.web.api/remove-admin","oc.web.actions.team/invite-user-failed","user-data","oc.web.actions.team/invite-user-success","p__38474","map__38475","oc.web.actions.team/switch-user-type-cb","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.team/switch-user-type","p__38494","vec__38495","seq38485","G__38486","G__38487","G__38488","G__38489","self__4723__auto__","complete-user-data","old-user-type","new-user-type","author-data","cljs.core.not_EQ_","fixed-author-data","or__4126__auto__","oc.web.utils.user/get-author","add-admin?","cljs.core._EQ_","remove-admin?","add-author?","remove-author?","p__38502","map__38503","oc.web.actions.team/send-invitation-cb","invite-data","user-type","new-user","oc.web.actions.team/invite-user","note","invite-from","email","slack-user","parsed-email","oc.web.lib.utils/parse-input-email","email-name","email-address","p1__38505#","cljs.core.filter","oc.web.utils.user.get_user_type","clojure.string/lower-case","splitted-name","clojure.string.split","name-size","splittable-name?","first-name","last-name","cljs.core/second","user-value","p1__38506#","invitation-link","oc.web.api/send-invitation","oc.web.actions.team/valid-inviting-user?","oc.web.lib.utils/valid-email?","cljs.core/map?","cljs.core/contains?","oc.web.actions.team/duplicated-email-addresses","users-list","p1__38507#","oc.web.actions.team/duplicated-team-user","dup-user","p1__38508#","oc.web.actions.team/invite-users","p__38513","vec__38514","seq38511","G__38512","inviting-users","filter-empty","p1__38509#","cljs.core/filterv","checked-users","iter__4529__auto__","s__38518","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__38520","cljs.core/chunk-buffer","i__38519","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38517","cljs.core/cons","cljs.core/rest","valid?","intive-duplicated?","team-duplicated?","cljs.core.merge","cljs.core.dissoc","cleaned-inviting-users","p1__38510#","seq__38521","chunk__38522","count__38523","i__38524","cljs.core/vec","oc.web.actions.team/user-action-cb","_","oc.web.actions.team/user-action","p__38533","vec__38534","seq38526","G__38527","G__38528","G__38529","G__38530","G__38531","G__38532","invitation","action","method","other-link-params","payload","finished-cb","idx","p1__38525#","oc.web.api/user-action","cljs.core/fn?","p__38537","map__38538","oc.web.actions.team/email-domain-team-add-cb","oc.web.actions.team/add-email-domain-link","team-data-links","oc.web.actions.team/email-domain-team-add","domain","cb","oc.web.lib.utils/valid-domain?","add-email-domain-link","fixed-domain","cljs.core.subs","oc.web.api/add-email-domain","p__38540","map__38541","resp","oc.web.actions.team/can-add-email-domain?","p__38544","vec__38545","seq38543","self__4724__auto__","fixed-team-data","oc.web.actions.team/slack-team-add","p__38550","vec__38551","seq38548","G__38549","current-user-data","redirect-to","add-slack-team-link","redirect","oc.web.router/get-token","with-add-team","js/encodeURIComponent","fixed-add-slack-team-link","oc.web.utils.user/auth-link-with-state","oc.web.router/redirect!","oc.web.actions.team/remove-team","p__38556","vec__38557","seq38554","G__38555","team-links","p__38560","map__38561","oc.web.actions.team/create-invite-token-link","p__38565","vec__38566","seq38563","G__38564","create-token-link","oc.web.api/handle-invite-link","p__38569","map__38570","oc.web.actions.team/delete-invite-token-link","p__38574","vec__38575","seq38572","G__38573","delete-invite-link","p__38578","map__38579"],"sourcesContent":["(ns oc.web.actions.team\n  (:require [clojure.string :as string]\n            [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.utils.user :as uu]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.lib.json :refer (json->cljs)]))\n\n(defn roster-get [roster-link]\n  (api/get-team roster-link\n   (fn [{:keys [success body status]}]\n     (let [fixed-body (when success (json->cljs body))]\n       (if success\n         (let [users (-> fixed-body :collection :items)\n               fixed-roster-data {:team-id (:team-id fixed-body)\n                                  :links (-> fixed-body :collection :links)\n                                  :users users}]\n           (dis/dispatch! [:team-roster-loaded (dis/current-org-slug) fixed-roster-data])\n           ;; The roster is also used by the WRT component to show the unseen, rebuild the unseen lists\n           (let [activities-read (dis/activity-read-data)]\n             (doseq [[activity-uuid read-data] activities-read]\n               (dis/dispatch! [:activity-reads (dis/current-org-slug) activity-uuid (:count read-data) (:reads read-data) fixed-roster-data])))))))))\n\n(defn enumerate-channels-cb [team-id {:keys [success body status]}]\n  (let [fixed-body (when success (json->cljs body))\n        channels (-> fixed-body :collection :items)]\n    (if success\n      (dis/dispatch! [:channels-enumerate/success team-id channels]))))\n\n(defn enumerate-channels [team-data]\n  (let [org-data (dis/org-data)\n        team-id (:team-id team-data)]\n    (when team-id\n      (let [enumerate-link (utils/link-for (:links team-data) \"channels\" \"GET\")]\n        (api/enumerate-channels enumerate-link (partial enumerate-channels-cb team-id))\n        (dis/dispatch! [:channels-enumerate team-id])))))\n\n(defn team-get [team-link]\n  (api/get-team team-link\n    (fn [{:keys [success body status]}]\n      (let [team-data (when success (json->cljs body))]\n        (when success\n          (dis/dispatch! [:team-loaded (dis/current-org-slug) team-data])\n          (utils/after 100 org-actions/maybe-show-integration-added-notification?)\n          (enumerate-channels team-data))))))\n\n(defn force-team-refresh [team-id]\n  (when-let [team-data (dis/team-data team-id)]\n    (when-let [team-link (utils/link-for (:links team-data) [\"self\" \"item\"] \"GET\")]\n      (team-get team-link))\n    (when-let [roster-link (utils/link-for (:links team-data) \"roster\")]\n      (roster-get roster-link))))\n\n(defn read-teams [teams]\n  (let [current-panel (last (:panel-stack @dis/app-state))\n        load-delay (if (#{:org :integrations :team :invite-picker :invite-email :invite-slack} current-panel)\n                     0\n                     2500)]\n    (doseq [team teams\n            :let [team-link (utils/link-for (:links team) \"item\")\n                  channels-link (utils/link-for (:links team) \"channels\")\n                  roster-link (utils/link-for (:links team) \"roster\")]]\n      ; team link may not be present for non-admins, if so they can still get team users from the roster\n      (if team-link\n        (utils/maybe-after load-delay #(team-get team-link))\n        (when channels-link\n          (utils/maybe-after load-delay #(enumerate-channels team))))\n      ;; Do not delay the roster load since it's needed for the mentions extention\n      ;; that needs to be initialized with the rich-body-editor or the add-comment components\n      (when roster-link\n        (roster-get roster-link)))))\n\n(defn teams-get-cb [{:keys [success body status]}]\n  (let [fixed-body (when success (json->cljs body))]\n    (if success\n      (let [teams (-> fixed-body :collection :items)]\n        (dis/dispatch! [:teams-loaded teams])\n        (read-teams teams))\n      ;; Reset the team-data-requested to restart the teams load\n      (when (<= 500 status 599)\n        (dis/dispatch! [:input [:team-data-requested] false])))))\n\n(defn teams-get []\n  (let [auth-settings (dis/auth-settings)]\n    (when-let [enumerate-link (utils/link-for (:links auth-settings) \"collection\" \"GET\")]\n      (api/get-teams enumerate-link teams-get-cb)\n      (dis/dispatch! [:teams-get]))))\n\n(defn teams-get-if-needed []\n  (let [auth-settings (dis/auth-settings)\n        teams-data-requested (dis/teams-data-requested)\n        teams-data (dis/teams-data)]\n    (when (and (empty? teams-data)\n               auth-settings\n               (not teams-data-requested))\n      (teams-get))))\n\n;; Team management view\n\n(defn refresh-team-data [org-data]\n  (org-actions/get-org org-data true #(teams-get)))\n\n;; Invite users\n\n;; Authors\n\n(defn author-change-cb [{:keys [success]}]\n  (when success\n    (refresh-team-data (dis/org-data))))\n\n(defn remove-author [author]\n  (let [remove-author-link (utils/link-for (:links author) \"remove\")]\n    (api/remove-author remove-author-link author author-change-cb)))\n\n(defn add-author [author]\n  (let [add-author-link (utils/link-for (:links (dis/org-data)) \"add\")]\n    (api/add-author add-author-link (:user-id author) author-change-cb)))\n\n;; Admins\n\n(defn admin-change-cb [user {:keys [success]}]\n  (if success\n    (do\n      (teams-get)\n      (dis/dispatch! [:invite-user/success user]))\n    (dis/dispatch! [:invite-user/failed user])))\n\n(defn add-admin [user]\n  (let [add-admin-link (utils/link-for (:links user) \"add\")]\n    (api/add-admin add-admin-link user (partial admin-change-cb user))))\n\n(defn remove-admin [user]\n  (let [remove-admin-link (utils/link-for (:links user) \"remove\" \"DELETE\"\n                           {:ref \"application/vnd.open-company.team.admin.v1\"})]\n    (api/remove-admin remove-admin-link user (partial admin-change-cb user))))\n\n;; Invite user callbacks\n\n(defn invite-user-failed [user-data]\n  (dis/dispatch! [:invite-user/failed user-data]))\n\n(defn invite-user-success [user-data]\n  ; refresh the users list once the invitation succeded\n  (teams-get)\n  (dis/dispatch! [:invite-user/success user-data]))\n\n;; Switch user-type\n\n(defn switch-user-type-cb [user-data {:keys [success]}]\n  (if success\n    (invite-user-success user-data)\n    (invite-user-failed user-data)))\n\n(defn switch-user-type\n  \"Given an existing user switch user type\"\n  [complete-user-data old-user-type new-user-type user & [author-data]]\n  (when (not= old-user-type new-user-type)\n    (let [org-data           (dis/org-data)\n          fixed-author-data  (or author-data\n                                 (uu/get-author (:user-id user) (:authors org-data)))\n          add-admin?         (= new-user-type :admin)\n          remove-admin?      (= old-user-type :admin)\n          add-author?        (or (= new-user-type :author)\n                                 (= new-user-type :admin))\n          remove-author?     (= new-user-type :viewer)]\n      ;; Add an admin call\n      (when add-admin?\n        (add-admin user))\n      ;; Remove admin call\n      (when remove-admin?\n        (remove-admin user))\n      ;; Add author call\n      (when add-author?\n        (add-author user))\n      ;; Remove author call\n      (when remove-author?\n        (remove-author fixed-author-data)))))\n\n;; Invite user\n\n(defn send-invitation-cb [invite-data user-type {:keys [success body]}]\n  (if success\n    ;; On successfull invitation\n    (let [new-user (json->cljs body)]\n      ;; If user was admin or author add him to the org as author\n      (when (or (= user-type :author)\n                (= user-type :admin))\n        (add-author new-user))\n      (invite-user-success invite-data))\n    (invite-user-failed invite-data)))\n\n(defn invite-user [org-data team-data invite-data note]\n  (let [invite-from (:type invite-data)\n        email (:user invite-data)\n        slack-user (:user invite-data)\n        user-type (:role invite-data)\n        parsed-email (when (= \"email\" invite-from) (utils/parse-input-email email))\n        email-name (:name parsed-email)\n        email-address (:address parsed-email)\n        ;; check if the user being invited by email is already present in the users list.\n        ;; from slack is not possible to select a user already invited since they are filtered by status before\n        user (when (= invite-from \"email\")\n               (first (filter #(= (:email %) email-address) (:users team-data))))\n        old-user-type (when user (uu/get-user-type user org-data))]\n    ;; Send the invitation only if the user is not part of the team already\n    ;; or if it's still pending, ie resend the invitation email\n    (if (or (not user)\n            (and user\n                 (= (string/lower-case (:status user)) \"pending\")))\n      (let [splitted-name (string/split email-name #\"\\s\")\n            name-size (count splitted-name)\n            splittable-name? (= name-size 2)\n            first-name (cond\n                        (and (= invite-from \"email\") (= name-size 1)) email-name\n                        (and (= invite-from \"email\") splittable-name?) (first splitted-name)\n                        (and (= invite-from \"slack\") (seq (:first-name slack-user))) (:first-name slack-user)\n                        :else \"\")\n            last-name (cond\n                        (and (= invite-from \"email\") splittable-name?) (second splitted-name)\n                        (and (= invite-from \"slack\") (seq (:last-name slack-user))) (:last-name slack-user)\n                        :else \"\")\n            user-value (if (= invite-from \"email\") email-address slack-user)]\n        ;; If the user is already in the list\n        ;; but the type changed we need to change the user type too\n        (when (and user\n                  (not= old-user-type user-type))\n          (switch-user-type invite-data old-user-type user-type user))\n        (let [team-data (or (dis/team-data)\n                            (first (filter #(= (:team-id org-data) (:team-id %))\n                                           (dis/teams-data))))\n              invitation-link (utils/link-for (:links team-data) \"add\" \"POST\"\n                               {:content-type \"application/vnd.open-company.team.invite.v1\"})]\n          (api/send-invitation invitation-link user-value invite-from user-type\n           first-name last-name note (partial send-invitation-cb invite-data user-type)))))))\n\n;; Invite user helpers\n\n(defn valid-inviting-user? [user]\n  (or (and (= \"email\" (:type user))\n           (utils/valid-email? (:user user)))\n      (and (= \"slack\" (:type user))\n           (map? (:user user))\n           (contains? (:user user) :slack-org-id)\n           (contains? (:user user) :slack-id))))\n\n(defn duplicated-email-addresses [user users-list]\n  (when (= (:type user) \"email\")\n    (> (count (filter #(= (:user %) (:address (utils/parse-input-email (:user user)))) users-list)) 1)))\n\n(defn duplicated-team-user [user users-list]\n  (when (= (:type user) \"email\")\n    (let [parsed-email (utils/parse-input-email (:user user))\n          dup-user (first (filter #(= (:email %) (:address parsed-email)) users-list))]\n      (and dup-user\n           (not= (string/lower-case (:status dup-user)) \"pending\")))))\n\n;; Invite users\n\n(defn invite-users [inviting-users & [note]]\n  (let [note (or note \"\")\n        org-data (dis/org-data)\n        team-data (dis/team-data (:team-id org-data))\n        filter-empty (filterv #(seq (:user %)) inviting-users)\n        checked-users (for [user filter-empty]\n                        (let [valid? (valid-inviting-user? user)\n                              intive-duplicated? (duplicated-email-addresses user inviting-users)\n                              team-duplicated? (duplicated-team-user user (:users team-data))]\n                          (cond\n                            (not valid?)\n                            (merge user {:error true :success false})\n                            team-duplicated?\n                            (merge user {:error \"User already active\" :success false})\n                            intive-duplicated?\n                            (merge user {:error \"Duplicated email address\" :success false})\n                            :else\n                            (dissoc user :error))))\n        cleaned-inviting-users (filterv #(not (:error %)) checked-users)]\n    (when (<= (count cleaned-inviting-users) (count filter-empty))\n      (doseq [user cleaned-inviting-users]\n        (invite-user org-data team-data user note)))\n    (dis/dispatch! [:invite-users (vec checked-users)])))\n\n;; User actions\n\n(defn user-action-cb [_]\n  (teams-get))\n\n(defn user-action [team-id invitation action method other-link-params payload & [finished-cb]]\n  (let [team-data (dis/team-data team-id)\n        idx (.indexOf (:users team-data) invitation)]\n    (when (> idx -1)\n      (api/user-action (utils/link-for (:links invitation) action method other-link-params) payload\n       #(do\n          (when (fn? finished-cb)\n            (finished-cb team-id invitation action method other-link-params payload %))\n          (user-action-cb %)))\n      (dis/dispatch! [:user-action team-id idx]))))\n\n;; Email domains\n\n(defn email-domain-team-add-cb [{:keys [status body success]}]\n  (when success\n    (teams-get))\n  (dis/dispatch! [:email-domain-team-add/finish (= status 204)]))\n\n(defn- add-email-domain-link [team-data-links]\n  (utils/link-for\n   team-data-links\n   \"add\"\n   \"POST\"\n   {:content-type \"application/vnd.open-company.team.email-domain.v1+json\"}))\n\n(defn email-domain-team-add [domain cb]\n  (when (utils/valid-domain? domain)\n    (let [team-data (dis/team-data)\n          add-email-domain-link (add-email-domain-link (:links team-data))\n          fixed-domain (if (.startsWith domain \"@\") (subs domain 1) domain)]\n      (api/add-email-domain add-email-domain-link fixed-domain\n       (fn [{:keys [success] :as resp}]\n        (email-domain-team-add-cb resp)\n        (when (fn? cb)\n         (cb success)))\n       team-data))\n    (dis/dispatch! [:email-domain-team-add])))\n\n(defn can-add-email-domain? [& [team-data]]\n  (let [fixed-team-data (or team-data (dis/team-data))]\n    (seq (add-email-domain-link (:links fixed-team-data)))))\n\n;; Slack team add\n\n(defn slack-team-add [current-user-data & [redirect-to]]\n  (let [org-data (dis/org-data)\n        team-id (:team-id org-data)\n        team-data (dis/team-data team-id)\n        add-slack-team-link (utils/link-for (:links team-data) \"authenticate\" \"GET\" {:auth-source \"slack\"})\n        redirect (or redirect-to (router/get-token))\n        with-add-team (js/encodeURIComponent\n                        (if (> (.indexOf redirect \"?\") -1)\n                          (str redirect \"&add=team\")\n                          (str redirect \"?add=team\")))\n        fixed-add-slack-team-link (uu/auth-link-with-state\n                                   (:href add-slack-team-link)\n                                   {:user-id (:user-id current-user-data)\n                                    :team-id team-id\n                                    :redirect with-add-team})]\n    (when fixed-add-slack-team-link\n      (router/redirect! fixed-add-slack-team-link))))\n\n;; Remove team\n\n(defn remove-team [team-links & [cb]]\n  (api/user-action (utils/link-for team-links \"remove\" \"DELETE\") nil\n   (fn [{:keys [status body success] :as resp}]\n    (when (fn? cb)\n      (cb success))\n    (user-action-cb resp))))\n\n;; Invite team link handling\n\n(defn create-invite-token-link [create-token-link & [cb]]\n  (when create-token-link\n    (api/handle-invite-link create-token-link\n     (fn [{:keys [body success status]}]\n      (when success\n        (dis/dispatch! [:team-loaded (dis/current-org-slug) (json->cljs body)])\n        (when (fn? cb)\n          (cb success)))))))\n\n(defn delete-invite-token-link [delete-invite-link & [cb]]\n  (when delete-invite-link\n    (api/handle-invite-link delete-invite-link\n     (fn [{:keys [body success status]}]\n      (when success\n        (dis/dispatch! [:team-loaded (dis/current-org-slug) (json->cljs body)])\n        (when (fn? cb)\n          (cb success)))))))"]}