{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$updateScrollIndexHelper.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,sFAAf,CAA2G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGnJC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,OAAR,CAeAC,QAAgC,CAACC,IAAD,CAAO,CAAA,IACjCC,SAAWD,IAAXC,CAAgBA,QADiB,CAEjCC,2BAA6BF,IAA7BE,CAAkCA,0BAFD,CAGjCC,mBAAqBH,IAArBG,CAA0BA,kBAHO,CAIjCC,iBAAmBJ,IAAnBI,CAAwBA,gBAJS,CAKjCC,0BAA4BL,IAA5BK,CAAiCA,yBALA,CAMjCC,sBAAwBN,IAAxBM,CAA6BA,qBANI;AAOjCC,aAAeP,IAAfO,CAAoBA,YAPa,CAQjCC,aAAeR,IAAfQ,CAAoBA,YARa,CASjCC,kBAAoBT,IAApBS,CAAyBA,iBATQ,CAUjCC,cAAgBV,IAAhBU,CAAqBA,aAVY,CAWjCC,KAAOX,IAAPW,CAAYA,IAXqB,CAYjCC,0BAA4BZ,IAA5BY,CAAiCA,yBACjCC,KAAAA,CAA4Bb,IAA5Ba,CAAiCA,yBAErC,KAAIC,UAAYZ,0BAAA,CAA2Ba,YAA3B,EAAhB,CACIC,iBAAoC,CAApCA,EAAmBN,aAAnBM,EAAyCN,aAAzCM,CAAyDF,SAKzDE,iBAAJ,GAJqBL,IAIrB,GAJ8BJ,YAI9B,EAJ8CK,yBAI9C,EAJ2E,CAACR,gBAI5E,EAJoH,QAIpH,GAJgG,MAAOH,SAIvG,EAJgIA,QAIhI,GAJ6IG,gBAI7I;AAA2CK,iBAA3C,GAAiEJ,yBAAjE,EAA8FK,aAA9F,GAAgHJ,qBAAhH,EACEO,IAAA,CAA0BH,aAA1B,CADF,CAKW,CAACM,gBALZ,EAK4C,CAL5C,CAKgCF,SALhC,GAKkDH,IALlD,CAKyDJ,YALzD,EAKyEO,SALzE,CAKqFX,kBALrF,GAUMK,YAVN,CAUqBN,0BAAA,CAA2Be,YAA3B,EAVrB,CAUiEN,IAVjE,EAWIE,IAAA,CAA0BC,SAA1B,CAAsC,CAAtC,CAhCiC,CAbEtB,QAAA,CAAQ,kGAAR,CAI5BA,QAAA,CAAQ,gEAAR,CAZsI;",
"sources":["node_modules/react-virtualized/dist/commonjs/Grid/utils/updateScrollIndexHelper.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$updateScrollIndexHelper\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = updateScrollIndexHelper;\n\nvar _ScalingCellSizeAndPositionManager = require('./ScalingCellSizeAndPositionManager.js');\n\nvar _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nfunction updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize;\n\n  // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex);\n\n    // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","updateScrollIndexHelper","_ref","cellSize","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","scrollToIndex","size","sizeJustIncreasedFromZero","updateScrollIndexCallback","cellCount","getCellCount","hasScrollToIndex","getTotalSize"]
}
