{"version":3,"sources":["oc/web/images.cljs"],"mappings":";AAOA,AAAA,AAAOA,AACJC;AADH,AAEE,AAAA,AAACC,AAAE,AAAYD;;AAEjB,AAAA,AAAOE,AACJC,AAAIC;AADP,AAEE,AAAMJ,AAAI,AAAAK,AAAMF;AAAhB,AACE,AAAA,AAAQ,AAACJ,AAAcC;AACrBG;;AACA,AAAMG,AAAY,AAAUN;AACtBO,AAAY,AAAA,AAAsBH;AAClCI,AAAY,AAAKD,AAAYD;AAC7BG,AAAY,AAAUT,AAAIQ;AAHhC,AAIE,AAAKC;;;AAKb,AAAA,AAAOC,AACJV;AADH,AAEE,AAAA,AAACC,AAAE,AAAYD;;AAEjB,AAAA,AAAOW,AACJC;AADH,AAEE,AACE,AAAA,AAAIA;AADN;;AAAA,AAEE,AAAA,AAAIA;AAFN;;AAAA,AAGE,AAAA,AAAIA;AAHN;;AAAA,AAIE,AAAA,AAAIA;AAJN;;AAAA,AAKE,AAAA,AAAIA;AALN;;AAAA,AAME,AAAA,AAAIA;AANN;;AAAA,AAAA;;;;;;;;;AAUF,AAAA,AAAOC,AACJD;AADH,AAEE,AACE,AAAA,AAAIA;AADN;;AAAA,AAEE,AAAA,AAAIA;AAFN;;AAAA,AAGE,AAAA,AAAIA;AAHN;;AAAA,AAIE,AAAA,AAAIA;AAJN;;AAAA,AAKE,AAAA,AAAIA;AALN;;AAAA,AAME,AAAA,AAAIA;AANN;;AAAA,AAAA;;;;;;;;;AAUF,AAAA,AAAOE,AACJX,AAAIY;AADP,AAEE,AAAMf,AAAI,AAAAK,AAAMF;AAAhB,AACE,AAAA,AAAQ,AAACO,AAAUV;AACjBG;;AACA,AAAMG,AAAc,AAAUN;AAA9B,AACMgB;AACAC,AAAc,AAAA,AAAA,AAASF;AACvBP,AAAc,AAACU,AAAaZ,AAASU,AAAGC;AACxCR,AAAc,AAAUT,AAAIQ;AAJlC,AAKE,AAAKC;;;AAEb,AAAA,AAAOU,AACJhB,AAAIC;AADP,AAEE,AAAAgB,AAAuB,AAACT,AAA6BP;AAArD,AAAA,AAAAgB;AAAA,AAAAA,AAASL;AAAT,AACE,AAACD,AAAsBX,AAAIY;;AAC3BZ;;;AAEJ,AAAA,AAAOkB,AACJlB,AAAIC;AADP,AAEE,AAAAgB,AAAuB,AAACP,AAA8BT;AAAtD,AAAA,AAAAgB;AAAA,AAAAA,AAASL;AAAT,AACE,AAACD,AAAsBX,AAAIY;;AAC3BZ;;;AAKJ,AAAA,AAAMmB,AACHnB,AAAIC;AADP,AAEE,AAACF,AAA6BC,AAAIC;;AAEpC,AAAA,AAAMmB,AACHpB,AAAIC;AADP,AAEMD,AACA,AAACkB,AAA2BjB,AAC5B,AAACF,AAA6BE;;AAEpC,AAAA,AAAMoB,AACHrB,AAAIC;AADP,AAEMD,AACA,AAACgB,AAA0Bf,AAC3B,AAACF,AAA6BE","names":["oc.web.images/is-filestack?","uri","cljs.core._EQ_","oc.web.images/optimize-filestack-image-url","url","preferred-height","js/goog.Uri","cur-path","resize-frag","new-path","new-uri","oc.web.images/is-slack?","oc.web.images/approximate-slack-org-height","pref-height","oc.web.images/approximate-slack-user-height","oc.web.images/optimize-slack-avatar","approx-height","re","template","clojure.string/replace","oc.web.images/optimize-slack-org-avatar","temp__5733__auto__","oc.web.images/optimize-slack-user-avatar","oc.web.images/optimize-image-url","oc.web.images/optimize-user-avatar-url","oc.web.images/optimize-org-avatar-url"],"sourcesContent":["(ns oc.web.images\n  (:require [clojure.string :as cstr])\n  (:import [goog Uri]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; FileStack\n\n(defn- is-filestack?\n  [uri]\n  (= (.getDomain uri) \"cdn.filestackcontent.com\"))\n\n(defn- optimize-filestack-image-url\n  [url preferred-height]\n  (let [uri (Uri. url)]\n    (if-not (is-filestack? uri)\n      url\n      (let [cur-path    (.getPath uri)\n            resize-frag (str \"resize=height:\" preferred-height)\n            new-path    (str resize-frag cur-path)\n            new-uri     (.setPath uri new-path)]\n        (str new-uri)))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Slack\n\n(defn- is-slack?\n  [uri]\n  (= (.getDomain uri) \"avatars.slack-edge.com\"))\n\n(defn- approximate-slack-org-height\n  [pref-height]\n  (cond\n    (<= pref-height 34)  34\n    (<= pref-height 44)  44\n    (<= pref-height 68)  68\n    (<= pref-height 88)  88\n    (<= pref-height 102) 102\n    (<= pref-height 132) 132\n    :default             nil\n    ))\n\n(defn- approximate-slack-user-height\n  [pref-height]\n  (cond\n    (<= pref-height 24)  24\n    (<= pref-height 32)  32\n    (<= pref-height 48)  48\n    (<= pref-height 72)  72\n    (<= pref-height 192) 192\n    (<= pref-height 512) 512\n    :default             nil\n    ))\n\n(defn- optimize-slack-avatar\n  [url approx-height]\n  (let [uri (Uri. url)]\n    (if-not (is-slack? uri)\n      url\n      (let [cur-path      (.getPath uri)\n            re            #\"_(\\d{2,3})\\.([a-z]+)$\"\n            template      (str \"_\" approx-height \".$2\")\n            new-path      (cstr/replace cur-path re template)\n            new-uri       (.setPath uri new-path)]\n        (str new-uri)))))\n\n(defn- optimize-slack-org-avatar\n  [url preferred-height]\n  (if-let [approx-height (approximate-slack-org-height preferred-height)]\n    (optimize-slack-avatar url approx-height)\n    url))\n\n(defn- optimize-slack-user-avatar\n  [url preferred-height]\n  (if-let [approx-height (approximate-slack-user-height preferred-height)]\n    (optimize-slack-avatar url approx-height)\n    url))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Image optimization API\n\n(defn optimize-image-url\n  [url preferred-height]\n  (optimize-filestack-image-url url preferred-height))\n\n(defn optimize-user-avatar-url\n  [url preferred-height]\n  (-> url\n      (optimize-slack-user-avatar preferred-height)\n      (optimize-filestack-image-url preferred-height)))\n\n(defn optimize-org-avatar-url\n  [url preferred-height]\n  (-> url\n      (optimize-slack-org-avatar preferred-height)\n      (optimize-filestack-image-url preferred-height)))\n"]}