{"version":3,"sources":["oc/web/stores/user.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.stores","js/oc.web.stores.user","js/oc.web.stores.user.default-avatar-url","oc.web.stores.user/default-avatar-url","oc.web.utils.user/random-avatar","oc.web.stores.user/user-icon","user-id","cljs.core._EQ_","oc.web.lib.jwt/get-key","oc.web.utils.user/default-avatar","cljs.core/first","oc.web.utils.user/other-default-avatars","js/oc.web.stores.user.show-login-overlay?","oc.web.stores.user/show-login-overlay?","oc.web.dispatcher/show-login-overlay-key","js/oc.web.stores.user.signup-with-email","oc.web.stores.user/signup-with-email","oc.web.stores.user/get-show-login-overlay","cljs.core/deref","cljs.core.get_in","oc.web.dispatcher/app-state","oc.web.stores.user/auth-settings?","cljs.core/contains?","oc.web.dispatcher/auth-settings-key","oc.web.stores.user/auth-settings-status?","oc.web.dispatcher.auth_settings","oc.web.dispatcher/action","p__42489","vec__42490","cljs.core.nth","db","_","body","next-db","cljs.core.assoc","js/Date","cljs.core/assoc-in","oc.web.stores.user/fixed-avatar-url","avatar-url","cljs.core/empty?","oc.web.lib.utils.cdn","oc.web.stores.user/default-invite-type","oc.web.stores.user/parse-users","users-list","org-data","follow-publishers-list","follow-publishers-set","cljs.core/every?","cljs.core/map?","cljs.core/set","cljs.core.map","u","p1__42498#","cljs.core.update","or__4126__auto__","oc.lib.user.name_for","p1__42499#","oc.lib.user.short_name_for","G__42502","user","oc.web.utils.user.get_user_type","oc.web.utils.user/user-role-string","oc.web.lib.jwt/user-id","oc.web.stores.user/parse-user-data","user-data","active-users","active-user-data","cljs.core.get","cljs.core.merge","cljs.core/keyword","oc.web.stores.user/empty-user*","oc.web.stores.user/empty-user-data","edit?","G__42511","js/module$node_modules$moment_timezone$index","oc.web.stores.user/editable-user-data","edit-user-data","new-user-data","changed?","changed-user-data","cljs.core/select-keys","G__42515","var_args","G__42518","oc.web.stores.user/update-user-data","js/Error","oc.web.stores.user.update_user_data","force-edit-reset?","oc.web.dispatcher.org_data","oc.web.dispatcher.active_users","fixed-user-data","active-user-key","cljs.core.conj","oc.web.dispatcher/active-users-key","cljs.core.update_in","cljs.core/merge","p1__42516#","cljs.core.dissoc","p__42538","vec__42539","p__42542","vec__42543","p__42546","vec__42548","p__42553","vec__42554","show-login-overlay","oc.web.stores.user/dissoc-auth","p__42557","vec__42558","p__42561","vec__42562","p__42565","vec__42566","error","p__42578","vec__42579","p__42582","vec__42583","token-type","p__42586","vec__42587","p__42590","vec__42591","jwt","p__42594","vec__42595","password-reset?","p__42598","vec__42599","status","p__42602","vec__42603","p__42606","vec__42607","p__42610","vec__42611","p__42614","vec__42615","p__42618","vec__42619","p__42622","vec__42623","p__42626","vec__42627","p__42636","vec__42637","oc.web.stores.user/orgs?","oc.web.dispatcher/orgs-key","p__42640","vec__42641","orgs","collection","oc.web.dispatcher/api-entry-point-key","p__42644","vec__42645","confirmed","oc.web.stores.user/has-slack-bot?","oc.web.lib.jwt/team-has-bot?","p__42652","vec__42653","org-slug","notifications","oc.web.dispatcher/user-notifications-key","p__42656","vec__42657","notification","user-notifications-key","old-notifications","oc.web.dispatcher/sorted-user-notifications-key","new-notifications","cljs.core/cons","oc.web.utils.notification.fix_notifications","p__42667","vec__42668","read-notifications","p1__42666#","p__42672","vec__42673","p1__42671#","p__42677","vec__42678","board-id","entry-id","filtered-notifications","p1__42676#","cljs.core.filter","cljs.core.not_EQ_","p__42681","vec__42682","push-token","oc.web.dispatcher/expo-push-token-key","oc.web.stores.user/enrich-publishers-list","publishers-list","active-users-map","cljs.core/seq","publisher-uuids","cljs.core.remove","cljs.core/nil?","cljs.core.sort_by","cljs.core/vec","oc.web.stores.user/filter-org-boards","boards-data","p1__42685#","cljs.core/not","oc.web.lib.utils/default-drafts-board","oc.web.stores.user/enrich-boards-list","unfollow-board-uuids","org-boards","all-board-uuids","follow-board-uuids","clojure.set.difference","boards-map","cljs.core/zipmap","oc.web.stores.user/update-contributions-and-boards","follow-boards-list","change-data","oc.web.dispatcher.change_data","follow-publisher-uuids-set","contributions-list-key","oc.web.dispatcher/contributions-list-key","next-active-users","cljs.core.apply","p__42698","vec__42699","k","v","cljs.core/PersistentHashMap","G__42702","next-db*","cljs.core.reduce","tdb","contrib-key","rp-contrib-data-key","oc.web.dispatcher.contributions_data_key","oc.web.dispatcher/recently-posted-sort","ra-contrib-data-key","oc.web.dispatcher/recent-activity-sort","p1__42692#","oc.web.utils.activity/parse-contributions","p1__42693#","cljs.core/keys","boards-key","oc.web.dispatcher/boards-key","board-key","rp-board-data-key","oc.web.dispatcher.board_data_key","ra-board-data-key","p1__42694#","oc.web.utils.activity/parse-board","p1__42695#","p__42704","vec__42705","map__42708","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","follow-publisher-uuids","resp","org-data-key","oc.web.dispatcher/org-data-key","unfollow-boards-uuids-set","updated-org-data","boards","p1__42703#","G__42710","follow-publishers-list-key","oc.web.dispatcher/follow-publishers-list-key","follow-boards-list-key","oc.web.dispatcher/follow-boards-list-key","next-follow-boards-data","next-follow-publishers-data","oc.web.dispatcher/unfollow-board-uuids-key","p__42712","vec__42713","data","oc.web.utils.activity/user?","publishers-map","unfollow-boards","oc.web.utils.activity/board?","unfollow-boards-map","active-users-count","cljs.core/count","all-boards-count","p1__42711#","temp__5733__auto__","unfollow-board","oc.web.dispatcher/followers-publishers-count-key","oc.web.dispatcher/followers-boards-count-key","p__42722","vec__42723","map__42726","follow?","publisher-uuid","followers-count-key","publisher-count-key","fn","cljs.core/inc","cljs.core/dec","cljs.core/identity","follow-boards-data","oc.web.dispatcher.follow_boards_list","p1__42721#","p__42730","vec__42731","map__42734","board-uuids","board-uuid","unfollow-board-uuids-key","p1__42728#","next-unfollow-uuids","board-count-key","follow-publishers-data","oc.web.dispatcher.follow_publishers_list","p1__42729#","p__42741","vec__42742","map__42745","last-added-uuid","resource-type","x","follow-list-last-added-key","oc.web.dispatcher/follow-list-last-added-key"],"sourcesContent":["(ns oc.web.stores.user\n  (:require [taoensso.timbre :as timbre]\n            [oc.lib.user :as user-lib]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.jwt :as j]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.user :as uu]\n            [oc.web.utils.activity :as au]\n            [oc.web.utils.notification :as notif-utils]\n            [\"moment-timezone\" :as moment-timezone]))\n\n(defonce default-avatar-url (uu/random-avatar))\n\n(defn user-icon [user-id]\n  (if (= user-id (j/get-key :user-id))\n    ;; If the user id is the same of the current JWT use the red icon\n    uu/default-avatar\n    ;; if not get a random icon from the rest of the images vector\n    (first uu/other-default-avatars)))\n\n(defonce show-login-overlay? dispatcher/show-login-overlay-key)\n\n;; Signup keys\n(defonce signup-with-email :signup-with-email)\n\n(defn get-show-login-overlay []\n  (get-in @dispatcher/app-state [dispatcher/show-login-overlay-key]))\n\n;; Auth Settings\n(defn auth-settings? []\n  (contains? @dispatcher/app-state (first dispatcher/auth-settings-key)))\n\n(defn auth-settings-status? []\n  (and (auth-settings?)\n       (contains? (dispatcher/auth-settings) :status)))\n\n(defmethod dispatcher/action :auth-settings\n  [db [_ body]]\n  (let [next-db (assoc db :latest-auth-settings (.getTime (js/Date.)))]\n    (assoc-in next-db dispatcher/auth-settings-key body)))\n\n(defn- fixed-avatar-url [avatar-url]\n  (if (empty? avatar-url)\n    (utils/cdn default-avatar-url true)\n    avatar-url))\n\n(def default-invite-type \"email\")\n\n(defn parse-users [users-list org-data follow-publishers-list]\n  (let [follow-publishers-set (if (every? map? follow-publishers-list)\n                                (set (map :user-id follow-publishers-list))\n                                (set follow-publishers-list))]\n    (map (fn [u] (-> u\n                  (update :name #(or % (user-lib/name-for u)))\n                  (update :short-name #(or % (user-lib/short-name-for u)))\n                  (assoc :follow (follow-publishers-set (:user-id u)))\n                  (as-> user\n                   (if (map? org-data)\n                     (assoc user :role (uu/get-user-type user org-data))\n                     user)\n                   (if (:role user)\n                     (assoc user :role-string (uu/user-role-string (:role user)))\n                     user))\n                  (assoc :self? (= (:user-id u) (j/user-id)))))\n     users-list)))\n\n(defn parse-user-data [user-data org-data active-users]\n  (let [active-user-data (get active-users (:user-id user-data))]\n    (as-> user-data u\n      (merge active-user-data u)\n      (assoc u :role (uu/get-user-type u org-data))\n      (assoc u :role-string (uu/user-role-string (:role u)))\n      (update u :avatar-url fixed-avatar-url)\n      (assoc u :auth-source (or (j/get-key :auth-source) default-invite-type))\n      (assoc u :name (user-lib/name-for user-data))\n      (assoc u :short-name (user-lib/short-name-for user-data))\n      (assoc u :digest-delivery (set (map keyword (or (:digest-delivery user-data) [])))))))\n\n(def ^:private empty-user*\n {:first-name \"\"\n  :last-name \"\"\n  :password \"\"\n  :email \"\"\n  :blurb \"\"\n  :location \"\"\n  :title \"\"\n  :profiles {:twitter \"\" :linked-in \"\" :instagram \"\" :facebook \"\"}})\n\n(defn- empty-user-data\n \"This is a function to call the timezone guess when needed and not only one time on page load.\"\n  [edit?]\n  (cond-> empty-user*\n   true (assoc :timezone (or (.. moment-timezone -tz guess) \"\"))\n   edit? (assoc :has-changes false)))\n\n(defn- editable-user-data\n  [edit-user-data new-user-data]\n  (let [changed? (:has-changes edit-user-data)\n        changed-user-data (select-keys edit-user-data [:first-name :last-name :avatar-url :password :timezone :blurb :location :title :profiles :has-changes])]\n    (cond-> (empty-user-data true) ;; Start with the empty user map\n     ;; Merge in the new user data\n     true (merge new-user-data)\n     ;; If user is editing the profile let's merge in all the editable keys\n     changed? (merge changed-user-data)\n     ;; Merge in the fixed avatar url\n     true (assoc :avatar-url (fixed-avatar-url (:avatar-url new-user-data))))))\n\n(defn update-user-data\n  ([db user-data] (update-user-data db user-data false))\n  ([db user-data force-edit-reset?]\n  (let [org-data (dispatcher/org-data db)\n        active-users (dispatcher/active-users (:slug org-data) db)\n        fixed-user-data (parse-user-data user-data org-data active-users)\n        active-user-key (conj (dispatcher/active-users-key (:slug org-data)) (:user-id user-data))\n        next-db (if org-data\n                  (update-in db active-user-key merge fixed-user-data)\n                  db)]\n    (-> next-db\n     (assoc :current-user-data fixed-user-data)\n     (update :edit-user-profile #(editable-user-data (if force-edit-reset? nil %) fixed-user-data))\n     (assoc :edit-user-profile-avatar (:avatar-url fixed-user-data))\n     (dissoc :edit-user-profile-failed)))))\n\n(defmethod dispatcher/action :user-profile-avatar-update/failed\n  [db [_]]\n  (assoc db :edit-user-profile-avatar (:avatar-url (:current-user-data db))))\n\n(defmethod dispatcher/action :user-data\n  [db [_ user-data]]\n  (update-user-data db user-data))\n\n(defmethod dispatcher/action :user-profile-avatar-update/success\n  [db [_ user-data]]\n  (update-user-data db user-data))\n\n;; Login actions\n\n;; Store in application state whether to display the login overlay\n(defmethod dispatcher/action :login-overlay-show\n [db [_ show-login-overlay]]\n (cond\n    (= show-login-overlay :login-with-email)\n    (-> db\n      (assoc dispatcher/show-login-overlay-key show-login-overlay)\n      (assoc :login-with-email {:email \"\" :pswd \"\"})\n      (dissoc :login-with-email-error))\n    (= show-login-overlay :signup-with-email)\n    (-> db\n      (assoc dispatcher/show-login-overlay-key show-login-overlay)\n      (assoc :signup-with-email {:firstname \"\" :lastname \"\" :email \"\" :pswd \"\"})\n      (dissoc :signup-with-email-error))\n    :else\n    (assoc db dispatcher/show-login-overlay-key show-login-overlay)))\n\n(defn- dissoc-auth\n  [db]\n  (dissoc db :latest-auth-settings :latest-entry-point))\n\n(defmethod dispatcher/action :login-with-email\n  [db [_]]\n  (-> db\n      (dissoc :login-with-email-error)\n      (dissoc-auth)))\n\n(defmethod dispatcher/action :login-with-slack\n  [db [_]]\n  (dissoc-auth db))\n\n(defmethod dispatcher/action :login-with-email/failed\n  [db [_ error]]\n  (assoc db :login-with-email-error error))\n\n(defmethod dispatcher/action :login-with-email/success\n  [db [_]]\n  (dissoc db dispatcher/show-login-overlay-key))\n\n;; Auth actions\n\n(defmethod dispatcher/action :auth-with-token\n  [db [ _ token-type]]\n  (-> db\n    (assoc :auth-with-token-type token-type)\n    (dissoc :latest-auth-settings :latest-entry-point)))\n\n(defmethod dispatcher/action :auth-with-token/failed\n  [db [_ error]]\n  (if (= (:auth-with-token-type db) :password-reset)\n    (assoc db :collect-pswd-error error)\n    (assoc db :email-verification-error error)))\n\n(defmethod dispatcher/action :auth-with-token/success\n  [db [_ jwt]]\n  (assoc db :email-verification-success true))\n\n(defmethod dispatcher/action :pswd-collect\n  [db [_ password-reset?]]\n  (-> db\n    (assoc :is-password-reset password-reset?)\n    (dissoc :latest-entry-point :latest-auth-settings)))\n\n(defmethod dispatcher/action :pswd-collect/finish\n  [db [_ status]]\n  (if (and (>= status 200)\n           (<= status 299))\n    (dissoc db :show-login-overlay)\n    (assoc db :collect-password-error status)))\n\n(defmethod dispatcher/action :password-reset\n  [db [_]]\n  (dissoc db :latest-entry-point :latest-auth-settings))\n\n(defmethod dispatcher/action :password-reset/finish\n  [db [_ status]]\n  (assoc-in db [:password-reset :success] (and (>= status 200) (<= status 299))))\n\n(defmethod dispatcher/action :user-profile-reset\n  [db [_]]\n  (update-user-data db (:current-user-data db) true))\n\n(defmethod dispatcher/action :user-profile-save\n  [db [_]]\n  (-> db\n      ;; Loading user data\n      (update :edit-user-profile merge {:loading true :has-changes false})\n      ;; Force a refresh of entry-point and auth-settings\n      (dissoc :latest-entry-point :latest-auth-settings)\n      ;; Remove the new-slack-user flag to avoid redirecting to the profile again\n      (dissoc :new-slack-user)))\n\n(defmethod dispatcher/action :user-profile-update/failed\n  [db [_]]\n  (-> db\n   (assoc :edit-user-profile-failed true)\n   (update :edit-user-profile merge {:loading false :has-changes true})))\n\n;; Signup actions\n\n(defmethod dispatcher/action :signup-with-email\n  [db [_]]\n  (-> db\n    (dissoc :signup-with-email-error :latest-auth-settings :latest-entry-point)\n    (assoc-in [:signup-with-email :error] nil)))\n\n(defmethod dispatcher/action :signup-with-email/failed\n  [db [_ status]]\n  (assoc-in db [:signup-with-email :error] status))\n\n(defmethod dispatcher/action :signup-with-email/success\n  [db [_]]\n  (dissoc db :signup-with-email-error))\n\n;; Logout action\n\n(defmethod dispatcher/action :logout\n  [db _]\n  (dissoc db :jwt :latest-entry-point :latest-auth-settings))\n\n(defn orgs? []\n  (contains? @dispatcher/app-state dispatcher/orgs-key))\n\n;; API entry point\n(defmethod dispatcher/action :entry-point\n  [db [_ orgs collection]]\n  (-> db\n      (assoc :latest-entry-point (.getTime (js/Date.)))\n      (dissoc :loading)\n      (assoc dispatcher/orgs-key orgs)\n      (assoc-in dispatcher/api-entry-point-key (:links collection))\n      (dissoc :slack-lander-check-team-redirect :email-lander-check-team-redirect)))\n\n;; Invitation\n(defmethod dispatcher/action :invitation-confirmed\n  [db [_ confirmed]]\n  (-> db\n      (assoc :email-confirmed confirmed)\n      (dissoc :latest-entry-point :latest-auth-settings)))\n\n(defn has-slack-bot? [org-data]\n  (j/team-has-bot? (:team-id org-data)))\n\n;; User notifications\n(defmethod dispatcher/action :user-notifications\n  [db [_ org-slug notifications]]\n  (assoc-in db (dispatcher/user-notifications-key org-slug) notifications))\n\n;; User notifications\n(defmethod dispatcher/action :user-notification\n  [db [_ org-slug notification]]\n  (let [user-notifications-key (dispatcher/user-notifications-key org-slug)\n        old-notifications (get-in db (dispatcher/sorted-user-notifications-key org-slug))\n        new-notifications (cons notification old-notifications)]\n    (assoc-in db user-notifications-key (notif-utils/fix-notifications db new-notifications))))\n\n(defmethod dispatcher/action :user-notifications/read\n  [db [_ org-slug]]\n  (let [user-notifications-key (dispatcher/user-notifications-key org-slug)\n        old-notifications (get-in db (dispatcher/sorted-user-notifications-key org-slug))\n        read-notifications (map #(assoc % :unread false) old-notifications)]\n    (assoc-in db user-notifications-key (notif-utils/fix-notifications db read-notifications))))\n\n(defmethod dispatcher/action :user-notification/read\n  [db [_ org-slug notification]]\n  (let [user-notifications-key (dispatcher/user-notifications-key org-slug)\n        old-notifications (get-in db (dispatcher/sorted-user-notifications-key org-slug))\n        read-notifications (map #(if (= (:notify-at %) (:notify-at notification)) (assoc % :unread false) %) old-notifications)]\n    (assoc-in db user-notifications-key (notif-utils/fix-notifications db read-notifications))))\n\n(defmethod dispatcher/action :user-notification-remove-by-entry\n  [db [_ org-slug board-id entry-id]]\n  (let [notifications (get-in db (dispatcher/sorted-user-notifications-key org-slug))\n        filtered-notifications (filter #(or (not= board-id (:board-id %))\n                                            (not= entry-id (:entry-id %)))\n                                notifications)]\n    (assoc-in db (dispatcher/user-notifications-key org-slug)\n     (notif-utils/fix-notifications db filtered-notifications))))\n\n;; Expo push tokens\n\n(defmethod dispatcher/action :expo-push-token\n  [db [_ push-token]]\n  (if push-token\n    (assoc-in db dispatcher/expo-push-token-key push-token)\n    db))\n\n;; Follow\n\n(defn enrich-publishers-list [publishers-list active-users-map]\n  (if (and (seq publishers-list) (seq active-users-map))\n    (let [publisher-uuids (remove nil? (if (every? map? publishers-list)\n                           (map :user-id publishers-list)\n                           publishers-list))]\n      (->> publisher-uuids\n       (map active-users-map)\n       (sort-by :short-name)\n       vec))\n    publishers-list))\n\n(defn- filter-org-boards [boards-data]\n  ;; Filter out drafts board\n  (filter #(and (not (:publisher-board %))\n                (not= (:uuid %) (:uuid utils/default-drafts-board)))\n   boards-data))\n\n(defn enrich-boards-list [unfollow-board-uuids org-boards]\n  (when (seq org-boards)\n    (let [all-board-uuids (->> org-boards filter-org-boards (map :uuid) set)\n          follow-board-uuids (clojure.set/difference all-board-uuids (set unfollow-board-uuids))\n          boards-map (zipmap (map :uuid org-boards) org-boards)]\n       (->> follow-board-uuids\n            (map boards-map)\n            (sort-by :name)\n            vec))))\n\n(defn- update-contributions-and-boards\n  \"Given the new list of board and publisher followers, update the following flag in each board and contributions data we have.\"\n  [db org-slug follow-boards-list follow-publishers-list]\n  (let [change-data (dispatcher/change-data db)\n        org-data (dispatcher/org-data db org-slug)\n        follow-publisher-uuids-set (set (map :user-id follow-publishers-list))\n        contributions-list-key (dispatcher/contributions-list-key org-slug)\n        next-active-users (apply merge\n                           (map (fn [[k v]] (hash-map k (assoc v :following (-> v :user-id follow-publisher-uuids-set))))\n                            (dispatcher/active-users org-slug db)))\n        next-db* (assoc-in db (dispatcher/active-users-key org-slug) next-active-users)\n        next-db (reduce (fn [tdb contrib-key]\n                         (let [rp-contrib-data-key (dispatcher/contributions-data-key org-slug contrib-key dispatcher/recently-posted-sort)\n                               ra-contrib-data-key (dispatcher/contributions-data-key org-slug contrib-key dispatcher/recent-activity-sort)]\n                           (-> tdb\n                            (update-in rp-contrib-data-key\n                             #(dissoc (au/parse-contributions % change-data org-data next-active-users follow-publishers-list dispatcher/recently-posted-sort) :fixed-items))\n                            (update-in ra-contrib-data-key\n                             #(dissoc (au/parse-contributions % change-data org-data next-active-users follow-publishers-list dispatcher/recent-activity-sort) :fixed-items)))))\n                  next-db*\n                  (keys (get-in db contributions-list-key)))\n        boards-key (dispatcher/boards-key org-slug)]\n      (reduce (fn [tdb board-key]\n               (let [rp-board-data-key (dispatcher/board-data-key org-slug board-key dispatcher/recently-posted-sort)\n                     ra-board-data-key (dispatcher/board-data-key org-slug board-key dispatcher/recent-activity-sort)]\n                 (-> tdb\n                  (update-in rp-board-data-key\n                   #(dissoc (au/parse-board % change-data next-active-users follow-boards-list dispatcher/recently-posted-sort) :fixed-items))\n                  (update-in ra-board-data-key\n                   #(dissoc (au/parse-board % change-data next-active-users follow-boards-list dispatcher/recent-activity-sort) :fixed-items)))))\n       next-db\n       (keys (get-in db boards-key)))))\n\n(defmethod dispatcher/action :follow/loaded\n  [db [_ org-slug {:keys [follow-publisher-uuids unfollow-board-uuids user-id] :as resp}]]\n  (if (= org-slug (:org-slug resp))\n    (let [org-data-key (dispatcher/org-data-key org-slug)\n          org-data (get-in db org-data-key)\n          unfollow-boards-uuids-set (set unfollow-board-uuids)\n          updated-org-data (update org-data :boards (fn [boards] (map #(assoc % :following (not (unfollow-boards-uuids-set (:uuid %)))) boards)))\n          follow-publisher-uuids-set (set follow-publisher-uuids)\n          active-users (dispatcher/active-users org-slug db)\n          follow-publishers-list-key (dispatcher/follow-publishers-list-key org-slug)\n          follow-boards-list-key (dispatcher/follow-boards-list-key org-slug)\n          next-follow-boards-data (enrich-boards-list unfollow-board-uuids (:boards org-data))\n          next-follow-publishers-data (enrich-publishers-list follow-publisher-uuids active-users)]\n      (-> db\n       (assoc-in org-data-key updated-org-data)\n       (assoc-in follow-publishers-list-key next-follow-publishers-data)\n       (assoc-in follow-boards-list-key next-follow-boards-data)\n       (assoc-in (dispatcher/unfollow-board-uuids-key org-slug) unfollow-board-uuids)\n       (update-contributions-and-boards org-slug next-follow-boards-data next-follow-publishers-data)))\n      db))\n\n(defmethod dispatcher/action :followers-count/finish\n  [db [_ org-slug data]]\n  (let [publisher-uuids (filter au/user? data)\n        publishers-map (zipmap (map :resource-uuid publisher-uuids) publisher-uuids)\n\n        unfollow-boards (filter au/board? data)\n        unfollow-boards-map (zipmap (map :resource-uuid unfollow-boards) unfollow-boards)\n        active-users-count (count (dispatcher/active-users org-slug db))\n        all-board-uuids (->> (dispatcher/org-data db org-slug) :boards filter-org-boards (map :uuid))\n        all-boards-count (apply merge\n                          (map #(hash-map % {:resource-uuid %\n                                             :resource-type :board\n                                             :count (if-let [unfollow-board (get unfollow-boards-map %)]\n                                                      (- active-users-count (:count unfollow-board))\n                                                      active-users-count)})\n                           all-board-uuids))]\n    (-> db\n     (assoc-in (dispatcher/followers-publishers-count-key org-slug) publishers-map)\n     (assoc-in (dispatcher/followers-boards-count-key org-slug) all-boards-count))))\n\n(defmethod dispatcher/action :publisher/follow\n  [db [_ org-slug {:keys [publisher-uuids follow? publisher-uuid] :as resp}]]\n  (if (= org-slug (:org-slug resp))\n    (let [follow-publishers-list-key (dispatcher/follow-publishers-list-key org-slug)\n          active-users (dispatcher/active-users org-slug db)\n          next-follow-publishers-data (enrich-publishers-list publisher-uuids active-users)\n          followers-count-key (dispatcher/followers-publishers-count-key org-slug)\n          publisher-count-key (conj followers-count-key publisher-uuid)\n          fn (cond (true? follow?) inc (false? follow?) dec :else identity)\n          follow-boards-data (dispatcher/follow-boards-list org-slug db)]\n      (-> db\n       (assoc-in follow-publishers-list-key next-follow-publishers-data)\n       (update-in publisher-count-key #(if %\n                                         (update % :count fn)\n                                         {:org-slug org-slug\n                                          :resource-uuid publisher-uuid\n                                          :resource-type :user\n                                          :count (if follow? 1 0)}))\n       (update-contributions-and-boards org-slug follow-boards-data next-follow-publishers-data)))\n    db))\n\n(defmethod dispatcher/action :board/follow\n  [db [_ org-slug {:keys [board-uuids follow? board-uuid] :as resp}]]\n  (if (= org-slug (:org-slug resp))\n    (let [follow-boards-list-key (dispatcher/follow-boards-list-key org-slug)\n          org-data-key (dispatcher/org-data-key org-slug)\n          org-data (get-in db org-data-key)\n          org-boards (:boards org-data)\n          unfollow-board-uuids-key (dispatcher/unfollow-board-uuids-key org-slug)\n          all-board-uuids (set (map :uuid org-boards))\n          updated-org-data (update org-data :boards (fn [boards] (map #(assoc % :following (if (= (:uuid %) board-uuid) follow? (:following %))) boards)))\n          next-unfollow-uuids (clojure.set/difference all-board-uuids (set board-uuids))\n          next-follow-boards-data (enrich-boards-list next-unfollow-uuids org-boards)\n          followers-count-key (dispatcher/followers-boards-count-key org-slug)\n          board-count-key (conj followers-count-key board-uuid)\n          fn (cond (true? follow?) inc (false? follow?) dec :else identity)\n          follow-publishers-data (dispatcher/follow-publishers-list org-slug db)]\n      (-> db\n       (assoc-in follow-boards-list-key next-follow-boards-data)\n       (assoc-in unfollow-board-uuids-key next-unfollow-uuids)\n       (assoc-in org-data-key updated-org-data)\n       (update-in board-count-key #(if %\n                                     (update % :count fn)\n                                     {:org-slug org-slug\n                                      :resource-uuid board-uuid\n                                      :resource-type :board\n                                      :count (if follow? 1 0)}))\n       (update-contributions-and-boards org-slug next-follow-boards-data follow-publishers-data)))\n    db))\n\n(defmethod dispatcher/action :follow-list-last-added\n  [db [_ org-slug {:keys [last-added-uuid resource-type] :as x}]]\n  (let [follow-list-last-added-key (conj (dispatcher/follow-list-last-added-key org-slug) resource-type)]\n    (assoc-in db follow-list-last-added-key last-added-uuid)))"]}