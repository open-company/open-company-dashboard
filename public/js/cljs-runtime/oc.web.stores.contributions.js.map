{"version":3,"sources":["oc/web/stores/contributions.cljs"],"mappings":";AAQA,AAAAA,AAAA,AAAA,AAAAC,AACGG;AADH,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AACOG;AADP,AAAAF,AAAAD,AAAA,AAAA,AACSI;AADT,AAAAH,AAAAD,AAAA,AAAA,AACkBK;AADlB,AAAAJ,AAAAD,AAAA,AAAA,AAC8BM;AAD9B,AAAAL,AAAAD,AAAA,AAAA,AACwCO;AADxC,AAEE,AAAMC,AAAS,AAACC,AAAoBP,AAAGE;AACjCM,AAA2BH,AAAyB,AAAA,AAAA,AAAA,AAAA,AAACI;AACrDC,AAAmB,AAACC,AAAuBH,AAAuB,AAACI,AAAuBZ,AAAIM,AAAS,AAACO,AAAwBX,AAASF,AAAI,AAACc,AAAkCZ,AAASF,AAAII;AAC7LW,AAAiB,AAACC,AAAkCd,AAASC,AAAYC;AACzEa,AAAU,AAACC,AAA0BhB;AACrCiB,AAAa,AAACC,AAAM,AAACC,AAAOrB,AAAGiB,AACX,AAAA,AAAcP;AANxC,AAOMV,AACH,AAACsB,AAAUL,AAAUM,AAAM,AAAA,AAAcb,AACzC,AAACc,AAAST,AAAiB,AAAA,AAACU,AAAOf;;AAExC,AAAAd,AAAA,AAAA,AAAA8B,AACG1B;AADH,AAAA,AAAA2B,AAAAD;AAAA,AAAA3B,AAAA4B,AAAA,AAAA,AACO1B;AADP,AAAAF,AAAA4B,AAAA,AAAA,AACSzB;AADT,AAAAH,AAAA4B,AAAA,AAAA,AACkBxB;AADlB,AAAAJ,AAAA4B,AAAA,AAAA,AAC8BvB;AAD9B,AAEE,AAAMW,AAAiB,AAACC,AAAkCd,AAASC,AAAYC;AACzEC,AAAa,AAACgB,AAAOrB,AAAGe;AACxBa,AAAkB,AAAA,AAAA,AAACnB,AAAMJ;AAF/B,AAGE,AAACmB,AAASxB,AAAGe,AAAiBa;;AAElC,AAAAhC,AAAA,AAAA,AAAAiC,AACG7B;AADH,AAAA,AAAA8B,AAAAD;AAAA,AAAA9B,AAAA+B,AAAA,AAAA,AACO7B;AADP,AAAAF,AAAA+B,AAAA,AAAA,AACS5B;AADT,AAAAH,AAAA+B,AAAA,AAAA,AACkB3B;AADlB,AAAAJ,AAAA+B,AAAA,AAAA,AAC8B1B;AAD9B,AAAAL,AAAA+B,AAAA,AAAA,AACwCC;AADxC,AAAAhC,AAAA+B,AAAA,AAAA,AACkDF;AADlD,AAEE,AAAIA;AACF,AAAMb,AAAiB,AAACC,AAAkCd,AAASC,AAAYC;AACzEC,AAAa,AAACgB,AAAOrB,AAAGe;AACxBiB,AAAe,AAACd,AAA0BhB;AAC1C+B,AAAU,AAACZ,AAAOrB,AAAGgC;AACrBE,AAAqB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACd,AAAMQ,AAA+B,AAAA,AAAavB,AACd,AAAA,AAAQA;AAElEC,AAAS,AAACC,AAAoBP,AAAGE;AACjCQ,AAAmB,AAACyB,AAAuBD,AAAqB,AAACtB,AAAuBZ,AAAIM,AAAS,AAACO,AAAwBX,AAASF,AAAI,AAACc,AAAkCZ,AAASF,AAAII,AAAU2B;AACrMK,AAAc,AAAChB,AAAMa,AAAU,AAAA,AAAcvB;AAC7C2B,AAAqB3B,AACH,AAAA,AAACD,AAAiBsB,AAClB,AAAA,AAACN;AAZzB,AAaMzB,AACF,AAACwB,AAAST,AAAiBsB,AAC3B,AAACb,AAASQ,AAAeI;;AAC7BpC","names":["oc.web.dispatcher/action","p__44150","vec__44151","cljs.core.nth","db","_","org-slug","author-uuid","sort-type","contrib-data","org-data","oc.web.dispatcher.org_data","prepare-container-data","cljs.core.assoc","fixed-contrib-data","oc.web.utils.activity/parse-contributions","oc.web.dispatcher.change_data","oc.web.dispatcher.active_users","oc.web.dispatcher.follow_publishers_list","contrib-data-key","oc.web.dispatcher.contributions_data_key","posts-key","oc.web.dispatcher/posts-data-key","merged-items","cljs.core.merge","cljs.core.get_in","cljs.core.update_in","cljs.core/merge","cljs.core/assoc-in","cljs.core.dissoc","p__44154","vec__44155","next-contrib-data","p__44158","vec__44159","direction","posts-data-key","old-posts","prepare-contrib-data","oc.web.utils.activity.parse_contributions","new-items-map","new-contrib-data"],"sourcesContent":["(ns oc.web.stores.contributions\n  (:require [cuerdas.core :as str]\n            [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.jwt :as j]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.activity :as au]))\n\n(defmethod dispatcher/action :contributions-get/finish\n  [db [_ org-slug author-uuid sort-type contrib-data]]\n  (let [org-data (dispatcher/org-data db org-slug)\n        prepare-container-data (-> contrib-data :collection (assoc :container-slug :contributions))\n        fixed-contrib-data (au/parse-contributions prepare-container-data (dispatcher/change-data db) org-data (dispatcher/active-users org-slug db) (dispatcher/follow-publishers-list org-slug db) sort-type)\n        contrib-data-key (dispatcher/contributions-data-key org-slug author-uuid sort-type)\n        posts-key (dispatcher/posts-data-key org-slug)\n        merged-items (merge (get-in db posts-key)\n                            (:fixed-items fixed-contrib-data))]\n    (-> db\n     (update-in posts-key merge (:fixed-items fixed-contrib-data))\n     (assoc-in contrib-data-key (dissoc fixed-contrib-data :fixed-items)))))\n\n(defmethod dispatcher/action :contributions-more\n  [db [_ org-slug author-uuid sort-type]]\n  (let [contrib-data-key (dispatcher/contributions-data-key org-slug author-uuid sort-type)\n        contrib-data (get-in db contrib-data-key)\n        next-contrib-data (assoc contrib-data :loading-more true)]\n    (assoc-in db contrib-data-key next-contrib-data)))\n\n(defmethod dispatcher/action :contributions-more/finish\n  [db [_ org-slug author-uuid sort-type direction next-contrib-data]]\n  (if next-contrib-data\n    (let [contrib-data-key (dispatcher/contributions-data-key org-slug author-uuid sort-type)\n          contrib-data (get-in db contrib-data-key)\n          posts-data-key (dispatcher/posts-data-key org-slug)\n          old-posts (get-in db posts-data-key)\n          prepare-contrib-data (merge next-contrib-data {:posts-list (:posts-list contrib-data)\n                                                         :old-links (:links contrib-data)\n                                                         :container-slug :contributions})\n          org-data (dispatcher/org-data db org-slug)\n          fixed-contrib-data (au/parse-contributions prepare-contrib-data (dispatcher/change-data db) org-data (dispatcher/active-users org-slug db) (dispatcher/follow-publishers-list org-slug db) sort-type direction)\n          new-items-map (merge old-posts (:fixed-items fixed-contrib-data))\n          new-contrib-data (-> fixed-contrib-data\n                            (assoc :direction direction)\n                            (dissoc :loading-more))]\n      (-> db\n        (assoc-in contrib-data-key new-contrib-data)\n        (assoc-in posts-data-key new-items-map)))\n    db))"]}