{"version":3,"sources":["oc/web/mixins/section.cljs"],"mappings":"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","names":["oc.web.mixins.section/container-nav-in","s","oc.web.ws.change-client/container-watch","oc.web.mixins.section/focus-reload","temp__5735__auto__","slug","or__4126__auto__","oc.web.dispatcher.current_board_slug","oc.web.dispatcher.current_contributions_id","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.actions.activity/refresh-board-data","oc.web.mixins.section/window-focus-auto-loader","throttled-refresh","js/goog.async.Throttle","fire!","js/window","oc.web.mixins.section/default-get-comments-delay","var_args","G__40032","oc.web.mixins.section/load-entry-comments","js/Error","container-data-get","oc.web.mixins.section.load_entry_comments","delay","loaded-uuids","cljs.core.atom","load-comments","container-data","seq__40033","cljs.core/seq","chunk__40036","count__40037","i__40038","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","entry","and__4115__auto__","oc.web.utils.activity/entry?","cljs.core/not","G__40052","fexpr__40051","cljs.core/deref","G__40056","fexpr__40055","full-entry","oc.web.dispatcher.activity_data","cljs.core.swap_BANG_","cljs.core/conj","oc.web.lib.utils/after","oc.web.utils.activity.get_comments_if_needed","_"],"sourcesContent":["(ns oc.web.mixins.section\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.activity :as au]\n            [oc.web.ws.change-client :as ws-cc]\n            [oc.web.actions.activity :as activity-actions])\n  (:import [goog.async Throttle]))\n\n(def container-nav-in\n  {:did-mount (fn [s]\n   (ws-cc/container-watch)\n   s)})\n\n(defn focus-reload []\n  (when-let [slug (or (dis/current-board-slug)\n                      (dis/current-contributions-id))]\n    (timbre/info \"Reloading data for:\" slug)\n    (activity-actions/refresh-board-data slug)))\n\n(def window-focus-auto-loader\n  (let [throttled-refresh (Throttle. focus-reload 5000)\n        fire! #(.fire throttled-refresh)]\n    {:did-mount\n     (fn [s]\n       (.addEventListener js/window \"focus\" fire!)\n       s)\n     :will-unmount\n     (fn [s]\n       (.removeEventListener js/window \"focus\" fire!)\n       (.stop throttled-refresh)\n       (.dispose throttled-refresh)\n       s)}))\n\n(def ^:private default-get-comments-delay 0)\n\n(defn load-entry-comments\n  ([container-data-get] (load-entry-comments container-data-get default-get-comments-delay))\n  ([container-data-get delay]\n  (let [loaded-uuids (atom #{})\n        load-comments (fn [s]\n                        (when-let [container-data (container-data-get s)]\n                          (doseq [entry (:posts-list container-data)\n                                  :when (and (au/entry? entry)\n                                             (not (@loaded-uuids (:uuid entry)))\n                                             (not (:comments-loaded? entry)))\n                                  :let [full-entry (dis/activity-data (:uuid entry))]]\n                            (swap! loaded-uuids conj (:uuid entry))\n                            (utils/after delay\n                              #(au/get-comments-if-needed full-entry)))))]\n    {:did-mount (fn [s]\n     (load-comments s)\n     s)\n     :did-remount (fn [_ s]\n     (load-comments s)\n     s)})))"]}