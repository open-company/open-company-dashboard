{"version":3,"sources":["oc/web/stores/comment.cljs"],"mappings":"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","names":["oc.web.dispatcher/action","p__42791","vec__42792","cljs.core.nth","db","_","org-slug","focus-value","reply-data","t","cljs.core.update_in","oc.web.dispatcher/comment-reply-to-key","cljs.core/merge","cljs.core.assoc","p__42795","vec__42796","cljs.core/dissoc","p__42801","vec__42802","activity-uuid","parent-comment-uuid","comment-uuid","comment-body","force-update?","comment-key","oc.web.dispatcher.add_comment_string_key","add-comment-activity-key","oc.web.dispatcher/add-comment-activity-key","cljs.core/assoc-in","p1__42799#","oc.web.dispatcher/add-comment-force-update-key","oc.web.lib.utils/activity-uuid","p__42807","vec__42808","add-comment-key","oc.web.dispatcher/add-comment-key","p__42811","vec__42812","focus-uuid","p__42816","vec__42817","p1__42815#","cljs.core.update","cljs.core._EQ_","p__42820","vec__42821","activity-data","comment-data","comments-key","activity-key","oc.web.dispatcher/activity-key","sorted-comments-key","cljs.core/vec","cljs.core.conj","oc.web.dispatcher/sorted-comments-key","comments-data","oc.web.utils.comment/ungroup-comments","cljs.core.get_in","new-comment-data","oc.web.utils.activity.parse_comment","oc.web.dispatcher.org_data","all-comments","cljs.core.concat","sorted-comments","oc.web.utils.comment.sort_comments","links","cljs.core.mapv","link","cljs.core.merge","cuerdas.core/replace","p__42825","vec__42826","new-comment-uuid","old-comments-data","p1__42824#","cljs.core/filterv","cljs.core.not_EQ_","sorted-all-comments","p__42869","vec__42870","map__42873","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","body","p__42884","vec__42885","filtered-comments","p1__42883#","sorted-filtered-comments","p__42893","vec__42894","p1__42892#","p__42898","vec__42899","p__42911","vec__42912","map__42915","success","error","secure-activity-uuid","org-data","oc.web.dispatcher.secure_activity_data","oc.web.dispatcher.activity_data","cleaned-comments","p1__42902#","cljs.core.map","p__42933","vec__42934","item-uuid","new-comments-data","p1__42932#","p__42940","vec__42941","reaction-data","reacting?","p1__42937#","cljs.core/some","reactions-data","reaction","reaction-idx","p1__42938#","oc.web.lib.utils/index-of","reacted?","cljs.core/not","old-link","cljs.core/first","new-link","with-new-link","with-new-reacted","new-count","new-reaction-data","new-reactions-data","p1__42939#","cljs.core.filter","cljs.core/cons","new-sorted-comments-data","p__42947","vec__42949","p1__42944#","p1__42945#","p1__42946#","p__42981","vec__42982","updated-comment-map*","updated-comment-map","cljs.core.dissoc","p1__42980#","sorted-new-comments","p__42987","vec__42988","interaction-data","ws-comment-data","p1__42985#","oc.web.lib.utils.js_date","body-comment-data","update-comment-data","cljs.core/contains?","p1__42986#","p__43015","vec__43016","last-read-at","oc.web.dispatcher/activity-comments-key","deleting-comment-data","p1__43012#","current-user-id","oc.web.lib.jwt/user-id","deleting-new-comment?","oc.web.utils.comment.comment_unread_QMARK_","p1__43013#","cljs.core.remove","last-not-own-comment","cljs.core/last","cljs.core.sort_by","p1__43014#","cljs.core/dec","cljs.core/identity","p__43029","vec__43030","entry-data","created-at","comments-link-idx","p1__43024#","with-increased-count","cljs.core/inc","old-authors","or__4126__auto__","new-author","new-authors","and__4115__auto__","p1__43025#","with-authors","old-comments-count","new-comments-count","with-last-activity-at","oc.web.dispatcher/activity-sorted-comments-key","all-old-comments-data","replies-badge-key","oc.web.dispatcher/replies-badge-key","follow-boards-list","oc.web.dispatcher.follow_boards_list","follow-boards-set","cljs.core/set","replies-data","oc.web.dispatcher.replies_data","should-badge-replies?","oc.web.lib.utils.link_for","oc.web.utils.comment.comment_unseen_QMARK_","p1__43026#","p1__43027#","p1__43028#"],"sourcesContent":["(ns oc.web.stores.comment\n  (:require [taoensso.timbre :as timbre]\n            [defun.core :refer (defun)]\n            [cuerdas.core :as string]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.comment :as cu]\n            [oc.web.utils.activity :as au]\n            [oc.web.local-settings :as ls]\n            [oc.web.dispatcher :as dispatcher]))\n\n(defmethod dispatcher/action :add-comment/reply\n  [db [_ org-slug focus-value reply-data]]\n  (as-> db t\n   (update-in t (dispatcher/comment-reply-to-key org-slug) merge {focus-value reply-data})\n   (if (:focus reply-data)\n    (assoc t :add-comment-focus focus-value)\n    t)))\n\n(defmethod dispatcher/action :add-comment/reset-reply\n  [db [_ org-slug focus-value]]\n  (update-in db (dispatcher/comment-reply-to-key org-slug) dissoc focus-value))\n\n(defmethod dispatcher/action :add-comment-change\n  [db [_ org-slug activity-uuid parent-comment-uuid comment-uuid comment-body force-update?]]\n  (let [comment-key (dispatcher/add-comment-string-key activity-uuid parent-comment-uuid comment-uuid)\n        add-comment-activity-key (dispatcher/add-comment-activity-key org-slug comment-key)]\n    (-> db\n      (assoc-in add-comment-activity-key comment-body)\n      ;; Force refresh of the add comment field, needed in case the post comment fails and we need\n      ;; to move the body back in the field to let the user retry\n      (update-in (dispatcher/add-comment-force-update-key comment-key) #(if force-update? (utils/activity-uuid) %)))))\n\n(defmethod dispatcher/action :add-comment-reset\n  [db [_ org-slug activity-uuid parent-comment-uuid comment-uuid]]\n  (let [add-comment-key (dispatcher/add-comment-key org-slug)\n        comment-key (dispatcher/add-comment-string-key activity-uuid parent-comment-uuid comment-uuid)\n        add-comment-activity-key (dispatcher/add-comment-activity-key org-slug comment-key)]\n    (-> db\n      ;; Lose the cached body\n      (update-in add-comment-key dissoc comment-key)\n      ;; Force refresh of the add comment field to remove the body\n      (assoc-in (dispatcher/add-comment-force-update-key comment-key) (utils/activity-uuid)))))\n\n(defmethod dispatcher/action :add-comment-focus\n  [db [_ focus-uuid]]\n  (assoc db :add-comment-focus focus-uuid))\n\n(defmethod dispatcher/action :add-comment-blur\n  [db [_ focus-uuid]]\n  (update db :add-comment-focus #(if (= focus-uuid %) nil %)))\n\n(defmethod dispatcher/action :comment-add\n  [db [_ org-slug activity-data comment-data parent-comment-uuid comments-key]]\n  (let [activity-key (dispatcher/activity-key org-slug (:uuid activity-data))\n        sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        new-comment-data (au/parse-comment (dispatcher/org-data db org-slug) activity-data comment-data)\n        all-comments (concat comments-data [new-comment-data])\n        sorted-comments (cu/sort-comments all-comments)]\n    (-> db\n     (assoc-in sorted-comments-key sorted-comments)\n     ;; Reset new comments count\n     (assoc-in (conj activity-key :new-comments-count) 0)\n     (assoc-in (conj activity-key :unseen-comments) false)\n     (update-in (conj activity-key :links) (fn [links]\n                                             (mapv (fn [link]\n                                              (if (= (:rel link) \"follow\")\n                                                (merge link {:href (string/replace (:href link) #\"/follow/?$\" \"/unfollow/\")\n                                                             :rel \"unfollow\"})\n                                                link))\n                                               links))))))\n\n(defmethod dispatcher/action :comment-add/replace\n  [db [_ activity-data comment-data comments-key new-comment-uuid]]\n  (let [sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        old-comments-data (filterv #(not= (:uuid %) new-comment-uuid) comments-data)\n        new-comment-data (au/parse-comment (dispatcher/org-data db) activity-data comment-data)\n        all-comments (concat old-comments-data [new-comment-data])\n        sorted-all-comments (cu/sort-comments all-comments)]\n    (assoc-in db sorted-comments-key sorted-all-comments)))\n\n(defmethod dispatcher/action :comment-add/finish\n  [db [_ {:keys [activity-data body]}]]\n  (assoc db :comment-add-finish true))\n\n(defmethod dispatcher/action :comment-add/failed\n  [db [_ activity-data comment-data comments-key]]\n  (let [sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        all-comments (cu/ungroup-comments (get-in db sorted-comments-key))\n        filtered-comments (filterv #(not= (:uuid comment-data) (:uuid %)) all-comments)\n        sorted-filtered-comments (cu/sort-comments filtered-comments)]\n    (assoc-in db sorted-comments-key sorted-filtered-comments)))\n\n(defmethod dispatcher/action :comment-save/failed\n  [db [_ activity-data comment-data comments-key]]\n  (let [sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        all-comments (cu/ungroup-comments  (get-in db sorted-comments-key))\n        filtered-comments (filterv #(not= (:uuid comment-data) (:uuid %)) all-comments)\n        sorted-filtered-comments (cu/sort-comments (conj filtered-comments comment-data))]\n    (assoc-in db sorted-comments-key sorted-filtered-comments)))\n\n(defmethod dispatcher/action :comments-get\n  [db [_ comments-key activity-data]]\n  (assoc-in db (vec (conj comments-key :loading)) true))\n\n(defmethod dispatcher/action :comments-get/finish\n  [db [_ {:keys [success error comments-key body secure-activity-uuid activity-uuid]}]]\n  (if success\n    (let [org-data (dispatcher/org-data db)\n          activity-data (if secure-activity-uuid\n                          (dispatcher/secure-activity-data (:slug org-data) secure-activity-uuid db)\n                          (dispatcher/activity-data (:slug org-data) activity-uuid db))\n          cleaned-comments (map #(au/parse-comment org-data activity-data %) (:items (:collection body)))\n          sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n          sorted-comments (cu/sort-comments cleaned-comments)]\n      (-> db\n       (assoc-in sorted-comments-key sorted-comments)\n       (assoc-in (vec (conj comments-key :loading)) false)))\n    (assoc-in db (vec (conj comments-key :loading)) false)))\n\n(defmethod dispatcher/action :comment-delete\n  [db [_ activity-uuid comment-data comments-key]]\n  (let [item-uuid (:uuid comment-data)\n        sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        new-comments-data (filterv #(and (not= item-uuid (:uuid %))\n                                         (not= item-uuid (:parent-uuid %)))\n                           comments-data)\n        sorted-comments (cu/sort-comments new-comments-data)]\n    (assoc-in db sorted-comments-key sorted-comments)))\n\n(defmethod dispatcher/action :comment-reaction-toggle\n  [db [_ comments-key activity-uuid comment-uuid reaction-data reacting?]]\n  (let [sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        comment-data (some #(when (= comment-uuid (:uuid %)) %) comments-data)]\n    ;; the comment has yet to be stored locally in app state so ignore and\n    ;; wait for server side reaction\n    (if comment-data\n      (let [reactions-data (:reactions comment-data)\n            reaction (:reaction reaction-data)\n            reaction-idx (utils/index-of reactions-data #(= (:reaction %) reaction))\n            reacted? (not (:reacted reaction-data))\n            old-link (first (:links reaction-data))\n            new-link (assoc old-link :method (if reacted? \"DELETE\" \"PUT\"))\n            with-new-link (assoc reaction-data :links [new-link])\n            with-new-reacted (assoc with-new-link :reacted reacted?)\n            new-count (if reacted?\n                        (inc (:count reaction-data))\n                        (dec (:count reaction-data)))\n            new-reaction-data (assoc with-new-reacted :count new-count)\n            new-reactions-data (assoc reactions-data reaction-idx new-reaction-data)\n            new-comment-data (assoc comment-data :reactions new-reactions-data)\n            new-comments-data (->> comments-data\n                               (filter #(not= (:uuid %) comment-uuid))\n                               (cons new-comment-data))\n            new-sorted-comments-data (cu/sort-comments new-comments-data)]\n        (assoc-in db sorted-comments-key new-sorted-comments-data))\n      db)))\n\n(defmethod dispatcher/action :comment-react-from-picker\n  [db [_ comments-key activity-uuid comment-uuid reaction]]\n  (let [sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        comment-data (some #(when (= (:uuid %) comment-uuid) %) comments-data)]\n    ;; the comment has yet to be stored locally in app state so ignore and\n    ;; wait for server side reaction\n    (if comment-data\n      (let [reactions-data (:reactions comment-data)\n            reaction-idx (utils/index-of reactions-data #(= (:reaction %) reaction))\n            reaction-data (when reaction-idx\n                            (get reactions-data reaction-idx))\n            reacted? (if reaction-data\n                       (not (:reacted reaction-data))\n                       true)\n            old-link (when reaction-data\n                       (first (:links reaction-data)))\n            new-link (when old-link\n                       (assoc old-link :method (if reacted? \"DELETE\" \"PUT\")))\n            new-count (if reacted?\n                        (inc (:count reaction-data))\n                        (dec (:count reaction-data)))\n            new-reaction-data {:links [new-link]\n                               :reacted reacted?\n                               :reaction reaction\n                               :count new-count}\n            new-reactions-data (if reaction-idx\n                                 (assoc reactions-data reaction-idx new-reaction-data)\n                                 (conj reactions-data new-reaction-data))\n            new-comment-data (assoc comment-data :reactions new-reactions-data)\n            new-comments-data (->> comments-data\n                               (filter #(not= (:uuid %) comment-uuid))\n                               (cons new-comment-data))\n            new-sorted-comments-data (cu/sort-comments new-comments-data)]\n        (assoc-in db sorted-comments-key new-sorted-comments-data))\n      db)))\n\n(defmethod dispatcher/action :comment-save\n  [db [_ org-slug comments-key updated-comment-map*]]\n  (let [updated-comment-map (dissoc updated-comment-map* :thread-children)\n        sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        all-comments (cu/ungroup-comments (get-in db sorted-comments-key))\n        filtered-comments (filterv #(not= (:uuid %) (:uuid updated-comment-map)) all-comments)\n        sorted-new-comments (cu/sort-comments (conj filtered-comments updated-comment-map))]\n    (assoc-in db sorted-comments-key sorted-new-comments)))\n\n(defmethod dispatcher/action :ws-interaction/comment-update\n  [db [_ comments-key interaction-data]]\n  (let [activity-uuid (:resource-uuid interaction-data)\n        org-data (dispatcher/org-data db)\n        activity-data (dispatcher/activity-data (:slug org-data) activity-uuid db)\n        ws-comment-data (:interaction interaction-data)\n        item-uuid (:uuid ws-comment-data)\n        sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        comment-data (some #(when (= item-uuid (:uuid %)) %) comments-data)]\n    (if comment-data\n      (if (<= (utils/js-date\n               (:updated-at comment-data))\n              (utils/js-date (:updated-at comment-data)))\n        (let [body-comment-data (assoc comment-data\n                                  :body (:body ws-comment-data))\n              update-comment-data (assoc body-comment-data\n                                    :updated-at (:updated-at ws-comment-data))\n              new-comment-data (if (contains? update-comment-data :reactions)\n                                 update-comment-data\n                                 (assoc update-comment-data :reactions (:reactions ws-comment-data)))\n              new-comments-data (->> comments-data\n                                 (filter #(not= (:uuid %) item-uuid))\n                                 (cons new-comment-data))\n              new-sorted-comments-data (cu/sort-comments new-comments-data)]\n          (assoc-in db sorted-comments-key new-sorted-comments-data))\n        db)\n      db)))\n\n(defmethod dispatcher/action :ws-interaction/comment-delete\n  [db [_ org-slug interaction-data]]\n  (let [activity-uuid (:resource-uuid interaction-data)\n        item-uuid (:uuid (:interaction interaction-data))\n        last-read-at (:last-read-at (dispatcher/activity-data org-slug activity-uuid db))\n        comments-key (dispatcher/activity-comments-key org-slug activity-uuid)\n        sorted-comments-key (vec (conj comments-key dispatcher/sorted-comments-key))\n        comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n        deleting-comment-data (some #(when (= (:uuid %) item-uuid) %) comments-data)\n        current-user-id (jwt/user-id)\n        deleting-new-comment? (when deleting-comment-data\n                                (cu/comment-unread? deleting-comment-data last-read-at))\n        new-comments-data (vec (remove #(= item-uuid (:uuid %)) comments-data))\n        new-sorted-comments-data (cu/sort-comments new-comments-data)\n        last-not-own-comment (last (sort-by :created-at (filterv #(not= (:user-id %) current-user-id) new-comments-data)))]\n    (-> db\n     (assoc-in sorted-comments-key new-sorted-comments-data)\n     (update-in (dispatcher/activity-key org-slug activity-uuid) merge {:last-activity-at (:created-at last-not-own-comment)})\n     (update-in (conj (dispatcher/activity-key org-slug activity-uuid) :new-comments-count) (if deleting-new-comment? dec identity)))))\n\n(defmethod dispatcher/action :ws-interaction/comment-add\n  [db [_ org-slug entry-data interaction-data]]\n  (if entry-data\n    ;; If the entry is present in the local state\n    (let [; get the comment data from the ws message\n          activity-uuid (:resource-uuid interaction-data)\n          org-data (dispatcher/org-data db org-slug)\n          activity-data (dispatcher/activity-data (:slug org-data) activity-uuid db)\n          comment-data (au/parse-comment org-data activity-data (:interaction interaction-data))\n          created-at (:created-at comment-data)\n          ;; update the comments link of the entry\n          comments-link-idx (utils/index-of\n                             (:links activity-data)\n                             #(and (= (:rel %) \"comments\") (= (:method %) \"GET\")))\n          with-increased-count (update-in activity-data [:links comments-link-idx :count] inc)\n          old-authors (or (:authors (get (:links activity-data) comments-link-idx)) [])\n          new-author (:author comment-data)\n          new-authors (if (and old-authors\n                               (some #(= (:user-id %) (:user-id new-author)) old-authors))\n                        old-authors\n                        (concat [new-author] old-authors))\n          with-authors (assoc-in with-increased-count [:links comments-link-idx :authors] new-authors)\n          old-comments-count (:new-comments-count activity-data)\n          new-comments-count (if (and ;; comment is not from current user\n                                      (not (:author? comment-data))\n                                      ;; and the activity we have is old (last-activity-at is the created-at of the last comment)\n                                      (> (.getTime (utils/js-date (:last-activity-at activity-data)))\n                                         (.getTime (utils/js-date (:created-at comment-data)))))\n                               (inc old-comments-count)\n                               old-comments-count)\n          with-last-activity-at (if (:author? comment-data)\n                                  with-authors\n                                  (-> with-authors\n                                    (assoc :last-activity-at created-at)\n                                    (assoc :new-comments-count new-comments-count)))\n          sorted-comments-key (dispatcher/activity-sorted-comments-key org-slug activity-uuid)\n          all-old-comments-data (cu/ungroup-comments (get-in db sorted-comments-key))\n          replies-badge-key (dispatcher/replies-badge-key org-slug)\n          follow-boards-list (dispatcher/follow-boards-list org-slug db)\n          follow-boards-set (set (map :uuid follow-boards-list))\n          replies-data (dispatcher/replies-data org-slug db)\n          should-badge-replies? (and (not (:author? comment-data))\n                                     ;; If unfollow link is present it means the user is following the entry\n                                     (utils/link-for (:links with-last-activity-at) \"unfollow\")\n                                     ;; And if there \n                                     (cu/comment-unseen? comment-data (:last-seen-at replies-data)))]\n      (if all-old-comments-data\n        (let [;; If we have the previous comments already loaded\n              old-comments-data (filterv :links all-old-comments-data)\n              ;; Add the new comment to the comments list, make sure it's not present already\n              new-comments-data (vec (conj (filter #(not= (:created-at %) created-at) old-comments-data) comment-data))\n              new-sorted-comments-data (cu/sort-comments new-comments-data)]\n          (-> db\n           (assoc-in sorted-comments-key new-sorted-comments-data)\n           (update-in replies-badge-key #(or should-badge-replies? %))\n           (assoc-in (dispatcher/activity-key org-slug activity-uuid) with-last-activity-at)))\n        ;; In case we don't have the comments already loaded just update the :last-activity-at value\n        ;; needed to compare the last read-at of the current user and show NEW comments\n        (-> db\n         (assoc-in (dispatcher/activity-key org-slug activity-uuid) with-last-activity-at)\n         (update-in replies-badge-key #(or should-badge-replies? %)))))\n    db))"]}