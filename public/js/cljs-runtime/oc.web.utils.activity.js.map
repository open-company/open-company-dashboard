{"version":3,"sources":["oc/web/utils/activity.cljs"],"mappings":"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","names":["oc.web.utils.activity/headline-placeholder","oc.web.utils.activity/empty-body-html","var_args","G__41693","oc.web.utils.activity/show-separators?","js/Error","container-slug","oc.web.utils.activity.show_separators_QMARK_","oc.web.dispatcher.current_sort_type","sort-type","cuerdas.core/blank?","cljs.core/not","oc.web.lib.responsive/is-mobile-size?","cljs.core._EQ_","oc.web.dispatcher/recently-posted-sort","G__41703","fexpr__41702","cljs.core.keyword","oc.web.utils.activity/post-month-date-from-date","post-date","G__41704","oc.web.utils.activity/separator-from-date","d","last-monday","two-weeks-ago","first-month","now","oc.web.lib.utils/js-date","month-string","oc.web.lib.utils/full-month-string","oc.web.utils.activity/preserved-keys","oc.web.utils.activity/add-posts-to-separator","post-data","separators-map","oc.web.lib.utils.js_date","item-data","cljs.core/select-keys","cljs.core/seq","cljs.core/last","p1__41705#","cljs.core.update_in","cljs.core/count","cljs.core.conj","cljs.core/vec","cljs.core.assoc","G__41709","oc.web.utils.activity/grouped-posts","full-items-list","items-list","p1__41706#","cljs.core.map","items-map","cljs.core/zipmap","oc.web.utils.activity.grouped_posts","fixed-items","_last-monday","G__41710","cljs.core/mod","_two-weeks-ago","G__41711","_first-month","G__41712","last-date","separators-data","separators","posts","cljs.core/empty?","cljs.core/first","cljs.core/rest","p1__41707#","cljs.core.mapcat","cljs.core.concat","cljs.core.dissoc","cljs.core.remove","cljs.core/nil?","args__33705__auto__","ocr-41715","cljs.core/vector?","ocr-41715_1__41718","cljs.core.nth","cljs.core.match/backtrack","e41722","e__32662__auto__","e41723","cljs.core/Keyword","e41724","e41719","oc.web.utils.activity/resource-type?","resource-data","resource-types","cljs.core/coll?","cljs.core/some","cljs.core.partial","resource-type","oc.web.utils.activity/user?","user-data","oc.web.utils.activity.resource_type_QMARK_","oc.web.utils.activity/board?","board-data","oc.web.utils.activity/container?","container-data","oc.web.utils.activity/contributions?","contrib-data","oc.web.utils.activity/entry?","entry-data","oc.web.utils.activity/comment?","comment-data","ocr-41737","ocr-41737_0__41739","G__41743","e41741","p1__41736#","and__4115__auto__","e41742","e41740","oc.web.utils.activity/is-published?","cljs.core/map?","entry-status","ocr-41744","ocr-41744_0__41748","e41823","e41761","ocr-41744_1__41753","e41821","ocr-41744_0__41752","e41822","e41762","ocr-41744_0__41756","G__41797","G__41798","e41792","G__41795","G__41796","e41794","e41763","ocr-41744_0__41757","ocr-41744_1__41758","G__41788","G__41789","e41779","or__4126__auto__","G__41785","G__41786","e41782","e41766","e41771","e41768","e41764","oc.web.utils.activity/is-publisher?","oc.web.lib.jwt/user-id","entry-author-id","user-id","oc.web.utils.activity.is_published_QMARK_","ocr-41824","ocr-41824_0__41828","e41888","e41850","ocr-41824_1__41830","e41886","ocr-41824_0__41829","e41887","e41851","ocr-41824_0__41831","G__41884","G__41885","e41883","e41852","ocr-41824_0__41832","ocr-41824_1__41833","G__41881","G__41882","e41880","e41864","G__41878","G__41879","e41874","e41865","G__41872","G__41873","e41871","e41866","G__41869","G__41870","e41868","e41867","e41853","ocr-41824_0__41847","G__41862","G__41863","e41858","e41854","ocr-41824_0__41848","ocr-41824_1__41849","e41857","e41856","e41855","oc.web.utils.activity/is-author?","entity-data","author-id","oc.web.utils.activity/board-by-uuid","board-uuid","org-data","oc.web.dispatcher.org_data","boards","p1__41889#","oc.web.utils.activity/reset-truncate-body","body-el","$body-els","js/$","idx","el","this","oc.web.utils.activity/default-body-height","oc.web.utils.activity/default-all-posts-body-height","oc.web.utils.activity/default-draft-body-height","oc.web.utils.activity/truncate-body","height","oc.web.utils.activity/icon-for-mimetype","mimetype","G__41890","cuerdas.core/lower","oc.web.utils.activity/get-activity-date","activity","oc.web.utils.activity/compare-activities","act-1","act-2","time-1","time-2","cljs.core/compare","oc.web.utils.activity/get-sorted-activities","posts-data","cljs.core.sort","cljs.core/vals","oc.web.utils.activity/readonly-org?","links","update-link","oc.web.lib.utils.link_for","oc.web.utils.activity/readonly-board?","new-link","delete-link","oc.web.utils.activity/readonly-entry?","partial-update","delete","ocr-41892","ocr-41892_0__41894","G__41901","G__41902","e41897","ocr-41892_1__41895","p1__41891#","e41898","e41896","oc.web.utils.activity/entry-unseen?","entry","last-seen-at","published-at","oc.web.utils.activity/entry-unread?","changes","board-change-data","cljs.core.get","board-unread","oc.web.lib.utils/in?","oc.web.utils.activity/comments-unseen?","not-self-comments","cljs.core.filter","cljs.core.comp","p1__41903#","oc.web.utils.comment.comment_unseen_QMARK_","oc.web.utils.activity/comments-ignore?","all-unseen","p1__41904#","cljs.core/boolean","cljs.core/every?","oc.web.utils.activity/has-attachments?","data","oc.web.utils.activity/has-headline?","cuerdas.core.trim","oc.web.utils.activity/empty-body?","body","cljs.core/re-matches","oc.web.utils.activity/has-body?","oc.web.utils.activity/has-text?","oc.web.utils.activity/has-content?","oc.web.utils.activity/merge-items-lists","new-items-list","old-items-list","direction","old-uuids","new-uuids","next-items-uuids","cljs.core.distinct","cljs.core/reverse","old-items-map","cljs.core.reduce","merge-items-map","item","merged-item","cljs.core.merge","cljs.core.mapv","oc.web.utils.activity/default-caught-up-message","oc.web.utils.activity/next-activity-timestamp","prev-item","oc.web.lib.utils/as-of-now","G__41908","oc.web.utils.activity/caught-up-map","prev-items","oc.web.utils.activity.caught_up_map","message","t","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.utils.activity/insert-caught-up","p__41914","vec__41915","map__41918","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","seq41909","G__41910","cljs.core/next","G__41911","G__41912","G__41913","self__4723__auto__","check-fn","ignore-fn","hide-top-line","hide-bottom-line","has-next","opts","vec__41920","index","last-valid-idx","current-idx","cljs.core/fn?","before","after","cljs.core/split-at","oc.web.utils.activity/insert-open-close-item","next-item","cljs.core.range","oc.web.utils.activity/insert-ending-item","closing-item?","last-item","p__41929","map__41930","oc.web.utils.activity/get-comments-finished","org-slug","comments-key","activity-data","status","success","oc.web.dispatcher/dispatch!","oc.web.lib.json/json->cljs","oc.web.dispatcher.current_secure_activity_id","replies-data","cljs.core/deref","oc.web.dispatcher.replies_data","oc.web.dispatcher/app-state","current-board-slug","oc.web.dispatcher.current_board_slug","is-replies?","entry-is-in-replies?","p1__41927#","oc.web.lib.utils/after","oc.web.utils.activity/get-comments","oc.web.dispatcher.current_org_slug","oc.web.dispatcher/activity-comments-key","comments-link","p1__41932#","oc.web.api/get-comments","G__41934","oc.web.utils.activity/get-comments-if-needed","oc.web.utils.activity.get_comments_if_needed","oc.web.dispatcher.comments_data","all-comments-data","activity-uuid","comments-data","should-load-comments?","cljs.core/contains?","oc.web.utils.activity/is-emoji","plain-text","is-emoji?","js/RegExp","is-text-message?","ocr-41938","ocr-41938_2__41943","e41974","e41955","ocr-41938_2__41946","e41966","G__41970","G__41971","G__41972","G__41973","e41967","ocr-41938_3__41947","p1__41935#","p1__41936#","e41969","e41968","e41956","ocr-41938_0__41948","ocr-41938_1__41949","ocr-41938_2__41950","e41965","e41964","e41963","e41957","ocr-41938_0__41951","ocr-41938_1__41952","ocr-41938_2__41953","ocr-41938_3__41954","p1__41937#","e41962","e41961","e41960","e41959","e41958","oc.web.utils.activity/parse-comment","comments-map","container-seen-at","comments","cljs.core/sequential?","comment-map","edit-comment-link","delete-comment-link","can-react?","reply-parent","is-root-comment","author?","oc.web.utils.activity.is_author_QMARK_","unread?","oc.web.utils.comment.comment_unread_QMARK_","unseen?*","ingore?","unseen?","is-emoji-comment?","oc.web.local-settings/web-server-domain","oc.web.urls.comment_url","oc.web.utils.activity/parse-comments","new-comments","reset-collapse-comments?","old-comments","old-comments-keep","p1__41975#","keep-comments-map","new-parsed-comments","p1__41976#","c","oc.web.utils.activity.parse_comment","new-sorted-comments","oc.web.utils.comment.sort_comments","oc.web.utils.comment.collapse_comments","oc.web.utils.activity/for-you-context","current-user-id","last-comment","subject","mention-regexp","mention?","publisher?","verb","direct-object","oc.web.utils.activity/entry-replies-data","oc.web.dispatcher.activity_sorted_comments_data","full-entry","comments-count","fallback-to-inline?","temp-comments","comments-loaded?","e","p1__41979#","cljs.core.update","ocr-41988","G__42033","G__42034","G__42035","G__42036","G__42037","e42002","e42003","ocr-41988_4__42001","p1__41986#","p1__41987#","e42005","e42004","oc.web.utils.activity/parse-entry","oc.web.dispatcher.active_users","active-users","add-comment-link","published?","fixed-board-uuid","fixed-board-slug","fixed-board-name","fixed-board-access","fixed-publisher-board","is-uploading-video?","oc.web.dispatcher.uploading_video_data","fixed-video-id","fixed-publisher","cljs.core/merge","oc.web.utils.activity.is_publisher_QMARK_","oc.web.utils.activity.entry_unseen_QMARK_","oc.lib.html/first-body-thumbnail","oc.web.utils.activity/parse-org","db","unfollow-boards-set","cljs.core/set","oc.web.dispatcher.unfollow_board_uuids","follow-lists-loaded?","oc.web.dispatcher.follow_list","fixed-boards","p1__42038#","b","G__42040","drafts-board","oc.web.dispatcher.org_board_data","oc.web.lib.utils/default-drafts-board-slug","drafts-link","previous-org-drafts-count","cljs.core.get_in","oc.web.dispatcher/org-data-key","previous-bookmarks-count","can-compose?","p1__42039#","oc.web.lib.jwt/user-is-part-of-the-team","oc.web.utils.org/disappearing-count-value","G__42070","oc.web.utils.activity/parse-board","args-arr__4757__auto__","argseq__4758__auto__","p__42093","vec__42094","seq42063","G__42064","G__42065","G__42066","G__42067","G__42068","oc.web.dispatcher.follow_boards_list","change-data","follow-boards-list","all-boards","boards-map","with-fixed-activities*","ret","cljs.core/assoc-in","oc.web.utils.activity.parse_entry","with-fixed-activities","entry-board-data","oc.web.dispatcher.activity_data","keep-link-rel","next-links","p1__42054#","link-to-move","fixed-next-links","p1__42055#","grouped-items","with-open-close-items","p1__42058#","p2__42056#","p3__42057#","cljs.core.not_EQ_","with-ending-item","follow-board-uuids","G__42097","G__42115","oc.web.utils.activity/parse-contributions","p__42116","vec__42117","seq42108","G__42109","G__42110","G__42111","G__42112","G__42113","G__42114","contributions-data","oc.web.dispatcher.follow_publishers_list","follow-publishers-list","fixed-entry","p1__42100#","p1__42102#","next-link","p1__42105#","p2__42103#","p3__42104#","follow-publishers-ids","G__42143","G__42175","oc.web.utils.activity/parse-container","p__42179","map__42180","oc.web.utils.activity.parse_container","load-comments?","keep-caught-up?","options","app-state-entry","parsed-entry","p1__42161#","replies?","p1__42162#","items-list*","p1__42163#","check-item-fn","p1__42164#","p1__42165#","G__42191","fexpr__42190","ignore-item-fn","p1__42166#","p1__42167#","caught-up-item","p1__42168#","caught-up-index","p1__42169#","oc.web.lib.utils/index-of","with-caught-up","vec__42194","G__42198","fexpr__42197","oc.web.utils.activity.insert_caught_up","p1__42172#","p2__42170#","p3__42171#","oc.web.utils.activity/activity-comments","cljs.core.sort_by","oc.web.utils.activity/is-element-visible?","p1__42203#","rect","zero-pos?","doc-element","js/document","win-height","js/window","oc.web.lib.responsive/navbar-height","oc.web.utils.activity/clean-who-reads-count-ids","item-ids","activities-read-data","all-items","cljs.core/keys","request-set","diff-ids","clojure.set.difference","oc.web.utils.activity/last-used-section","temp__5735__auto__","cookie-name","oc.web.router/last-used-board-slug-cookie","oc.web.lib.cookies/get-cookie","oc.web.utils.activity/save-last-used-section","section-slug","last-board-cookie","oc.web.lib.cookies.set_cookie_BANG_","oc.web.lib.cookies.remove_cookie_BANG_","oc.web.utils.activity/iso-format","cljs-time.format/formatters","oc.web.utils.activity/date-format","cljs_time.format.formatter","oc.web.utils.activity/date-format-year","oc.web.utils.activity/post-date","p__42224","vec__42225","seq42221","G__42222","timestamp","force-year","cljs_time.format.parse","now-year","timestamp-year","show-year","f","cljs-time.format/unparse","oc.web.utils.activity/update-contributions","contributions-list-key","oc.web.dispatcher/contributions-list-key","tdb","contrib-key","rp-contrib-data-key","oc.web.dispatcher.contributions_data_key","ra-contrib-data-key","oc.web.dispatcher/recent-activity-sort","tdb*","cljs.core/butlast","p1__42231#","p1__42232#","oc.web.utils.activity/update-boards","boards-key","oc.web.dispatcher/boards-key","following-boards","board-key","rp-board-data-key","oc.web.dispatcher.board_data_key","ra-board-data-key","p1__42245#","p1__42247#","G__42256","oc.web.utils.activity/update-container","oc.web.utils.activity.update_container","rp-container-data-key","oc.web.dispatcher.container_key","ra-container-data-key","p1__42252#","p1__42253#","G__42261","oc.web.utils.activity/update-replies-container","oc.web.utils.activity.update_replies_container","oc.web.utils.activity/update-replies-comments","oc.web.utils.activity/update-containers","containers-key","oc.web.dispatcher/containers-key","p1__42262#","p2__42263#","oc.web.utils.activity/update-posts","posts-key","oc.web.dispatcher/posts-data-key","post-uuid","post-data-key","old-post-data","oc.web.utils.activity/update-all-containers"],"sourcesContent":["(ns oc.web.utils.activity\n  (:require [cuerdas.core :as s]\n            [defun.core :refer (defun)]\n            [cljs-time.format :as time-format]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.utils.org :as ou]\n            [oc.web.urls :as oc-urls]\n            [oc.lib.user :as user-lib]\n            [oc.lib.html :as html-lib]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.cookies :as cook]\n            [oc.web.utils.comment :as cu]\n            [oc.web.local-settings :as ls]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.lib.responsive :as responsive]))\n\n(def headline-placeholder \"Add a title\")\n\n(def empty-body-html \"<p><br></p>\")\n\n;; Posts separators\n\n(defn show-separators?\n\n  ([container-slug] (show-separators? container-slug (dis/current-sort-type)))\n\n  ([container-slug sort-type]\n   (and ;; only on board/containers/contributions pages\n        (not (s/blank? container-slug))\n        ;; never on mobile\n        (not (responsive/is-mobile-size?))\n        ;; only on recently posted sorting\n        (= sort-type dis/recently-posted-sort)\n        ;; on All posts, Following and Unfollowing only\n        (#{:all-posts :following :unfollowing :contributions} (keyword container-slug)))))\n\n(defn- post-month-date-from-date [post-date]\n  (doto post-date\n    ;; Reset day to first of the month\n    (.setDate 1)\n    ;; Reset time to midnight\n    (.setHours 0)\n    (.setMinutes 0)\n    (.setSeconds 0)\n    (.setMilliseconds 0)))\n\n(defn- separator-from-date [d last-monday two-weeks-ago first-month]\n  (let [now (utils/js-date)\n        month-string (utils/full-month-string (inc (.getMonth d)))]\n    (cond\n      (> d last-monday)\n      {:label \"Recent\"\n       :resource-type :separator\n       :last-activity-at last-monday\n       :date last-monday}\n      (> d two-weeks-ago)\n      {:label \"Last week\"\n       :resource-type :separator\n       :date two-weeks-ago\n       :last-activity-at two-weeks-ago}\n      (> d first-month)\n      {:label \"2 weeks ago\"\n       :resource-type :separator\n       :date first-month\n       :last-activity-at first-month}\n      (and (= (.getMonth now) (.getMonth d))\n           (= (.getFullYear now) (.getFullYear d)))\n      {:label \"This month\"\n       :resource-type :separator\n       :date (post-month-date-from-date d)\n       :last-activity-at (post-month-date-from-date d)}\n      (= (.getFullYear now) (.getFullYear d))\n      {:label month-string\n       :resource-type :separator\n       :last-activity-at (post-month-date-from-date d)}\n      :else\n      {:label (str month-string \", \" (.getFullYear d))\n       :resource-type :separator\n       :date (post-month-date-from-date d)\n       :last-activity-at (post-month-date-from-date d)})))\n\n(def preserved-keys\n  [:resource-type :uuid :sort-value :unseen :unseen-comments :replies-data :board-slug :ignore-comments\n   :container-seen-at :publisher? :published-at :expanded-replies :comments-loaded? :comments-count\n   :for-you-context])\n\n(defn- add-posts-to-separator [post-data separators-map last-monday two-weeks-ago first-month]\n  (let [post-date (utils/js-date (:published-at post-data))\n        item-data (select-keys post-data preserved-keys)]\n    (if (and (seq separators-map)\n             (> post-date (:date (last separators-map))))\n      (update-in separators-map [(dec (count separators-map)) :posts-list] #(-> % (conj item-data) vec))\n      (vec\n       (conj separators-map\n        (assoc (separator-from-date post-date last-monday two-weeks-ago first-month)\n         :posts-list [item-data]))))))\n\n(defn grouped-posts\n  ([full-items-list]\n   (let [items-list (map #(select-keys % preserved-keys) full-items-list)\n         items-map (zipmap (map :uuid full-items-list) full-items-list)]\n     (grouped-posts items-list items-map)))\n  ([items-list fixed-items]\n   (let [last-monday (utils/js-date)\n         _last-monday (doto last-monday\n                        (.setDate (- (.getDate last-monday)\n                                     ; First saturday before now\n                                     (-> (.getDay last-monday) (+ 8) (mod 7))))\n                        (.setHours 23)\n                        (.setMinutes 59)\n                        (.setSeconds 59)\n                        (.setMilliseconds 999))\n\n         two-weeks-ago (utils/js-date)\n         _two-weeks-ago (doto two-weeks-ago\n                          (.setDate (- (.getDate two-weeks-ago)\n                                       ;; Saturday before last one\n                                       (-> (.getDay two-weeks-ago) (+ 8) (mod 7) (+ 7))))\n                          ;; Reset time to midnight\n                          (.setHours 23)\n                          (.setMinutes 59)\n                          (.setSeconds 59)\n                          (.setMilliseconds 999))\n\n         first-month (utils/js-date)\n         _first-month (doto first-month\n                        (.setDate (- (.getDate first-month)\n                                     (-> (.getDay first-month) (+ 8) (mod 7) (+ 14))))\n                        ;; Reset time to midnight\n                        (.setHours 23)\n                        (.setMinutes 59)\n                        (.setSeconds 59)\n                        (.setMilliseconds 999))\n\n         last-date (:published-at (last items-list))\n         separators-data (loop [separators []\n                                posts items-list]\n                           (if (empty? posts)\n                             separators\n                             (recur (add-posts-to-separator (first posts) separators last-monday two-weeks-ago first-month)\n                                    (rest posts))))]\n         (vec (rest ;; Always remove the first label\n          (mapcat #(concat [(dissoc % :posts-list)] (remove nil? (:posts-list %))) separators-data))))))\n\n(defun resource-type?\n  ([resource-data resource-types :guard coll?]\n   (some (partial resource-type? resource-data) resource-types))\n\n  ([resource-data resource-type :guard string?]\n   (when-not (s/blank? resource-type)\n     (resource-type? resource-data resource-type)))\n\n  ([resource-data resource-type :guard keyword?]\n   (-> resource-data :resource-type keyword (= (keyword resource-type)))))\n\n(defn user? [user-data]\n  (resource-type? user-data :user))\n\n(defn board? [board-data]\n  (resource-type? board-data :board))\n\n(defn container? [container-data]\n  (resource-type? container-data :container))\n\n(defn contributions? [contrib-data]\n  (resource-type? contrib-data :contributions))\n\n(defn entry? [entry-data]\n  (resource-type? entry-data :entry))\n\n(defn comment? [comment-data]\n  (resource-type? comment-data :comment))\n\n(defun is-published?\n  ([entry-data :guard map?]\n  (is-published? (:status entry-data)))\n  ([entry-status :guard #(or (string? %) (nil? %) (keyword? %))]\n   (and entry-status\n        (= (keyword entry-status) :published))))\n\n(defun is-publisher?\n  ([nil] false)\n  ([_ nil] false)\n  ([nil _] false)\n\n  ([entry-data :guard map?]\n   (is-publisher? entry-data (jwt/user-id)))\n\n  ([entry-author-id :guard string?]\n   (is-publisher? entry-author-id (jwt/user-id)))\n\n  ([entry-data :guard map? user-data :guard :user-id]\n   (is-publisher? entry-data (:user-id user-data)))\n\n  ([entry-data :guard map? user-id :guard string?]\n   (when (or (:published? entry-data)\n             (is-published? entry-data))\n     (is-publisher? (-> entry-data :publisher :user-id) user-id)))\n\n  ([entry-author-id :guard string? user-id :guard string?]\n   (and (seq entry-author-id)\n        (= user-id entry-author-id))))\n\n(defun is-author?\n  \"Check if current user is the author of the entry/comment.\"\n  ([nil] false)\n  ([_ nil] false)\n  ([nil _] false)\n\n  ([entity-data :guard map?]\n   (is-author? entity-data (jwt/user-id)))\n\n  ([entity-data :guard map? user-data :guard :user-id]\n   (is-author? entity-data (:user-id user-data)))\n\n  ([contrib-data :guard contributions? user-id :guard string?]\n   (is-author? (:author-uuid contrib-data) user-id))\n\n  ([entity-data :guard entry? user-id :guard string?]\n   (is-author? (-> entity-data :author first :user-id) user-id))\n\n  ([entity-data :guard map? user-id :guard string?]\n   (is-author? (-> entity-data :author :user-id) user-id))\n\n  ([author-id :guard string?]\n   (is-author? author-id (jwt/user-id)))\n\n  ([author-id :guard string? user-id :guard string?]\n   (and (seq user-id)\n        (= user-id author-id))))\n\n(defn board-by-uuid [board-uuid]\n  (let [org-data (dis/org-data)\n        boards (:boards org-data)]\n    (some #(when (= (:uuid %) board-uuid) %) boards)))\n\n(defn reset-truncate-body\n  \"Reset dotdotdot for the give body element.\"\n  [body-el]\n  (let [$body-els (js/$ \">*\" body-el)]\n    (.each $body-els (fn [idx el]\n      (this-as this\n        (.trigger (js/$ this) \"destroy\"))))))\n\n(def default-body-height 72)\n(def default-all-posts-body-height 144)\n(def default-draft-body-height 48)\n\n(defn truncate-body\n  \"Given a body element truncate the body. It iterate on the elements\n  of the body and truncate the first exceeded element found.\n  This is to avoid truncating a DIV with multiple spaced P inside,\n  since this is a problem for the dotdotdot library that we are using.\"\n  [body-el height]\n  (reset-truncate-body body-el)\n  (.dotdotdot (js/$ body-el)\n    #js {:height height\n         :wrap \"word\"\n         :watch true\n         :ellipsis \"...\"}))\n\n(defn icon-for-mimetype\n  \"Thanks to https://gist.github.com/colemanw/9c9a12aae16a4bfe2678de86b661d922\"\n  [mimetype]\n  (case (s/lower mimetype)\n    ;; Media\n    \"image\" \"fa-file-image-o\"\n    \"image/png\" \"fa-file-image-o\"\n    \"image/bmp\" \"fa-file-image-o\"\n    \"image/jpg\" \"fa-file-image-o\"\n    \"image/jpeg\" \"fa-file-image-o\"\n    \"image/gif\" \"fa-file-image-o\"\n    \".jpg\" \"fa-file-image-o\"\n    \"audio\" \"fa-file-audio-o\"\n    \"video\" \"fa-file-video-o\"\n    ;; Documents\n    \"application/pdf\" \"fa-file-pdf-o\"\n    \"application/msword\" \"fa-file-word-o\",\n    \"application/vnd.ms-word\" \"fa-file-word-o\",\n    \"application/vnd.oasis.opendocument.text\" \"fa-file-word-o\",\n    \"application/vnd.openxmlformats-officedocument.wordprocessingml\" \"fa-file-word-o\",\n    \"application/vnd.ms-excel\" \"fa-file-excel-o\",\n    \"application/vnd.openxmlformats-officedocument.spreadsheetml\" \"fa-file-excel-o\",\n    \"application/vnd.oasis.opendocument.spreadsheet\" \"fa-file-excel-o\",\n    \"application/vnd.ms-powerpoint\" \"fa-file-powerpoint-o\",\n    \"application/vnd.openxmlformats-officedocument.presentationml\" \"fa-file-powerpoint-o\",\n    \"application/vnd.oasis.opendocument.presentation\" \"fa-file-powerpoint-o\",\n    \"text/plain\" \"fa-file-text-o\",\n    \"text/html\" \"fa-file-code-o\",\n    \"application/json\" \"fa-file-code-o\",\n    ;; Archives\n    \"application/gzip\" \"fa-file-archive-o\",\n    \"application/zip\" \"fa-file-archive-o\",\n    ;; Code\n    \"text/css\" \"fa-file-code-o\"\n    \"text/php\" \"fa-file-code-o\"\n    ;; Generic case\n    \"fa-file\"))\n\n(defn get-activity-date [activity]\n  (or (:published-at activity) (:created-at activity)))\n\n(defn compare-activities [act-1 act-2]\n  (let [time-1 (get-activity-date act-1)\n        time-2 (get-activity-date act-2)]\n    (compare time-2 time-1)))\n\n(defn get-sorted-activities [posts-data]\n  (vec (sort compare-activities (vals posts-data))))\n\n(defn readonly-org? [links]\n  (let [update-link (utils/link-for links \"partial-update\")]\n    (nil? update-link)))\n\n(defn readonly-board? [links]\n  (let [new-link (utils/link-for links \"create\")\n        update-link (utils/link-for links \"partial-update\")\n        delete-link (utils/link-for links \"delete\")]\n    (and (nil? new-link)\n         (nil? update-link)\n         (nil? delete-link))))\n\n(defn readonly-entry? [links]\n  (let [partial-update (utils/link-for links \"partial-update\")\n        delete (utils/link-for links \"delete\")]\n    (and (nil? partial-update) (nil? delete))))\n\n(defun entry-unseen?\n  \"An entry is new if its uuid is contained in container's unseen.\"\n  ([entry :guard map? last-seen-at]\n   (and (not (:publisher? entry))\n        (entry-unseen? (:published-at entry) last-seen-at)))\n  ([published-at last-seen-at :guard #(or (nil? %) (string? %))]\n   (pos? (compare published-at last-seen-at))))\n\n(defn entry-unread?\n  \"An entry is new if its uuid is contained in container's unread.\"\n  [entry changes]\n  (let [board-uuid (:board-uuid entry)\n        board-change-data (get changes board-uuid {})\n        board-unread (:unread board-change-data)]\n    (if board-unread\n      (utils/in? board-unread (:uuid entry))\n      (nil? (:last-read-at entry)))))\n\n(defn comments-unseen? [entry-data last-seen-at]\n  (let [not-self-comments (filter (comp not :self?) (:replies-data entry-data))]\n    (some #(cu/comment-unseen? % last-seen-at) not-self-comments)))\n\n(defn comments-ignore? [entry-data last-seen-at]\n  (let [all-unseen (filter #(cu/comment-unseen? % last-seen-at) (:replies-data entry-data))]\n    (boolean (and (seq all-unseen) (every? :author? all-unseen)))))\n\n(defn has-attachments? [data]\n  (seq (:attachments data)))\n\n(defn has-headline? [data]\n  (-> data :headline s/trim s/blank? not))\n\n(defn empty-body? [body]\n  (boolean\n   (or (s/blank? body)\n       (re-matches #\"(?i)^(\\s*<p[^>]*>\\s*(<br[^>]*/?>)*?\\s*</p>\\s*)*$\" body))))\n\n(defn has-body? [data]\n  (not (empty-body? (:body data))))\n\n(defn has-text? [data]\n  (or (has-headline? data)\n      (has-body? data)))\n\n(defn has-content? [data]\n  (or (some? (:video-id data))\n      (has-attachments? data)\n      (has-text? data)))\n\n(defn- merge-items-lists\n  \"Given 2 list of reduced items (reduced since they contains only the uuid and resource-type props)\n   return a single list without duplicates depending on the direction.\n   This is necessary since the lists could contain duplicates because they are loaded in 2 different\n   moments and new activity could lead to changes in the sort.\"\n  [new-items-list old-items-list direction]\n  (cond\n    (and direction\n         (seq old-items-list)\n         (seq new-items-list))\n    (let [old-uuids (map :uuid old-items-list)\n          new-uuids (map :uuid new-items-list)\n          next-items-uuids (if (= direction :down)\n                             (vec (distinct (concat old-uuids new-uuids)))\n                             (vec (reverse (distinct (concat (reverse old-uuids) (reverse new-uuids))))))\n          ;; NB: old items needs to be after\n          old-items-map (zipmap (map :uuid old-items-list) old-items-list)\n          items-map (reduce (fn [merge-items-map item]\n                              (let [merged-item (merge item (get old-items-map (:uuid item)))]\n                                (assoc merge-items-map (:uuid item) merged-item)))\n                     old-items-map\n                     new-items-list)]\n      (mapv items-map next-items-uuids))\n    (seq old-items-list)\n    (vec old-items-list)\n    :else\n    (vec new-items-list)))\n\n(def default-caught-up-message \"You\u2019re up to date\")\n\n(defn- next-activity-timestamp [prev-item]\n  (if (:last-activity-at prev-item)\n   (-> prev-item :last-activity-at utils/js-date .getTime inc utils/js-date .toISOString)\n   (utils/as-of-now)))\n\n(defn- caught-up-map\n  ([container-slug prev-items] (caught-up-map container-slug prev-items default-caught-up-message))\n  ([container-slug prev-items message] ; ([n gray-scale? message]\n   (let [t (next-activity-timestamp (last prev-items))]\n     {:resource-type :caught-up\n      :last-activity-at t\n      :message message\n      :gray-style (if (= container-slug :following)\n                    (or (not (seq prev-items))\n                        (every? :publisher? prev-items))\n                    (not (seq prev-items)))})))\n\n(defn- insert-caught-up [container-slug items-list check-fn ignore-fn & [{:keys [hide-top-line hide-bottom-line has-next] :as opts}]]\n  (when (seq items-list)\n    (let [index (loop [last-valid-idx 0\n                       current-idx 0]\n                  (let [item (get items-list current-idx)]\n                    (cond\n                     ;; We reached the end, no more items, return last index\n                     (nil? item)\n                     last-valid-idx\n                     ;; If it's an element to ginore, return the last valid index\n                     (and (fn? ignore-fn)\n                          (ignore-fn item))\n                     (recur last-valid-idx\n                            (inc current-idx))\n                     ;; Found the first truthy item, return last index\n                     (check-fn item)\n                     last-valid-idx\n                     :else\n                     (recur (inc current-idx)\n                            (inc current-idx)))))\n          [before after] (split-at index items-list)]\n      (cond\n        (and (= index (count items-list))\n             (or has-next\n                 hide-bottom-line))\n        (vec items-list)\n\n        (and hide-top-line\n             (zero? index))\n        (vec items-list)\n\n        :else\n        (vec (remove nil? (concat before\n                                  [(caught-up-map container-slug before)]\n                                  after)))))))\n\n(defn- insert-open-close-item [items-list check-fn]\n  (vec\n   (remove nil?\n    (map\n     (fn [idx]\n       (let [prev-item (get items-list (dec idx))\n             item (get items-list idx)\n             next-item (get items-list (inc idx))]\n         (when item\n           (assoc item :open-item (check-fn :open item prev-item)\n                       :close-item (check-fn :close item next-item)))))\n     (range (count items-list))))))\n\n(defn- insert-ending-item [items-list has-next]\n  (let [closing-item? (> (count items-list) 10)\n        last-item (last items-list)]\n    (cond\n     (and (seq items-list) has-next)\n     (vec (concat items-list [{:resource-type :loading-more\n                               :last-activity-at (next-activity-timestamp last-item)\n                               :message \"Loading more updates...\"}]))\n     closing-item?\n     (vec\n      (concat items-list [{:resource-type :closing-item\n                           :last-activity-at (next-activity-timestamp (last items-list))\n                           :message \"\ud83e\udd20 You've reached the end, partner\"}]))\n     :else\n     (vec items-list))))\n\n(defn get-comments-finished\n  [org-slug comments-key activity-data {:keys [status success body]}]\n  (when success\n    (dis/dispatch! [:comments-get/finish {:success success\n                                          :error (when-not success body)\n                                          :comments-key comments-key\n                                          :body (when (seq body) (json->cljs body))\n                                          :activity-uuid (:uuid activity-data)\n                                          :secure-activity-uuid (dis/current-secure-activity-id)}])\n    (let [replies-data (dis/replies-data org-slug @dis/app-state)\n          current-board-slug (dis/current-board-slug)\n          is-replies? (= (keyword current-board-slug) :replies)\n          entry-is-in-replies? (some #(when (= (:uuid %) (:uuid activity-data)) %) (:posts-list replies-data))]\n      (when (and is-replies?\n                 entry-is-in-replies?)\n        (utils/after 10 #(dis/dispatch! [:update-replies-comments org-slug current-board-slug]))))))\n\n(defn get-comments [activity-data]\n  (when activity-data\n    (let [org-slug (dis/current-org-slug)\n          comments-key (dis/activity-comments-key org-slug (:uuid activity-data))\n          comments-link (utils/link-for (:links activity-data) \"comments\")]\n      (when comments-link\n        (dis/dispatch! [:comments-get comments-key activity-data])\n        (dis/dispatch! [:reply-comments-loaded org-slug activity-data])\n        (api/get-comments comments-link #(get-comments-finished org-slug comments-key activity-data %))))))\n\n(defn get-comments-if-needed\n  ([activity-data] (get-comments-if-needed activity-data (dis/comments-data)))\n  ([activity-data all-comments-data]\n  (let [comments-link (utils/link-for (:links activity-data) \"comments\")\n        activity-uuid (:uuid activity-data)\n        comments-data (get all-comments-data activity-uuid)\n        should-load-comments? (and ;; there is a comments link\n                                   (map? comments-link)\n                                   ;; there are comments to load,\n                                   (pos? (:count comments-link))\n                                   ;; they are not already loading,\n                                   (not (:loading comments-data))\n                                   ;; and they are not loaded already\n                                   (not (contains? comments-data :sorted-comments)))]\n    ;; Load the whole list of comments if..\n    (when should-load-comments?\n      (get-comments activity-data)))))\n\n(defn- is-emoji\n  [body]\n  (let [plain-text (.text (js/$ (str \"<div>\" body \"</div>\")))\n        is-emoji? (js/RegExp \"^([\\ud800-\\udbff])([\\udc00-\\udfff])\" \"g\")\n        is-text-message? (js/RegExp \"[a-zA-Z0-9\\\\s!?@#\\\\$%\\\\^&(())_=\\\\-<>,\\\\.\\\\*;':\\\"]\" \"g\")]\n    (and ;; emojis can have up to 11 codepoints\n         (<= (count plain-text) 11)\n         (.match plain-text is-emoji?)\n         (not (.match plain-text is-text-message?)))))\n\n(defun parse-comment\n\n  ([org-data activity-data nil]\n    {})\n\n  ([org-data activity-data nil _]\n    {})\n\n  ([org-data activity-data comments-map :guard :sorted-comments container-seen-at]\n    (parse-comment org-data activity-data (:sorted-comments comments-map) container-seen-at))\n\n  ([org-data activity-data comments :guard sequential? container-seen-at :guard #(or (nil? %) (string? %))]\n    (map #(parse-comment org-data activity-data % container-seen-at) comments))\n\n  ([org-data :guard map? activity-data :guard map? comment-map :guard map?]\n   (parse-comment org-data activity-data comment-map nil))\n\n  ; ([org-data :guard map? activity-data :guard map? comment-map :guard map? container-seen-at :guard #(or (nil? %) (string? %))]\n  ;  (parse-comment org-data activity-data comment-map container-seen-at))\n\n  ([org-data :guard map? activity-data :guard map? comment-map :guard map? container-seen-at :guard #(or (nil? %) (string? %))]\n    (let [edit-comment-link (utils/link-for (:links comment-map) \"partial-update\")\n          delete-comment-link (utils/link-for (:links comment-map) \"delete\")\n          can-react? (boolean (utils/link-for (:links comment-map) \"react\" \"POST\"))\n          reply-parent (or (:parent-uuid comment-map) (:uuid comment-map))\n          is-root-comment (empty? (:parent-uuid comment-map))\n          author? (is-author? comment-map)\n          unread? (and (not author?)\n                       (cu/comment-unread? comment-map (:last-read-at activity-data)))\n          unseen?* (cu/comment-unseen? comment-map container-seen-at)\n          ingore? (and author?\n                       unseen?*)\n          unseen? (and (not author?)\n                       unseen?*)\n          is-emoji-comment? (is-emoji (:body comment-map))]\n      (-> comment-map\n        (assoc :resource-type :comment)\n        (assoc :author? author?)\n        (assoc :ingore? ingore?)\n        (assoc :unread unread?)\n        (assoc :unseen unseen?)\n        (assoc :is-emoji is-emoji-comment?)\n        (assoc :can-edit (boolean (and edit-comment-link\n                                       (not is-emoji-comment?))))\n        (assoc :can-delete (boolean delete-comment-link))\n        (assoc :can-react can-react?)\n        (assoc :reply-parent reply-parent)\n        (assoc :resource-uuid (:uuid activity-data))\n        (assoc :url (str ls/web-server-domain (oc-urls/comment-url (:slug org-data) (:board-slug activity-data)\n                                               (:uuid activity-data) (:uuid comment-map))))))))\n\n(defn parse-comments [org-data entry-data new-comments container-seen-at reset-collapse-comments?]\n  (let [old-comments (:replies-data entry-data)\n        old-comments-keep (map #(select-keys % [:uuid :collapsed :unseen :unwrapped-body]) old-comments)\n        keep-comments-map (zipmap (map :uuid old-comments-keep) old-comments-keep)\n        new-parsed-comments (mapv #(as-> % c\n                                    (parse-comment org-data entry-data c container-seen-at)\n                                    (merge c (get keep-comments-map (:uuid c))))\n                             new-comments)\n        new-sorted-comments (cu/sort-comments new-parsed-comments)]\n    ;; Collapse the comments only the first time or when the expanded replies\n    ;; are not already required explicitly\n    (if reset-collapse-comments?\n      (cu/collapse-comments new-sorted-comments container-seen-at)\n      new-sorted-comments)))\n\n(defn for-you-context [entry-data current-user-id]\n   (let [replies-data (:replies-data entry-data)\n         last-comment (last replies-data)\n         subject (if (:author? last-comment)\n                   \"You \"\n                   (str (or (:short-name (:author last-comment)) (:first-name (:author last-comment)) (:name (:author last-comment))) \" \"))\n         mention-regexp (js/RegExp. (str \"data-user-id=\\\"\" current-user-id \"\\\"\") \"ig\")\n         mention? (.match (:body last-comment) mention-regexp)\n         publisher? (:publisher? entry-data)\n         unseen? (:unseen last-comment)\n         verb (cond unseen?\n                    \" left a new comment\"\n                    mention?\n                    \"mentioned you in a comment\"\n                    :else\n                    \" commented\")\n         direct-object (if publisher?\n                         \" on your update\"\n                         \" on an update you are watching\")]\n     {:label (str subject verb direct-object)\n      :timestamp (:created-at last-comment)}))\n\n(defn entry-replies-data [entry-data org-data fixed-items container-seen-at]\n  (let [comments (dis/activity-sorted-comments-data (:uuid entry-data))\n        full-entry (get fixed-items (:uuid entry-data))\n        comments-count (:count (utils/link-for (:links full-entry) \"comments\"))\n        fallback-to-inline? (and (pos? comments-count)\n                                 (empty? comments))\n        temp-comments (if (seq comments) comments (:comments full-entry))\n        comments-loaded? (boolean (or (zero? comments-count) (seq comments)))\n        ;; Let's force a collapse recalc if user didn't expand the replies yet\n        ;; and or is the first render of the comments (using inline comments most probably)\n        ;; or the full list of comments has just been loaded for the first time from server\n        reset-collapse-comments? (and (not (:expanded-replies? entry-data))\n                                      (or (not (contains? entry-data :replies-data))\n                                          (and comments-loaded?\n                                               (not (:comments-loaded? entry-data)))))]\n    (as-> entry-data e\n     (assoc e :comments-loaded? comments-loaded?)\n     (assoc e :replies-data (parse-comments org-data (assoc e :headline (:headline full-entry)) temp-comments container-seen-at reset-collapse-comments?))\n     (assoc e :for-you-context (for-you-context e (jwt/user-id)))\n     (assoc e :comments-count (if comments-loaded? (count comments) comments-count))\n     (update e :unseen-comments #(boolean (if-not (seq comments)\n                                            %\n                                            (seq (filter :unseen (:replies-data e))))))\n     (assoc e :ignore-comments (comments-ignore? e container-seen-at)))))\n\n(defun parse-entry\n  \"Add `:read-only`, `:board-slug`, `:board-name` and `:resource-type` keys to the entry map.\"\n  ([entry-data board-data changes]\n   (parse-entry entry-data board-data changes (dis/active-users) nil))\n\n  ([entry-data board-data changes active-users]\n   (parse-entry entry-data board-data changes active-users nil))\n\n  ([entry-data board-data changes active-users container-seen-at :guard #(or (nil? %) (string? %))]\n  (if (or (= entry-data :404)\n          (:loading entry-data))\n    entry-data\n    (let [comments-link (utils/link-for (:links entry-data) \"comments\")\n          add-comment-link (utils/link-for (:links entry-data) \"create\" \"POST\")\n          published? (is-published? entry-data)\n          fixed-board-uuid (or (:board-uuid entry-data) (:uuid board-data))\n          fixed-board-slug (or (:board-slug entry-data) (:slug board-data))\n          fixed-board-name (or (:board-name entry-data) (:name board-data))\n          fixed-board-access (if published?\n                               (or (:board-access entry-data) (:access board-data))\n                               \"private\")\n          fixed-publisher-board (or (:publisher-board entry-data) (:publisher-board board-data) false)\n          is-uploading-video? (dis/uploading-video-data (:video-id entry-data))\n          fixed-video-id (:video-id entry-data)\n          fixed-publisher (when published?\n                            (get active-users (-> entry-data :publisher :user-id)))\n          org-data (dis/org-data)]\n      (-> entry-data\n        (assoc :resource-type :entry)\n        (assoc :published? published?)\n        (as-> e\n          (if published?\n            (update e :publisher merge fixed-publisher)\n            e)\n          (if published?\n            (assoc e :publisher? (is-publisher? e))\n            e)\n          (assoc e :unseen (entry-unseen? e container-seen-at))\n          (assoc e :unread (entry-unread? e changes))\n          (assoc e :read-only (readonly-entry? (:links e)))\n          (update e :comments (fn [comments] (mapv #(parse-comment org-data e % container-seen-at) comments))))\n        (assoc :board-uuid fixed-board-uuid)\n        (assoc :board-slug fixed-board-slug)\n        (assoc :board-name fixed-board-name)\n        (assoc :publisher-board fixed-publisher-board)\n        (assoc :board-access fixed-board-access)\n        (assoc :has-comments (boolean comments-link))\n        (assoc :can-comment (boolean add-comment-link))\n        (assoc :fixed-video-id fixed-video-id)\n        (assoc :has-headline (has-headline? entry-data))\n        (assoc :body-thumbnail (when (seq (:body entry-data))\n                                 (html-lib/first-body-thumbnail (:body entry-data))))\n        (assoc :container-seen-at container-seen-at))))))\n\n(defn parse-org\n  \"Fix org data coming from the API.\"\n  [db org-data]\n  (when org-data\n    (let [unfollow-boards-set (set (dis/unfollow-board-uuids))\n          follow-lists-loaded? (map? (dis/follow-list))\n          fixed-boards (map #(as-> % b\n                              (assoc b :read-only (-> % :links readonly-board?))\n                              (if follow-lists-loaded?\n                                (assoc b :following (not (unfollow-boards-set (:uuid %))))\n                                b))\n                        (:boards org-data))\n          drafts-board (dis/org-board-data org-data utils/default-drafts-board-slug)\n          drafts-link (when drafts-board\n                        (utils/link-for (:links drafts-board) [\"item\" \"self\"] \"GET\"))\n          previous-org-drafts-count (get-in db (conj (dis/org-data-key (:slug org-data)) :drafts-count))\n          previous-bookmarks-count (get-in db (conj (dis/org-data-key (:slug org-data)) :bookmarks-count))\n          can-compose? (boolean (seq (some #(and (not (:draft %)) (utils/link-for (:links %) \"create\" \"POST\")) (:boards org-data))))]\n      (-> org-data\n       (assoc :read-only (readonly-org? (:links org-data)))\n       (assoc :boards fixed-boards)\n       (assoc :author? (is-author? org-data))\n       (assoc :member? (jwt/user-is-part-of-the-team (:team-id org-data)))\n       (assoc :drafts-count (ou/disappearing-count-value previous-org-drafts-count (:count drafts-link)))\n       (assoc :bookmarks-count (ou/disappearing-count-value previous-bookmarks-count (:bookmarks-count org-data)))\n       (assoc :unfollowing-count (ou/disappearing-count-value previous-bookmarks-count (:unfollowing-count org-data)))\n       (assoc :can-compose? can-compose?)))))\n\n(defn parse-board\n  \"Parse board data coming from the API.\"\n  ([board-data]\n   (parse-board board-data {} (dis/active-users) (dis/follow-boards-list) dis/recently-posted-sort))\n\n  ([board-data change-data]\n   (parse-board board-data change-data (dis/active-users) (dis/follow-boards-list) dis/recently-posted-sort))\n\n  ([board-data change-data active-users]\n   (parse-board board-data change-data active-users (dis/follow-boards-list) dis/recently-posted-sort))\n\n  ([board-data change-data active-users follow-boards-list]\n   (parse-board board-data change-data active-users follow-boards-list dis/recently-posted-sort))\n\n  ([board-data change-data active-users follow-boards-list sort-type & [direction]]\n    (when board-data\n      (let [all-boards (:boards (dis/org-data))\n            boards-map (zipmap (map :slug all-boards) all-boards)\n            with-fixed-activities* (reduce (fn [ret item]\n                                             (assoc-in ret [:fixed-items (:uuid item)]\n                                              (parse-entry item (get boards-map (:board-slug item)) change-data active-users (:last-seen-at board-data))))\n                                    board-data\n                                    (:entries board-data))\n            with-fixed-activities (reduce (fn [ret item]\n                                           (if (contains? (:fixed-items ret) (:uuid item))\n                                             ret\n                                             (let [entry-board-data (get boards-map (:board-slug item))\n                                                   full-entry (-> (:uuid item)\n                                                               dis/activity-data\n                                                               (merge item)\n                                                               (parse-entry entry-board-data change-data active-users (:last-seen-at board-data)))]\n                                               (assoc-in ret [:fixed-items (:uuid item)] full-entry))))\n                                   with-fixed-activities*\n                                   (:posts-list board-data))\n            keep-link-rel (if (= direction :down) \"previous\" \"next\")\n            next-links (when direction\n                        (vec (remove #(= (:rel %) keep-link-rel) (:links board-data))))\n            link-to-move (when direction\n                           (utils/link-for (:old-links board-data) keep-link-rel))\n            fixed-next-links (if direction\n                               (if link-to-move\n                                 (vec (conj next-links link-to-move))\n                                 next-links)\n                               (:links board-data))\n            items-list (when (contains? board-data :entries)\n                         ;; In case we are parsing a fresh response from server\n                         (map #(-> %\n                                (assoc :resource-type :entry)\n                                (select-keys preserved-keys))\n                          (:entries board-data)))\n            full-items-list (merge-items-lists items-list (:posts-list board-data) direction)\n            grouped-items (if (show-separators? (:slug board-data) sort-type)\n                            (grouped-posts full-items-list (:fixed-items with-fixed-activities))\n                            full-items-list)\n            with-open-close-items (insert-open-close-item grouped-items #(not= (:resource-type %2) (:resource-type %3)))\n            with-ending-item (insert-ending-item with-open-close-items (utils/link-for fixed-next-links \"next\"))\n            follow-board-uuids (set (map :uuid follow-boards-list))]\n        (-> with-fixed-activities\n          (assoc :resource-type :board)\n          (assoc :read-only (readonly-board? (:links board-data)))\n          (dissoc :old-links :entries)\n          (assoc :posts-list full-items-list)\n          (assoc :items-to-render with-ending-item)\n          (assoc :following (boolean (follow-board-uuids (:uuid board-data)))))))))\n\n(defn parse-contributions\n  \"Parse data coming from the API for a certain user's posts.\"\n  ([contributions-data]\n   (parse-contributions contributions-data {} (dis/org-data) (dis/active-users) (dis/follow-publishers-list) dis/recently-posted-sort))\n\n  ([contributions-data change-data]\n   (parse-contributions contributions-data change-data (dis/org-data) (dis/active-users) (dis/follow-publishers-list) dis/recently-posted-sort))\n\n  ([contributions-data change-data org-data]\n   (parse-contributions contributions-data change-data org-data (dis/active-users) (dis/follow-publishers-list) dis/recently-posted-sort))\n\n  ([contributions-data change-data org-data active-users]\n   (parse-contributions contributions-data change-data org-data active-users (dis/follow-publishers-list) dis/recently-posted-sort))\n\n  ([contributions-data change-data org-data active-users follow-publishers-list]\n   (parse-contributions contributions-data change-data org-data active-users follow-publishers-list dis/recently-posted-sort))\n\n  ([contributions-data change-data org-data active-users follow-publishers-list sort-type & [direction]]\n    (when contributions-data\n      (let [all-boards (:boards org-data)\n            boards-map (zipmap (map :slug all-boards) all-boards)\n            with-fixed-activities* (reduce (fn [ret item]\n                                             (let [board-data (get boards-map (:board-slug item))\n                                                   fixed-entry (parse-entry item board-data change-data active-users (:last-seen-at contributions-data))]\n                                               (assoc-in ret [:fixed-items (:uuid item)] fixed-entry)))\n                                    contributions-data\n                                    (:items contributions-data))\n            with-fixed-activities (reduce (fn [ret item]\n                                           (if (contains? (:fixed-items ret) (:uuid item))\n                                             ret\n                                             (let [entry-board-data (get boards-map (:board-slug item))\n                                                   full-entry (-> (:uuid item)\n                                                               dis/activity-data\n                                                               (merge item)\n                                                               (parse-entry entry-board-data change-data active-users (:last-seen-at contributions-data)))]\n                                               (assoc-in ret [:fixed-items (:uuid item)] full-entry))))\n                                   with-fixed-activities*\n                                   (:posts-list contributions-data))\n            keep-link-rel (if (= direction :down) \"previous\" \"next\")\n            next-links (when direction\n                        (vec (remove #(= (:rel %) keep-link-rel) (:links contributions-data))))\n            link-to-move (when direction\n                           (utils/link-for (:old-links contributions-data) keep-link-rel))\n            fixed-next-links (if direction\n                               (if link-to-move\n                                 (vec (conj next-links link-to-move))\n                                 next-links)\n                               (:links contributions-data))\n            items-list (when (contains? contributions-data :items)\n                         ;; In case we are parsing a fresh response from server\n                         (map #(-> %\n                                (assoc :resource-type :entry)\n                                (select-keys preserved-keys))\n                          (:items contributions-data)))\n            full-items-list (merge-items-lists items-list (:posts-list contributions-data) direction)\n            grouped-items (if (show-separators? :contributions sort-type)\n                            (grouped-posts full-items-list (:fixed-items with-fixed-activities))\n                            full-items-list)\n            next-link (utils/link-for fixed-next-links \"next\")\n            with-open-close-items (insert-open-close-item grouped-items #(not= (:resource-type %2) (:resource-type %3)))\n            with-ending-item (insert-ending-item with-open-close-items next-link)\n            follow-publishers-ids (set (map :user-id follow-publishers-list))]\n        (-> with-fixed-activities\n          (assoc :resource-type :contributions)\n          (dissoc :old-links :items)\n          (assoc :links fixed-next-links)\n          (assoc :self? (is-author? contributions-data))\n          (assoc :posts-list full-items-list)\n          (assoc :items-to-render with-ending-item)\n          (assoc :following (boolean (follow-publishers-ids (:author-uuid contributions-data)))))))))\n\n(defn parse-container\n  \"Parse container data coming from the API, like Following or Replies (AP, Bookmarks etc).\"\n  ([container-data]\n   (parse-container container-data {} (dis/org-data) (dis/active-users) (dis/current-sort-type) nil))\n\n  ([container-data change-data]\n   (parse-container container-data change-data (dis/org-data) (dis/active-users) (dis/current-sort-type) nil))\n\n  ([container-data change-data org-data]\n   (parse-container container-data change-data org-data (dis/active-users) (dis/current-sort-type) nil))\n\n  ([container-data change-data org-data active-users]\n   (parse-container container-data change-data org-data active-users (dis/current-sort-type) nil))\n\n  ([container-data change-data org-data active-users sort-type]\n   (parse-container container-data change-data org-data active-users sort-type nil))\n\n  ([container-data change-data org-data active-users sort-type {:keys [direction load-comments? keep-caught-up?] :as options}]\n    (when container-data\n      (let [all-boards (:boards org-data)\n            boards-map (zipmap (map :slug all-boards) all-boards)\n            with-fixed-activities* (reduce (fn [ret item]\n                                             (let [board-data (get boards-map (:board-slug item))\n                                                   fixed-entry (parse-entry item board-data change-data active-users (:last-seen-at container-data))]\n                                               (assoc-in ret [:fixed-items (:uuid item)] fixed-entry)))\n                                    container-data\n                                    (:items container-data))\n            with-fixed-activities (reduce (fn [ret item]\n                                           (if (contains? (:fixed-items ret) (:uuid item))\n                                             ret\n                                             (let [entry-board-data (get boards-map (:board-slug item))\n                                                   app-state-entry (dis/activity-data (:uuid item))]\n                                               (when app-state-entry\n                                                 (let [parsed-entry (-> app-state-entry\n                                                                     (merge item)\n                                                                     (parse-entry entry-board-data change-data active-users (:last-seen-at container-data)))]\n                                                   (assoc-in ret [:fixed-items (:uuid item)] parsed-entry))))))\n                                   with-fixed-activities*\n                                   (:posts-list container-data))\n            keep-link-rel (if (= direction :down) \"previous\" \"next\")\n            next-links (when direction\n                        (vec (remove #(= (:rel %) keep-link-rel) (:links container-data))))\n            link-to-move (when direction\n                           (utils/link-for (:old-links container-data) keep-link-rel))\n            fixed-next-links (if direction\n                               (if link-to-move\n                                 (vec (conj next-links link-to-move))\n                                 next-links)\n                               (:links container-data))\n            replies? (= (-> container-data :container-slug keyword) :replies)\n            items-list (when (contains? container-data :items)\n                         ;; In case we are parsing a fresh response from server\n                         (map #(-> %\n                                (assoc :resource-type :entry)\n                                (merge (get-in with-fixed-activities [:fixed-items (:uuid %)]))\n                                (select-keys preserved-keys))\n                          (:items container-data)))\n            items-list* (merge-items-lists items-list (:posts-list container-data) direction)\n            full-items-list (if replies?\n                              (mapv #(entry-replies-data % org-data (:fixed-items with-fixed-activities) (:last-seen-at container-data)) items-list*)\n                              items-list*)\n            grouped-items (if (show-separators? (:container-slug container-data) sort-type)\n                            (grouped-posts full-items-list (:fixed-items with-fixed-activities))\n                            full-items-list)\n            next-link (utils/link-for fixed-next-links \"next\")\n            check-item-fn (if (#{:following :unfollowing} (:container-slug container-data))\n                            ;; Find first item that is an entry and is unseen or it's published by\n                            ;; the user but after the last seen-at of the container\n                            #(and (entry? %)\n                                  (not (:unseen %))\n                                  (or (not (:publisher? %))\n                                      (not (pos? (compare (:published-at %) (:last-seen-at container-data))))))\n                            #(and (entry? %)\n                                  (not (:unseen-comments %))))\n            ignore-item-fn (if replies?\n                             #(or (not (entry? %))\n                                  (:ignore-comments %))\n                             #(not (entry? %)))\n            opts {:has-next next-link\n                  :hide-bottom-line true}\n            caught-up-item (when (and keep-caught-up?\n                                      (seq (:items-to-render container-data)))\n                             (some #(when (resource-type? % :caught-up) %) (:items-to-render container-data)))\n            caught-up-index (when caught-up-item\n                              (utils/index-of (vec (:items-to-render container-data)) #(resource-type? % :caught-up)))\n            with-caught-up (cond\n                             (number? caught-up-index)\n                             (let [[before after] (split-at caught-up-index (vec grouped-items))]\n                               (vec (remove nil? (concat before [caught-up-item] after))))\n                             (#{:following :replies} (:container-slug container-data))\n                             (insert-caught-up (:container-slug container-data) grouped-items check-item-fn ignore-item-fn opts)\n                             :else\n                             grouped-items)\n            with-open-close-items (insert-open-close-item with-caught-up #(not= (:resource-type %2) (:resource-type %3)))\n            with-ending-item (insert-ending-item with-open-close-items next-link)]\n        (-> with-fixed-activities\n         (assoc :resource-type :container)\n         (dissoc :old-links :items)\n         (assoc :links fixed-next-links)\n         (assoc :posts-list full-items-list)\n         (assoc :items-to-render with-ending-item))))))\n\n(defn activity-comments [activity-data comments-data]\n  (or (-> comments-data\n          (get (:uuid activity-data))\n          :sorted-comments)\n      (sort-by :created-at (:comments activity-data))))\n\n(defn is-element-visible?\n   \"Given a DOM element return true if it's actually visible in the viewport.\"\n  [el]\n  (let [rect (.getBoundingClientRect el)\n        zero-pos? #(or (zero? %)\n                       (pos? %))\n        doc-element (.-documentElement js/document)\n        win-height (or (.-clientHeight doc-element)\n                       (.-innerHeight js/window))]\n    (or      ;; Item top is more then the navbar height\n        (and (>= (.-top rect) responsive/navbar-height)\n             ;; and less than the screen height\n             (< (.-top rect) win-height))\n             ;; Item bottom is less than the screen height\n        (and (<= (.-bottom rect) win-height)\n         ;; and more than the navigation bar to\n         (> (.-bottom rect) responsive/navbar-height)))))\n\n(defn clean-who-reads-count-ids\n  \"Given a list of items we want to request the who reads count\n   and the current read data, filter out the ids we already have data.\"\n  [item-ids activities-read-data]\n  (let [all-items (set (keys activities-read-data))\n        request-set (set item-ids)\n        diff-ids (clojure.set/difference request-set all-items)]\n    (vec diff-ids)))\n\n;; Last used section\n\n(defn last-used-section []\n  (when-let [org-slug (dis/current-org-slug)]\n    (let [cookie-name (router/last-used-board-slug-cookie org-slug)]\n      (cook/get-cookie cookie-name))))\n\n(defn save-last-used-section [section-slug]\n  (let [org-slug (dis/current-org-slug)\n        last-board-cookie (router/last-used-board-slug-cookie org-slug)]\n    (if section-slug\n      (cook/set-cookie! last-board-cookie section-slug (* 60 60 24 365))\n      (cook/remove-cookie! last-board-cookie))))\n\n(def iso-format (time-format/formatters :date-time))\n\n(def date-format (time-format/formatter \"MMMM d\"))\n\n(def date-format-year (time-format/formatter \"MMMM d YYYY\"))\n\n(defn post-date [timestamp & [force-year]]\n  (let [d (time-format/parse iso-format timestamp)\n        now-year (.getFullYear (utils/js-date))\n        timestamp-year (.getFullYear (utils/js-date timestamp))\n        show-year (or force-year (not= now-year timestamp-year))\n        f (if show-year date-format-year date-format)]\n    (time-format/unparse f d)))\n\n(defn update-contributions [db org-data change-data active-users follow-publishers-list]\n  (let [org-slug (:slug org-data)\n        contributions-list-key (dis/contributions-list-key org-slug)]\n    (reduce (fn [tdb contrib-key]\n              (let [rp-contrib-data-key (dis/contributions-data-key org-slug contrib-key dis/recently-posted-sort)\n                    ra-contrib-data-key (dis/contributions-data-key org-slug contrib-key dis/recent-activity-sort)]\n                (as-> tdb tdb*\n                 (if (contains? (get-in tdb* (butlast rp-contrib-data-key)) (last rp-contrib-data-key))\n                   (update-in tdb* rp-contrib-data-key\n                    #(-> %\n                      (parse-contributions change-data org-data active-users follow-publishers-list dis/recently-posted-sort)\n                      (dissoc :fixed-items)))\n                   tdb*)\n                 (if (contains? (get-in tdb* (butlast ra-contrib-data-key)) (last ra-contrib-data-key))\n                   (update-in tdb* ra-contrib-data-key\n                     #(-> %\n                       (parse-contributions change-data org-data active-users follow-publishers-list dis/recent-activity-sort)\n                       (dissoc :fixed-items)))\n                   tdb*))))\n     db\n     (keys (get-in db contributions-list-key)))))\n\n(defn update-boards [db org-data change-data active-users]\n  (let [org-slug (:slug org-data)\n        boards-key (dis/boards-key org-slug)\n        following-boards (dis/follow-boards-list org-slug db)]\n    (reduce (fn [tdb board-key]\n             (let [rp-board-data-key (dis/board-data-key org-slug board-key dis/recently-posted-sort)\n                   ra-board-data-key (dis/board-data-key org-slug board-key dis/recent-activity-sort)]\n               (as-> tdb tdb*\n                (if (contains? (get-in tdb* (butlast rp-board-data-key)) (last rp-board-data-key))\n                  (update-in tdb* rp-board-data-key\n                   #(-> %\n                     (parse-board change-data active-users following-boards dis/recently-posted-sort)\n                     (dissoc :fixed-items)))\n                  tdb*)\n                (if (contains? (get-in tdb* (butlast ra-board-data-key)) (last ra-board-data-key))\n                  (update-in tdb* ra-board-data-key\n                   #(-> %\n                     (parse-board change-data active-users following-boards dis/recent-activity-sort)\n                     (dissoc :fixed-items)))\n                  tdb*))))\n    db\n    (keys (get-in db boards-key)))))\n\n(defn update-container\n\n  ([db container-slug org-data change-data active-users]\n  (update-container db container-slug org-data change-data active-users false))\n\n  ([db container-slug org-data change-data active-users keep-caught-up?]\n  (let [org-slug (:slug org-data)\n        rp-container-data-key (dis/container-key org-slug container-slug dis/recently-posted-sort)\n        ra-container-data-key (dis/container-key org-slug container-slug dis/recent-activity-sort)]\n    (as-> db tdb\n     (if (contains? (get-in tdb (butlast rp-container-data-key)) (last rp-container-data-key))\n       (update-in tdb rp-container-data-key\n        #(-> %\n          (parse-container change-data org-data active-users dis/recently-posted-sort {:keep-caught-up? keep-caught-up?})\n          (dissoc :fixed-items)))\n       tdb)\n     (if (contains? (get-in tdb (butlast ra-container-data-key)) (last ra-container-data-key))\n       (update-in tdb ra-container-data-key\n        #(-> %\n          (parse-container change-data org-data active-users dis/recent-activity-sort {:keep-caught-up? keep-caught-up?})\n          (dissoc :fixed-items)))\n       tdb)))))\n\n(defn update-replies-container\n  ([db org-data change-data active-users]\n  (update-replies-container db org-data change-data active-users false))\n  ([db org-data change-data active-users keep-caught-up?]\n  (update-container db :replies org-data change-data active-users keep-caught-up?)))\n\n(defn update-replies-comments [db org-data change-data active-users]\n  (update-replies-container db org-data change-data active-users true))\n\n(defn update-containers [db org-data change-data active-users]\n  (let [org-slug (:slug org-data)\n        containers-key (dis/containers-key org-slug)]\n    (reduce #(update-container %1 %2 org-data change-data active-users)\n     db\n     (keys (get-in db containers-key)))))\n\n(defn update-posts [db org-data change-data active-users]\n  (let [org-slug (:slug org-data)\n        posts-key (dis/posts-data-key org-slug)]\n    (reduce (fn [tdb post-uuid]\n             (let [post-data-key (concat posts-key [post-uuid])\n                   old-post-data (get-in tdb post-data-key)\n                   board-data (get-in tdb (dis/board-data-key org-slug (:board-slug old-post-data)))]\n               (assoc-in tdb post-data-key (parse-entry old-post-data board-data change-data active-users))))\n     db\n     (keys (get-in db posts-key)))))\n\n(defn update-all-containers [db org-data change-data active-users follow-publishers-list]\n  (-> db\n   (update-posts org-data change-data active-users)\n   (update-boards org-data change-data active-users)\n   (update-containers org-data change-data active-users)\n   (update-contributions org-data change-data active-users follow-publishers-list)))"]}