{"version":3,"sources":["oc/web/components/invite_slack_modal.cljs"],"mappings":"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","names":["oc.web.components.invite-slack-modal/close-clicked","s","dismiss-action","invite-users","p1__44727#","cljs.core/filterv","cljs.core/not","cljs.core/deref","org.martinklepsch.derivatives/get-ref","has-unsent-invites","cljs.core/count","p1__44728#","cljs.core/some","cljs.core/seq","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.components.invite-slack-modal/default-row-num","oc.web.components.invite-slack-modal/default-slack-user","oc.web.components.invite-slack-modal/default-user-role","oc.web.components.invite-slack-modal/default-user-row","oc.web.components.invite-slack-modal/new-user-row","cljs.core.assoc","oc.web.components.invite-slack-modal/valid-user?","user-map","cljs.core/contains?","oc.web.components.invite-slack-modal/has-valid-user?","users-list","oc.web.components.invite-slack-modal/user-type-did-change","value","seq__44737","chunk__44739","count__44740","i__44741","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","i","cljs.core.range","user","cljs.core.get","cljs.core/empty?","oc.web.dispatcher/dispatch!","oc.web.components.invite-slack-modal/setup-initial-rows","inviting-users-data","cur-user-data","team-data","new-row","cljs.core/vec","cljs.core.repeat","oc.web.components.invite-slack-modal/highlight-url","url-field","rum.core/ref-node","rum.core/build-defcs","js/React.createElement","sablono.interpreter/create-element","cljs.core.into_array","iter__4529__auto__","s__44763","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__44765","cljs.core/chunk-buffer","i__44764","cljs.core/-nth","cljs.core/chunk-append","sablono.util/join-classes","sablono.interpreter/interpret","attrs44766","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","cljs.core/chunk-cons","cljs.core/chunk","iter__44762","cljs.core/cons","cljs.core/rest","oc.web.components.invite-slack-modal/invite-slack-modal","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","cljs.core.rand","oc.web.actions.nux/dismiss-post-added-tooltip","org-data","oc.web.actions.org.get_org","oc.web.actions.team/teams-get","G__44775","js/$","sending","initial-sending","invite-drv","no-error-invites","p1__44744#","cljs.core.filter","error-invites","hold-initial-sending","cljs.core/reset!","oc.web.lib.utils/after","oc.web.actions.notifications/show-notification","org.martinklepsch.derivatives/react","invite-users-data","team-roster","uninvited-users","p1__44745#","cljs.core._EQ_","is-admin?","oc.web.lib.jwt/is-admin?","oc.web.actions.nav-sidebar/close-all-panels","_","oc.web.actions.nav-sidebar/show-org-settings","oc.web.local-settings/web-server-domain","oc.web.urls/sign-up-slack","e","oc.web.lib.utils/event-stop","url-input","copied?","oc.web.lib.utils/copy-to-clipboard","user-data","key-string","rum.core/with-key","G__44767","p1__44746#","p1__44748#","G__44769","oc.web.components.ui.slack-users-dropdown/slack-users-dropdown","cljs.core.merge","p1__44747#","check-fn","cljs.core.not_EQ_","cljs.core/every?","oc.lib.user.name_for","G__44768","p1__44749#","G__44770","oc.web.components.ui.user-type-dropdown/user-type-dropdown","oc.web.lib.utils/guid","before","cljs.core.subvec","after","next-invite-users","cljs.core.concat","fixed-next-invite-users","cljs.core.conj","valid-count","oc.web.actions.team/invite-users","oc.web.actions.org.bot_auth","oc.web.router/get-token"],"sourcesContent":["(ns oc.web.components.invite-slack-modal\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.lib.user :as user-lib]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.local-settings :as ls]\n            [oc.web.actions.nux :as nux-actions]\n            [oc.web.actions.org :as org-actions]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.alert-modal :as alert-modal]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.user-type-dropdown :refer (user-type-dropdown)]\n            [oc.web.components.ui.slack-users-dropdown :refer (slack-users-dropdown)]))\n\n(defn close-clicked [s dismiss-action]\n  (let [invite-users (filterv #(not (:error %)) (:invite-users @(drv/get-ref s :invite-data)))\n        has-unsent-invites (and (pos? (count invite-users))\n                                (some #(seq (:user %)) invite-users))]\n    (if has-unsent-invites\n      (let [alert-data {:icon \"/img/ML/trash.svg\"\n                        :action \"invite-unsaved-edits\"\n                        :message \"Leave without saving your changes?\"\n                        :link-button-title \"Stay\"\n                        :link-button-cb #(alert-modal/hide-alert)\n                        :solid-button-style :red\n                        :solid-button-title \"Lose changes\"\n                        :solid-button-cb #(do\n                                            (alert-modal/hide-alert)\n                                            (dismiss-action))}]\n        (alert-modal/show-alert alert-data))\n      (dismiss-action))))\n\n(def default-row-num 1)\n(def default-slack-user {})\n(def default-user-role :author)\n(def default-user-row\n {:temp-user \"\"\n  :user default-slack-user\n  :role default-user-role})\n\n(defn new-user-row [s]\n  (assoc default-user-row :type \"slack\"))\n\n(defn valid-user? [user-map]\n  (and (contains? (:user user-map) :slack-id)\n       (contains? (:user user-map) :slack-org-id)))\n\n(defn has-valid-user? [users-list]\n  (some valid-user? users-list))\n\n(defn user-type-did-change [s invite-users value]\n  (doseq [i (range (count invite-users))\n          :let [user (get invite-users i)]]\n    (when (and (empty? (:user user))\n               (empty? (:temp-user user)))\n      (dis/dispatch! [:input [:invite-users i :type] value]))))\n\n(defn setup-initial-rows [s]\n  (let [inviting-users-data @(drv/get-ref s :invite-data)\n        invite-users (:invite-users inviting-users-data)\n        cur-user-data (:current-user-data @(drv/get-ref s :invite-data))\n        team-data (:team-data inviting-users-data)]\n    ;; Check if there are already invite rows\n    (when (zero? (count invite-users))\n      ;; if there are no rows setup the default initial rows\n      (let [new-row (new-user-row s)]\n        (dis/dispatch! [:input [:invite-users] (vec (repeat default-row-num new-row))])))))\n\n(defn- highlight-url\n  \"Select the whole content of the share link filed.\"\n  [s]\n  (when-let [url-field (rum/ref-node s \"invite-token-url-field\")]\n    (.select url-field)))\n\n(rum/defcs invite-slack-modal <  ;; Mixins\n  rum/reactive\n  (drv/drv :org-data)\n  (drv/drv :invite-data)\n  ;; Locals\n  (rum/local (int (rand 10000)) ::rand)\n  (rum/local \"Send\" ::send-bt-cta)\n  (rum/local 0 ::sending)\n  (rum/local 0 ::initial-sending)\n  {:will-mount (fn [s]\n                 (setup-initial-rows s)\n                 (nux-actions/dismiss-post-added-tooltip)\n                 (let [org-data @(drv/get-ref s :org-data)]\n                   (org-actions/get-org org-data true)\n                   (team-actions/teams-get))\n                s)\n   :after-render (fn [s]\n                   (doto (js/$ \"[data-toggle=\\\"tooltip\\\"]\")\n                      (.tooltip \"fixTitle\")\n                      (.tooltip \"hide\"))\n                   s)\n   :will-update (fn [s]\n                  (let [sending (::sending s)\n                        initial-sending (::initial-sending s)]\n                    (when (pos? @sending)\n                      (let [invite-drv @(drv/get-ref s :invite-data)\n                            no-error-invites (filter #(not (:error %)) (:invite-users invite-drv))\n                            error-invites (filter :error (:invite-users invite-drv))\n                            hold-initial-sending @initial-sending]\n                        (reset! sending (count no-error-invites))\n                        (when (zero? (count no-error-invites))\n                          (utils/after 1000\n                            (fn []\n                              (reset! sending 0)\n                              (reset! initial-sending 0)\n                              (if (zero? (count error-invites))\n                                (do\n                                  (reset! (::send-bt-cta s) \"Slack invitation sent!\")\n                                  (utils/after 2500 #(reset! (::send-bt-cta s) \"Send Slack invitations\"))\n                                  (notification-actions/show-notification {:title (str \"Slack invite\"\n                                                                                   (when (> hold-initial-sending 1)\n                                                                                     \"s\")\n                                                                                   \" sent.\")\n                                                                           :primary-bt-title \"OK\"\n                                                                           :primary-bt-dismiss true\n                                                                           :expire 3\n                                                                           :primary-bt-inline true\n                                                                           :id :invites-sent})\n                                  (setup-initial-rows s))\n                                (reset! (::send-bt-cta s) \"Send Slack invitations\"))))))))\n                  s)\n   :will-unmount (fn [s]\n                   (dis/dispatch! [:input [:invite-users] nil])\n                   s)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        invite-users-data (drv/react s :invite-data)\n        team-data (:team-data invite-users-data)\n        invite-users (:invite-users invite-users-data)\n        cur-user-data (:current-user-data invite-users-data)\n        team-roster (:team-roster invite-users-data)\n        uninvited-users (filterv #(= (:status %) \"uninvited\") (:users team-roster))\n        is-admin? (jwt/is-admin? (:team-id org-data))]\n    [:div.invite-slack-modal\n      [:button.mlb-reset.modal-close-bt\n        {:on-click #(close-clicked s nav-actions/close-all-panels)}]\n      [:div.invite-slack\n        [:div.invite-slack-header\n          [:div.invite-slack-header-title\n            \"Invite via Slack\"]\n          [:button.mlb-reset.cancel-bt\n            {:on-click (fn [_] (close-clicked s #(nav-actions/show-org-settings nil)))}\n            \"Back\"]]\n        [:div.invite-slack-body\n          [:div.invite-token-container\n            [:div.invite-token-title\n              \"Share this link in Slack \" [:i.mdi.mdi-slack]]\n            [:div.invite-token-description\n              \"Anyone on your Slack team can use this link to join Wut as a \"\n              [:strong \"contributor\"]\n              \".\"]\n            [:div.invite-token-description\n              \"Invite link\"]\n            [:div.invite-token-field\n              [:input.invite-token-field-input\n                {:value (str ls/web-server-domain oc-urls/sign-up-slack)\n                 :read-only true\n                 :ref \"invite-token-url-field\"\n                 :content-editable false\n                 :on-click #(highlight-url s)}]\n              [:button.mlb-reset.invite-token-field-bt\n                {:ref \"invite-token-copy-btn\"\n                 :on-click (fn [e]\n                            (utils/event-stop e)\n                            (let [url-input (rum/ref-node s \"invite-token-url-field\")]\n                              (highlight-url s)\n                              (let [copied? (utils/copy-to-clipboard url-input)]\n                                (notification-actions/show-notification {:title (if copied? \"Invite URL copied to clipboard\" \"Error copying the URL\")\n                                                                         :description (when-not copied? \"Please try copying the URL manually\")\n                                                                         :primary-bt-title \"OK\"\n                                                                         :primary-bt-dismiss true\n                                                                         :primary-bt-inline copied?\n                                                                         :expire 3\n                                                                         :id (if copied? :invite-token-url-copied :invite-token-url-copy-error)}))))}\n                \"Copy\"]]]\n          (if (:can-slack-invite team-data)\n            [:div.invites-list.top-border\n              [:div.invites-list-title\n                \"Invite someone with a specific role\"]\n              [:div.invites-list-description\n                \"Admin, Contributor, or Viewer\"]\n              (for [i (range (count invite-users))\n                    :let [user-data (get invite-users i)\n                          key-string (str \"invite-users-tabe-\" i)]]\n                [:div.invites-list-item\n                  {:key key-string}\n                  [:div.invites-list-item-inner.group\n                    [:div.user-name-dropdown\n                      {:class (when (:error user-data) \"error\")}\n                      (rum/with-key\n                       (slack-users-dropdown\n                        {:on-change #(dis/dispatch! [:input [:invite-users i]\n                                      (merge user-data {:user % :error nil :temp-user nil})])\n                         :filter-fn (fn [user]\n                                      (let [check-fn #(or\n                                                       (not (:user %))\n                                                       (not= (:slack-org-id (:user %)) (:slack-org-id user))\n                                                       (not= (:slack-id (:user %)) (:slack-id user)))]\n                                        (every? check-fn invite-users)))\n                         :on-intermediate-change #(dis/dispatch! [:input [:invite-users]\n                                                   (assoc invite-users i\n                                                    (merge user-data {:user nil :error nil :temp-user %}))])\n                          :initial-value (user-lib/name-for (:user user-data))})\n                        (str \"slack-users-dropdown-\" (count uninvited-users) \"-row-\" i))]]\n                  [:div.user-type-dropdown\n                    (user-type-dropdown {:user-id (utils/guid)\n                                         :user-type (:role user-data)\n                                         :hide-admin (not (jwt/is-admin? (:team-id org-data)))\n                                         :on-change\n                                          #(dis/dispatch!\n                                            [:input\n                                             [:invite-users]\n                                             (assoc\n                                              invite-users\n                                              i\n                                              (merge user-data {:role % :error nil}))])})]\n                  [:button.mlb-reset.remove-user\n                    {:on-click #(let [before (subvec invite-users 0 i)\n                                    after (subvec invite-users (inc i) (count invite-users))\n                                    next-invite-users (vec (concat before after))\n                                    fixed-next-invite-users (if (zero? (count next-invite-users))\n                                                              [(assoc default-user-row :type (:type user-data))]\n                                                              next-invite-users)]\n                                  (dis/dispatch! [:input [:invite-users] fixed-next-invite-users]))}]])\n              [:button.mlb-reset.add-button\n                {:on-click\n                  #(dis/dispatch!\n                    [:input\n                     [:invite-users]\n                     (conj\n                      invite-users\n                      (assoc default-user-row :type \"slack\"))])}\n                [:div.add-button-plus]\n                \"Add another\"]\n              [:button.mlb-reset.save-bt\n                {:on-click #(let [valid-count (count (filterv valid-user? invite-users))]\n                              (reset! (::sending s) valid-count)\n                              (reset! (::initial-sending s) valid-count)\n                              (reset! (::send-bt-cta s) \"Sending Slack invitations\")\n                              (team-actions/invite-users (:invite-users @(drv/get-ref s :invite-data))))\n                 :class (when (= \"Slack invitations sent!\" @(::send-bt-cta s)) \"no-disable\")\n                 :disabled (or (not (has-valid-user? invite-users))\n                               (pos? @(::sending s)))}\n                @(::send-bt-cta s)]]\n            ;; Only admins can add the bot\n            (when is-admin?\n              [:div.invites-list.top-border\n                [:div.invites-list-title\n                  \"Invite someone with a specific permission level\"]\n                [:button.mlb-reset.enable-carrot-bot-bt\n                  {:on-click #(org-actions/bot-auth team-data cur-user-data (str (router/get-token) \"?org-settings=invite-slack\"))}\n                  \"Enable the Wut bot for Slack\"]]))]]]))"]}