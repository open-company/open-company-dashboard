{"version":3,"sources":["oc/web/components/paginated_stream.cljs"],"mappings":"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","names":["oc.web.components.paginated-stream/virtualized-grid","cljs.core.partial","oc.web.lib.react-utils/build","js/module$node_modules$react_virtualized$dist$commonjs$index.Grid","oc.web.components.paginated-stream/window-scroller","js/module$node_modules$react_virtualized$dist$commonjs$index.WindowScroller","oc.web.components.paginated-stream/cell-measurer","js/module$node_modules$react_virtualized$dist$commonjs$index.CellMeasurer","oc.web.components.paginated-stream/RVCellMeasurerCache","js/module$node_modules$react_virtualized$dist$commonjs$index.CellMeasurerCache","oc.web.components.paginated-stream/collapsed-foc-height","oc.web.components.paginated-stream/foc-height","oc.web.components.paginated-stream/mobile-foc-height","oc.web.components.paginated-stream/calc-card-height","mobile?","foc-layout","cljs.core._EQ_","oc.web.dispatcher/other-foc-layout","rum.core/build-defc","p__46543","map__46544","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.paginated-stream/wrapped-stream-item","rum.core/static","item","read-data","org-data","container-data","editable-boards","is-mobile","clear-cell-measure-cb","current-user-data","add-comment-force-update","row-index","props","member?","replies?","show-wrt?","and__4115__auto__","show-new-comments?","collapsed-item?","cljs.core/not","oc.web.lib.utils/class-set","G__46553","oc.web.components.stream-collapsed-item/stream-collapsed-item","G__46554","oc.web.components.stream-item/stream-item","oc.web.utils.activity/board?","cljs.core/count","p1__46540#","cljs.core.filter","cljs.core.not_EQ_","oc.web.lib.utils/default-drafts-board-slug","p__46556","map__46557","attrs46555","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","oc.web.components.paginated-stream/load-more","p__46560","map__46561","attrs46559","oc.web.components.paginated-stream/closing-item","p__46563","map__46564","oc.web.components.paginated-stream/separator-item","p__46567","map__46568","attrs46566","oc.web.components.paginated-stream/caught-up-wrapper","oc.web.components.ui.all-caught-up/caught-up-line","rum.core/build-defcs","p__46570","p__46571","map__46572","map__46573","map__46576","oc.web.components.paginated-stream/list-item","s","items","activities-read","is-mobile?","derivatives","rowIndex","key","style","isScrolling","row-props","registerChild","measure","clj-props","cljs.core.js__GT_clj","entry?","oc.web.utils.activity/entry?","cljs.core/name","clojure.string.join","cljs.core/select-keys","oc.web.utils.activity.resource_type_QMARK_","G__46578","G__46579","G__46580","G__46581","G__46582","cljs.core.merge","oc.web.components.paginated-stream/unique-row-string","static-part","variable-part","or__4126__auto__","var_args","G__46584","oc.web.components.paginated-stream/clear-cell-measure","js/Error","rum-state","oc.web.components.paginated_stream.clear_cell_measure","column-index","temp__5735__auto__","cljs.core/deref","cache","cljs.core/reset!","oc.web.lib.utils/activity-uuid","oc.web.components.paginated-stream/clear-changed-cells-cache","next-row-keys","cljs.core/first","resource-types","seq__46585","cljs.core/seq","chunk__46588","count__46589","i__46590","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","idx","cljs.core.range","old-resource-type","new-resource-type","oc.web.components.paginated-stream/setup-onload-recalc","dom-node","rum.core/dom-node","parent-sel","oc.web.utils.dom/onload-recalc-measure-class","nodes","cljs.core.array_seq","seq__46593","chunk__46594","count__46595","i__46596","el","comment-node","p__46597","map__46598","map__46600","oc.web.components.paginated-stream/virtualized-stream","oc.web.mixins.seen/container-nav-mixin","rum.core.local","oc.web.mixins.ui/mounted-flag","G__46607","cljs.core.mapv","cljs.core/clj->js","_","virtualized-props","height","onChildScroll","scrollTop","key-prefix","cell-measurer-renderer","p__46602","map__46603","map__46605","parent","columnIndex","derived-props","cljs.core.assoc","width","js/window.innerWidth","js/oc","js/oc.web","js/oc.web.components","js/oc.web.components.paginated-stream","js/oc.web.components.paginated-stream.last-scroll-top","oc.web.components.paginated-stream/last-scroll-top","cljs.core.atom","G__46609","oc.web.components.paginated-stream/did-scroll","oc.web.components.paginated_stream.did_scroll","oc.web.lib.responsive/is-mobile-size?","e","scroll-top","js/document","js/window","direction","win-height","oc.web.utils.dom/viewport-height","max-scroll","pnr","current-board-slug","org.martinklepsch.derivatives/get-ref","current-contributions-id","board-kw","cljs.core.keyword","oc.web.actions.activity/replies-more","oc.web.actions.activity/following-more","oc.web.actions.contributions/contributions-more","oc.web.actions.activity/inbox-more","oc.web.actions.activity/all-posts-more","oc.web.actions.activity/bookmarks-more","oc.web.actions.activity/unfollowing-more","oc.web.dispatcher/is-container?","oc.web.actions.section/section-more","x__4214__auto__","y__4215__auto__","oc.web.components.paginated-stream/check-pagination","next-link","oc.web.lib.utils.link_for","attrs46611","oc.web.components.paginated-stream/paginated-stream","rum.core/reactive","org.martinklepsch.derivatives.drv","oc.web.mixins.ui/first-render-mixin","oc.web.mixins.section/container-nav-in","oc.web.mixins.section.load_entry_comments","goog.events/listen","goog.events.EventType/SCROLL","goog.events/unlistenByKey","org.martinklepsch.derivatives/react","_board-slug","_contributions-id","viewport-height","rum.core/with-key","G__46612","oc.web.components.stream-reply-item/replies-refresh-button"],"sourcesContent":["(ns oc.web.components.paginated-stream\n  (:require [rum.core :as rum]\n            [dommy.core :as dommy :refer-macros (sel1)]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.utils :as utils]\n            [oc.web.lib.react-utils :as rutils]\n            [oc.web.dispatcher :as dis]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.utils.dom :as dom-utils]\n            [oc.web.mixins.seen :as seen-mixins]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.mixins.section :as section-mixins]\n            [oc.web.actions.section :as section-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.components.stream-item :refer (stream-item)]\n            [oc.web.components.stream-reply-item :refer (replies-refresh-button stream-reply-item)]\n            [oc.web.actions.contributions :as contributions-actions]\n            [oc.web.components.ui.all-caught-up :refer (caught-up-line)]\n            [oc.web.components.stream-collapsed-item :refer (stream-collapsed-item)]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [\"react-virtualized\" :as react-virtualized]\n            ;; [\"ReactVirtualized.grid\" :as react-virtualized-grid]\n            ;; [\"ReactVirtualized.WindowScroller\" :as react-virtualized-window-scroller]\n            ;; [\"ReactVirtualized.CellMeasurer\" :as react-virtualized-cell-measurer]\n            ;; [\"ReactVirtualized.CellMeasurer\" :as RVCellMeasurerCache]\n            ))\n\n(def virtualized-grid (partial rutils/build react-virtualized/Grid))\n(def window-scroller (partial rutils/build react-virtualized/WindowScroller))\n(def cell-measurer (partial rutils/build react-virtualized/CellMeasurer))\n(def RVCellMeasurerCache react-virtualized/CellMeasurerCache)\n\n;; 800px from the end of the current rendered results as point to add more items in the batch\n(def collapsed-foc-height 56)\n(def foc-height 204)\n(def mobile-foc-height 166)\n\n(defn- calc-card-height [mobile? foc-layout]\n  (cond mobile?\n        mobile-foc-height\n        (= foc-layout dis/other-foc-layout)\n        collapsed-foc-height\n        :else\n        foc-height))\n\n(rum/defc wrapped-stream-item < rum/static\n  [{:keys [item\n           read-data\n           org-data\n           container-data\n           editable-boards\n           foc-layout\n           is-mobile\n           clear-cell-measure-cb\n           current-user-data\n           add-comment-force-update\n           row-index] :as props}]\n  (let [member? (:member? org-data)\n        replies? (= (:container-slug container-data) :replies)\n        show-wrt? (and member? (not replies?))\n        show-new-comments? replies?\n        collapsed-item? (and (= foc-layout dis/other-foc-layout)\n                             (not is-mobile))]\n   [:div.virtualized-list-row\n     {:class (utils/class-set {:collapsed-item collapsed-item?\n                               :open-item (:open-item item)\n                               :close-item (:close-item item)})}\n     (cond\n      ;;  (= (:container-slug container-data) :replies)\n      ;;  (stream-reply-item {:reply-data            item\n      ;;                      :member?               member?\n      ;;                      :row-index             row-index\n      ;;                      :read-data             read-data\n      ;;                      :show-wrt?             show-wrt?\n      ;;                      :current-user-data     current-user-data\n      ;;                      :clear-cell-measure-cb clear-cell-measure-cb\n      ;;                      :add-comment-force-update add-comment-force-update})\n       collapsed-item?\n       (stream-collapsed-item {:activity-data     item\n                               :member?           member?\n                               :read-data         read-data\n                               :show-wrt?         show-wrt?\n                               :editable-boards   editable-boards\n                               :current-user-data current-user-data})\n       :else\n       (stream-item {:activity-data item\n                     :read-data          read-data\n                     :show-wrt?          show-wrt?\n                     :show-new-comments? show-new-comments?\n                     :replies?           replies?\n                     :member?            member?\n                     :editable-boards    editable-boards\n                     :container-slug     (:container-slug container-data)\n                     :foc-board          (not (activity-utils/board? container-data))\n                     :current-user-data  current-user-data\n                     :boards-count       (count (filter #(not= (:slug %) utils/default-drafts-board-slug) (:boards org-data)))}))]))\n\n(rum/defc load-more < rum/static\n  [{:keys [item]}]\n  [:div.loading-updates.bottom-loading\n    (:message item)])\n\n(rum/defc closing-item < rum/static\n  [{:keys [item]}]\n  [:div.closing-item\n    (:message item)])\n\n(rum/defc separator-item < rum/static\n  [{:keys [foc-layout item] :as props}]\n  [:div.virtualized-list-separator\n    {:class (when (not= foc-layout dis/other-foc-layout) \"expanded-list\")}\n    (:label item)])\n\n(rum/defc caught-up-wrapper < rum/static\n  [{:keys [item]}]\n  [:div.caught-up-wrapper\n    (caught-up-line item)])\n\n(rum/defcs list-item < rum/static\n  [s {:keys [items\n             activities-read\n             foc-layout\n             is-mobile?\n             container-data\n             current-user-data\n             clear-cell-measure-cb\n             add-comment-force-update\n             row-index]\n    :as derivatives}\n   {:keys [rowIndex key style isScrolling] :as row-props}\n   props]\n  (let [{:keys [registerChild measure] :as clj-props} (js->clj props :keywordize-keys true)\n        item (get items rowIndex)\n        entry? (activity-utils/entry? item)\n        read-data (when entry?\n                    (get activities-read (:uuid item)))\n        replies? (= (:container-slug container-data) :replies)]\n    [:div.virtualized-list-item\n      {:key (str (name (:resource-type item)) \"-\" key \"-\" (if entry?\n                                                            (cond replies?\n                                                                  (str (:uuid item) \"-\" (:last-activity-at item) \"-\" (count (:replies-data item)))\n                                                                  :else\n                                                                  (clojure.string/join \"-\" (select-keys item [:uuid :created-at :published-at :updated-at])))\n                                                            (str (:uuid item)\n                                                                 (:sort-value item)\n                                                                 (:last-activity-at item))))\n       :ref registerChild\n       :style style}\n      (cond\n        (activity-utils/resource-type? item :caught-up)\n        (caught-up-wrapper {:item item})\n        (activity-utils/resource-type? item :closing-item)\n        (closing-item {:item item})\n        (activity-utils/resource-type? item :loading-more)\n        (load-more {:item item})\n        (activity-utils/resource-type? item :separator)\n        (separator-item {:item item :foc-layout foc-layout})\n        ; isScrolling\n        ; [:div.virtualized-list-placeholder]\n        :else\n        (wrapped-stream-item (merge derivatives {:item item\n                                                 :read-data read-data\n                                                 :is-mobile is-mobile?\n                                                 :foc-layout foc-layout\n                                                 :container-data container-data\n                                                 :add-comment-force-update add-comment-force-update\n                                                 :clear-cell-measure-cb clear-cell-measure-cb\n                                                 :row-index row-index})))]))\n\n;; (defn- replies-unique-key [entry-data]\n;;   (let [replies-data (vec (:replies-data entry-data))]\n;;     (reduce (fn [n idx]\n;;               (let [item (get replies-data idx)]\n;;                 (+ n (* (inc idx) 100) (if (seq (:reactions item)) 1 0))))\n;;      0\n;;      (range (count replies-data)))))\n\n (defn- unique-row-string [replies? item]\n  (let [entry? (activity-utils/entry? item)\n        static-part (str (name (:resource-type item)) \"-\" (:uuid item))\n        ;; rep-key (replies-unique-key item)\n        variable-part (cond\n                        ;; (and entry? replies?)\n                        ;; (str (-> item :replies-data last :updated-at) \"-\" rep-key)\n                        entry?\n                        (or (:updated-at item) (:created-at item))\n                        :else\n                        (:last-activity-at item))]\n    (str static-part \"-\" variable-part)))\n\n(defn- clear-cell-measure\n\n  ([rum-state row-index] (clear-cell-measure rum-state row-index 0))\n\n  ([rum-state row-index column-index]\n   (when-let [cache @(::cache rum-state)]\n     (.clear cache row-index column-index)\n     (reset! (::force-re-render rum-state) (utils/activity-uuid)))))\n\n(defn- clear-changed-cells-cache [s next-row-keys]\n  (let [props (-> s :rum/args first)\n        container-data (:container-data props)\n        items (:items props)\n        resource-types (::row-keys s)\n        cache @(::cache s)]\n    (doseq [idx (range (count items))\n            :let [old-resource-type (get @resource-types idx)\n                  new-resource-type (get next-row-keys idx)]\n            :when (not= old-resource-type new-resource-type)]\n      (clear-cell-measure s idx 0))\n    (reset! resource-types next-row-keys)))\n\n(defn- setup-onload-recalc [s]\n  (when (-> s :rum/args first :container-data :container-slug (= :replies))\n    (let [dom-node (rum/dom-node s)]\n      (when dom-node\n        (let [parent-sel (str \"div.\" dom-utils/onload-recalc-measure-class)\n              nodes (array-seq (.querySelectorAll dom-node (str parent-sel \" img, \" parent-sel \" iframe\")))]\n          (doseq [el nodes]\n             (let [comment-node (.closest el parent-sel)\n                   row-index (.. comment-node -dataset -rowIndex)]\n               (clear-cell-measure s row-index 0)\n               (set! (.-onload el) #(clear-cell-measure s row-index 0)))))))))\n\n(rum/defcs virtualized-stream < rum/static\n                                (seen-mixins/container-nav-mixin)\n                                (rum/local nil ::row-keys)\n                                (rum/local nil ::cache)\n                                (rum/local nil ::force-re-render)\n                                mixins/mounted-flag\n                                {:will-mount (fn [s]\n                                  (let [props (-> s :rum/args s first)\n                                        replies? (-> props :container-data :container-slug (= :replies))\n                                        next-row-keys (mapv (partial unique-row-string replies?) (:items props))]\n                                    (reset! (::force-re-render s) (utils/activity-uuid))\n                                    (reset! (::cache s)\n                                     (RVCellMeasurerCache.\n                                      (clj->js {:defaultHeight (calc-card-height (:is-mobile? props) (:foc-layout props))\n                                                :minHeight 1\n                                                :fixedWidth true})))\n                                    (reset! (::row-keys s) next-row-keys))\n                                  s)\n                                 :did-mount (fn [s]\n                                  (setup-onload-recalc s)\n                                  s)\n                                 :did-remount (fn [_ s]\n                                  (let [props (-> s :rum/args first)\n                                        replies? (-> props :container-data :container-slug (= :replies))\n                                        next-row-keys (mapv (partial unique-row-string replies?) (:items props))]\n                                    (when-not (= @(::row-keys s) next-row-keys)\n                                      (clear-changed-cells-cache s next-row-keys))\n                                    (setup-onload-recalc s))\n                                  s)}\n  [s {:keys [items\n             activities-read\n             foc-layout\n             is-mobile?\n             container-data\n             current-user-data]\n      :as derivatives}\n     virtualized-props]\n  (let [{:keys [height\n                isScrolling\n                onChildScroll\n                scrollTop\n                registerChild]} (js->clj virtualized-props :keywordize-keys true)\n        key-prefix (if is-mobile? \"mobile\" foc-layout)\n        cell-measurer-renderer (fn [{:keys [cache]} props]\n                                 (let [{:keys [rowIndex key parent columnIndex] :as row-props} (js->clj props :keywordize-keys true)]\n                                   (let [derived-props (assoc derivatives :clear-cell-measure-cb #(clear-cell-measure s rowIndex columnIndex) :row-index rowIndex)]\n                                     (cell-measurer (clj->js {:cache cache\n                                                              :columnIndex columnIndex\n                                                              :rowIndex rowIndex\n                                                              :index rowIndex\n                                                              :key key\n                                                              :parent parent})\n                                      (partial list-item derived-props row-props)))))\n        width (if is-mobile?\n                js/window.innerWidth\n                620)]\n    [:div.virtualized-list-container\n      {:ref registerChild\n       :data-render-key @(::force-re-render s)\n       :key (str \"virtualized-list-\" key-prefix)}\n      (virtualized-grid {:autoHeight true\n                         :ref :virtualized-list-comp\n                         :deferredMeasurementCache @(::cache s)\n                         :estimatedRowSize (if is-mobile? mobile-foc-height foc-height)\n                         :height height\n                         :width width\n                         :columnWidth width\n                         :isScrolling isScrolling\n                         :onScroll onChildScroll\n                         :rowCount (count items)\n                         :rowHeight (.-rowHeight @(::cache s))\n                         :cellRenderer (partial cell-measurer-renderer {:cache @(::cache s)})\n                         :scrollTop scrollTop\n                         ; :overscanRowCount 20\n                         :columnCount 1\n                         :style {:outline \"none\"}})]))\n\n(defonce last-scroll-top (atom 0))\n\n; (def scroll-card-threshold 1)\n; (def scroll-card-threshold-collapsed 5)\n\n(defn did-scroll\n  \"Scroll listener, load more activities when the scroll is close to a margin.\"\n  ([s] (did-scroll s (responsive/is-mobile-size?) nil))\n  ([s mobile?] (did-scroll s mobile? nil))\n  ([s mobile? e]\n  (let [scroll-top (or (.. js/document -scrollingElement -scrollTop) (.-pageYOffset js/window))\n        direction (if (> @last-scroll-top scroll-top)\n                    :up\n                    (if (< @last-scroll-top scroll-top)\n                      :down\n                      :stale))\n        win-height (dom-utils/viewport-height)\n        max-scroll (- (.-scrollHeight (.-scrollingElement js/document)) win-height)\n        is-mobile? (if (nil? mobile?) (responsive/is-mobile-size?) mobile?)\n\n        ;; Calculate the Point of No Return based on the card height\n        ; card-height (calc-card-height is-mobile? @(drv/get-ref s :foc-layout))\n        ; scroll-threshold* (if (= card-height collapsed-foc-height) scroll-card-threshold-collapsed scroll-card-threshold)\n        ; scroll-threshold (* scroll-threshold* card-height)\n        ; pnr (- max-scroll scroll-threshold)\n\n        ;; Let's use the viewport height as point of no return\n        pnr (- max-scroll win-height)\n        current-board-slug @(drv/get-ref s :board-slug)\n        current-contributions-id @(drv/get-ref s :contributions-id)\n        current-contributions-id @(drv/get-ref s :contributions-id)\n        board-kw (keyword current-board-slug)]\n    ;; scrolling down\n    (when (and ;; not already loading more\n               (not @(::bottom-loading s))\n               ;; has a link to load more that can be used\n               @(::has-next s)\n               ;; scroll is moving down\n               (or (= direction :down)\n                   (= direction :stale))\n               ;; and the threshold point has been reached\n               (>= scroll-top pnr))\n      ;; Show a spinner at the bottom\n      (reset! (::bottom-loading s) true)\n      ;; if the user is close to the bottom margin, load more results if there is a link\n      (cond\n        (= board-kw :replies)\n        (activity-actions/replies-more @(::has-next s) :down)\n        (= board-kw :following)\n        (activity-actions/following-more @(::has-next s) :down)\n        (seq current-contributions-id)\n        (contributions-actions/contributions-more @(::has-next s) :down)\n        (= board-kw :inbox)\n        (activity-actions/inbox-more @(::has-next s) :down)\n        (= board-kw :all-posts)\n        (activity-actions/all-posts-more @(::has-next s) :down)\n        (= board-kw :bookmarks)\n        (activity-actions/bookmarks-more @(::has-next s) :down)\n        (= board-kw :unfollowing)\n        (activity-actions/unfollowing-more @(::has-next s) :down)\n        (not (dis/is-container? current-board-slug))\n        (section-actions/section-more @(::has-next s) :down)))\n    ;; Save the last scrollTop value\n    (reset! last-scroll-top (max 0 scroll-top)))))\n\n(defn check-pagination [s]\n  (let [container-data @(drv/get-ref s :container-data)\n        next-link (utils/link-for (:links container-data) \"next\")]\n    (reset! (::has-next s) next-link)\n    (did-scroll s)))\n\n(rum/defcs paginated-stream  <\n                        rum/static\n                        rum/reactive\n                        ;; Derivatives\n                        (drv/drv :org-data)\n                        (drv/drv :items-to-render)\n                        (drv/drv :container-data)\n                        (drv/drv :activities-read)\n                        (drv/drv :editable-boards)\n                        (drv/drv :current-user-data)\n                        (drv/drv :board-slug)\n                        (drv/drv :contributions-id)\n                        (drv/drv :add-comment-force-update)\n                        ;; Locals\n                        (rum/local nil ::scroll-listener)\n                        (rum/local false ::has-next)\n                        (rum/local nil ::bottom-loading)\n                        ;; Mixins\n                        mixins/first-render-mixin\n                        section-mixins/container-nav-in\n                        ; section-mixins/window-focus-auto-loader\n                        (section-mixins/load-entry-comments (fn [s]\n                          (let [container-data @(drv/get-ref s :container-data)]\n                            (when (= (:container-slug container-data) :replies)\n                              container-data))))\n                        {:will-mount (fn [s]\n                          (reset! last-scroll-top (.. js/document -scrollingElement -scrollTop))\n                          (reset! (::scroll-listener s)\n                           (events/listen js/window EventType/SCROLL (partial did-scroll s (responsive/is-mobile-size?))))\n                          s)\n                         :did-mount (fn [s]\n                          (reset! last-scroll-top (.. js/document -scrollingElement -scrollTop))\n                          (check-pagination s)\n                          s)\n                         :did-remount (fn [_ s]\n                          (check-pagination s)\n                         s)\n                         :before-render (fn [s]\n                          (let [container-data @(drv/get-ref s :container-data)]\n                            (when (and (not (:loading-more container-data))\n                                       @(::bottom-loading s))\n                              (reset! (::bottom-loading s) false)\n                              (check-pagination s)))\n                          s)\n                         :will-unmount (fn [s]\n                          (when @(::scroll-listener s)\n                            (events/unlistenByKey @(::scroll-listener s))\n                            (reset! (::scroll-listener s) nil))\n                          s)}\n  [s]\n  (let [org-data (drv/react s :org-data)\n        _board-slug (drv/react s :board-slug)\n        _contributions-id (drv/react s :contributions-id)\n        editable-boards (drv/react s :editable-boards)\n        container-data (drv/react s :container-data)\n        items (drv/react s :items-to-render)\n        activities-read (drv/react s :activities-read)\n        current-user-data (drv/react s :current-user-data)\n        add-comment-force-update (drv/react s :add-comment-force-update)\n        viewport-height (dom-utils/viewport-height)\n        is-mobile? (responsive/is-mobile-size?)\n        member? (:member? org-data)\n        replies? (= (:container-slug container-data) :replies)]\n    [:div.paginated-stream.group\n      [:div.paginated-stream-cards\n        [:div.paginated-stream-cards-inner.group\n          (when replies?\n            (rum/with-key\n             (replies-refresh-button {:items-to-render items})\n             (str \"replies-refresh-button-\" (:last-seen-at container-data))))\n          (window-scroller\n           {}\n           (partial virtualized-stream {:org-data org-data\n                                        :items items\n                                        :container-data container-data\n                                        :is-mobile? is-mobile?\n                                        :current-user-data current-user-data\n                                        :activities-read activities-read\n                                        :editable-boards editable-boards}))]]]));)]]]))\n"]}