{"version":3,"sources":["oc/web/stores/team.cljs"],"mappings":"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","names":["oc.web.stores.team/deep-merge-users","new-users","old-users","filtered-new-users","p1__43481#","cljs.core.filter","and__4115__auto__","cljs.core/seq","oc.web.utils.user.active_QMARK_","cljs.core/map?","cljs.core/vals","new-users-map","cljs.core/zipmap","cljs.core.map","cljs.core.merge_with","cljs.core/merge","oc.web.dispatcher/action","p__43483","vec__43484","cljs.core.nth","db","_","org-slug","active-users-data","temp__5733__auto__","users","follow-publishers-list","oc.web.dispatcher.follow_publishers_list","org-data","oc.web.dispatcher.org_data","fixed-users","oc.web.stores.user/parse-users","change-data","oc.web.dispatcher.change_data","users-map","follow-publishers-list-key","oc.web.dispatcher/follow-publishers-list-key","old-follow-publishers-list","cljs.core.get_in","next-follow-publishers-list","oc.web.stores.user/enrich-publishers-list","cljs.core/assoc-in","oc.web.dispatcher/active-users-key","oc.web.dispatcher/mention-users-key","oc.web.utils.mention/users-for-mentions","oc.web.utils.activity/update-all-containers","p1__43482#","cljs.core.update","oc.web.stores.user/parse-user-data","p__43487","vec__43488","cljs.core.assoc","p__43491","vec__43492","teams","oc.web.stores.team/users-info-hover-from-roster","old-users-map","roster-data","filtered-users","oc.web.utils.user/filter-active-users","p1__43495#","cljs.core/select-keys","or__4126__auto__","p__43498","vec__43499","parsed-roster-data","p1__43496#","merged-users-data","oc.web.dispatcher.active_users","oc.web.dispatcher/team-roster-key","p1__43497#","cljs.core.update_in","oc.web.dispatcher/users-info-hover-key","oc.web.stores.team/parse-team-data","team-data","team-has-bot?","oc.web.lib.jwt/team-has-bot?","slack-orgs","slack-users","oc.web.lib.jwt/get-key","can-add-bot?","p1__43508#","cljs.core/some","cljs.core.keyword","cljs.core.get","cljs.core/not","p1__43509#","p__43517","vec__43518","parsed-team-data","oc.web.dispatcher/team-data-key","p1__43516#","p__43529","vec__43530","team-id","p__43537","vec__43538","channels","channels-key","oc.web.dispatcher/team-channels-key","cljs.core/butlast","cljs.core/dissoc","cljs.core/last","cljs.core.dissoc","p__43545","vec__43546","checked-users","p__43549","vec__43550","user","inviting-users","next-inviting-users","oc.web.lib.utils/vec-dissoc","p__43554","vec__43555","invite-users","idx","p1__43553#","oc.web.lib.utils/index-of","cljs.core._EQ_","next-invite-users","p__43558","vec__43559","cljs.core.concat","p__43562","vec__43563","p__43566","vec__43567","success"],"sourcesContent":["(ns oc.web.stores.team\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.lib.jwt :as j]\n            [oc.lib.user :as user-lib]\n            [oc.web.utils.activity :as au]\n            [oc.web.utils.mention :as mu]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.user :as uu]\n            [oc.web.stores.user :as user-store]))\n\n(defn- deep-merge-users [new-users old-users]\n  (let [filtered-new-users (filter\n                            #(and (seq (:user-id %))\n                                  (uu/active? %))\n                            (if (map? new-users) (vals new-users) new-users))\n        new-users-map (zipmap (map :user-id filtered-new-users) filtered-new-users)]\n    (merge-with merge old-users new-users-map)))\n\n(defmethod dispatcher/action :active-users\n  [db [_ org-slug active-users-data]]\n  (if-let [users (-> active-users-data :collection :items)]\n    (let [follow-publishers-list (dispatcher/follow-publishers-list org-slug db)\n          org-data (dispatcher/org-data db org-slug)\n          fixed-users (user-store/parse-users users org-data follow-publishers-list)\n          change-data (dispatcher/change-data db)\n          users-map (zipmap (map :user-id users) fixed-users)\n          follow-publishers-list-key (dispatcher/follow-publishers-list-key org-slug)\n          old-follow-publishers-list (get-in db follow-publishers-list-key)\n          next-follow-publishers-list (user-store/enrich-publishers-list old-follow-publishers-list users-map)]\n      (-> db\n       (assoc-in (dispatcher/active-users-key org-slug) users-map)\n       (assoc-in (dispatcher/mention-users-key org-slug) (mu/users-for-mentions users-map))\n       (assoc-in follow-publishers-list-key next-follow-publishers-list)\n       (au/update-all-containers org-data change-data users-map next-follow-publishers-list)\n       (update :current-user-data #(user-store/parse-user-data % org-data users-map))))\n    db))\n\n(defmethod dispatcher/action :teams-get\n  [db [_]]\n  (assoc db :teams-data-requested true))\n\n(defmethod dispatcher/action :teams-loaded\n  [db [_ teams]]\n  (assoc-in db [:teams-data :teams] teams))\n\n(defn- users-info-hover-from-roster\n  \"Given the previous users map and the new users vector coming from team or roster.\n   Create a map of the new users with only some arbitrary data and merge them with the old users.\"\n  [old-users-map roster-data]\n  (let [filtered-users (uu/filter-active-users (:users roster-data))\n        new-users-map (zipmap\n                       (map :user-id filtered-users)\n                       (map #(select-keys % [:user-id :first-name :last-name :avatar-url :name :short-name :location :timezone :title]) filtered-users))]\n    (merge-with merge (or old-users-map {}) new-users-map)))\n\n(defmethod dispatcher/action :team-roster-loaded\n  [db [_ org-slug roster-data]]\n  (if roster-data\n    (let [follow-publishers-list-key (dispatcher/follow-publishers-list-key org-slug)\n          old-follow-publishers-list (get-in db follow-publishers-list-key)\n          org-data (dispatcher/org-data db org-slug)\n          parsed-roster-data (update roster-data :users #(user-store/parse-users % org-data old-follow-publishers-list))\n          merged-users-data (deep-merge-users (:users parsed-roster-data) (dispatcher/active-users org-slug db))\n          next-follow-publishers-list (user-store/enrich-publishers-list old-follow-publishers-list merged-users-data)]\n      (-> db\n       (assoc-in (dispatcher/team-roster-key (:team-id roster-data)) parsed-roster-data)\n       (assoc-in (dispatcher/mention-users-key org-slug) (mu/users-for-mentions merged-users-data))\n       (assoc-in (dispatcher/active-users-key org-slug) merged-users-data)\n       (update-in (dispatcher/users-info-hover-key org-slug) #(users-info-hover-from-roster % parsed-roster-data))\n       (assoc-in follow-publishers-list-key next-follow-publishers-list)))\n    db))\n\n(defn parse-team-data [team-data org-data follow-publishers-list]\n  (let [team-has-bot? (j/team-has-bot? (:team-id team-data))\n        slack-orgs (:slack-orgs team-data)\n        slack-users (j/get-key :slack-users)\n        can-add-bot? (some #(->> % :slack-org-id keyword (get slack-users)) slack-orgs)]\n    (-> team-data\n     (assoc :can-slack-invite team-has-bot?)\n     (assoc :can-add-bot (and (not team-has-bot?) can-add-bot?))\n     (update :users #(user-store/parse-users % org-data follow-publishers-list)))))\n\n(defmethod dispatcher/action :team-loaded\n  [db [_ org-slug team-data]]\n  (if team-data\n    ;; if team is the current org team, load the slack chennels\n    (let [follow-publishers-list-key (dispatcher/follow-publishers-list-key org-slug)\n          old-follow-publishers-list (get-in db follow-publishers-list-key)\n          org-data (dispatcher/org-data db org-slug)\n          parsed-team-data (parse-team-data team-data org-data old-follow-publishers-list)\n          merged-users-data (deep-merge-users (:users parsed-team-data) (dispatcher/active-users org-slug db))\n          next-follow-publishers-list (user-store/enrich-publishers-list old-follow-publishers-list merged-users-data)]\n      (-> db\n       (assoc-in (dispatcher/team-data-key (:team-id team-data)) parsed-team-data)\n       (assoc-in (dispatcher/mention-users-key org-slug) (mu/users-for-mentions merged-users-data))\n       (assoc-in (dispatcher/active-users-key org-slug) merged-users-data)\n       (update-in (dispatcher/users-info-hover-key org-slug) #(users-info-hover-from-roster % parsed-team-data))\n       (assoc-in follow-publishers-list-key next-follow-publishers-list)))\n    db))\n\n(defmethod dispatcher/action :channels-enumerate\n  [db [_ team-id]]\n  (assoc db :enumerate-channels-requested true))\n\n(defmethod dispatcher/action :channels-enumerate/success\n  [db [_ team-id channels]]\n  (let [channels-key (dispatcher/team-channels-key team-id)]\n    (if channels\n      (assoc-in db channels-key channels)\n      (-> db\n        (update-in (butlast channels-key) dissoc (last channels-key))\n        (dissoc :enumerate-channels-requested)))))\n\n;; Invite users\n\n(defmethod dispatcher/action :invite-users\n  [db [_ checked-users]]\n  (assoc db :invite-users checked-users))\n\n(defmethod dispatcher/action :invite-user/success\n  [db [_ user]]\n  (let [inviting-users (:invite-users db)\n        next-inviting-users (utils/vec-dissoc inviting-users user)]\n    (assoc db :invite-users next-inviting-users)))\n\n(defmethod dispatcher/action :invite-user/failed\n  [db [_ user]]\n  (let [invite-users (:invite-users db)\n        idx (utils/index-of invite-users #(= (:user %) (:user user)))\n        next-invite-users (assoc-in invite-users [idx :error] true)]\n    (assoc db :invite-users next-invite-users)))\n\n;; User actions\n\n(defmethod dispatcher/action :user-action\n  [db [_ team-id idx]]\n  (assoc-in db (concat (dispatcher/team-data-key team-id) [:users idx :loading]) true))\n\n(defmethod dispatcher/action :email-domain-team-add\n  [db [_]]\n  (assoc db :add-email-domain-team-error false))\n\n(defmethod dispatcher/action :email-domain-team-add/finish\n  [db [_ success]]\n  (-> db\n      (assoc-in [:um-domain-invite :domain] (if success \"\" (:domain (:um-domain-invite db))))\n      (assoc :add-email-domain-team-error (if success false true))))"]}