{"version":3,"sources":["oc/lib/oauth.cljc"],"mappings":";AAOA;;;AAAA,AAAMA,AAEHC;AAFH,AAQK,AAAA,AAAIA,AACAC,AACAC;;AAET;;;AAAA,AAAMC,AAEHC;AAFH,AAaK,AAAMC,AAAU,AAAA,AAAID,AACAE,AACAC;AAFpB,AAGE,AAAAC,AAAQH;AAAR,AAAA,AACE,AAAA,AAAWA;AAAW,AAAAG,AAAA,AAACC,AAAiBC;;AAD1CF","names":["oc.lib.oauth/encode-state-string","data","cljs.core.pr_str","js/btoa","oc.lib.oauth/decode-state-string","state-str","state-map","js/atob","clojure.edn.read_string","G__48042","cljs.core.update","js/decodeURIComponent"],"sourcesContent":["(ns oc.lib.oauth\n  \"Encode and decode data with Base64\"\n  (:require [clojure.edn :as edn])\n  #?(:clj (:import [java.util Base64]\n                   [java.net URLDecoder]\n                   [java.nio.charset StandardCharsets])))\n\n(defn encode-state-string\n  \"Given a map of data return a string encoded with Base64.\"\n  [data]\n  #?(:clj\n     (let [encoder    (Base64/getUrlEncoder)\n           data-bytes (-> data pr-str .getBytes)]\n       (.encodeToString encoder data-bytes)))\n  #?(:cljs\n     (-> data\n         pr-str\n         js/btoa)))\n\n(defn decode-state-string\n  \"Given a Base64 encoded string return the decoded data.\"\n  [state-str]\n  #?(:clj\n     (let [decode-url    #(URLDecoder/decode % (.name StandardCharsets/UTF_8))\n           url-decoded   (decode-url state-str)\n           b64-decoder   (Base64/getDecoder)\n           decoded-bytes (.decode b64-decoder url-decoded)\n           decoded-str   (String. decoded-bytes)\n           state-map     (edn/read-string decoded-str)]\n       (cond-> state-map\n         (:redirect state-map) (update :redirect decode-url))))\n  #?(:cljs\n     (let [state-map (-> state-str\n                         js/atob\n                         edn/read-string)]\n       (cond-> state-map\n         (:redirect state-map) (update :redirect js/decodeURIComponent)))))\n"]}