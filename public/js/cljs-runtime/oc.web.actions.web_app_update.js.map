{"version":3,"sources":["oc/web/actions/web_app_update.cljs"],"mappings":";AASA,AAAA,AAEA,AAAKA,AAA2B,AAAA,AAAA,AAAA,AAAA;AAChC,AAAKC,AAA4B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEjC,AAAA,AAAKC;AAGL,AAAA,AAAOC;AAAP,AAGE,AAACC,AAA2BC,AAAwBJ;;AAEtD;;;AAAA,AAAOK;AAAP,AAGE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AACA,AAACC,AAAwBL;;AACzB,AAACM,AACA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAqBM;AAArB,AAAAF,AAAAJ,AAAA,AAA0BO;AAA1B,AACE,AAAI,AAAA,AAACC,AAAED;AACL,AACE,AAAAb,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AACA,AAAMa,AAAS,AAAKC;AAAL,AACC,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AACD,AAAMD;AAAN,AACE,AAACE,AAAiBF;;AADpB;;AAEA,AAAA,AAAIG;;AAJpB,AAKE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAGiDxB,AAEWD,AAGHoB,AAEVA;;AAEpD,AAAClB,AAA2BC,AAAwBL;;;;AAE3D,AAAA,AAAA4B,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAS3B,AAAwB,AAAA,AAAA,AAAA,AAAC4B,AAA4B3B,AACAN;;AAE9D;;;AAAA,AAAMkC;AAAN,AAGE,AAAA3B,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;AACA,AAAC0B,AAAyB9B","names":["oc.web.actions.web-app-update/default-update-interval-ms","oc.web.actions.web-app-update/extended-update-interval-ms","oc.web.actions.web-app-update/update-verbage","oc.web.actions.web-app-update/on-notification-dismissed","oc.shared.interval.restart_interval_BANG_","oc.web.actions.web-app-update/web-app-update-interval","oc.web.actions.web-app-update/real-web-app-update-check","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.shared.interval/stop-interval!","oc.web.api/web-app-version-check","p__38750","map__38751","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","success","body","status","cljs.core._EQ_","click-cb","e","oc.web.dispatcher/dispatch!","oc.web.lib.utils/event-stop","js/window","oc.web.actions.notifications/show-notification","js/oc","js/oc.web","js/oc.web.actions","js/oc.web.actions.web-app-update","js/oc.web.actions.web-app-update.web-app-update-interval","oc.shared.interval/make-interval","oc.web.actions.web-app-update/start-web-app-update-check!","oc.shared.interval/start-interval!"],"sourcesContent":["(ns oc.web.actions.web-app-update\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.api :as api]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.shared.interval :as interval]\n            [oc.shared.useragent :as ua]))\n\n(declare web-app-update-interval)\n\n(def default-update-interval-ms (* 1000 60 5)) ;; 5 minutes\n(def extended-update-interval-ms (* 1000 60 60 24)) ;; 24 hours\n\n(def update-verbage\n  \"Get the latest\")\n\n(defn- on-notification-dismissed\n  []\n  ;; Extend the interval as to not annoy the user\n  (interval/restart-interval! web-app-update-interval extended-update-interval-ms))\n\n(defn- real-web-app-update-check\n  \"Check for app updates, show the notification if necessary, set a new timeout else.\"\n  []\n  (timbre/info \"Checking for web app updates\")\n  (interval/stop-interval! web-app-update-interval)\n  (api/web-app-version-check\n   (fn [{:keys [success body status]}]\n     (if (= status 404)\n       (do\n         (timbre/info \"New app update avalable! Showing notification to the user\")\n         (let [click-cb (fn [e]\n                         (dis/dispatch! [:input [:loading] true])\n                         (when e\n                           (utils/event-stop e))\n                         (.. js/window -location reload))]\n           (notification-actions/show-notification {:title \"New version of Wut available!\"\n                                                    :web-app-update true\n                                                    :id :web-app-update-error\n                                                    :dismiss on-notification-dismissed\n                                                    :dismiss-x true\n                                                    :secondary-bt-title update-verbage\n                                                    :secondary-bt-style :green\n                                                    :secondary-bt-class :update-app-bt\n                                                    :secondary-bt-cb click-cb\n                                                    :secondary-bt-dismiss true\n                                                    :click click-cb\n                                                    :expire 0})))\n       (interval/restart-interval! web-app-update-interval default-update-interval-ms)))))\n\n(defonce web-app-update-interval (interval/make-interval {:fn real-web-app-update-check\n                                                          :ms default-update-interval-ms}))\n\n(defn start-web-app-update-check!\n  \"Start the app update cycle, make sure it's started only once.\"\n  []\n  (timbre/info \"Starting web app update checking cycle\")\n  (interval/start-interval! web-app-update-interval))\n"]}