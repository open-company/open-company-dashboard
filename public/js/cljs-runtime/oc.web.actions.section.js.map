{"version":3,"sources":["oc/web/actions/section.cljs"],"mappings":"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","names":["oc.web.actions.section/is-currently-shown?","section","cljs.core._EQ_","oc.web.dispatcher.current_board_slug","oc.web.actions.section/watch-single-section","oc.web.ws.interaction-client/board-unwatch","rep","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","oc.web.ws.interaction_client.boards_watch","oc.web.actions.section/request-reads-count","user-is-part-of-the-team","oc.web.dispatcher.org_data","and__4115__auto__","cljs.core.not_EQ_","oc.web.lib.utils/default-drafts-board-slug","cljs.core/seq","item-ids","cljs.core.map","cleaned-ids","oc.web.utils.activity/clean-who-reads-count-ids","oc.web.dispatcher/activity-read-data","oc.web.api/request-reads-count","oc.web.actions.section/section-get-finish","org-slug","section-slug","sort-type","is-currently-shown","oc.web.dispatcher/dispatch!","cljs.core.assoc","oc.web.actions.section/load-other-sections","sections","seq__42280","chunk__42283","count__42284","i__42285","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","board-link","oc.web.lib.utils.link_for","oc.web.api/get-board","p__42304","map__42306","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","p__42315","map__42316","status","body","success","oc.web.dispatcher/recently-posted-sort","oc.web.lib.json/json->cljs","var_args","G__42322","oc.web.actions.section/section-get","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","p__42330","vec__42331","cljs.core.nth","seq42319","G__42320","G__42321","self__4723__auto__","board-slug","temp__33774__auto__","section-data","oc.web.dispatcher.org_board_data","section-link","link","finish-cb","p__42334","map__42335","resp","cljs.core/fn?","oc.web.actions.section/section-refresh","temp__33762__auto__","oc.web.dispatcher.board_data","refresh-link","oc.web.actions.section.section_get","oc.web.actions.section/drafts-get","drafts-board","drafts-link","args__4742__auto__","argseq__4743__auto__","oc.web.actions.section/section-change","p__42344","vec__42345","seq42342","G__42343","section-uuid","oc.web.lib.utils/after","current-board-data","oc.web.dispatcher/board-data","current-board-link","drafts-board-link","refresh-slug","oc.web.lib.utils/default-drafts-board","oc.web.actions.section/section-delete","seq42354","G__42355","callback","oc.web.dispatcher.current_org_slug","delete-section-link","oc.web.api/delete-board","last-used-section-slug","oc.web.utils.activity/last-used-section","oc.web.utils.activity/save-last-used-section","oc.web.router/nav!","oc.web.urls.default_landing","org-link","oc.web.api/get-org","p__42356","map__42358","js/window","oc.web.actions.section/refresh-org-data","p__42362","map__42363","oc.web.actions.section/section-save-error","p1__42367#","cljs.core.dissoc","G__42369","oc.web.actions.section/section-save","js/Error","note","oc.web.actions.section.section_save","success-cb","error-cb","cljs.core/empty?","create-board-link","oc.web.api/create-board","p__42373","map__42374","editable-board?","cljs.core/not","oc.web.dispatcher.cmail_state","oc.web.dispatcher/cmail-data-key","cljs.core.conj","oc.web.dispatcher/cmail-state-key","oc.web.lib.utils/activity-uuid","oc.web.ws.change_client.container_watch","board-patch-link","oc.web.api/patch-board","oc.web.actions.section/private-section-user-add","user","user-type","oc.web.actions.section/private-section-user-remove","oc.web.actions.section/private-section-kick-out-self","oc.web.lib.jwt/user-id","remove-link","oc.web.api/remove-user-from-private-board","org-data","all-boards","current-board-slug","except-this-boards","p1__42383#","cljs.core.remove","G__42385","fexpr__42384","redirect-url","temp__5733__auto__","next-board","oc.web.urls.board","oc.web.urls.org","oc.web.actions.section/ws-change-subscribe","oc.web.ws.change-client/subscribe","data","status-by-uuid","cljs.core/group-by","clean-change-data","cljs.core/zipmap","cljs.core/keys","cljs.core/vals","change-data","change-type","item-id","oc.web.actions.section/min-section-name-length","oc.web.actions.section/section-save-create","section-editing","section-name","next-section-editing","cljs.core.merge","oc.web.actions.section/pre-flight-check","p1__42394#","pre-flight-link","oc.web.api/pre-flight-section-check","p__42395","map__42396","p__42399","map__42400","oc.web.actions.section/section-more-finish","direction","oc.web.actions.section/section-more","more-link","oc.web.api/load-more-items","cljs.core.partial","oc.web.actions.section/setup-section-editing","board-data"],"sourcesContent":["(ns oc.web.actions.section\n  (:require-macros [if-let.core :refer (if-let* when-let*)])\n  (:require [taoensso.timbre :as timbre]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.api :as api]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.activity :as au]\n            [oc.web.ws.change-client :as ws-cc]\n            [oc.web.ws.interaction-client :as ws-ic]\n            [oc.web.lib.json :refer (json->cljs cljs->json)]))\n\n(defn is-currently-shown? [section]\n  (= (dis/current-board-slug)\n     (:slug section)))\n\n(defn watch-single-section [section]\n  ;; only watch the currently visible board.\n  (ws-ic/board-unwatch (fn [rep]\n    (timbre/debug rep \"Watching on socket \" (:uuid section))\n    (ws-ic/boards-watch [(:uuid section)]))))\n\n(defn request-reads-count\n  \"Request the reads count data only for the items we don't have already.\"\n  [section]\n  (let [user-is-part-of-the-team (:member? (dispatcher/org-data))]\n    (when (and user-is-part-of-the-team\n               (not= (:slug section) utils/default-drafts-board-slug)\n               (seq (:entries section)))\n      (let [item-ids (map :uuid (:entries section))\n            cleaned-ids (au/clean-who-reads-count-ids item-ids (dispatcher/activity-read-data))]\n        (when (seq cleaned-ids)\n          (api/request-reads-count cleaned-ids))))))\n\n(defn section-get-finish\n  [org-slug section-slug sort-type section]\n  (let [is-currently-shown (is-currently-shown? section-slug)\n        user-is-part-of-the-team (:member? (dispatcher/org-data))]\n    (when is-currently-shown\n      (when user-is-part-of-the-team\n        ;; only watch the currently visible board.\n        ; only for logged in users and if the board is currently shown\n        (when (= (dis/current-board-slug) section-slug)\n          (watch-single-section section)\n          ;; Retrieve reads count if there are items in the loaded section\n          (request-reads-count section))))\n    (dispatcher/dispatch! [:section org-slug section-slug sort-type (assoc section :is-loaded is-currently-shown)])))\n\n(defn load-other-sections\n  [sections]\n  (doseq [section sections\n          :when (not (is-currently-shown? section))\n          :let [board-link (utils/link-for (:links section) [\"item\" \"self\"] \"GET\")]]\n    (api/get-board board-link\n      (fn [{:keys [status body success]}]\n        (when success\n          (section-get-finish (:slug (dispatcher/org-data)) (:slug section) dispatcher/recently-posted-sort (json->cljs body)))))))\n\n(defn section-get\n  ([board-slug]\n    (when-let* [section-data (dis/org-board-data board-slug)\n                section-link (utils/link-for (:links section-data) [\"item\" \"self\"] \"GET\")]\n      (section-get board-slug section-link)))\n  ([board-slug link & [finish-cb]]\n  (api/get-board link\n    (fn [{:keys [status body success] :as resp}]\n      (when success\n        (section-get-finish (:slug (dispatcher/org-data)) board-slug\n         dispatcher/recently-posted-sort (json->cljs body)))\n      (when (fn? finish-cb)\n        (finish-cb resp))))))\n\n(defn section-refresh\n  [board-slug]\n  (if-let* [section-data (dis/board-data board-slug)\n            refresh-link (utils/link-for (:links section-data) \"refresh\")]\n    (section-get board-slug refresh-link)\n    (section-get board-slug)))\n\n(defn drafts-get []\n  (let [drafts-board (dis/org-board-data utils/default-drafts-board-slug)\n        drafts-link (utils/link-for (:links drafts-board) [\"item\" \"self\"] \"GET\")]\n    (when drafts-link\n      (section-get (:slug drafts-board) drafts-link))))\n\n(defn section-change\n  [section-uuid & [finish-cb]]\n  (timbre/debug \"Section change:\" section-uuid)\n  (utils/after 0 (fn []\n    (let [current-board-data (dispatcher/board-data)\n          current-board-link (utils/link-for (:links current-board-data) [\"item\" \"self\"] \"GET\")\n          drafts-board (dis/org-board-data utils/default-drafts-board-slug)\n          drafts-board-link (utils/link-for (:links drafts-board) [\"item\" \"self\"] \"GET\")\n          refresh-slug (cond\n                        (= section-uuid (:uuid utils/default-drafts-board))\n                        utils/default-drafts-board-slug\n                        (= section-uuid (:uuid current-board-data))\n                        (:slug current-board-data))\n          refresh-link (cond\n                        (= section-uuid (:uuid utils/default-drafts-board))\n                        drafts-board-link\n                        (= section-uuid (:uuid current-board-data))\n                        current-board-link)]\n      (when refresh-link\n        (section-get refresh-slug refresh-link finish-cb)))))\n  ;; Update change-data state that the board has a change\n  (dispatcher/dispatch! [:section-change section-uuid]))\n\n(defn section-delete [section-slug & callback]\n  (let [section-data (dispatcher/board-data (dis/current-org-slug) section-slug)\n        delete-section-link (utils/link-for (:links section-data) \"delete\")]\n    (api/delete-board delete-section-link section-slug (fn [status success body]\n      (if success\n        (let [org-slug (dis/current-org-slug)\n              last-used-section-slug (au/last-used-section)]\n          (when (= last-used-section-slug section-slug)\n            (au/save-last-used-section nil))\n          (when (fn? callback)\n           (callback section-slug))\n          (if (= section-slug (dis/current-board-slug))\n            (do\n              (router/nav! (oc-urls/default-landing org-slug))\n              (let [org-link (utils/link-for (:links (dispatcher/org-data)) [\"item\" \"self\"] \"GET\")]\n                (api/get-org org-link\n                  (fn [{:keys [status body success]}]\n                    (dispatcher/dispatch! [:org-loaded (json->cljs body)])))))\n            (dispatcher/dispatch! [:section-delete org-slug section-slug])))\n        (.reload (.-location js/window)))))))\n\n(defn refresh-org-data []\n  (let [org-link (utils/link-for (:links (dispatcher/org-data)) [\"item\" \"self\"] \"GET\")]\n    (api/get-org org-link\n      (fn [{:keys [status body success]}]\n        (dispatcher/dispatch! [:org-loaded (json->cljs body)])))))\n\n(defn section-save-error [status]\n  ;; Board name exists or too short\n  (dispatcher/dispatch! [:update [:section-editing]\n   #(-> %\n     (assoc :section-name-error (when (= status 409) \"Team name already exists or isn't allowed\"))\n     (assoc :section-error (when-not (= status 409) \"An error occurred, please retry.\"))\n     (dissoc :loading))]))\n\n(defn section-save\n  ([section-data note] (section-save section-data note nil))\n  ([section-data note success-cb]\n    (section-save section-data note success-cb section-save-error))\n  ([section-data note success-cb error-cb]\n    (timbre/debug section-data)\n    (if (empty? (:links section-data))\n      (let [create-board-link (utils/link-for (:links (dispatcher/org-data)) \"create\")]\n        (api/create-board create-board-link section-data note\n          (fn [{:keys [success status body]}]\n            (let [section-data (when success (json->cljs body))\n                  editable-board? (utils/link-for (:links section-data) \"create\")]\n              (if-not success\n                (when (fn? error-cb)\n                  (error-cb status))\n                (do\n                  (utils/after 100\n                   #(do\n                     (when (and editable-board?\n                                (:collapsed (dis/cmail-state)))\n                        (dispatcher/dispatch! [:input dis/cmail-data-key {:board-slug (:slug section-data)\n                                                                          :board-name (:name section-data)\n                                                                          :publisher-board (:publisher-board section-data)}])\n                        (dispatcher/dispatch! [:input (conj dis/cmail-state-key :key) (utils/activity-uuid)]))))\n                  (utils/after 500 refresh-org-data)\n                  (ws-cc/container-watch (:uuid section-data))\n                  (dispatcher/dispatch! [:section-edit-save/finish section-data])\n                  (when (fn? success-cb)\n                    (success-cb section-data))))))))\n      (let [board-patch-link (utils/link-for (:links section-data) \"partial-update\")]\n        (api/patch-board board-patch-link section-data note (fn [success body status]\n          (let [section-data (when success (json->cljs body))]\n            (if-not success\n              (when (fn? error-cb)\n                (error-cb status))\n              (do\n                (refresh-org-data)\n                (dispatcher/dispatch! [:section-edit-save/finish ])\n                (when (fn? success-cb)\n                  (success-cb section-data)))))))))))\n\n(defn private-section-user-add\n  [user user-type]\n  (dispatcher/dispatch! [:private-section-user-add user user-type]))\n\n(defn private-section-user-remove\n  [user]\n  (dispatcher/dispatch! [:private-section-user-remove user]))\n\n(defn private-section-kick-out-self\n  [user]\n  (when (= (:user-id user) (jwt/user-id))\n    (let [remove-link (utils/link-for (:links user) \"remove\")]\n      (api/remove-user-from-private-board remove-link (fn [status success body]\n        ;; Redirect to the first available board\n        (let [org-data (dispatcher/org-data)\n              all-boards (:boards org-data)\n              current-board-slug (dis/current-board-slug)\n              except-this-boards (remove #(#{current-board-slug \"drafts\"} (:slug %)) all-boards)\n              redirect-url (if-let [next-board (first except-this-boards)]\n                             (oc-urls/board (:slug next-board))\n                             (oc-urls/org (dis/current-org-slug)))]\n          (refresh-org-data)\n          (utils/after 0 #(router/nav! redirect-url))\n          (dispatcher/dispatch! [:private-section-kick-out-self/finish success])))))))\n\n(defn ws-change-subscribe []\n  (ws-cc/subscribe :container/status\n    (fn [data]\n      (let [status-by-uuid (group-by :container-id (:data data))\n            clean-change-data (zipmap (keys status-by-uuid) (->> status-by-uuid\n                                                              vals\n                                                              ; remove the sequence of 1 from group-by\n                                                              (map first)))]\n        (dispatcher/dispatch! [:container/status clean-change-data]))))\n\n  (ws-cc/subscribe :container/change\n    (fn [data]\n      (let [change-data (:data data)\n            section-uuid (:item-id change-data)\n            change-type (:change-type change-data)]\n        ;; Refresh the section only in case of an update, let the org\n        ;; handle the add and delete cases\n        (when (= change-type :update)\n          (section-change section-uuid)))))\n  (ws-cc/subscribe :item/change\n    (fn [data]\n      (let [change-data (:data data)\n            section-uuid (:container-id change-data)\n            change-type (:change-type change-data)\n            org-slug (dis/current-org-slug)\n            item-id (:item-id change-data)]\n        ;; Refresh the section only in case of items added or removed\n        ;; let the activity handle the item update case\n        (when (or (= change-type :add)\n                  (= change-type :delete)\n                  (= change-type :move))\n          (section-change section-uuid))\n        ;; On item/change :add let's add the UUID to the unseen list of\n        ;; the specified container to make sure it's marked as seen\n        (when (and (= change-type :add)\n                   (not= (:user-id change-data) (jwt/user-id)))\n          (dispatcher/dispatch! [:item-add/unseen (dis/current-org-slug) change-data]))\n        (when (= change-type :delete)\n          (dispatcher/dispatch! [:item-delete/unseen (dis/current-org-slug) change-data]))\n        (when (= change-type :move)\n          (dispatcher/dispatch! [:item-move (dis/current-org-slug) change-data]))))))\n\n;; Section editing\n\n(def min-section-name-length 2)\n\n(defn section-save-create [section-editing section-name success-cb]\n  (if (< (count section-name) min-section-name-length)\n    (dispatcher/dispatch! [:section-edit/error (str \"Name must be at least \" min-section-name-length \" characters.\")])\n    (let [next-section-editing (merge section-editing {:loading true\n                                                       :name section-name})]\n      (dispatcher/dispatch! [:input [:section-editing] next-section-editing])\n      (success-cb next-section-editing))))\n\n(defn pre-flight-check [section-slug section-name]\n  (dispatcher/dispatch! [:update [:section-editing] #(merge % {:has-changes true\n                                                               :pre-flight-loading true})])\n  (let [org-data (dispatcher/org-data)\n        pre-flight-link (utils/link-for (:links org-data) \"pre-flight-create\")]\n    (api/pre-flight-section-check pre-flight-link section-slug section-name\n     (fn [{:keys [success body status]}]\n       (when-not success\n         (section-save-error 409))\n       (dispatcher/dispatch! [:input [:section-editing :pre-flight-loading] false])))))\n\n(defn section-more-finish [org-slug board-slug sort-type direction {:keys [success body]}]\n  (when success\n    (request-reads-count (json->cljs body)))\n  (dispatcher/dispatch! [:section-more/finish org-slug board-slug sort-type\n   direction (when success (json->cljs body))]))\n\n(defn section-more [more-link direction]\n  (let [org-data (dispatcher/org-data)\n        board-slug (dis/current-board-slug)]\n    (api/load-more-items more-link direction (partial section-more-finish (:slug org-data) board-slug dispatcher/recently-posted-sort direction))\n    (dispatcher/dispatch! [:section-more (:slug org-data) board-slug dispatcher/recently-posted-sort])))\n\n(defn setup-section-editing [section-slug]\n  (when-let [board-data (dispatcher/org-board-data section-slug)]\n    (dispatcher/dispatch! [:setup-section-editing board-data])))\n"]}