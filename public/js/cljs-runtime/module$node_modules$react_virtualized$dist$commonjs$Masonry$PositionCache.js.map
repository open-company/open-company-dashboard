{
"version":3,
"file":"module$node_modules$react_virtualized$dist$commonjs$Masonry$PositionCache.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/react-virtualized/dist/commonjs/Masonry/PositionCache.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Masonry$PositionCache\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _intervalTree = require('../vendor/intervalTree');\n\nvar _intervalTree2 = _interopRequireDefault(_intervalTree);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Position cache requirements:\n//   O(log(n)) lookup of cells to render for a given viewport size\n//   O(1) lookup of shortest measured column (so we know when to enter phase 1)\nvar PositionCache = function () {\n  function PositionCache() {\n    (0, _classCallCheck3.default)(this, PositionCache);\n    this._columnSizeMap = {};\n    this._intervalTree = (0, _intervalTree2.default)();\n    this._leftMap = {};\n  }\n  // Tracks the height of each column\n\n\n  // Store tops and bottoms of each cell for fast intersection lookup.\n\n\n  // Maps cell index to x coordinates for quick lookup.\n\n\n  (0, _createClass3.default)(PositionCache, [{\n    key: 'estimateTotalHeight',\n    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {\n      var unmeasuredCellCount = cellCount - this.count;\n      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;\n    }\n\n    // Render all cells visible within the viewport range defined.\n\n  }, {\n    key: 'range',\n    value: function range(scrollTop, clientHeight, renderCallback) {\n      var _this = this;\n\n      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {\n        var _ref2 = (0, _slicedToArray3.default)(_ref, 3),\n            top = _ref2[0],\n            _ = _ref2[1],\n            index = _ref2[2];\n\n        return renderCallback(index, _this._leftMap[index], top);\n      });\n    }\n  }, {\n    key: 'setPosition',\n    value: function setPosition(index, left, top, height) {\n      this._intervalTree.insert([top, top + height, index]);\n      this._leftMap[index] = left;\n\n      var columnSizeMap = this._columnSizeMap;\n      var columnHeight = columnSizeMap[left];\n      if (columnHeight === undefined) {\n        columnSizeMap[left] = top + height;\n      } else {\n        columnSizeMap[left] = Math.max(columnHeight, top + height);\n      }\n    }\n  }, {\n    key: 'count',\n    get: function get() {\n      return this._intervalTree.count;\n    }\n  }, {\n    key: 'shortestColumnSize',\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = size === 0 ? height : Math.min(size, height);\n      }\n\n      return size;\n    }\n  }, {\n    key: 'tallestColumnSize',\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = Math.max(size, height);\n      }\n\n      return size;\n    }\n  }]);\n  return PositionCache;\n}();\n\nexports.default = PositionCache;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_slicedToArray2","_slicedToArray3","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_intervalTree","_intervalTree2","PositionCache","_columnSizeMap","_leftMap","key","estimateTotalHeight","cellCount","columnCount","defaultCellHeight","tallestColumnSize","Math","ceil","count","range","scrollTop","clientHeight","renderCallback","_this","queryInterval","_ref","_ref2","index","top","setPosition","left","height","insert","columnSizeMap","columnHeight","undefined","max","get","size","i","min"]
}
