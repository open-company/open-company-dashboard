{"version":3,"sources":["oc/lib/user.cljc"],"mappings":"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","names":["oc.lib.user/author-logo","oc.lib.user/circle-image","filestack-api-key","image-url","size","filestack-static-url","is-filestack-resource?","clojure.string/starts-with?","filestack-resource","cljs.core.subs","var_args","G__43171","oc.lib.user/fix-avatar-url","js/Error","avatar-url","avatar-size","absolute-avatar-url","cljs.core/re-seq","cljs.core/count","oc.lib.user.fix_avatar_url","args__41272__auto__","ocr-43174","cljs.core/vec","cljs.core/vector?","ocr-43174_0__43176","cljs.core.nth","p1__43172#","G__43194","G__43195","cljs.core.match/backtrack","e43184","e__40179__auto__","p1__43173#","G__43192","G__43193","e43185","G__43187","G__43188","e43179","ocr-43174_1__43178","ocr-43174_0__43177","e43183","e43181","e43182","e43180","oc.lib.user/name-for","user","clojure.string/blank?","_first-name","_last-name","first-name","last-name","clojure.string/trim","ocr-43199","ocr-43199_0__43201","p1__43196#","e43207","p1__43197#","e43209","p1__43198#","e43210","e43203","oc.lib.user/short-name-for","oc.lib.user.name_for"],"sourcesContent":["(ns oc.lib.user\n  (:require [clojure.string :as s]\n            [defun.core :refer (defun)]))\n\n(def author-logo 32)\n\n(defn- circle-image\n  \"Return an on the fly url of the image circle and resized.\"\n  [filestack-api-key image-url size]\n  ;; Filestack URL https://cdn.filestackcontent.com/qemc9YslR9yabfqL4GTe\n  (let [filestack-static-url \"https://cdn.filestackcontent.com/\"\n        is-filestack-resource? (s/starts-with? image-url filestack-static-url)\n        filestack-resource (if is-filestack-resource?\n                             (subs image-url (count filestack-static-url))\n                             image-url)]\n    (str \"https://process.filestackapi.com/\"\n         (when-not is-filestack-resource?\n           (str filestack-api-key \"/\"))\n         \"resize=w:\" size \",h:\" size \",fit:crop,align:faces/\"\n         \"circle/\"\n         filestack-resource)))\n\n(defn fix-avatar-url\n  \"\n  First it fixes relative URLs, it prepends our production CDN domain to it if it's relative.\n  Then if the url is pointing to one of our happy faces, it replaces the SVG extension with PNG\n  to have it resizable. If it's not one of our happy faces, it uses the on-the-fly resize url.\n  \"\n  ([filestack-api-key avatar-url avatar-size]\n   (let [absolute-avatar-url (if (s/starts-with? avatar-url \"/img\")\n                               (str \"https://d1wc0stj82keig.cloudfront.net\" avatar-url)\n                               avatar-url)]\n     (if (re-seq #\"happy_face_(red|green|blue|purple|yellow).svg$\" absolute-avatar-url) ; carrot default?\n       (str (subs absolute-avatar-url 0 (- (count absolute-avatar-url) 3)) \"png\")\n       (circle-image filestack-api-key absolute-avatar-url avatar-size))))\n  ([filestack-api-key avatar-url]\n   (fix-avatar-url filestack-api-key avatar-url author-logo)))\n\n(defun name-for\n  \"\n  Make a single `name` field from `first-name` and/or `last-name`.\n\n  Use email as the name if the entire user is provided and there's no first or last name.\n  \"\n  ([user :guard #(and (s/blank? (:first-name %))\n                      (s/blank? (:last-name %))\n                      (s/blank? (:name %)))]\n    (name-for (:email user) \"\"))\n  ([user :guard #(not (s/blank? (:name %)))] (name-for (:name user) \"\"))\n  ([user] (name-for (:first-name user) (:last-name user)))\n  ([_first-name :guard s/blank? _last-name :guard s/blank?] \"\")\n  ([first-name _last-name :guard s/blank?] first-name)\n  ([_first-name :guard s/blank? last-name] last-name)\n  ([first-name last-name] (s/trim (str first-name \" \" last-name))))\n\n(defun short-name-for\n  \"\n  Select the first available between: `first-name`, `last-name` or `name`.\n\n  Fallback to `email` if none are available.\n  \"\n  ([user :guard #(not (s/blank? (:first-name %)))] (:first-name user))\n  ([user :guard #(not (s/blank? (:last-name %)))] (:last-name user))\n  ([user :guard #(not (s/blank? (:name %)))] (:name user))\n  ([user] (name-for (:email user) \"\")))"]}