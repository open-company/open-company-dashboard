{"version":3,"sources":["oc/web/components/user_profile.cljs"],"mappings":"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","names":["rum.core/build-defc","js/React.createElement","attrs39968","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","attrs39971","oc.web.components.user-profile/user-profile","user-data","G__39969","G__39970","oc.web.components.ui.user-avatar/user-avatar-image","cuerdas.core/blank?","cuerdas.core/capital","oc.web.actions.nav-sidebar/show-user-settings","cljs.core/seq","lts","oc.web.utils.user.location_timezone_string","has-profile-links?","cljs.core.filter","cljs.core/vals","or__4126__auto__","iter__4529__auto__","s__39975","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__39977","cljs.core/chunk-buffer","i__39976","cljs.core/-nth","cljs.core/chunk-append","p1__39967#","cljs.core/chunk-cons","cljs.core/chunk","iter__39974","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","slack-user","cljs.core.not_EQ_","oc.web.lib.utils/event-stop","cuerdas.core/starts-with?","s__39979","b__39981","i__39980","vec__39987","cljs.core.nth","iter__39978","vec__39993","k","v","un","cljs.core/last","cuerdas.core.split","cljs.core/name","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.user-profile\n  (:require [rum.core :as rum]\n            [cuerdas.core :as string]\n            [oc.web.lib.utils :as utils]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.components.ui.user-avatar :refer (user-avatar-image)]))\n\n(rum/defc user-profile\n  [user-data]\n  [:div.user-profile-container\n    [:div.user-profile\n      [:div.user-profile-header\n        [:div.user-profile-header-avatar\n          (user-avatar-image user-data {:preferred-avatar-size 512})]\n        [:div.user-profile-header-info\n          [:div.user-profile-header-info-name\n            [:span.name\n              (:name user-data)]\n            (when-not (string/blank? (:role-string user-data))\n              [:span.role\n                (str \"(\" (string/capital (:role-string user-data)) \")\")])\n            (when (:self? user-data)\n              [:button.mlb-reset.edit-profile-bt\n                {:on-click #(nav-actions/show-user-settings :profile)}\n                \"Edit profile\"])]\n          ; (when (seq (or (:title user-data) (:role-string user-data)))\n          ;   [:div.user-profile-header-info-title\n          ;     (if (seq (:title user-data))\n          ;       [:div.title\n          ;         (:title user-data)\n          ;         [:span.role (str \"(\" (:role-string user-data) \")\")]]\n          ;       [:div.title (string/capital (:role-string user-data))])])\n          (when (seq (:title user-data))\n            [:div.user-profile-header-info-title\n              (:title user-data)])\n          (when (seq (:blurb user-data))\n            [:div.user-profile-header-info-blurb\n              (:blurb user-data)])\n          (let [lts (user-utils/location-timezone-string user-data true)]\n            (when (seq lts)\n              [:div.user-profile-header-info-locale\n                lts]))]]\n      (let [has-profile-links? (seq (filter seq (vals (:profiles user-data))))]\n        (when (or (:email user-data)\n                  (seq (:slack-users user-data))\n                  has-profile-links?)\n          [:div.user-profile-footer\n            (when (:email user-data)\n              [:a.profile-link.email\n                {:href (str \"mailto:\" (:email user-data))\n                 :target \"_blank\"}\n                (:email user-data)])\n            (when (:slack-users user-data)\n              ;; https://acmeco.slack.com/team/U1H63D8SZ\n              (for [slack-user (vals (:slack-users user-data))\n                    :when (and (seq (:display-name slack-user))\n                               (not= (:display-name slack-user) \"-\"))]\n                [:a.profile-link.slack\n                  {:key (str \"profile-link-\" (:slack-org-id slack-user) \"-\" (:id slack-user))\n                   :on-click #(utils/event-stop %)\n                   :href \".\"}\n                  (if (string/starts-with? (:display-name slack-user) \"@\")\n                    (:display-name slack-user)\n                    (str \"@\" (:display-name slack-user)))]))\n            (when has-profile-links?\n              (for [[k v] (:profiles user-data)\n                    :when (not (string/blank? v))\n                    :let [un (last (string/split v #\"/\"))]]\n                [:a.profile-link\n                  {:class (name k)\n                   :key (str \"profile-\" (name k))\n                   :target \"_blank\"\n                   :href (if (or (string/starts-with? v \"http\")\n                                 (string/starts-with? v \"//\"))\n                           v\n                           (str \"https://\" v))}\n                  un]))]))]])"]}