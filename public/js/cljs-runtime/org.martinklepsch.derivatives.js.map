{"version":3,"sources":["org/martinklepsch/derivatives.cljc"],"mappings":"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","names":["org.martinklepsch.derivatives/prefix-id","cljs.core/random-uuid","org.martinklepsch.derivatives/depend'","graph","node","deps","p1__38935#","p2__38936#","cljs.core.reduce","com.stuartsierra.dependency/depend","org.martinklepsch.derivatives/spec->graph","spec","cljs.core/reduce-kv","p__38945","vec__38946","cljs.core.nth","id","dependencies","com.stuartsierra.dependency/graph","org.martinklepsch.derivatives/calc-deps","ks","cljs.core.apply","clojure.set/union","cljs.core/set","p1__38953#","cljs.core.map","com.stuartsierra.dependency/transitive-dependencies","org.martinklepsch.derivatives/watchable?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IWatchable","js/Error","org.martinklepsch.derivatives/not-required","drv-map","required?","cljs.core/set?","xs","k","drv-val","cljs.core.conj","org.martinklepsch.derivatives/sync-derivatives!","watch-key-prefix","order","seq__38964","cljs.core/seq","chunk__38965","count__38966","i__38967","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","org.martinklepsch.derived/IDisposable","org.martinklepsch.derived/dispose!","m","vec__38972","direct-deps","derive","cljs.core.get","cljs.core.assoc","org.martinklepsch.derived.derived_value","p1__38963#","cljs.core/select-keys","org.martinklepsch.derivatives/build","cljs.core/map?","com.stuartsierra.dependency/topo-sort","org.martinklepsch.derivatives/required-drvs","registry","cljs.core/keys","cljs.core.filter","org$martinklepsch$derivatives$IDerivativesPool$get_BANG_$dyn","x__4428__auto__","m__4429__auto__","org.martinklepsch.derivatives/get!","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","org$martinklepsch$derivatives$IDerivativesPool$release_BANG_$dyn","org.martinklepsch.derivatives/release!","org.martinklepsch.derivatives/IDerivativesPool","this","drv-k","token","this__4380__auto__","k__4381__auto__","this__4382__auto__","k39005","else__4383__auto__","G__39052","cljs.core/Keyword","state","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","ret__4402__auto__","p__39064","vec__39067","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__39004","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this39006","other39007","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__39085","cljs.core/keyword-identical?","expr__39086","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","org.martinklepsch.derivatives/DerivativesPool","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__39008","extmap__4419__auto__","G__39088","cljs.core/record?","org.martinklepsch.derivatives/->DerivativesPool","org.martinklepsch.derivatives/map->DerivativesPool","cljs.core/not","cljs.core.ex_info","new-reg","cljs.core.update","cljs.core/deref","cljs.core.fnil","cljs.core/conj","new-drvs","cljs.core/reset!","cljs.core/disj","org.martinklepsch.derivatives/derivatives-pool","cljs.core.atom","get-k","release-k","context-types","js/PropTypes.func","org.martinklepsch.derivatives/rum-derivatives","_","pool","cljs.core.partial","org.martinklepsch.derivatives/rum-derivatives*","get-spec-fn","s","G__39093","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","org.martinklepsch.derivatives/drv","seq39094","self__4724__auto__","drv-ks","cljs.core/rand-int","get-drv!","goog.object/get","p1__39089#","p2__39090#","cljs.core/assoc-in","release-drv!","p1__39092#","p2__39091#","cljs.core/dissoc","org.martinklepsch.derivatives/*derivatives*","org.martinklepsch.derivatives/get-ref","or__4126__auto__","cljs.core.get_in","org.martinklepsch.derivatives/react","rum.core/react","org.martinklepsch.derivatives/react-all","seq39096","G__39097","self__4723__auto__","cljs.core/zipmap","p1__39095#"],"sourcesContent":["(ns org.martinklepsch.derivatives\n  (:require [com.stuartsierra.dependency :as dep]\n            [org.martinklepsch.derived :as derived]\n            [clojure.set :as s]\n            [rum.core :as rum]\n            [rum.util :as rutil]\n            #?@(:cljs [[goog.object :as gobj]\n                       [cljsjs.prop-types]])))\n\n(defn prefix-id []\n  #?(:cljs (random-uuid)\n     :clj (java.util.UUID/randomUUID)))\n\n(defn depend'\n  \"Variation of `depend` that takes a list of dependencies instead of one\"\n  [graph node deps]\n  (reduce #(dep/depend %1 node %2) graph deps))\n\n(defn spec->graph\n  \"Turn a given spec into a dependency graph\"\n  [spec]\n  (reduce-kv (fn [graph id [dependencies]]\n               (depend' graph id dependencies))\n             (dep/graph)\n             spec))\n\n(defn calc-deps\n  \"Calculate all dependencies for `ks` and return a set with the dependencies and `ks`\"\n  [graph ks]\n  (apply s/union (set ks) (map #(dep/transitive-dependencies graph %) ks)))\n\n(defn watchable?\n  \"Platform-agnostic helper to determine if something is watchable (atom, etc)\"\n  [x]\n  #?(:cljs (satisfies? IWatchable x)\n     :clj  (instance? clojure.lang.Atom x)))\n\n(defn not-required\n  [drv-map required?]\n  {:pre [(set? required?)]}\n  (reduce-kv (fn [xs k drv-val]\n               (if (required? k) xs (conj xs drv-val)))\n             []\n             drv-map))\n\n(defn sync-derivatives!\n  \"Update the derivatives map `drv-map` so that all keys passed in `order`\n  are statisfied and any superfluous keys are removed.\n  Values of superfluous keys that implement IDisposable they will also be disposed.\"\n  [spec watch-key-prefix drv-map order]\n  (doseq [drv-val (not-required drv-map (set order))]\n    (when (satisfies? derived/IDisposable drv-val)\n      (derived/dispose! drv-val)))\n  (reduce (fn [m k]\n            (let [[direct-deps derive] (get spec k)]\n              (if (get m k)\n                m\n                (if (watchable? derive)\n                  (assoc m k derive)\n                  (assoc m k (derived/derived-value (map #(get m %) direct-deps) [watch-key-prefix k] derive))))))\n          (select-keys drv-map order)\n          order))\n\n(defn build\n  \"Given a spec return a map of similar structure replacing it's values with\n  derived atoms built based on the depedency information encoded in the spec\n\n  WARNING: This will create derived atoms for all keys so it may lead\n  to some uneccesary computations To avoid this issue consider using\n  `derivatives-pool` which manages derivatives in a registry\n  removing them as soon as they become unused\"\n  [spec]\n  {:pre [(map? spec)]}\n  (sync-derivatives! spec (prefix-id) {} (dep/topo-sort (spec->graph spec))))\n\n(defn ^:private required-drvs [graph registry]\n  (let [required? (calc-deps graph (keys registry))]\n    (or (seq (filter required? (dep/topo-sort graph)))\n        ;; When only derivatives that don't have any dependencies\n        ;; are used they are not included in the topo-sort result\n        ;; in this case just return the required keys\n        (seq required?))))\n\n(defprotocol IDerivativesPool\n  (get! [this drv-k token])\n  (release! [this drv-k token]))\n\n(defrecord DerivativesPool [spec watch-key-prefix graph state]\n  IDerivativesPool\n  (get! [this drv-k token]\n    (if-not (get spec drv-k)\n      (throw (ex-info (str \"No derivative defined for \" drv-k) {:key drv-k}))\n      (let [new-reg  (update (:registry @state) drv-k (fnil conj #{}) token)\n            new-drvs (sync-derivatives! spec watch-key-prefix (:derivatives @state) (required-drvs graph new-reg))]\n        (reset! state {:derivatives new-drvs :registry new-reg})\n        (get new-drvs drv-k))))\n  (release! [this drv-k token]\n    (let [registry  (:registry @state)\n          new-reg   (if (= #{token} (get registry drv-k))\n                      (dissoc registry drv-k)\n                      (update registry drv-k disj token))\n          new-drvs (sync-derivatives! spec watch-key-prefix (:derivatives @state) (required-drvs graph new-reg))]\n      (reset! state {:derivatives new-drvs :registry new-reg})\n      nil)))\n\n(defn derivatives-pool\n  \"Given a derivatives spec return a map with `get!` and `free!` functions.\n\n  - (get! derivative-id token) will retrieve a derivative for\n    `derivative-id` registering the usage with `token`\n  - (free! derivative-id token) will indicate the derivative `derivative-id`\n    is no longer needed by `token`, if there are no more tokens needing\n    the derivative it will be removed\"\n  [spec]\n  #_(let [dm (map->DerivativesPool {:spec spec\n                                  :watch-key-prefix (prefix-id)\n                                  :graph (spec->graph spec)\n                                  :state (atom {})})]\n    {:get! (partial get! dm)\n     :release! (partial release! dm)})\n  (map->DerivativesPool {:spec spec\n                         :watch-key-prefix (prefix-id)\n                         :graph (spec->graph spec)\n                         :state (atom {})}))\n\n;; RUM specific code ===========================================================\n\n(let [get-k     \"org.martinklepsch.derivatives/get\"\n      release-k \"org.martinklepsch.derivatives/release\"\n      context-types #?(:cljs {get-k     js/PropTypes.func\n                              release-k js/PropTypes.func}\n                       :clj  {})]\n\n  (defn rum-derivatives\n    \"Given the passed spec add get!/release! derivative functions to\n    the child context so they can be seen by components using the `deriv`\n    mixin.\"\n    [spec]\n    #?(:cljs\n       {:static-properties {:childContextTypes context-types}\n        :child-context    (fn [_] (let [pool (derivatives-pool spec)]\n                                    {release-k (partial release! pool)\n                                     get-k (partial get! pool)}))}))\n\n  (defn rum-derivatives*\n    \"Like rum-derivatives but get the spec from the arguments passed to the components (`:rum/args`) using `get-spec-fn`\"\n    [get-spec-fn]\n    #?(:cljs\n       {:static-properties {:childContextTypes context-types}\n        :init             (fn [s _] (assoc s ::spec (get-spec-fn (:rum/args s))))\n        :child-context    (fn [s] (let [pool (derivatives-pool (::spec s))]\n                                    {release-k (partial release! pool)\n                                     get-k (partial get! pool)}))}))\n\n  (defn drv\n    \"Rum mixin to retrieve derivatives for `drv-ks` using the functions in the component context\n     To get the derived-atom use `get-ref` for swappable client/server behavior\"\n    [& drv-ks]\n    #?(:cljs\n       (let [token (rand-int 10000)] ; TODO think of something better here\n         (assert (seq drv-ks) \"The drv mixin needs at least one derivative ID\")\n         {:static-properties {:contextTypes context-types}\n          :will-mount    (fn [s]\n                           (let [get-drv! (-> s :rum/react-component (gobj/get \"context\") (gobj/get get-k))]\n                             (assert get-drv! \"No get! derivative function found in component context\")\n                             (reduce #(assoc-in %1 [::derivatives %2] (get-drv! %2 token)) s drv-ks)))\n          :will-unmount  (fn [s]\n                           (let [release-drv! (-> s :rum/react-component (gobj/get \"context\") (gobj/get release-k))]\n                             (assert release-drv! \"No release! derivative function found in component context\")\n                             (reduce #(do (release-drv! %2 token) (update %1 ::derivatives dissoc %2)) s drv-ks)))}))))\n\n(def ^:dynamic *derivatives* nil)\n\n(defn get-ref\n  \"Get the derivative identified by `drv-k` from the component state.\n   When rendering in Clojure this looks for `drv-k` in the dynvar `*derivatives`\"\n  [state drv-k]\n  (or #?(:cljs (get-in state [::derivatives drv-k])\n         :clj  (get *derivatives* drv-k))\n      (throw (ex-info (str \"No derivative found! Maybe you forgot a (drv \" drv-k \") mixin?\")\n                      {:key drv-k :derivatives #?(:cljs (keys (::derivatives state))\n                                                  :clj  (keys *derivatives*))}))))\n\n(defn react\n  \"Like `get-ref` wrapped in `rum.core/react`\"\n  [state drv-k]\n  (rum/react (get-ref state drv-k)))\n\n(defn react-all\n  \"React to multiple derivatives in the components state.\n   If any `ks` are passed, react to those and return their values\n   in a map. If no `ks` is passed return all available derivatives\n   deref'ed as a map.\"\n  [state & ks]\n  (let [ks (or (seq ks) (-> state ::derivatives keys))]\n    (zipmap ks (map #(react state %) ks))))\n\n(comment \n  (def base (atom 0))\n\n  (def test-subman (subman (reactive-spec base)))\n\n  ((:get! test-subman) :ainc \"y\")\n\n  ((:free! test-subman) :inc \"y\")\n\n  (def reg {:as-map #{:token-a :token-b}\n            :sum    #{:token-c}})\n\n  (def g (spec->graph (reactive-spec base)))\n  \n  ;; compute all required dependencies\n  (def req? (apply s/union (into #{} (keys reg)) (map #(dep/transitive-dependencies g %) (keys reg)) ))\n\n  ;; order-them\n  (def order (filter req? (dep/topo-sort g)))\n\n\n  (sync-subs (reactive-spec base) {:inc (atom 0)} order)\n \n  )\n\n(comment\n\n\n  (build (reactive-spec base))\n\n  (def reactions\n    (build x))\n  ;; => {:base #object[clojure.lang.Atom 0x5a550b22 {:status :ready, :val 0}], :inc #object[clojure.lang.Atom 0x2f398697 {:status :ready, :val 1}], :as-map #object[clojure.lang.Atom 0x2e5eb389 {:status :ready, :val {:base 0, :after-inc 1}}], :sum #object[clojure.lang.Atom 0x385e17b0 {:status :ready, :val 1}]}\n\n\n  (swap! base inc)\n\n  ;; => {:base 1, :inc 2, :as-map {:base 1, :after-inc 2}, :sum 3}\n\n  )\n\n(comment\n\n  (def *registry (atom {::ctors (build-pure (reactive-spec base))}))\n  (add-watch *registry ::x (fn [_ _ _ v] (prn (::reactions v))))\n\n\n  (use! :base \"y\")\n  (free! :base \"y\")\n\n  (prn (::reactions @*registry))\n\n  )\n\n(comment\n\n  (def state (atom {}))\n\n  (defn ->spec [db]\n    {:base    [[] db]\n     :derived [[:base] (fn [base] (inc base))]})\n\n  (spec->graph (->spec state))\n\n  (dep/topo-sort (spec->graph (->spec state)))\n\n  (calc-deps (spec->graph (->spec state)) [:base])\n\n  )\n"]}