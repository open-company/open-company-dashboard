{"version":3,"sources":["org/martinklepsch/derived.cljc"],"mappings":"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","names":["org$martinklepsch$derived$IDisposable$dispose_BANG_$dyn","x__4428__auto__","m__4429__auto__","org.martinklepsch.derived/dispose!","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","org.martinklepsch.derived/IDisposable","this","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","org.martinklepsch.derived/DerivedValue","org.martinklepsch.derived/->DerivedValue","sink","sources","key","_","self","cb","cljs.core/add-watch","cljs.core/remove-watch","seq__38770","cljs.core/seq","chunk__38771","count__38772","i__38773","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","s","var_args","G__38783","org.martinklepsch.derived/derived-value","js/Error","refs","f","org.martinklepsch.derived.derived_value","opts","map__38788","cljs.core.apply","cljs.core/hash-map","cljs.core.get","check-equals?","recalc","G__38792","vec__38793","cljs.core.nth","a","G__38796","vec__38797","b","G__38800","G__38801","vec__38802","c","G__38809","G__38810","G__38811","cljs.core.map","cljs.core.atom","watch","new-val","cljs.core.not_EQ_","cljs.core/reset!","seq__38818","chunk__38819","count__38820","i__38821","ref"],"sourcesContent":["(ns org.martinklepsch.derived\n  \"An implementation of reactive derived values built on Clojure\n  atoms. Mostly inspired by rum.core/derived-atom but extended with\n  the possibility to dispose a derived value. Disposing will remove\n  relevant watches on source atoms thus making this implementation\n  suitable for dynamic use (runtime creation and disposal).\")\n\n(defprotocol IDisposable\n  (dispose! [this]))\n\n#?(:clj\n   (deftype DerivedValue [sink sources key]\n     clojure.lang.IDeref\n     (deref [_] @sink)\n\n     clojure.lang.IRef\n     (addWatch [this key cb] (add-watch sink key cb))\n     (removeWatch [_ key] (remove-watch sink key))\n\n     IDisposable\n     (dispose! [this]\n       (doseq [s sources]\n         (remove-watch s key))))\n\n   :cljs\n   (deftype DerivedValue [sink sources key]\n     IDeref\n     (-deref [_] @sink)\n\n     IWatchable\n     (-add-watch [self key cb] (add-watch sink key cb))\n     (-remove-watch [_ key] (remove-watch sink key))\n\n     IDisposable\n     (dispose! [this]\n       (doseq [s sources]\n         (remove-watch s key)))))\n\n(defn derived-value\n  ([refs key f]\n   (derived-value refs key f {}))\n  ([refs key f opts]\n   (let [{:keys [check-equals?]\n          :or {check-equals? true}} opts\n         recalc (case (count refs)\n                  1 (let [[a] refs] #(f @a))\n                  2 (let [[a b] refs] #(f @a @b))\n                  3 (let [[a b c] refs] #(f @a @b @c))\n                  #(apply f (map deref refs)))\n         sink   (atom (recalc))\n         watch  (if check-equals?\n                  (fn [_ _ _ _]\n                    (let [new-val (recalc)]\n                      (when (not= @sink new-val)\n                        (reset! sink new-val))))\n                  (fn [_ _ _ _]\n                    (reset! sink (recalc))))]\n     (doseq [ref refs]\n       (add-watch ref key watch))\n     (->DerivedValue sink refs key))))\n\n(comment\n  (def a (atom {:a 1}))\n\n  (def b (atom {:b 1}))\n\n  (def der\n    (derived-value [a b] :ab (fn [a b] (prn 'recomputing) (merge a b))))\n\n  (def derv\n    (derived-value [a b] :ab (fn [a b] (prn 'recomputing) (merge a b))))\n\n  @der\n\n  (dispose! der)\n\n  (swap! b update :b inc)\n\n  (pr-str (->DerivedValue nil nil nil))\n\n  (pr (->DerivedValue nil nil nil))\n\n\n  )\n\n"]}