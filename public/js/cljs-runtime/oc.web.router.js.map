{"version":3,"sources":["oc/web/router.cljs"],"mappings":"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","names":["oc.web.router/get-token","cljs.core/not","js/window.location.pathname","js/window.location.search","oc.web.lib.sentry/capture-message!","oc.web.router/build-transformer","transformer","js/goog.history.Html5History.TokenTransformer","path-prefix","location","token","oc.web.router/make-history","G__41140","js/goog.history.Html5History","js/window","js/window.location.protocol","js/window.location.host","oc.web.router/history","cljs.core.atom","oc.web.router/nav!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core/deref","oc.web.router/rewrite-org-uuid-as-slug","org-uuid","org-slug","clojure.string/replace","cljs.core/re-pattern","oc.web.router/rewrite-board-uuid-as-slug","board-uuid","board-slug","new-path","oc.web.dispatcher/dispatch!","js/window.history","js/window.title","oc.web.router/redirect!","loc","oc.web.router/redirect-404!","win-location","pathname","search","hash-string","encoded-url","js/encodeURIComponent","oc.web.router/redirect-500!","oc.web.router/history-back!","oc.web.router/setup-navigation!","cb-fn","h","G__41158","goog.events/listen","goog.history.EventType/NAVIGATE","cljs.core/reset!","oc.web.router/last-org-cookie","oc.web.lib.jwt/jwt","oc.web.lib.jwt/user-id","oc.web.router/last-board-cookie","cljs.core/name","oc.web.router/last-board-view-cookie","oc.web.lib.jwt/get-key","oc.web.router/last-used-board-slug-cookie","oc.web.router/last-home-cookie","oc.web.router/last-sort-cookie","oc.web.router/last-foc-layout-cookie","oc.web.router/nux-cookie","user-id","oc.web.router/first-ever-landing-cookie","oc.web.router/show-add-post-tooltip-cookie","oc.web.router/show-invite-people-tooltip-cookie","oc.web.router/show-invite-box-cookie","oc.web.router/collapse-boards-list-cookie","oc.web.router/collapse-users-list-cookie","oc.web.router/login-redirect-cookie","oc.web.router/expo-push-token-cookie"],"sourcesContent":["(ns oc.web.router\n  (:require [secretary.core :as secretary]\n            [taoensso.timbre :as timbre]\n            [goog.history.Html5History :as history5]\n            [goog.events :as events]\n            [goog.events.EventType :as EventType]\n            [goog.history.EventType :as HistoryEventType]\n            [oc.web.lib.sentry :as sentry]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.jwt :as jwt]\n            [clojure.string :as cstr]))\n\n(defn get-token []\n  (when (or (not js/window.location.pathname)\n            (not js/window.location.search))\n    (sentry/capture-message! (str \"Window.location problem:\"\n                                \" windown.location.pathname:\" js/window.location.pathname\n                                \" window.location.search:\" js/window.location.search\n                                \" return:\" (str js/window.location.pathname js/window.location.search))))\n  (str js/window.location.pathname js/window.location.search))\n\n; this is needed as of this\n; https://code.google.com/p/closure-library/source/detail?spec=svn\n; 88dc096badf091f380b4c2b4a6514184511de657&r=88dc096badf091f380b4c2b4a6514184511de657\n; setToken doen't replace the query string, it only attach it at the end\n; solution here: https://github.com/Sparrho/supper/blob/master/src-cljs/supper/history.cljs\n(defn build-transformer\n  \"Custom transformer is needed to replace query parameters, rather\n  than adding to them.\n  See: https://gist.github.com/pleasetrythisathome/d1d9b1d74705b6771c20\"\n  []\n  (let [transformer (goog.history.Html5History.TokenTransformer.)]\n    (set! (.. transformer -retrieveToken)\n          (fn [path-prefix location]\n            (str (.-pathname location) (.-search location))))\n    (set! (.. transformer -createUrl)\n          (fn [token path-prefix location]\n            (str path-prefix token)))\n    transformer))\n\n(defn make-history []\n  (doto (goog.history.Html5History. js/window (build-transformer))\n    (.setPathPrefix (str js/window.location.protocol\n                         \"//\"\n                         js/window.location.host))\n    (.setUseFragment false)))\n\n(def history (atom nil))\n\n; FIXME: remove the warning of history not found\n(defn nav! [token]\n  (timbre/info \"nav!\" token)\n  (timbre/debug \"history:\" @history)\n  (.setToken @history token))\n\n(defn rewrite-org-uuid-as-slug\n  [org-uuid org-slug]\n  (timbre/info \"Navigate from org\" org-uuid \"to slug:\" org-slug)\n  (nav! (cstr/replace (get-token) (re-pattern org-uuid) org-slug)))\n\n(defn rewrite-board-uuid-as-slug\n  [board-uuid board-slug]\n  (timbre/info \"Rewrite URL from board\" board-uuid \"to slug:\" board-slug)\n  (let [new-path (cstr/replace (get-token) (re-pattern board-uuid) board-slug)]\n    ; (swap! path assoc :board board-slug)\n    (dis/dispatch! [:route/rewrite :board board-slug])\n    (.replaceState js/window.history #js {} js/window.title new-path)))\n\n(defn redirect! [loc]\n  (timbre/info \"redirect!\" loc)\n  (set! (.-location js/window) loc))\n\n(defn redirect-404! []\n  (let [win-location (.-location js/window)\n        pathname (.-pathname win-location)\n        search (.-search win-location)\n        hash-string (.-hash win-location)\n        encoded-url (js/encodeURIComponent (str pathname search hash-string))]\n    (timbre/info \"redirect-404!\" encoded-url)\n    ;; FIXME: can't use oc-urls/not-found because importing the ns create a circular deps\n    (.replace (.-location js/window) (str \"/404?path=\" encoded-url))))\n\n(defn redirect-500! []\n  (let [win-location (.-location js/window)\n        pathname (.-pathname win-location)\n        search (.-search win-location)\n        hash-string (.-hash win-location)\n        encoded-url (js/encodeURIComponent (str pathname search hash-string))]\n    (timbre/info \"redirect-500!\" encoded-url)\n    ;; FIXME: can't use oc-urls/not-found because importing the ns create a circular deps\n    (.replace (.-location js/window) (str \"/500?path=\" encoded-url))))\n\n(defn history-back! []\n  (timbre/info \"history-back!\")\n  (.go (.-history js/window) -1))\n\n(defn setup-navigation! [cb-fn]\n  (let [h (doto (make-history)\n            (events/listen HistoryEventType/NAVIGATE\n              ;; wrap in a fn to allow live reloading\n              cb-fn)\n            (.setEnabled true))]\n    (reset! history h)))\n\n(defn last-org-cookie\n  \"Cookie to save the last accessed org\"\n  []\n  (str \"last-org-\" (when (jwt/jwt) (jwt/user-id))))\n\n(defn last-board-cookie\n  \"Cookie to save the last accessed board\"\n  [org-slug]\n  (str \"last-board-\" (when (jwt/jwt) (str (jwt/user-id) \"-\")) (name org-slug)))\n\n(defn last-board-view-cookie\n  \"Cookie to save the last view used: grid or stream\"\n  [org-slug]\n  (str \"last-board-view-\" (when (jwt/jwt) (str (jwt/get-key :user-id) \"-\")) (name org-slug)))\n\n(defn last-used-board-slug-cookie\n  \"Cookie to save the last board slug used in a post creation\"\n  [org-slug]\n  (str \"last-used-board-slug-\" (jwt/user-id) \"-\" (name org-slug)))\n\n(defn last-home-cookie\n  \"Cookie to save the last selection in home: Following or All updates\"\n  [org-slug]\n  (str \"last-used-home-slug-\" (jwt/user-id) \"-\" (name org-slug)))\n\n(defn last-sort-cookie\n  \"Cookie to save the last sort selected\"\n  [org-slug]\n  (str \"last-sort-\" (jwt/user-id) \"-\" (name org-slug)))\n\n(defn last-foc-layout-cookie\n  \"Cookie to save the last FOC layout used\"\n  [org-slug]\n  (str \"last-foc-layout-\" (jwt/user-id) \"-\" (name org-slug)))\n\n(defn nux-cookie\n  \"Cookie to remember if the boards and journals tooltips where shown.\"\n  [user-id]\n  (str \"nux-\" user-id))\n\n(defn first-ever-landing-cookie\n  \"Cookie used to land the user to a special URL only the first time.\"\n  [user-id]\n  (str \"first-ever-ap-land-\" user-id))\n\n(defn show-add-post-tooltip-cookie\n  \"Cookie to check if the add first post tooltip shuold be visible.\"\n  []\n  (str \"add-post-tooltip-\" (jwt/user-id)))\n\n(defn show-invite-people-tooltip-cookie\n  \"Cookie to check if the invite people tooltip shuold be visible.\"\n  []\n  (str \"invite-people-tooltip-\" (jwt/user-id)))\n\n(defn show-invite-box-cookie\n  \"Cookie to check if the invite people tooltip shuold be visible.\"\n  [user-id]\n  (str \"invite-box-\" user-id))\n\n(defn collapse-boards-list-cookie\n  \"Cookie used to remember if the sections list was collapsed or not.\"\n  []\n  (str \"collapse-sections-list-\" (jwt/user-id)))\n\n(defn collapse-users-list-cookie\n  \"Cookie used to remember if the users list was collapsed or not.\"\n  []\n  (str \"collapse-users-list-\" (jwt/user-id)))\n\n(def login-redirect-cookie \"login-redirect\")\n\n(def expo-push-token-cookie \"expo-push-token\")"]}