{"version":3,"sources":["oc/web/lib/sentry.cljs"],"mappings":"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","names":["oc.web.lib.sentry/init-parameters","dsn","oc.web.local-settings/local-whitelist-array","oc.web.lib.responsive/is-mobile-size?","cljs.core/not","oc.web.lib.jwt/jwt","oc.web.local-settings/web-server","oc.web.local-settings/deploy-key","cljs.core._EQ_","oc.web.local-settings/log-level","oc.web.lib.sentry/sentry-setup","js/js","js/js.module$node_modules$$sentry$browser$dist$index","oc.web.local-settings/local-dsn","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","sentry-params","js/module$node_modules$$sentry$browser$dist$index","cljs.core/clj->js","scope","oc.web.lib.jwt/get-key","oc.web.lib.sentry/custom-error","error-name","error-message","err","js/Error","var_args","G__41074","oc.web.lib.sentry/capture-error!","e","error-info","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.lib.sentry/capture-message!","p__41085","vec__41086","cljs.core.nth","seq41081","G__41082","cljs.core/first","cljs.core/next","self__4723__auto__","msg","log-level","or__4126__auto__","oc.web.lib.sentry/test-sentry","js/setTimeout","e41094","js/errorThrowingCode","oc.web.lib.sentry.capture_error_BANG_","oc.web.lib.sentry/set-extra-context!","p__41105","vec__41106","seq41095","G__41097","G__41098","ctx","prefix","seq__41109","cljs.core/seq","chunk__41110","count__41111","i__41112","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","k","cljs.core/keys","cljs.core/map?","cljs.core.get","oc.web.lib.sentry.set_extra_context_BANG_","cljs.core/name","oc.web.lib.sentry/capture-message-with-extra-context!","message","oc.web.lib.sentry/capture-error-with-extra-context!","p__41126","vec__41127","seq41123","G__41124","G__41125","e41130","oc.web.lib.sentry/capture-error-with-message","p__41133","vec__41134","seq41131","G__41132","e41137"],"sourcesContent":["(ns oc.web.lib.sentry\n  (:require [oc.web.local-settings :as ls]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.lib.jwt :as jwt]\n            [\"@sentry/browser\" :as sentry-browser]\n            [taoensso.timbre :as timbre]))\n\n(defn init-parameters [dsn]\n  {:whitelistUrls ls/local-whitelist-array\n   :tags {:isMobile (responsive/is-mobile-size?)\n          :hasJWT (not (not (jwt/jwt)))}\n   :sourceRoot ls/web-server\n   :release ls/deploy-key\n   :debug (= ls/log-level \"debug\")\n   :dsn dsn})\n\n(defn sentry-setup []\n  (when (and (exists? sentry-browser) ls/local-dsn)\n    (timbre/info \"Setup Sentry\")\n    (let [sentry-params (init-parameters ls/local-dsn)]\n      (.init sentry-browser (clj->js sentry-params))\n      (timbre/debug \"Sentry params:\" sentry-params)\n      (.configureScope sentry-browser (fn [scope]\n        (.setTag scope \"isMobile\" (responsive/is-mobile-size?))\n        (.setTag scope \"hasJWT\" (not (not (jwt/jwt))))\n        (when (jwt/jwt)\n          (timbre/debug \"Set Sentry user:\" (jwt/get-key :user-id))\n          (.setUser scope (clj->js {:user-id (jwt/get-key :user-id)\n                                    :id (jwt/get-key :user-id)\n                                    :first-name (jwt/get-key :first-name)\n                                    :last-name (jwt/get-key :last-name)}))))))))\n\n(defn- custom-error [error-name error-message]\n  (let [err (js/Error. error-message)]\n    (set! (.-name err) error-name)\n    err))\n\n(defn capture-error!\n  ([e]\n    (timbre/info \"Capture error:\" e)\n    (.captureException sentry-browser e))\n  ([e error-info]\n    (timbre/info \"Capture error:\" e \"extra:\" error-info)\n    (.captureException sentry-browser e #js {:extra error-info})))\n\n(defn capture-message! [msg & [log-level]]\n  (timbre/info \"Capture message:\" msg)\n  (.captureMessage sentry-browser msg (or log-level \"info\")))\n\n(defn ^:export test-sentry []\n  (js/setTimeout #(capture-message! \"Message from clojure\") 1000)\n  (try\n    (js/errorThrowingCode.)\n    (catch :default e\n      (capture-error! e))))\n\n(defn set-extra-context! [scope ctx & [prefix]]\n  (doseq [k (keys ctx)]\n    (if (map? (get ctx k))\n      (set-extra-context! scope (get ctx k) (str prefix (when (seq prefix) \"|\") (name k)))\n      (.setExtra scope (str prefix (when (seq prefix) \"|\") (name k)) (get ctx k)))))\n\n(defn capture-message-with-extra-context! [ctx message]\n  (timbre/info \"Capture message:\" message \"with context:\" ctx)\n  (.withScope sentry-browser (fn [scope]\n    (set-extra-context! scope ctx)\n    (capture-message! message))))\n\n(defn capture-error-with-extra-context! [ctx error-name & [error-message]]\n  (timbre/info \"Capture error:\" error-name \"message:\" error-message \"with context:\" ctx)\n  (.withScope sentry-browser (fn [scope]\n    (set-extra-context! scope ctx)\n    (try\n      (throw (custom-error (or error-message error-name) (if error-message error-name \"Error\")))\n      (catch :default e\n        (capture-error! e))))))\n\n(defn ^:export capture-error-with-message [error-name & [error-message]]\n  (timbre/info \"Capture error:\" error-name \"message:\" error-message)\n  (try\n    (throw (custom-error (or error-message error-name) (if error-message error-name \"Error\")))\n    (catch :default e\n      (capture-error! e))))"]}