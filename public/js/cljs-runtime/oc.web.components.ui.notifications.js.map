{"version":3,"sources":["oc/web/components/ui/notifications.cljs"],"mappings":"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","names":["oc.web.components.ui.notifications/button-wrapper","s","bt-ref","bt-cb","bt-title","bt-style","bt-dismiss","has-html","button-base-map","e","cljs.core/fn?","oc.web.actions.notifications/remove-notification","cljs.core/first","oc.web.lib.utils/class-set","cljs.core._EQ_","button-map","cljs.core.assoc","oc.web.components.ui.notifications/clear-timeout","cljs.core/deref","js/clearTimeout","cljs.core/reset!","oc.web.components.ui.notifications/setup-timeout","n-data","expire","oc.web.lib.utils/after","rum.core/build-defcs","p__47003","map__47005","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/React.createElement","p1__47000#","sablono.util/join-classes","sablono.interpreter/interpret","oc.web.components.ui.notifications/notification","rum.core/static","oc.web.mixins.ui/first-render-mixin","rum.core.local","o","cljs.core/compare-and-set!","id","title","description","slack-icon","opac","server-error","dismiss","primary-bt-cb","primary-bt-title","primary-bt-style","primary-bt-dismiss","primary-bt-inline","secondary-bt-cb","secondary-bt-title","secondary-bt-style","secondary-bt-dismiss","web-app-update","slack-bot","mention","mention-author","click","dismiss-x","notification-data","light-theme","and__4115__auto__","js/isiPhoneWithoutPhysicalHomeBt","or__4126__auto__","G__47013","fexpr__47012","cljs.core.keyword","cljs.core/not","oc.web.lib.utils/event-inside?","rum.core/ref-node","p1__47001#","cljs.core/seq","map__47014","cljs.core.into_array","iter__4529__auto__","s__47017","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__47019","cljs.core/chunk-buffer","i__47018","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__47016","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","oc.web.components.ui.notifications/notifications","rum.core/reactive","org.martinklepsch.derivatives.drv","notifications-data","org.martinklepsch.derivatives/react","panel-stack","computed-value","light-theme?","idx","cljs.core.range","n","cljs.core.nth","rum.core/with-key","cljs.core/chunk-first"],"sourcesContent":["(ns oc.web.components.ui.notifications\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as ui-mixins]\n            [oc.web.actions.notifications :as notification-actions]))\n\n(defn button-wrapper [s bt-ref bt-cb bt-title bt-style bt-dismiss]\n  (let [has-html (string? bt-title)\n        button-base-map {:on-click (fn [e]\n                                     (when (fn? bt-cb)\n                                       (bt-cb e))\n                                     (when bt-dismiss\n                                       (notification-actions/remove-notification (first (:rum/args s)))))\n                         :ref bt-ref\n                         :class (utils/class-set {:solid-green (= bt-style :solid-green)\n                                                  :default-link (= bt-style :default-link)})}\n        button-map (if has-html\n                     (assoc button-base-map :dangerouslySetInnerHTML #js {\"__html\" bt-title})\n                     button-base-map)]\n    [:button.mlb-reset.notification-button.group\n      button-map\n      (when-not has-html\n        bt-title)]))\n\n(defn clear-timeout [s]\n  (when @(::timeout s)\n    (js/clearTimeout @(::timeout s))\n    (reset! (::timeout s) nil)))\n\n(defn setup-timeout [s]\n  (clear-timeout s)\n  (let [n-data (first (:rum/args s))]\n    (reset! (::old-expire s) (:expire n-data))\n    (when (pos? (:expire n-data))\n      (let [expire (* (:expire n-data) 1000)]\n        (reset! (::timeout s)\n         (utils/after expire\n          #(reset! (::dismiss s) true)))))))\n\n(rum/defcs notification < rum/static\n                          ui-mixins/first-render-mixin\n                          (rum/local false ::dismiss)\n                          (rum/local false ::notification-removed)\n                          (rum/local false ::timeout)\n\n                          (rum/local 0 ::old-expire)\n                          {:did-mount (fn [s]\n                           (setup-timeout s)\n                           s)\n                           :did-remount (fn [o s]\n                            (setup-timeout s)\n                            s)\n                           :after-render (fn [s]\n                            (when @(::dismiss s)\n                              (when (compare-and-set! (::notification-removed s) false true)\n                                ;; remove notification from list\n                                (notification-actions/remove-notification (first (:rum/args s)))))\n                            s)}\n  [s {:keys [id title description slack-icon opac server-error dismiss\n             primary-bt-cb primary-bt-title primary-bt-style primary-bt-dismiss\n             primary-bt-inline secondary-bt-cb secondary-bt-title secondary-bt-style\n             secondary-bt-dismiss web-app-update slack-bot mention mention-author\n             click dismiss-x] :as notification-data}\n      light-theme]\n  [:div.notification.group\n    {:class (utils/class-set {:server-error server-error\n                              :app-update web-app-update\n                              :slack-bot slack-bot\n                              :opac opac\n                              :light-theme light-theme\n                              :mention-notification (and mention mention-author)\n                              :bottom-notch (js/isiPhoneWithoutPhysicalHomeBt)\n                              :dismiss dismiss\n                              :clickable (fn? click)\n                              :inline-bt (or primary-bt-inline\n                                             (and id\n                                                  ((keyword id) #{:slack-team-added :slack-bot-added\n                                                                  :org-settings-saved :invitation-resent\n                                                                  :cancel-invitation :member-removed-from-team\n                                                                  :reminder-created :reminder-updated\n                                                                  :reminder-deleted :resend-verification-ok})))\n                              :dismiss-button dismiss})\n     :on-mouse-enter #(clear-timeout s)\n     :on-mouse-leave #(setup-timeout s)\n     :on-click #(when (and (fn? click)\n                           (not (utils/event-inside? % (rum/ref-node s :dismiss-bt)))\n                           (not (utils/event-inside? % (rum/ref-node s :first-bt)))\n                           (not (utils/event-inside? % (rum/ref-node s :second-bt))))\n                  (click %)\n                  (clear-timeout s)\n                  (notification-actions/remove-notification notification-data))\n     :data-notificationid id}\n    (when dismiss\n      [:button.mlb-reset.notification-dismiss-bt\n        {:on-click #(do\n                      (when (fn? dismiss)\n                        (dismiss %))\n                      (clear-timeout s)\n                      (notification-actions/remove-notification notification-data))\n         :class (when dismiss-x \"dismiss-x\")\n         :ref :dismiss-bt}\n        (when-not dismiss-x\n          \"OK\")])\n    [:div.notification-title.group\n      {:class (when-not (seq description) \"no-description\")}\n      (when slack-icon\n        [:span.slack-icon])\n      title]\n    (when (seq description)\n      [:div.notification-description\n        {:dangerouslySetInnerHTML #js {\"__html\" description}\n         :class (when mention \"oc-mentions\")}])\n    (when (seq secondary-bt-title)\n      (button-wrapper s :second-bt secondary-bt-cb secondary-bt-title secondary-bt-style secondary-bt-dismiss))\n    (when (seq primary-bt-title)\n      (button-wrapper s :first-bt primary-bt-cb primary-bt-title primary-bt-style primary-bt-dismiss))])\n\n(rum/defcs notifications < rum/static\n                           rum/reactive\n                           (drv/drv :notifications-data)\n                           (drv/drv :panel-stack)\n                           (drv/drv :ui-theme)\n  [s]\n  (let [notifications-data (drv/react s :notifications-data)\n        panel-stack (drv/react s :panel-stack)\n        {:keys [computed-value]} (drv/react s :ui-theme)\n        light-theme? (or (pos? (count panel-stack))\n                         (= computed-value :dark))]\n    [:div.notifications\n      (for [idx (range (count notifications-data))\n            :let [n (nth notifications-data idx)]]\n        (rum/with-key (notification n light-theme?) (str \"notif-\" (:id n))))]))"]}