{"version":3,"sources":["oc/web/ws/change_client.cljs"],"mappings":"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","names":["js/oc","js/oc.web","js/oc.web.ws","js/oc.web.ws.change-client","js/oc.web.ws.change-client.last-ws-link","oc.web.ws.change-client/last-ws-link","cljs.core.atom","js/oc.web.ws.change-client.current-org","oc.web.ws.change-client/current-org","js/oc.web.ws.change-client.current-uid","oc.web.ws.change-client/current-uid","js/oc.web.ws.change-client.container-ids","oc.web.ws.change-client/container-ids","js/oc.web.ws.change-client.channelsk","oc.web.ws.change-client/channelsk","js/oc.web.ws.change-client.ch-chsk","oc.web.ws.change-client/ch-chsk","js/oc.web.ws.change-client.ch-state","oc.web.ws.change-client/ch-state","js/oc.web.ws.change-client.chsk-send!","oc.web.ws.change-client/chsk-send!","js/oc.web.ws.change-client.ch-pub","oc.web.ws.change-client/ch-pub","cljs.core.async.chan","js/oc.web.ws.change-client.last-interval","oc.web.ws.change-client/last-interval","js/oc.web.ws.change-client.publication","oc.web.ws.change-client/publication","cljs.core.async.pub","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.ws.change-client/send!","seq37239","G__37240","cljs.core/first","cljs.core/next","self__4723__auto__","chsk-send!","args","oc.web.ws.utils/send!","args__33705__auto__","ocr-37241","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-37241_0__37243","cljs.core.nth","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","G__37248","cljs.core.match/backtrack","e37246","js/Error","e__32662__auto__","cljs.core/deref","e37247","e37244","e37245","oc.web.ws.change-client/container-watch","watch-id","watch-ids","cljs.core/sequential?","current-set","cljs.core/set","new-set","union-set","clojure.set.union","cljs.core/reset!","oc.web.ws.change_client.send_BANG_","oc.web.ws.change-client/container-seen","org-id","container-id","seen-at","oc.web.ws.change-client/item-seen","publisher-id","item-id","oc.lib.time/current-timestamp","oc.web.ws.change-client/item-read","user-name","avatar-url","oc.web.ws.change-client/who-read-count","item-ids","oc.web.ws.change-client/who-read","oc.web.ws.change-client/follow-list","oc.web.ws.change-client/followers-count","oc.web.ws.change-client/publisher-watch","oc.web.ws.change-client/publishers-follow","publisher-uuids","oc.web.ws.change-client/publisher-follow","publisher-uuid","oc.web.ws.change-client/publisher-unfollow","oc.web.ws.change-client/boards-unfollow","board-uuids","oc.web.ws.change-client/board-follow","board-uuid","oc.web.ws.change-client/board-unfollow","oc.web.ws.change-client/subscribe","topic","handler-fn","ws-cc-chan","cljs.core.async.sub","c__27167__auto__","cljs.core.async.impl.dispatch/run","f__27168__auto__","switch__27075__auto__","state_37257","state_val_37258","statearr-37259","cljs.core.async.impl.ioc-helpers/take!","inst_37255","cljs.core.async.impl.ioc-helpers/return-chan","inst_37251","inst_37252","statearr-37260","statearr-37261","statearr-37262","state-machine__27076__auto__","ret-value__27077__auto__","result__27078__auto__","cljs.core/keyword-identical?","ex__27079__auto__","e37263","statearr-37264","cljs.core/seq","statearr-37265","state__27169__auto__","statearr-37266","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/oc.web.ws.change-client.event-handler","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__37267","cljs.core/MultiFn","cljs.core.symbol","oc.web.ws.change-client/event-handler","event","_","r","state_37274","state_val_37275","inst_37268","inst_37269","inst_37270","cljs.core/PersistentHashMap","cljs.core.async.impl.ioc-helpers/put!","inst_37272","statearr-37276","e37277","statearr-37278","statearr-37279","statearr-37280","body","state_37287","state_val_37288","inst_37281","inst_37282","inst_37283","inst_37285","statearr-37289","e37290","statearr-37291","statearr-37292","statearr-37293","state_37300","state_val_37301","inst_37294","inst_37295","inst_37296","inst_37298","statearr-37302","e37303","statearr-37304","statearr-37305","statearr-37306","state_37313","state_val_37314","inst_37307","inst_37308","inst_37309","inst_37311","statearr-37315","e37316","statearr-37317","statearr-37318","statearr-37319","state_37326","state_val_37327","inst_37320","inst_37321","inst_37322","inst_37324","statearr-37328","e37329","statearr-37330","statearr-37331","statearr-37332","state_37339","state_val_37340","inst_37333","inst_37334","inst_37335","inst_37337","statearr-37341","e37342","statearr-37343","statearr-37344","statearr-37345","state_37352","state_val_37353","inst_37346","inst_37347","inst_37348","inst_37350","statearr-37354","e37355","statearr-37356","statearr-37357","statearr-37358","state_37365","state_val_37366","inst_37359","inst_37360","inst_37361","inst_37363","statearr-37367","e37368","statearr-37369","statearr-37370","statearr-37371","state_37378","state_val_37379","inst_37372","inst_37373","inst_37374","inst_37376","statearr-37380","e37381","statearr-37382","statearr-37383","statearr-37384","state_37391","state_val_37392","inst_37385","inst_37386","inst_37387","inst_37389","statearr-37393","e37394","statearr-37395","statearr-37396","statearr-37397","js/oc.web.ws.change-client.-event-msg-handler","fexpr__37398","oc.web.ws.change-client/-event-msg-handler","p__37399","map__37400","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","oc.web.ws.change-client/event-msg-handler","ev-msg","id","?data","p__37402","map__37403","p__37405","map__37406","vec__37408","old-state-map","new-state-map","e","taoensso.truss.impl/-dummy-error","e37411","taoensso.truss.impl/-invar-violation!","p__37412","map__37413","p__37415","map__37416","vec__37418","?uid","?csrf-token","?handshake-data","oc.web.ws.utils/after","oc.web.ws.change-client/stop-router!","taoensso.sente/chsk-disconnect!","oc.web.ws.change-client/start-router!","taoensso.sente/start-client-chsk-router!","oc.web.ws.utils/reconnected","G__37421","G__37422","G__37423","G__37424","oc.web.ws.change-client/reconnect","ws-link","uid","org-slug","containers","ws-uri","goog.Uri/parse","ws-domain","ws-org-path","cljs.core/not","cljs.core.not_EQ_","and__4115__auto__","map__37425","chsk","ch-recv","send-fn","state","x","G__37426","G__37427","taoensso.sente/make-channel-socket!","oc.web.local-settings/jwt-cookie-secure","cljs.core/remove-watch","cljs.core/add-watch","key","a","old-state","new-state","oc.web.utils.ws-client-ids/change-client-id"],"sourcesContent":["(ns oc.web.ws.change-client\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]])\n  (:require [cljs.core.async :refer [chan <! >! timeout pub sub unsub unsub-all]]\n            [defun.core :refer (defun)]\n            [taoensso.sente :as s]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore :refer-macros (have)]\n            [oc.lib.time :as time]\n            [oc.web.lib.utils :as utils]\n            [oc.web.local-settings :as ls]\n            [oc.web.ws.utils :as ws-utils]\n            [oc.web.utils.ws-client-ids :as ws-client-ids]\n            [goog.Uri :as guri]))\n\n(defonce last-ws-link (atom nil))\n(defonce current-org (atom nil))\n(defonce current-uid (atom nil))\n(defonce container-ids (atom []))\n\n;; Sente WebSocket atoms\n(defonce channelsk (atom nil))\n(defonce ch-chsk (atom nil))\n(defonce ch-state (atom nil))\n(defonce chsk-send! (atom nil))\n(defonce ch-pub (chan))\n\n(defonce last-interval (atom nil))\n\n;; Publication that handlers will subscribe to\n(defonce publication\n  (pub ch-pub :topic))\n\n;; Send wrapper\n\n(defn- send! [chsk-send! & args]\n  (ws-utils/send! \"Change\" chsk-send! ch-state args))\n\n;; ----- Actions -----\n\n(defun container-watch\n  ([watch-id :guard string?]\n    (timbre/debug \"Adding container/watch for:\" watch-id)\n    (container-watch [watch-id]))\n\n  ([watch-ids :guard sequential?]\n    (timbre/debug \"Adding container/watch for:\" watch-ids)\n    ;; Remove duplicated sections by moving old and new ids into sets\n    ;; and replacing with the union of the 2.\n    (let [current-set (set @container-ids)\n          new-set (set watch-ids)\n          union-set (clojure.set/union current-set new-set)]\n      (reset! container-ids (vec union-set)))\n    (container-watch))\n\n  ([]\n    (timbre/debug \"Sending container/watch for:\" @container-ids)\n    (send! chsk-send! [:container/watch @container-ids])))\n\n(defn container-seen [org-id container-id seen-at]\n  (timbre/debug \"Sending container/seen for org:\" org-id \"container:\" container-id \"seen at:\" seen-at)\n  (send! chsk-send! [:container/seen {:org-id org-id :container-id container-id :seen-at seen-at}]))\n\n(defn item-seen [publisher-id org-id container-id item-id]\n  (timbre/debug \"Sending item/seen for org:\" org-id \"container:\" container-id \"item:\" item-id)\n  (send! chsk-send! [:item/seen {:publisher-id publisher-id :org-id org-id :container-id container-id :item-id item-id :seen-at (time/current-timestamp)}]))\n \n(defn item-read [org-id container-id item-id user-name avatar-url]\n  (timbre/debug \"Sending item/read for container:\" container-id \"item:\" item-id)\n  (send! chsk-send! [:item/read {:org-id org-id\n                                 :container-id container-id\n                                 :item-id item-id\n                                 :name user-name\n                                 :avatar-url avatar-url\n                                 :read-at (time/current-timestamp)}]))\n\n(defn who-read-count [item-ids]\n  (timbre/debug \"Sending item/who-read-count for item-ids:\" item-ids)\n  (send! chsk-send! [:item/who-read-count item-ids]))\n\n(defn who-read [item-ids]\n  (timbre/debug \"Sending item/who-read for item-ids:\" item-ids)\n  (send! chsk-send! [:item/who-read item-ids]))\n\n;; Follow\n\n(defn follow-list []\n  (timbre/debug \"Sending follow-list for user-id:\" @current-uid \"org-slug:\" @current-org)\n  (send! chsk-send! [:follow/list {:user-id @current-uid\n                                   :org-slug @current-org}]))\n\n;; Followers count\n\n(defn followers-count []\n  (timbre/debug \"Sending followers-count for org-slug:\" @current-org)\n  (send! chsk-send! [:followers/count {:org-slug @current-org}]))\n\n;; Publishers follow\n\n(defn publisher-watch []\n  (send! chsk-send! [:user/watch {:org-slug @current-org :user-ids [@current-uid]}]))\n\n(defn publishers-follow [publisher-uuids]\n  (timbre/debug \"Sending publishers/follow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuids:\" publisher-uuids)\n  (send! chsk-send! [:publishers/follow {:user-id @current-uid\n                                         :org-slug @current-org\n                                         :publisher-uuids (vec publisher-uuids)}]))\n\n(defn publisher-follow [publisher-uuid]\n  (timbre/debug \"Sending publisher/follow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuid:\" publisher-uuid)\n  (send! chsk-send! [:publisher/follow {:user-id @current-uid\n                                        :org-slug @current-org\n                                        :publisher-uuid publisher-uuid}]))\n\n(defn publisher-unfollow [publisher-uuid]\n  (timbre/debug \"Sending publisher/unfollow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuid:\" publisher-uuid)\n  (send! chsk-send! [:publisher/unfollow {:user-id @current-uid\n                                          :org-slug @current-org\n                                          :publisher-uuid publisher-uuid}]))\n\n;; Boards follow\n\n(defn boards-unfollow [board-uuids]\n  (timbre/debug \"Sending boards/unfollow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuids:\" board-uuids)\n  (send! chsk-send! [:boards/unfollow {:user-id @current-uid\n                                       :org-slug @current-org\n                                       :board-uuids (vec board-uuids)}]))\n\n(defn board-follow [board-uuid]\n  (timbre/debug \"Sending board/follow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuid:\" board-uuid)\n  (send! chsk-send! [:board/follow {:user-id @current-uid\n                                    :org-slug @current-org\n                                    :board-uuid board-uuid}]))\n\n(defn board-unfollow [board-uuid]\n  (timbre/debug \"Sending board/unfollow for user-id:\" @current-uid\n   \"org-slug:\" @current-org \"with uuid:\" board-uuid)\n  (send! chsk-send! [:board/unfollow {:user-id @current-uid\n                                      :org-slug @current-org\n                                      :board-uuid board-uuid}]))\n\n(defn subscribe\n  [topic handler-fn]\n  (let [ws-cc-chan (chan)]\n    (sub publication topic ws-cc-chan)\n    (go-loop []\n      (handler-fn (<! ws-cc-chan))\n      (recur))))\n\n;; ----- Event handlers -----\n\n(defmulti event-handler\n  \"Multimethod to handle our internal events\"\n  (fn [event & _]\n    (timbre/debug \"event-handler\" event)\n    event))\n\n(defmethod event-handler :default\n  [_ & r]\n  (timbre/info \"No event handler defined for\" _))\n\n(defmethod event-handler :chsk/ws-ping\n  [_ & r]\n  (go (>! ch-pub { :topic :chsk/ws-ping })))\n\n(defmethod event-handler :container/status\n  [_ body]\n  (timbre/debug \"Status event :container/status\" body)\n  (go (>! ch-pub { :topic :container/status :data body })))\n\n(defmethod event-handler :org/change\n  [_ body]\n  (timbre/debug \"Change event :org/change\" body)\n  (go (>! ch-pub { :topic :org/change :data body })))\n\n(defmethod event-handler :container/change\n  [_ body]\n  (timbre/debug \"Change event :container/change\" body)\n  (go (>! ch-pub { :topic :container/change :data body })))\n\n(defmethod event-handler :item/change\n  [_ body]\n  (timbre/debug \"Change event :item/change\" body)\n  (go (>! ch-pub { :topic :item/change :data body })))\n\n(defmethod event-handler :item/counts\n  [_ body]\n  (timbre/debug \"Change event :item/counts\" body)\n  (go (>! ch-pub { :topic :item/counts :data body })))\n\n(defmethod event-handler :item/status\n  [_ body]\n  (timbre/debug \"Change event :item/status\" body)\n  (go (>! ch-pub { :topic :item/status :data body })))\n\n(defmethod event-handler :entry/inbox-action\n  [_ body]\n  (timbre/debug \"Change event :entry/inbox-action\" body)\n  (go (>! ch-pub { :topic :entry/inbox-action :data body })))\n\n;; Follow event handler\n\n(defmethod event-handler :follow/list\n  [_ body]\n  (timbre/debug \"Change event :follow/list\" body)\n  (go (>! ch-pub { :topic :follow/list :data body })))\n\n(defmethod event-handler :followers/count\n  [_ body]\n  (timbre/debug \"Change event :follow/list\" body)\n  (go (>! ch-pub { :topic :followers/count :data body })))\n\n;; ----- Sente event handlers -----\n\n(defmulti -event-msg-handler\n  \"Multimethod to handle Sente `event-msg`s\"\n  :id ; Dispatch on event-id\n  )\n\n(defn event-msg-handler\n  \"Wraps `-event-msg-handler` with logging, error catching, etc.\"\n  [{:as ev-msg :keys [id ?data event]}]\n  (-event-msg-handler ev-msg))\n\n(defmethod -event-msg-handler :default\n  [{:as ev-msg :keys [event]}]\n  ; Default/fallback case (no other matching handler)\n  (timbre/warn \"Unhandled event: \" event))\n\n(defmethod -event-msg-handler :chsk/state\n  [{:as ev-msg :keys [?data]}]\n  (let [[old-state-map new-state-map] (have vector? ?data)]\n    (if (:first-open? new-state-map)\n      (timbre/debug \"Channel socket successfully established!: \" new-state-map)\n      (timbre/debug \"Channel socket state change: \" new-state-map))))\n\n(defmethod -event-msg-handler :chsk/recv\n  [{:as ev-msg :keys [?data]}]\n  (timbre/debug \"Push event from server: \" ?data)\n  (apply event-handler ?data))\n\n(defmethod -event-msg-handler :chsk/handshake\n  [{:as ev-msg :keys [?data]}]\n  (let [[?uid ?csrf-token ?handshake-data] ?data]\n    (timbre/debug \"Handshake:\" ?uid ?csrf-token ?handshake-data)\n    (follow-list)\n    (container-watch)\n    (publisher-watch)\n    (ws-utils/after 1000 followers-count)))\n\n;; ----- Sente event router (our `event-msg-handler` loop) -----\n\n(declare reconnect)\n\n(defn  stop-router! []\n  (when @channelsk\n    (s/chsk-disconnect! @channelsk)\n    (timbre/info \"Connection closed\")))\n\n(defn start-router! []\n  (s/start-client-chsk-router! @ch-chsk event-msg-handler)\n  (timbre/info \"Connection estabilished\")\n  (ws-utils/reconnected last-interval \"Change\" chsk-send! ch-state\n   #(reconnect @last-ws-link @current-uid @current-org @container-ids)))\n\n(defn reconnect\n  \"Connect or reconnect the WebSocket connection to the change service\"\n  [ws-link uid org-slug containers]\n  (timbre/debug \"Change service reconnect\" (:href ws-link) uid org-slug containers)\n  (let [ws-uri (guri/parse (:href ws-link))\n        ws-domain (str (.getDomain ws-uri) (when (.getPort ws-uri) (str \":\" (.getPort ws-uri))))\n        ws-org-path (.getPath ws-uri)]\n    ;; Save passed parameters\n    (reset! last-ws-link ws-link)\n    (reset! container-ids containers)\n    (reset! current-org org-slug)\n    (reset! current-uid uid)\n    (if (or (not @ch-state)\n            (not (:open? @@ch-state))\n            (not= @current-org org-slug))\n      ;; Need a connection to change service\n      (do\n        (timbre/debug \"Connection is down, reconnecting. Current state:\" @ch-state)\n        ; if the path is different it means\n        (when (and @ch-state\n                   (:open? @@ch-state))\n          (timbre/info \"Closing previous connection for:\" @current-org)\n          (stop-router!))\n        (timbre/info \"Attempting change service connection to:\" ws-domain \"for org:\" org-slug)\n        (let [{:keys [chsk ch-recv send-fn state] :as x} (s/make-channel-socket! ws-org-path\n                                                          {:type :auto\n                                                           :host ws-domain\n                                                           :protocol (if ls/jwt-cookie-secure :https :http)\n                                                           :packer :edn\n                                                           :uid uid\n                                                           :params {:user-id uid}})]\n            \n            (reset! channelsk chsk)\n            (reset! ch-chsk ch-recv)\n            (reset! chsk-send! send-fn)\n            (when @ch-state\n              (remove-watch @ch-state :change-client-state-watcher))\n            (reset! ch-state state)\n            (add-watch @ch-state :change-client-state-watcher\n             (fn [key a old-state new-state]\n               (reset! ws-client-ids/change-client-id (:uid new-state))))\n            (start-router!)))\n\n      ;; already connected, make sure we're watching all the current containers\n      (do\n        (timbre/debug \"Connection already up, watch containers\")\n        (container-watch)))))"]}