{"version":3,"sources":["oc/web/stores/org.cljs"],"mappings":"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","names":["oc.web.dispatcher/action","p__43400","vec__43401","cljs.core.nth","db","_","org-data","saved?","email-domain","fixed-org-data","oc.web.utils.activity/parse-org","org-data-key","oc.web.dispatcher/org-data-key","boards-key","oc.web.dispatcher/boards-key","old-boards","cljs.core.get_in","board-slugs","cljs.core/set","p1__43395#","cljs.core.mapv","cljs.core.keyword","filter-board","p__43404","vec__43405","k","v","next-boards","cljs.core.into","cljs.core.filter","with-saved?","cljs.core.assoc","next-org-editing","cljs.core.dissoc","editable-boards","p1__43396#","cljs.core/filterv","cljs.core/not","oc.web.lib.utils.link_for","current-board-slug","oc.web.dispatcher.current_board_slug","editing-board","cljs.core/seq","oc.web.actions.cmail.get_board_for_edit","oc.web.dispatcher/is-container?","active-users","oc.web.dispatcher.active_users","follow-boards-list-key","oc.web.dispatcher/follow-boards-list-key","unfollow-board-uuids","oc.web.dispatcher/unfollow-board-uuids-key","follow-publishers-list","oc.web.dispatcher.follow_publishers_list","team-data-key","oc.web.dispatcher/team-data-key","update-team-users?","cljs.core/contains?","team-roster-key","oc.web.dispatcher/team-roster-key","update-roster-users?","setup-cmail?","cljs.core/first","oc.web.dispatcher/cmail-state-key","ndb","cljs.core/assoc-in","cljs.core/select-keys","p1__43397#","cljs.core.update","oc.web.stores.user/parse-user-data","oc.web.lib.utils/activity-uuid","cljs.core.update_in","oc.web.dispatcher/cmail-data-key","cljs.core/merge","p1__43398#","cljs.core.conj","oc.web.stores.user/parse-users","p1__43399#","oc.web.stores.user/enrich-boards-list","p__43409","vec__43410","oc.web.dispatcher.org_data","p__43414","vec__43415","oc.web.dispatcher/api-entry-point-key","oc.web.dispatcher/auth-settings-key","oc.web.dispatcher/orgs-key","p__43418","vec__43419","p__43423","vec__43424","org-slug","bookmarks-count-key","cljs.core/vec","p1__43422#","or__4126__auto__","p__43428","vec__43432","drafts-count-key","p1__43427#","p__43435","vec__43436","badges-key","oc.web.dispatcher/badges-key","badges-data","cljs.core.not_EQ_","p__43439","vec__43440"],"sourcesContent":["(ns oc.web.stores.org\n  (:require [oc.web.lib.utils :as utils]\n            [taoensso.timbre :as timbre]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.utils.org :as org-utils]\n            [oc.web.utils.activity :as activity-utils]\n            [oc.web.utils.user :as user-utils]\n            [oc.web.dispatcher :as dispatcher]\n            [oc.web.actions.cmail :as cmail-actions]\n            [oc.web.stores.user :as user-store]))\n\n(defmethod dispatcher/action :org-loaded\n  [db [_ org-data saved? email-domain]]\n  ;; We need to remove the boards that are no longer in the org\n  (let [fixed-org-data (activity-utils/parse-org db org-data)\n        org-data-key (dispatcher/org-data-key (:slug fixed-org-data))\n        boards-key (dispatcher/boards-key (:slug fixed-org-data))\n        old-boards (get-in db boards-key)\n        ;; No need to add a spacial case for drafts board here since\n        ;; we are only excluding keys that already exists in the app-state\n        board-slugs (set (mapv #(keyword (str (:slug %))) (:boards org-data)))\n        filter-board (fn [[k v]]\n                       (board-slugs k))\n        next-boards (into {} (filter filter-board old-boards))\n        with-saved? (if (nil? saved?)\n                      ;; If saved? is nil it means no save happened, so we keep the old saved? value\n                      org-data\n                      ;; If save actually happened let's update the saved value\n                      (assoc org-data :saved saved?))\n        next-org-editing (-> with-saved?\n                          (assoc :email-domain email-domain)\n                          (dissoc :has-changes))\n        editable-boards (filterv #(and (not (:draft %)) (utils/link-for (:links %) \"create\" \"POST\"))\n                         (:boards org-data))\n        current-board-slug (dispatcher/current-board-slug)\n        editing-board (when (seq editable-boards)\n                        (cmail-actions/get-board-for-edit (when-not (dispatcher/is-container? current-board-slug) current-board-slug) editable-boards))\n        ;; Active users\n        active-users (dispatcher/active-users (:slug fixed-org-data) db)\n        ;; Follow/Unfollow boards/users\n        follow-boards-list-key (dispatcher/follow-boards-list-key (:slug fixed-org-data))\n        unfollow-board-uuids (get-in db (dispatcher/unfollow-board-uuids-key (:slug fixed-org-data)))\n        follow-publishers-list (dispatcher/follow-publishers-list (:slug fixed-org-data) db)\n        ;; Team data\n        team-data-key (dispatcher/team-data-key (:team-id fixed-org-data))\n        update-team-users? (contains? (get-in db team-data-key) :users)\n        ;; Roster data\n        team-roster-key (dispatcher/team-roster-key (:team-id fixed-org-data))\n        update-roster-users? (contains? (get-in db team-roster-key) :users)\n        ;; Cmail data\n        setup-cmail? (and (not (contains? db (first dispatcher/cmail-state-key)))\n                          editing-board)]\n    (as-> db ndb\n     (assoc-in ndb org-data-key fixed-org-data)\n     (assoc ndb :org-editing next-org-editing)\n     (assoc ndb :org-avatar-editing (select-keys fixed-org-data [:logo-url]))\n     (update ndb :current-user-data #(user-store/parse-user-data % fixed-org-data active-users))\n     (if setup-cmail?\n       (assoc-in ndb dispatcher/cmail-state-key {:key (utils/activity-uuid)\n                                                 :fullscreen false\n                                                 :collapsed true})\n       ndb)\n     (if setup-cmail?\n        (update-in ndb dispatcher/cmail-data-key merge editing-board)\n        ndb)\n     (if update-team-users?\n       (update-in ndb (conj team-data-key :users) #(user-store/parse-users % fixed-org-data follow-publishers-list))\n       ndb)\n     (if update-roster-users?\n       (update-in ndb (conj team-roster-key :users) #(user-store/parse-users % fixed-org-data follow-publishers-list))\n       ndb)\n     (assoc-in ndb boards-key next-boards)\n     (update-in ndb follow-boards-list-key #(user-store/enrich-boards-list unfollow-board-uuids (:boards fixed-org-data))))))\n\n(defmethod dispatcher/action :org-avatar-update/failed\n  [db [_]]\n  (let [org-data (dispatcher/org-data db)]\n    (assoc db :org-avatar-editing (select-keys org-data [:logo-url]))))\n\n(defmethod dispatcher/action :org-create\n  [db [_]]\n  (dissoc db\n   :latest-entry-point\n   :latest-auth-settings\n   ;; Remove the entry point, orgs and auth settings\n   ;; to avoid using the old loaded orgs\n   (first dispatcher/api-entry-point-key)\n   (first dispatcher/auth-settings-key)\n   dispatcher/orgs-key))\n\n(defmethod dispatcher/action :org-edit-setup\n  [db [_ org-data]]\n  (assoc db :org-editing org-data))\n\n(defmethod dispatcher/action :bookmarks-nav/show\n  [db [_ org-slug]]\n  (let [bookmarks-count-key (vec (conj (dispatcher/org-data-key org-slug) :bookmarks-count))]\n    (update-in db bookmarks-count-key #(or % 0))))\n\n(defmethod dispatcher/action :drafts-nav/show\n  [db [_ org-slug]]\n  (let [drafts-count-key (vec (conj (dispatcher/org-data-key org-slug) :drafts-count))]\n    (update-in db drafts-count-key #(or % 0))))\n\n(defmethod dispatcher/action :maybe-badge-following\n  [db [_ org-slug current-board-slug]]\n  (let [badges-key (dispatcher/badges-key org-slug)\n        badges-data (get-in db badges-key)]\n    (if (and (or (not badges-data)\n                 (not (contains? badges-data :following)))\n             (not= (keyword current-board-slug) :following))\n      (assoc-in db (conj badges-key :following) true)\n      db)))\n\n(defmethod dispatcher/action :maybe-badge-replies\n  [db [_ org-slug current-board-slug]]\n  (let [badges-key (dispatcher/badges-key org-slug)\n        badges-data (get-in db badges-key)]\n    (if (and (or (not badges-data)\n                 (not (contains? badges-data :replies)))\n             (not= (keyword current-board-slug) :replies))\n      (assoc-in db (conj badges-key :replies) true)\n      db)))"]}