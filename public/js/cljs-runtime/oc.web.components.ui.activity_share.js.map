{"version":3,"sources":["oc/web/components/ui/activity_share.cljs"],"mappings":"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","names":["oc.web.components.ui.activity-share/dismiss","oc.web.actions.activity/activity-share-hide","oc.web.components.ui.activity-share/close-clicked","s","cljs.core/reset!","oc.web.lib.utils/after","oc.web.components.ui.activity-share/has-slack-bot?","org-data","oc.web.lib.jwt/team-has-bot?","oc.web.components.ui.activity-share/highlight-url","temp__5735__auto__","url-field","rum.core/ref-node","rum.core/build-defcs","cljs.core/deref","js/React.createElement","sablono.util/join-classes","attrs46351","cljs.core.apply","cljs.core/map?","sablono.interpreter/attributes","sablono.normalize.merge_with_class","sablono.interpreter/interpret","oc.web.components.ui.activity-share/activity-share","rum.core/reactive","org.martinklepsch.derivatives.drv","rum.core.local","cljs.core.rand","oc.web.mixins.ui/first-render-mixin","p1__46346#","oc.web.mixins.ui.on_click_out","oc.web.actions.team/teams-get-if-needed","activity-data","org.martinklepsch.derivatives/get-ref","subject","js/$","cljs.core/not","oc.web.dispatcher/dispatch!","shared-data","cljs.core/compare-and-set!","medium","cljs.core._EQ_","oc.web.actions.activity/activity-share-reset","org.martinklepsch.derivatives/react","slack-data","secure-uuid","_","is-mobile?","oc.web.lib.responsive/is-tablet-or-mobile?","has-bot?","can-share-to-slack?","disallow-public-share?","and__4115__auto__","oc.web.lib.utils/class-set","or__4126__auto__","p1__46347#","oc.web.lib.utils/event-stop","p1__46348#","cljs.core.swap_BANG_","G__46352","oc.web.components.ui.carrot-option-button/carrot-option-button","p1__46349#","G__46353","url-protocol","oc.web.local-settings/jwt-cookie-secure","secure-url","oc.web.urls.secure_activity","post-url","oc.web.urls.entry","share-url","oc.web.local-settings/web-server","e","url-input","copied?","oc.web.lib.utils/copy-to-clipboard","oc.web.actions.notifications/show-notification","oc.web.lib.utils/hide-class","G__46354","oc.web.components.ui.slack-channels-dropdown/slack-channels-dropdown","team","channel","cljs.core.merge","send-bt-disabled?","cljs.core/empty?","slack-share","oc.web.actions.activity/activity-share","oc.web.components.ui.small-loading/small-loading"],"sourcesContent":["(ns oc.web.components.ui.activity-share\n  (:require [rum.core :as rum]\n            [org.martinklepsch.derivatives :as drv]\n            [oc.web.lib.jwt :as jwt]\n            [oc.web.urls :as oc-urls]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.web.mixins.ui :as mixins]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.responsive :as responsive]\n            [oc.web.actions.team :as team-actions]\n            [oc.web.actions.nav-sidebar :as nav-actions]\n            [oc.web.actions.activity :as activity-actions]\n            [oc.web.mixins.ui :refer (on-click-out)]\n            [oc.web.actions.notifications :as notification-actions]\n            [oc.web.components.ui.small-loading :refer (small-loading)]\n            [oc.web.components.ui.carrot-option-button :refer (carrot-option-button)]\n            [oc.web.components.ui.slack-channels-dropdown :refer (slack-channels-dropdown)]))\n\n(defn dismiss []\n  (activity-actions/activity-share-hide))\n\n(defn close-clicked [s]\n  (reset! (::dismiss s) true)\n  (utils/after 180 dismiss))\n\n(defn- has-slack-bot?\n  \"Check if the current team has a bot associated.\"\n  [org-data]\n  (jwt/team-has-bot? (:team-id org-data)))\n\n(defn- highlight-url\n  \"Select the whole content of the share link filed.\"\n  [s]\n  (when-let [url-field (rum/ref-node s \"activity-share-url-field\")]\n    (.select url-field)))\n\n(rum/defcs activity-share < rum/reactive\n                            ;; Derivatives\n                            (drv/drv :org-data)\n                            (drv/drv :activity-share)\n                            (drv/drv :activity-shared-data)\n                            (drv/drv :activity-share-medium)\n                            (drv/drv :current-user-data)\n                            ;; Locals\n                            (rum/local {:note \"\"} ::slack-data)\n                            (rum/local false ::dismiss)\n                            (rum/local false ::sharing)\n                            (rum/local false ::shared)\n                            (rum/local (rand 1000) ::slack-channels-dropdown-key)\n                            (rum/local :team ::url-audience)\n                            ;; Mixins\n                            mixins/first-render-mixin\n                            (on-click-out #(close-clicked %1))\n                            {:will-mount (fn [s]\n                              (team-actions/teams-get-if-needed)\n                              (let [activity-data (:share-data @(drv/get-ref s :activity-share))\n                                    org-data @(drv/get-ref s :org-data)\n                                    subject (.text (.html (js/$ \"<div />\") (:headline activity-data)))]\n                               (when (and (not @(drv/get-ref s :activity-share-medium))\n                                          (has-slack-bot? org-data))\n                                 (dis/dispatch! [:input [:activity-share-medium] :slack])))\n                             s)\n                             :did-update (fn [s]\n                              ;; When we have a sharing response\n                              (when-let [shared-data @(drv/get-ref s :activity-shared-data)]\n                                (when (compare-and-set! (::sharing s) true false)\n                                  (reset!\n                                   (::shared s)\n                                   (if (:error shared-data) :error :shared))\n                                  ;; If share succeeded reset share fields\n                                  (when-not (:error shared-data)\n                                    (let [medium @(drv/get-ref s :activity-share-medium)]\n                                      (cond\n                                        (= medium :slack)\n                                        (do\n                                          (reset! (::slack-channels-dropdown-key s) (rand 1000))\n                                          (reset! (::slack-data s) {:note \"\"})))))\n                                  (utils/after 2000 #(reset! (::shared s) false)))\n                                (activity-actions/activity-share-reset))\n                              s)}\n  [s]\n  (let [activity-data (:share-data (drv/react s :activity-share))\n        org-data (drv/react s :org-data)\n        slack-data @(::slack-data s)\n        secure-uuid (:secure-uuid activity-data)\n        ;; Make sure it gets remounted when share request finishes\n        _ (drv/react s :activity-shared-data)\n        is-mobile? (responsive/is-tablet-or-mobile?)\n        medium (drv/react s :activity-share-medium)\n        has-bot? (has-slack-bot? org-data)\n        can-share-to-slack? (and (not is-mobile?)\n                                 has-bot?)\n        disallow-public-share? (and (:content-visibility org-data)\n                                    (:disallow-public-share (:content-visibility org-data)))]\n    [:div.activity-share-modal-container\n      {:class (utils/class-set {:will-appear (or @(::dismiss s) (not @(:first-render-done s)))\n                                :appear (and (not @(::dismiss s)) @(:first-render-done s))})}\n      [:div.activity-share-modal\n        [:div.activity-share-main-cta\n          (when is-mobile?\n            [:button.mobile-modal-close-bt.mlb-reset\n              {:on-click #(close-clicked s)}])\n          \"Share post\"]\n        ; (when can-share-to-slack?\n        ;   [:div.activity-share-medium-selector-container\n        ;     [:div.activity-share-medium-selector\n        ;       {:class (when (= medium :url) \"selected\")\n        ;        :on-click (fn [_]\n        ;                   (when-not @(::sharing s)\n        ;                     (dis/dispatch! [:input [:activity-share-medium] :url])\n        ;                     (utils/after\n        ;                      500\n        ;                      #(highlight-url s))))}\n        ;       \"URL\"]\n        ;     [:div.activity-share-medium-selector\n        ;       {:class (utils/class-set {:selected (= medium :slack)})\n        ;        :on-click (fn [e]\n        ;                    (utils/event-stop e)\n        ;                    (when-not @(::sharing s)\n        ;                      (if has-bot?\n        ;                        (dis/dispatch! [:input [:activity-share-medium] :slack])\n        ;                        (when (jwt/is-admin? (:team-id org-data))\n        ;                          (nav-actions/show-org-settings :integrations)))))}\n        ;       \"Slack\"]])\n        ; [:div.activity-share-divider-line\n        ;   {:class (when-not has-bot? \"no-tabs\")}]\n        (when (= medium :url)\n          [:div.activity-share-modal-shared.group\n            [:form\n              {:on-submit #(utils/event-stop %)}\n              (when-not disallow-public-share?\n                [:div.medium-row.group\n                  [:div.fields\n                    [:button.mlb-reset.checkbox-row\n                      {:on-click (fn [_] (swap! (::url-audience s) #(if (= % :team) :all :team)))}\n                      (carrot-option-button {:selected (= @(::url-audience s) :team)})\n                      [:div.checkbox-label \"Require authentication\"]]\n                    [:button.mlb-reset.checkbox-row\n                      {:on-click (fn [_] (swap! (::url-audience s) #(if (= % :all) :team :all)))}\n                      (carrot-option-button {:selected (= @(::url-audience s) :all)})\n                      [:div.checkbox-label \"Public (anyone with this link)\"]]]])\n              [:div.medium-row.group\n                (let [url-protocol (str \"http\" (when ls/jwt-cookie-secure \"s\") \"://\")\n                      secure-url (oc-urls/secure-activity (:slug org-data) secure-uuid)\n                      post-url (oc-urls/entry (:slug org-data) (:board-slug activity-data) (:uuid activity-data))\n                      share-url (str url-protocol ls/web-server\n                                  (if (= @(::url-audience s) :team)\n                                    post-url\n                                    secure-url))]\n                  [:div.shared-url-container.group\n                    [:input.oc-input\n                      {:value share-url\n                       :key share-url\n                       :read-only true\n                       :content-editable false\n                       :on-click #(highlight-url s)\n                       :ref \"activity-share-url-field\"}]])\n                [:button.mlb-reset.copy-btn\n                  {:ref \"activity-share-url-copy-btn\"\n                   :on-click (fn [e]\n                              (utils/event-stop e)\n                              (let [url-input (rum/ref-node s \"activity-share-url-field\")]\n                                (highlight-url s)\n                                (let [copied? (utils/copy-to-clipboard url-input)]\n                                  (notification-actions/show-notification {:title (if copied? \"Share URL copied to clipboard\" \"Error copying the share URL\")\n                                                                           :description (when-not copied? \"Please try copying the URL manually\")\n                                                                           :primary-bt-title \"OK\"\n                                                                           :primary-bt-dismiss true\n                                                                           :primary-bt-inline copied?\n                                                                           :expire 3\n                                                                           :id (if copied? :share-url-copied :share-url-copy-error)}))))}\n                  \"Copy URL\"]]]])\n        (when (= medium :slack)\n          [:div.activity-share-share\n            {:class utils/hide-class}\n            [:div.mediums-box\n              [:div.medium\n                [:div.slack-medium.group\n                  [:div.medium-row.group\n                    [:div.labels\n                      \"Send post to\"]\n                    [:div.fields\n                      {:class (when (:channel-error slack-data) \"error\")\n                       :key (str \"slack-share-channels-dropdown-\" @(::slack-channels-dropdown-key s))}\n                      (slack-channels-dropdown\n                       {:on-change (fn [team channel]\n                                     (reset! (::slack-data s)\n                                      (merge slack-data (merge slack-data\n                                                         {:channel {:channel-id (:id channel)\n                                                                    :channel-name (:name channel)\n                                                                    :slack-org-id (:slack-org-id team)}\n                                                          :channel-error false}))))\n                        :on-intermediate-change (fn [_]\n                                                 (reset! (::slack-data s)\n                                                  (merge slack-data (merge slack-data {:channel-error false}))))\n                        :initial-value \"\"\n                        :disabled false})]]\n                  [:div.medium-row.note.group\n                    [:div.labels\n                      \"Personal note\"]\n                    [:div.fields\n                      [:textarea\n                        {:value (:note slack-data)\n                         :on-change (fn [e]\n                                     (reset! (::slack-data s)\n                                      (merge slack-data {:note (.. e -target -value)})))}]]]]]]\n            [:div.share-footer.group\n              [:div.right-buttons\n                [:button.mlb-reset.mlb-black-link\n                  {:on-click #(close-clicked s)}\n                  \"Cancel\"]\n                (let [send-bt-disabled? (or @(::sharing s)\n                                           (empty? (:channel slack-data)))]\n                  [:button.mlb-reset.share-button\n                    {:on-click (fn [_]\n                                (reset! (::sharing s) true)\n                                (let [slack-share {:medium :slack\n                                                   :note (:note slack-data)\n                                                   :channel (:channel slack-data)}]\n                                  (activity-actions/activity-share activity-data [slack-share])))\n                     :disabled send-bt-disabled?}\n                    (if @(::shared s)\n                      (if (= @(::shared s) :shared)\n                        \"Sent!\"\n                        \"Ops...\")\n                      [(when @(::sharing s)\n                        (small-loading))\n                       \"Send\"])])]]])]]))"]}