{"version":3,"sources":["oc/web/actions/payments.cljs"],"mappings":";AAWA,AAAA,AAAKA;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC,AAA4BH,AAAqBC;AAItD,AAAA,AAAAG,AAAMM,AAAiBC;AAAvB,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAwCO;AAAxC,AAAAH,AAAAJ,AAAA,AAA6CQ;AAA7C,AAAAJ,AAAAJ,AAAA,AAAqDS;AAArD,AACE,AAAMC,AAAc,AAAA,AAAA,AAAA,AAAA,AACEF,AAAQ,AAACG,AAAWJ,AACpB,AAAA,AAACK,AAAEH;;AAFzB,AAIE,AAAA,AAAA,AAACI,AAAyBP,AAASI;;AAEvC,AAAA,AAAMI,AAAcC;AAApB,AACE,AAAMC;AAAN,AACE,AAACC,AAAiBF,AAAc,AAACG,AAAQb,AAAgB,AAACc;;AAD5D;;;AAGF,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAA0BS;AAAhC,AAAA,AAAAP,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAA4CQ;AAA5C,AACE,AAAMpB;AAAN,AACE,AAAMN,AAAc,AAAC2B;AAArB,AACE,AAAM,AAAAC,AAAKH;AAAL,AAAA,AAAAG;AACK,AAAAC,AAAI,AAACC,AAAI9B;AAAT,AAAA,AAAA6B;AAAAA;;AACIH;;;AAFTE;;;AAAN,AAGE,AAAAG,AAAyB,AAAA,AAACC,AAAe,AAAA,AAAQP;AAAjD,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAW1B;AAAX,AACE,AAACD,AAAaC;;AADhB;;;AAHF;;;AAFJ;;;;AADF,AAAA,AAAA,AAAMW;;AAAN;AAAA,AAAA,AAAA,AAAAI,AAAMJ;AAAN,AAAA,AAAAK,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAWA,AAAA,AAAA,AAAAV,AAAMuB;AAAN,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB;;;AAAA,AAAA,AAAA,AAAA,AAAAoB,AAAMD,AAA0BjC,AAAcuC;AAA9C,AAAA,AAAAJ,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAAyDK;AAAzD,AACE,AAAMC,AAAyB,AAAA,AAACT,AAAe,AAAA,AAAQhC;AACjDJ,AAAS,AAACa;AADhB,AAEE,AAAMgC;AAAN,AACE,AAACC,AAA6BD,AAAyBF,AACtD,AAAAI;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAAA,AAAsCC;AAAtC,AAAAnD,AAAAkD,AAAA,AAAa7C;AAAb,AAAAL,AAAAkD,AAAA,AAAoB/C;AAApB,AAAAH,AAAAkD,AAAA,AAAyB9C;AAAzB,AACC,AAACH,AAAgBC,AAASiD;;AAC1B,AAACL,AAAAA,AAAAA,AAAS1C,AAAAA;;;AAJd;;;;AAHJ,AAAA,AAAA,AAAMmC;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAf,AAAAc;AAAAA,AAAA,AAAAb,AAAAa;AAAAE,AAAA,AAAAhB,AAAAc;AAAAA,AAAA,AAAAb,AAAAa;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAA,AAAAA,AAAAa,AAAAC,AAAAF;;;AAAA,AASA,AAAA,AAAA,AAAA1B,AAAMoC;AAAN,AAAA,AAAAnC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAA,AAAAhC;;;AAAA,AAAA,AAAA,AAAA,AAAAiC,AAAMD,AAA0B9C;AAAhC,AAAA,AAAAgD,AAAAD;AAAA,AAAA5B,AAAA6B,AAAA,AAAA,AAAiDR;AAAjD,AACE,AAAMW,AAAyB,AAAA,AAACnB,AAAe,AAAA,AAAQhC;AACjDJ,AAAS,AAACa;AADhB,AAEE,AAAM0C;AAAN,AACE,AAAA,AAACT,AAA6BS,AAC7B,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9D,AAAA,AAAA8D,AAAA,AAAA,AAAA,AAAA,AAAA7D,AAAAC,AAAA4D,AAAAA;AAAAA,AAAsCR;AAAtC,AAAAnD,AAAA2D,AAAA,AAAatD;AAAb,AAAAL,AAAA2D,AAAA,AAAoBxD;AAApB,AAAAH,AAAA2D,AAAA,AAAyBvD;AAAzB,AACC,AAACH,AAAgBC,AAASiD;;AAC1B,AAACL,AAAAA,AAAAA,AAAS1C,AAAAA;;;AAJd;;;;AAHJ,AAAA,AAAA,AAAMgD;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5B,AAAA2B;AAAAA,AAAA,AAAA1B,AAAA0B;AAAA,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAAA,AAAA0B,AAAAD;;;AAAA,AAWA,AAAA,AAAA,AAAAvC,AAAM4C;AAAN,AAAA,AAAA3C,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAAxC;;;AAAA,AAAA,AAAA,AAAA,AAAAyC,AAAMD,AAAoBtD;AAA1B,AAAA,AAAAwD,AAAAD;AAAA,AAAApC,AAAAqC,AAAA,AAAA,AAA2CG;AAA3C,AACE,AAAMC,AAAoB,AAAA/B,AAAI7B;AAAJ,AAAA,AAAA6B;AAAAA;;AAAkB,AAACF;;;AACvCkC,AAAc,AAAA,AAAC7B,AAAe,AAAA,AAAQ4B;AACtCE,AAAY,AAAIC,AAGF,AAAA,AAACC,AAAuB,AAACC,AAAQ,AAACC,AAClCC;AACdC,AAAkB,AAAA,AAAKN,AAAY,AAACO;AACpCC,AAAqB,AAAA,AAAKF,AACH,AAAA,AAAA,AAAMT,AACJ,AAAA,AAAqB,AAAA,AAAKA;AACnDY,AAAoB,AAAA,AAAKH;AAX/B,AAYE,AAACI,AAA4BX,AAAcS,AAAqBC,AAC/D,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnF,AAAA,AAAAmF,AAAA,AAAA,AAAA,AAAA,AAAAlF,AAAAC,AAAAiF,AAAAA;AAAA,AAAAhF,AAAAgF,AAAA,AAAa5E;AAAb,AAAAJ,AAAAgF,AAAA,AAAqB7E;AAArB,AAAAH,AAAAgF,AAAA,AAA0B3E;AAA1B,AACC,AAAMD;AAAN,AACC,AAAM6E,AAAa,AAAC1E,AAAWJ;AAA/B,AACE,AAAA,AAAA,AAACM,AAA6CwE;;AAC9C,AAACC,AAAmCD,AACnC,AAAKE;AAAL,AACC,AAAUA;AAAV;;AAAA,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC,AAK6BC;AALnC,AAMC,AAACC,AAAuBF;;;;AAZhC;;;;;AAfN,AAAA,AAAA,AAAMxB;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAApC,AAAAmC;AAAAA,AAAA,AAAAlC,AAAAkC;AAAA,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAAA,AAAAkC,AAAAD;;;AAAA,AA+BA,AAAA,AAAMwB,AAAyBjF;AAA/B,AACE,AAACkF,AAAK,AAAA,AAAgBlF;;AAExB,AAAA,AAAMmF,AAA0BnF;AAAhC,AACE,AAACsB,AAAM,AAAA,AAAgBtB;;AAIzB;;;;;AAAA,AAAMoF,AAIHpF;AAJH,AAKE,AAAM4D,AAAoB,AAAA/B,AAAI7B;AAAJ,AAAA,AAAA6B;AAAAA;;AACI,AAACF;;;AACzB0D,AAAkB,AAACF,AAAyBvB;AAC5C0B,AAAoB,AAAA,AAASD;AAC7BE,AAAU,AAACrF,AAAE,AAAA,AAAS0D,AAAqB3E;AAC3CuG,AAAe,AAAG,AAAA,AAAG,AAAA,AAAY5B,AAA2B,AAAU,AAAA6B;AACtEC,AAAgB,AAAG,AAAA,AAAG,AAAA,AAAqB9B,AAA2B,AAAU,AAAA6B;AANtF,AAOE,AACKnF;AADL,AAAAsB,AAGKgC;AAHL,AAAA,AAAAhC;AAIK,AACI,AAAA,AAAC1B,AAAE0D,AAIH,AAAK,AAAC+B,AAAKN,AAEN,AAACvD,AAAI,AAAC1C,AAAAA,AAAAA,AAA0BkG,AAAAA;;AAX9C1D;;AAAA;;AAPF","names":["oc.web.actions.payments/default-trial-status","oc.web.actions.payments/default-active-status","oc.web.actions.payments/default-trial-expired-status","oc.web.actions.payments/default-positive-statuses","p__38204","map__38205","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","oc.web.actions.payments/get-payments-cb","org-slug","body","success","status","payments-data","oc.web.lib.json/json->cljs","cljs.core._EQ_","oc.web.dispatcher/dispatch!","oc.web.actions.payments/get-payments","payments-link","oc.web.local-settings/payments-enabled","oc.web.api/get-payments","cljs.core.partial","oc.web.dispatcher.current_org_slug","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","oc.web.actions.payments/maybe-load-payments-data","p__38209","vec__38210","cljs.core.nth","seq38207","G__38208","cljs.core/first","cljs.core/next","self__4723__auto__","org-data","force-refresh?","oc.web.dispatcher.payments_data","and__4115__auto__","or__4126__auto__","cljs.core/not","temp__5735__auto__","oc.web.lib.utils.link_for","oc.web.actions.payments/create-plan-subscription","p__38216","vec__38217","seq38213","G__38214","G__38215","plan-id","callback","create-subscription-link","oc.web.api/update-plan-subscription","p__38220","map__38221","resp","oc.web.actions.payments/delete-plan-subscription","p__38225","vec__38226","seq38223","G__38224","delete-subscription-link","p__38229","map__38230","oc.web.actions.payments/add-payment-method","p__38234","vec__38235","seq38232","G__38233","change-plan-data","fixed-payments-data","checkout-link","base-domain","oc.shared.useragent/mobile-app?","clojure.string.join","cljs.core/butlast","oc.web.dispatcher.expo_deep_link_origin","oc.web.local-settings/web-server-domain","base-redirect-url","oc.web.router/get-token","success-redirect-url","cancel-redirect-url","oc.web.api/get-checkout-session-id","p__38238","map__38239","session-data","oc.web.utils.stripe.redirect_to_checkout","res","alert-data","oc.web.components.ui.alert-modal/hide-alert","oc.web.components.ui.alert-modal/show-alert","oc.web.actions.payments/get-active-subscription","cljs.core/last","oc.web.actions.payments/get-current-subscription","oc.web.actions.payments/show-paywall-alert?","subscription-data","subscription-status","is-trial?","trial-expired?","js/Date","period-expired?","cljs.core/map?"],"sourcesContent":["(ns oc.web.actions.payments\n  (:require [oc.web.api :as api]\n            [oc.web.router :as router]\n            [oc.web.dispatcher :as dis]\n            [oc.web.lib.utils :as utils]\n            [oc.shared.useragent :as ua]\n            [oc.web.local-settings :as ls]\n            [oc.web.lib.json :refer (json->cljs)]\n            [oc.web.utils.stripe :as stripe-client]\n            [oc.web.components.ui.alert-modal :as alert-modal]))\n\n(def default-trial-status \"trialing\")\n(def default-active-status \"active\")\n(def default-trial-expired-status \"past_due\")\n(def default-positive-statuses #{default-trial-status default-active-status})\n\n;; Payments data handling\n\n(defn get-payments-cb [org-slug {:keys [body success status]}]\n  (let [payments-data (cond\n                        success (json->cljs body)\n                        (= status 404) :404\n                        :else nil)]\n    (dis/dispatch! [:payments org-slug payments-data])))\n\n(defn get-payments [payments-link]\n  (when ls/payments-enabled\n    (api/get-payments payments-link (partial get-payments-cb (dis/current-org-slug)))))\n\n(defn maybe-load-payments-data [org-data & [force-refresh?]]\n  (when ls/payments-enabled\n    (let [payments-data (dis/payments-data)]\n      (when (and org-data\n                 (or (not payments-data)\n                     force-refresh?))\n        (when-let [payments-link (utils/link-for (:links org-data) \"payments\")]\n          (get-payments payments-link))))))\n\n;; Subscription handling\n\n(defn create-plan-subscription [payments-data plan-id & [callback]]\n  (let [create-subscription-link (utils/link-for (:links payments-data) \"create\")\n        org-slug (dis/current-org-slug)]\n    (when create-subscription-link\n      (api/update-plan-subscription create-subscription-link plan-id\n       (fn [{:keys [status body success] :as resp}]\n        (get-payments-cb org-slug resp)\n        (callback success))))))\n\n(defn delete-plan-subscription [payments-data & [callback]]\n  (let [delete-subscription-link (utils/link-for (:links payments-data) \"delete\")\n        org-slug (dis/current-org-slug)]\n    (when delete-subscription-link\n      (api/update-plan-subscription delete-subscription-link nil\n       (fn [{:keys [status body success] :as resp}]\n        (get-payments-cb org-slug resp)\n        (callback success))))))\n\n;; Checkout\n\n(defn add-payment-method [payments-data & [change-plan-data]]\n  (let [fixed-payments-data (or payments-data (dis/payments-data))\n        checkout-link (utils/link-for (:links fixed-payments-data) \"checkout\")\n        base-domain (if ua/mobile-app?\n                      ;; Get the deep link url but strip out the last slash to avoid\n                      ;; a double slash\n                      (clojure.string/join \"\" (butlast (dis/expo-deep-link-origin)))\n                      ls/web-server-domain)\n        base-redirect-url (str base-domain (router/get-token) \"?org-settings=payments&result=\")\n        success-redirect-url (str base-redirect-url \"true\"\n                               (when change-plan-data\n                                 (str \"&update-plan=\" (:id change-plan-data))))\n        cancel-redirect-url (str base-redirect-url \"false\")]\n    (api/get-checkout-session-id checkout-link success-redirect-url cancel-redirect-url\n     (fn [{:keys [success body status]}]\n      (when success\n       (let [session-data (json->cljs body)]\n         (dis/dispatch! [:payments-checkout-session-id session-data])\n         (stripe-client/redirect-to-checkout session-data\n          (fn [res]\n           (when-not res\n             (let [alert-data {:icon \"/img/ML/trash.svg\"\n                               :title \"Oops\"\n                               :message \"An error occurred, please try again.\"\n                               :solid-button-style :red\n                               :solid-button-title \"OK, got it\"\n                               :solid-button-cb alert-modal/hide-alert}]\n              (alert-modal/show-alert alert-data)))))))))))\n\n;; Subscriptions data retrieve\n\n(defn get-active-subscription [payments-data]\n  (last (:subscriptions payments-data)))\n\n(defn get-current-subscription [payments-data]\n  (first (:subscriptions payments-data)))\n\n;; Paywall\n\n(defn show-paywall-alert?\n  \"Given the loaded payments data return true if the UI needs to show the paywall and prevent any publish.\n  Condition to show the paywall, or:\n  - status different than trialing/active\"\n  [payments-data]\n  (let [fixed-payments-data (or payments-data\n                                (dis/payments-data))\n        subscription-data (get-current-subscription fixed-payments-data)\n        subscription-status (:status subscription-data)\n        is-trial? (= (:status fixed-payments-data) default-trial-status)\n        trial-expired? (> (* (:trial-end fixed-payments-data) 1000) (.getDate (js/Date.)))\n        period-expired? (> (* (:current-period-end fixed-payments-data) 1000) (.getDate (js/Date.)))]\n    (and ;; payments service is enabled\n         ls/payments-enabled\n         ;; Do not show paywall until payments data are loaded\n         fixed-payments-data\n         (or ;; the payments data are not available yet\n             (= fixed-payments-data :404)\n             ;; If customer has no subscription yet\n             ;; FIXME: added to fix a race condition where users were seeing the\n             ;; paywall after signup until refresh (Sean on FF with Slack signup)\n             (and (map? subscription-data)\n                  ;; or the org is on a non active plan\n                  (not (default-positive-statuses subscription-status)))))\n    false))"]}