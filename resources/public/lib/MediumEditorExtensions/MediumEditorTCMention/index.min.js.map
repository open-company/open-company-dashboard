{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.min.js","webpack:///webpack/bootstrap c4d4acbc7d7a8ea3e69e","webpack:///./src/index.js","webpack:///external \"MediumEditor\""],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","last","text","length","unwrapForTextNode","el","doc","parentNode","MediumEditor","util","unwrap","currentNode","lastChild","prevNode","previousSibling","nodeType","textContent","removeChild","Object","defineProperty","value","TCMention","LEFT_ARROW_KEYCODE","undefined","_mediumEditor","_mediumEditor2","Extension","extend","name","extraClassName","extraActiveClassName","extraPanelClassName","extraActivePanelClassName","extraTriggerClassNameMap","extraActiveTriggerClassNameMap","tagName","renderPanelContent","destroyPanelContent","activeTriggerList","triggerClassNameMap","#","@","activeTriggerClassNameMap","hideOnBlurDelay","init","initMentionPanel","attachEventHandlers","destroy","detachEventHandlers","destroyMentionPanel","document","createElement","classList","add","getEditorOption","appendChild","mentionPanel","_this","unsubscribeCallbacks","subscribeCallbackName","eventName","callbackName","boundCallback","bind","subscribe","push","base","unsubscribe","hideOnBlurDelayId","clearTimeout","forEach","handleBlur","_this2","setTimeout","hidePanel","handleFocus","handleKeyup","event","keyCode","getKeyCode","isSpace","SPACE","getWordFromSelection","target","indexOf","trigger","word","showPanel","activeMentionAt","saveSelection","restoreSelection","isArrowTowardsLeft","remove","activeTriggerClassName","extraActiveTriggerClassName","_activeMentionAt","nextSibling","firstChild","siblingNode","textNode","createTextNode","insertBefore","lastEmptyWord","hasLastEmptyWord","trim","substr","selection","select","Math","min","initialDiff","getWordPosition","position","diff","prevText","_MediumEditor$selecti","getSelectionRange","startContainer","startOffset","endContainer","wordStart","wordEnd","slice","triggerClassName","extraTriggerClassName","contains","activatePanel","wrapWordInMentionAt","updatePanelContent","positionPanel","getSelection","rangeCount","range","getRangeAt","cloneRange","nextWordEnd","setStart","setEnd","element","surroundContents","removeAllRanges","addRange","_activeMentionAt$getB","getBoundingClientRect","top","bottom","left","_window","window","pageXOffset","pageYOffset","winHeight","documentElement","clientHeight","innerHeight","horizontalPosition","verticalPosition","style","handleSelectMention","selectedText","details","setAttribute","getFocusedElement","events","updateInput","currentTarget"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"MediumEditor\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"MediumEditor\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"MediumEditor\")) : factory(root[\"MediumEditor\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"MediumEditor\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"MediumEditor\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"MediumEditor\")) : factory(root[\"MediumEditor\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.TCMention = exports.LEFT_ARROW_KEYCODE = undefined;\n\texports.unwrapForTextNode = unwrapForTextNode;\n\t\n\tvar _mediumEditor = __webpack_require__(1);\n\t\n\tvar _mediumEditor2 = _interopRequireDefault(_mediumEditor);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction last(text) {\n\t  return text[text.length - 1];\n\t}\n\t\n\tvar LEFT_ARROW_KEYCODE = exports.LEFT_ARROW_KEYCODE = 37;\n\t\n\tfunction unwrapForTextNode(el, doc) {\n\t  var parentNode = el.parentNode;\n\t  _mediumEditor2.default.util.unwrap(el, doc);\n\t  // Merge textNode\n\t  var currentNode = parentNode.lastChild;\n\t  var prevNode = currentNode.previousSibling;\n\t  while (prevNode) {\n\t    if (currentNode.nodeType === 3 && prevNode.nodeType === 3) {\n\t      prevNode.textContent += currentNode.textContent;\n\t      parentNode.removeChild(currentNode);\n\t    }\n\t    currentNode = prevNode;\n\t    prevNode = currentNode.previousSibling;\n\t  }\n\t}\n\t\n\tvar TCMention = exports.TCMention = _mediumEditor2.default.Extension.extend({\n\t  name: \"mention\",\n\t\n\t  /* @deprecated: use extraPanelClassName. Will remove in next major (3.0.0) release\n\t   * extraClassName: [string]\n\t   *\n\t   * Extra className to be added with the `medium-editor-mention-panel` element.\n\t   */\n\t  extraClassName: \"\",\n\t\n\t  /* @deprecated: use extraActivePanelClassName. Will remove in next major (3.0.0) release\n\t   * extraActiveClassName: [string]\n\t   *\n\t   * Extra active className to be added with the `medium-editor-mention-panel-active` element.\n\t   */\n\t  extraActiveClassName: \"\",\n\t\n\t  /* extraPanelClassName: [string]\n\t   *\n\t   * Extra className to be added with the `medium-editor-mention-panel` element.\n\t   */\n\t  extraPanelClassName: \"\",\n\t\n\t  /* extraActivePanelClassName: [string]\n\t   *\n\t   * Extra active className to be added with the `medium-editor-mention-panel-active` element.\n\t   */\n\t  extraActivePanelClassName: \"\",\n\t\n\t  extraTriggerClassNameMap: {},\n\t\n\t  extraActiveTriggerClassNameMap: {},\n\t\n\t  /* tagName: [string]\n\t   *\n\t   * Element tag name that would indicate that this mention. It will have\n\t   * `medium-editor-mention-at` className applied on it.\n\t   */\n\t  tagName: \"strong\",\n\t\n\t  /* renderPanelContent: [\n\t   *    function (panelEl: dom, currentMentionText: string, selectMentionCallback: function)\n\t   * ]\n\t   *\n\t   * Render function that used to create the content of the panel when panel is show.\n\t   *\n\t   * @params panelEl: DOM element of the panel.\n\t   *\n\t   * @params currentMentionText: Often used as query criteria. e.g. @medium\n\t   *\n\t   * @params selectMentionCallback:\n\t   *    callback used in customized panel content.\n\t   *\n\t   *    When called with null, it tells the Mention plugin to close the panel.\n\t   *        e.g. selectMentionCallback(null);\n\t   *\n\t   *    When called with text, it tells the Mention plugin that the text is selected by the user.\n\t   *        e.g. selectMentionCallback(\"@mediumrocks\")\n\t   */\n\t  renderPanelContent: function renderPanelContent() {},\n\t\n\t\n\t  /* destroyPanelContent: [function (panelEl: dom)]\n\t   *\n\t   * Destroy function to remove any contents rendered by renderPanelContent\n\t   *  before panelEl being removed from the document.\n\t   *\n\t   * @params panelEl: DOM element of the panel.\n\t   */\n\t  destroyPanelContent: function destroyPanelContent() {},\n\t\n\t\n\t  activeTriggerList: [\"@\"],\n\t\n\t  triggerClassNameMap: {\n\t    \"#\": \"medium-editor-mention-hash\",\n\t    \"@\": \"medium-editor-mention-at\"\n\t  },\n\t\n\t  activeTriggerClassNameMap: {\n\t    \"#\": \"medium-editor-mention-hash-active\",\n\t    \"@\": \"medium-editor-mention-at-active\"\n\t  },\n\t\n\t  hideOnBlurDelay: 300,\n\t\n\t  init: function init() {\n\t    this.initMentionPanel();\n\t    this.attachEventHandlers();\n\t  },\n\t  destroy: function destroy() {\n\t    this.detachEventHandlers();\n\t    this.destroyMentionPanel();\n\t  },\n\t  initMentionPanel: function initMentionPanel() {\n\t    var el = this.document.createElement(\"div\");\n\t\n\t    el.classList.add(\"medium-editor-mention-panel\");\n\t    if (this.extraPanelClassName || this.extraClassName) {\n\t      el.classList.add(this.extraPanelClassName || this.extraClassName);\n\t    }\n\t\n\t    this.getEditorOption(\"elementsContainer\").appendChild(el);\n\t\n\t    this.mentionPanel = el;\n\t  },\n\t  destroyMentionPanel: function destroyMentionPanel() {\n\t    if (this.mentionPanel) {\n\t      if (this.mentionPanel.parentNode) {\n\t        this.destroyPanelContent(this.mentionPanel);\n\t        this.mentionPanel.parentNode.removeChild(this.mentionPanel);\n\t      }\n\t      delete this.mentionPanel;\n\t    }\n\t  },\n\t  attachEventHandlers: function attachEventHandlers() {\n\t    var _this = this;\n\t\n\t    this.unsubscribeCallbacks = [];\n\t\n\t    var subscribeCallbackName = function subscribeCallbackName(eventName, callbackName) {\n\t      var boundCallback = _this[callbackName].bind(_this);\n\t      _this.subscribe(eventName, boundCallback);\n\t\n\t      _this.unsubscribeCallbacks.push(function () {\n\t        // Bug: this.unsubscribe isn't exist!\n\t        _this.base.unsubscribe(eventName, boundCallback);\n\t      });\n\t    };\n\t\n\t    if (this.hideOnBlurDelay !== null && this.hideOnBlurDelay !== undefined) {\n\t      // for hideOnBlurDelay, the panel should hide after blur event\n\t      subscribeCallbackName(\"blur\", \"handleBlur\");\n\t      // and clear out hide timeout if focus again\n\t      subscribeCallbackName(\"focus\", \"handleFocus\");\n\t    }\n\t    // if the editor changes its content, we have to show or hide the panel\n\t    subscribeCallbackName(\"editableKeyup\", \"handleKeyup\");\n\t  },\n\t  detachEventHandlers: function detachEventHandlers() {\n\t    if (this.hideOnBlurDelayId) {\n\t      clearTimeout(this.hideOnBlurDelayId);\n\t    }\n\t    if (this.unsubscribeCallbacks) {\n\t      this.unsubscribeCallbacks.forEach(function (boundCallback) {\n\t        return boundCallback();\n\t      });\n\t      this.unsubscribeCallbacks = null;\n\t    }\n\t  },\n\t  handleBlur: function handleBlur() {\n\t    var _this2 = this;\n\t\n\t    if (this.hideOnBlurDelay !== null && this.hideOnBlurDelay !== undefined) {\n\t      this.hideOnBlurDelayId = setTimeout(function () {\n\t        _this2.hidePanel(false);\n\t      }, this.hideOnBlurDelay);\n\t    }\n\t  },\n\t  handleFocus: function handleFocus() {\n\t    if (this.hideOnBlurDelayId) {\n\t      clearTimeout(this.hideOnBlurDelayId);\n\t      this.hideOnBlurDelayId = null;\n\t    }\n\t  },\n\t  handleKeyup: function handleKeyup(event) {\n\t    var keyCode = _mediumEditor2.default.util.getKeyCode(event);\n\t    var isSpace = keyCode === _mediumEditor2.default.util.keyCode.SPACE;\n\t    this.getWordFromSelection(event.target, isSpace ? -1 : 0);\n\t\n\t    if (!isSpace && this.activeTriggerList.indexOf(this.trigger) !== -1 && this.word.length > 1) {\n\t      this.showPanel();\n\t    } else {\n\t      this.hidePanel(keyCode === LEFT_ARROW_KEYCODE);\n\t      if (this.activeMentionAt && this.activeMentionAt.parentNode) {\n\t        this.base.saveSelection();\n\t        unwrapForTextNode(this.activeMentionAt, this.document);\n\t        this.base.restoreSelection();\n\t      }\n\t    }\n\t  },\n\t  hidePanel: function hidePanel(isArrowTowardsLeft) {\n\t    this.mentionPanel.classList.remove(\"medium-editor-mention-panel-active\");\n\t    var extraActivePanelClassName = this.extraActivePanelClassName || this.extraActiveClassName;\n\t\n\t    if (extraActivePanelClassName) {\n\t      this.mentionPanel.classList.remove(extraActivePanelClassName);\n\t    }\n\t    if (this.activeMentionAt) {\n\t      this.activeMentionAt.classList.remove(this.activeTriggerClassName);\n\t      if (this.extraActiveTriggerClassName) {\n\t        this.activeMentionAt.classList.remove(this.extraActiveTriggerClassName);\n\t      }\n\t    }\n\t    if (this.activeMentionAt) {\n\t      // http://stackoverflow.com/a/27004526/1458162\n\t      var _activeMentionAt = this.activeMentionAt,\n\t          parentNode = _activeMentionAt.parentNode,\n\t          previousSibling = _activeMentionAt.previousSibling,\n\t          nextSibling = _activeMentionAt.nextSibling,\n\t          firstChild = _activeMentionAt.firstChild;\n\t\n\t      var siblingNode = isArrowTowardsLeft ? previousSibling : nextSibling;\n\t      var textNode = void 0;\n\t      if (!siblingNode) {\n\t        textNode = this.document.createTextNode(\"\");\n\t        parentNode.appendChild(textNode);\n\t      } else if (siblingNode.nodeType !== 3) {\n\t        textNode = this.document.createTextNode(\"\");\n\t        parentNode.insertBefore(textNode, siblingNode);\n\t      } else {\n\t        textNode = siblingNode;\n\t      }\n\t      var lastEmptyWord = last(firstChild.textContent);\n\t      var hasLastEmptyWord = lastEmptyWord.trim().length === 0;\n\t      if (hasLastEmptyWord) {\n\t        var textContent = firstChild.textContent;\n\t\n\t        firstChild.textContent = textContent.substr(0, textContent.length - 1);\n\t        textNode.textContent = \"\" + lastEmptyWord + textNode.textContent;\n\t      } else {\n\t        if (textNode.textContent.length === 0 && firstChild.textContent.length > 1) {\n\t          textNode.textContent = \"\\xA0\";\n\t        }\n\t      }\n\t      if (isArrowTowardsLeft) {\n\t        _mediumEditor2.default.selection.select(this.document, textNode, textNode.length);\n\t      } else {\n\t        _mediumEditor2.default.selection.select(this.document, textNode, Math.min(textNode.length, 1));\n\t      }\n\t      if (firstChild.textContent.length <= 1) {\n\t        // LIKE core#execAction\n\t        this.base.saveSelection();\n\t        unwrapForTextNode(this.activeMentionAt, this.document);\n\t        this.base.restoreSelection();\n\t      }\n\t      //\n\t      this.activeMentionAt = null;\n\t    }\n\t  },\n\t  getWordFromSelection: function getWordFromSelection(target, initialDiff) {\n\t    var _MediumEditor$selecti = _mediumEditor2.default.selection.getSelectionRange(this.document),\n\t        startContainer = _MediumEditor$selecti.startContainer,\n\t        startOffset = _MediumEditor$selecti.startOffset,\n\t        endContainer = _MediumEditor$selecti.endContainer;\n\t\n\t    if (startContainer !== endContainer) {\n\t      return;\n\t    }\n\t    var textContent = startContainer.textContent;\n\t\n\t\n\t    function getWordPosition(position, diff) {\n\t      var prevText = textContent[position - 1];\n\t      if (prevText === null || prevText === undefined) {\n\t        return position;\n\t      } else if (prevText.trim().length === 0 || position <= 0 || textContent.length < position) {\n\t        return position;\n\t      } else {\n\t        return getWordPosition(position + diff, diff);\n\t      }\n\t    }\n\t\n\t    this.wordStart = getWordPosition(startOffset + initialDiff, -1);\n\t    this.wordEnd = getWordPosition(startOffset + initialDiff, 1) - 1;\n\t    this.word = textContent.slice(this.wordStart, this.wordEnd);\n\t    this.trigger = this.word.slice(0, 1);\n\t    this.triggerClassName = this.triggerClassNameMap[this.trigger];\n\t    this.activeTriggerClassName = this.activeTriggerClassNameMap[this.trigger];\n\t    //\n\t    this.extraTriggerClassName = this.extraTriggerClassNameMap[this.trigger];\n\t    this.extraActiveTriggerClassName = this.extraActiveTriggerClassNameMap[this.trigger];\n\t  },\n\t  showPanel: function showPanel() {\n\t    if (!this.mentionPanel.classList.contains(\"medium-editor-mention-panel-active\")) {\n\t      this.activatePanel();\n\t      this.wrapWordInMentionAt();\n\t    }\n\t    this.updatePanelContent();\n\t    this.positionPanel();\n\t  },\n\t  activatePanel: function activatePanel() {\n\t    this.mentionPanel.classList.add(\"medium-editor-mention-panel-active\");\n\t    if (this.extraActivePanelClassName || this.extraActiveClassName) {\n\t      this.mentionPanel.classList.add(this.extraActivePanelClassName || this.extraActiveClassName);\n\t    }\n\t  },\n\t  wrapWordInMentionAt: function wrapWordInMentionAt() {\n\t    var selection = this.document.getSelection();\n\t    if (!selection.rangeCount) {\n\t      return;\n\t    }\n\t    // http://stackoverflow.com/a/6328906/1458162\n\t    var range = selection.getRangeAt(0).cloneRange();\n\t    if (range.startContainer.parentNode.classList.contains(this.triggerClassName)) {\n\t      this.activeMentionAt = range.startContainer.parentNode;\n\t    } else {\n\t      var nextWordEnd = Math.min(this.wordEnd, range.startContainer.textContent.length);\n\t      range.setStart(range.startContainer, this.wordStart);\n\t      range.setEnd(range.startContainer, nextWordEnd);\n\t      // Instead, insert our own version of it.\n\t      // TODO: Not sure why, but using <span> tag doens't work here\n\t      var element = this.document.createElement(this.tagName);\n\t      element.classList.add(this.triggerClassName);\n\t      if (this.extraTriggerClassName) {\n\t        element.classList.add(this.extraTriggerClassName);\n\t      }\n\t      this.activeMentionAt = element;\n\t      //\n\t      range.surroundContents(element);\n\t      selection.removeAllRanges();\n\t      selection.addRange(range);\n\t      //\n\t      _mediumEditor2.default.selection.select(this.document, this.activeMentionAt.firstChild, this.word.length);\n\t    }\n\t    this.activeMentionAt.classList.add(this.activeTriggerClassName);\n\t    if (this.extraActiveTriggerClassName) {\n\t      this.activeMentionAt.classList.add(this.extraActiveTriggerClassName);\n\t    }\n\t  },\n\t  positionPanel: function positionPanel() {\n\t    var _activeMentionAt$getB = this.activeMentionAt.getBoundingClientRect(),\n\t        top = _activeMentionAt$getB.top,\n\t        bottom = _activeMentionAt$getB.bottom,\n\t        left = _activeMentionAt$getB.left;\n\t\n\t    var _window = this.window,\n\t        pageXOffset = _window.pageXOffset,\n\t        pageYOffset = _window.pageYOffset;\n\t\n\t    var winHeight = this.document.documentElement.clientHeight || this.window.innerHeight;\n\t    var horizontalPosition = pageXOffset + left;\n\t    var verticalPosition = bottom > winHeight / 2 ? pageYOffset + top - this.mentionPanel.clientHeight : pageYOffset + bottom - this.mentionPanel.clientHeight;\n\t\n\t    this.mentionPanel.style.top = verticalPosition + \"px\";\n\t    this.mentionPanel.style.left = horizontalPosition + \"px\";\n\t  },\n\t  updatePanelContent: function updatePanelContent() {\n\t    this.renderPanelContent(this.mentionPanel, this.word, this.handleSelectMention.bind(this));\n\t  },\n\t  handleSelectMention: function handleSelectMention(selectedText, details) {\n\t    if (selectedText) {\n\t      var textNode = this.activeMentionAt.firstChild;\n\t      if (details[\"name\"] && details[\"name\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-name\", details[\"name\"]);\n\t      }\n\t      if (details[\"first-name\"] && details[\"first-name\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-first-name\", details[\"first-name\"]);\n\t      }\n\t      if (details[\"last-name\"] && details[\"last-name\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-last-name\", details[\"last-name\"]);\n\t      }\n\t      if (details[\"slack-username\"] && details[\"slack-username\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-slack-username\", details[\"slack-username\"]);\n\t      } else if (details[\"slack-usernames\"] && details[\"slack-usernames\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-slack-username\", details[\"slack-usernames\"][0]);\n\t      }\n\t      if (details[\"user-id\"] && details[\"user-id\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-user-id\", details[\"user-id\"]);\n\t      }\n\t      if (details[\"email\"] && details[\"email\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-email\", details[\"email\"]);\n\t      }\n\t      if (details[\"avatar-url\"] && details[\"avatar-url\"].length > 0) {\n\t        this.activeMentionAt.setAttribute(\"data-avatar-url\", details[\"avatar-url\"]);\n\t      }\n\t      this.activeMentionAt.setAttribute(\"data-found\", \"true\");\n\t      textNode.textContent = selectedText;\n\t      _mediumEditor2.default.selection.select(this.document, textNode, selectedText.length);\n\t      //\n\t      // If one of our contenteditables currently has focus, we should\n\t      // attempt to trigger the 'editableInput' event\n\t      var target = this.base.getFocusedElement();\n\t      if (target) {\n\t        this.base.events.updateInput(target, {\n\t          target: target,\n\t          currentTarget: target\n\t        });\n\t      }\n\t      //\n\t      this.hidePanel(false);\n\t    } else {\n\t      this.hidePanel(false);\n\t    }\n\t  }\n\t});\n\t\n\texports.default = TCMention;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// index.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c4d4acbc7d7a8ea3e69e","import {\n  default as MediumEditor,\n} from \"medium-editor\";\n\nfunction last(text) {\n  return text[text.length - 1];\n}\n\nexport const LEFT_ARROW_KEYCODE = 37;\n\nexport function unwrapForTextNode(el, doc) {\n  const parentNode = el.parentNode;\n  MediumEditor.util.unwrap(el, doc);\n    // Merge textNode\n  let currentNode = parentNode.lastChild;\n  let prevNode = currentNode.previousSibling;\n  while (prevNode) {\n    if (currentNode.nodeType === 3 && prevNode.nodeType === 3) {\n      prevNode.textContent += currentNode.textContent;\n      parentNode.removeChild(currentNode);\n    }\n    currentNode = prevNode;\n    prevNode = currentNode.previousSibling;\n  }\n}\n\nexport const TCMention = MediumEditor.Extension.extend({\n  name: `mention`,\n\n  /* @deprecated: use extraPanelClassName. Will remove in next major (3.0.0) release\n   * extraClassName: [string]\n   *\n   * Extra className to be added with the `medium-editor-mention-panel` element.\n   */\n  extraClassName: ``,\n\n  /* @deprecated: use extraActivePanelClassName. Will remove in next major (3.0.0) release\n   * extraActiveClassName: [string]\n   *\n   * Extra active className to be added with the `medium-editor-mention-panel-active` element.\n   */\n  extraActiveClassName: ``,\n\n  /* extraPanelClassName: [string]\n   *\n   * Extra className to be added with the `medium-editor-mention-panel` element.\n   */\n  extraPanelClassName: ``,\n\n  /* extraActivePanelClassName: [string]\n   *\n   * Extra active className to be added with the `medium-editor-mention-panel-active` element.\n   */\n  extraActivePanelClassName: ``,\n\n  extraTriggerClassNameMap: {},\n\n  extraActiveTriggerClassNameMap: {},\n\n  /* tagName: [string]\n   *\n   * Element tag name that would indicate that this mention. It will have\n   * `medium-editor-mention-at` className applied on it.\n   */\n  tagName: `strong`,\n\n  /* renderPanelContent: [\n   *    function (panelEl: dom, currentMentionText: string, selectMentionCallback: function)\n   * ]\n   *\n   * Render function that used to create the content of the panel when panel is show.\n   *\n   * @params panelEl: DOM element of the panel.\n   *\n   * @params currentMentionText: Often used as query criteria. e.g. @medium\n   *\n   * @params selectMentionCallback:\n   *    callback used in customized panel content.\n   *\n   *    When called with null, it tells the Mention plugin to close the panel.\n   *        e.g. selectMentionCallback(null);\n   *\n   *    When called with text, it tells the Mention plugin that the text is selected by the user.\n   *        e.g. selectMentionCallback(\"@mediumrocks\")\n   */\n  renderPanelContent() {},\n\n  /* destroyPanelContent: [function (panelEl: dom)]\n   *\n   * Destroy function to remove any contents rendered by renderPanelContent\n   *  before panelEl being removed from the document.\n   *\n   * @params panelEl: DOM element of the panel.\n   */\n  destroyPanelContent() {},\n\n  activeTriggerList: [`@`],\n\n  triggerClassNameMap: {\n    \"#\": `medium-editor-mention-hash`,\n    \"@\": `medium-editor-mention-at`,\n  },\n\n  activeTriggerClassNameMap: {\n    \"#\": `medium-editor-mention-hash-active`,\n    \"@\": `medium-editor-mention-at-active`,\n  },\n\n  hideOnBlurDelay: 300,\n\n  init() {\n    this.initMentionPanel();\n    this.attachEventHandlers();\n  },\n\n  destroy() {\n    this.detachEventHandlers();\n    this.destroyMentionPanel();\n  },\n\n  initMentionPanel() {\n    const el = this.document.createElement(`div`);\n\n    el.classList.add(`medium-editor-mention-panel`);\n    if (this.extraPanelClassName || this.extraClassName) {\n      el.classList.add(this.extraPanelClassName || this.extraClassName);\n    }\n\n    this.getEditorOption(`elementsContainer`).appendChild(el);\n\n    this.mentionPanel = el;\n  },\n\n  destroyMentionPanel() {\n    if (this.mentionPanel) {\n      if (this.mentionPanel.parentNode) {\n        this.destroyPanelContent(this.mentionPanel);\n        this.mentionPanel.parentNode.removeChild(this.mentionPanel);\n      }\n      delete this.mentionPanel;\n    }\n  },\n\n  attachEventHandlers() {\n    this.unsubscribeCallbacks = [];\n\n    const subscribeCallbackName = (eventName, callbackName) => {\n      const boundCallback = ::this[callbackName];\n      this.subscribe(eventName, boundCallback);\n\n      this.unsubscribeCallbacks.push(() => {\n        // Bug: this.unsubscribe isn't exist!\n        this.base.unsubscribe(eventName, boundCallback);\n      });\n    };\n\n    if (this.hideOnBlurDelay !== null && this.hideOnBlurDelay !== undefined) {\n      // for hideOnBlurDelay, the panel should hide after blur event\n      subscribeCallbackName(`blur`, `handleBlur`);\n      // and clear out hide timeout if focus again\n      subscribeCallbackName(`focus`, `handleFocus`);\n    }\n    // if the editor changes its content, we have to show or hide the panel\n    subscribeCallbackName(`editableKeyup`, `handleKeyup`);\n  },\n\n  detachEventHandlers() {\n    if (this.hideOnBlurDelayId) {\n      clearTimeout(this.hideOnBlurDelayId);\n    }\n    if (this.unsubscribeCallbacks) {\n      this.unsubscribeCallbacks.forEach(boundCallback => boundCallback());\n      this.unsubscribeCallbacks = null;\n    }\n  },\n\n  handleBlur() {\n    if (this.hideOnBlurDelay !== null && this.hideOnBlurDelay !== undefined) {\n      this.hideOnBlurDelayId = setTimeout(() => {\n        this.hidePanel(false);\n      }, this.hideOnBlurDelay);\n    }\n  },\n\n  handleFocus() {\n    if (this.hideOnBlurDelayId) {\n      clearTimeout(this.hideOnBlurDelayId);\n      this.hideOnBlurDelayId = null;\n    }\n  },\n\n  handleKeyup(event) {\n    const keyCode = MediumEditor.util.getKeyCode(event);\n    const isSpace = keyCode === MediumEditor.util.keyCode.SPACE;\n    this.getWordFromSelection(event.target, isSpace ? -1 : 0);\n\n    if (!isSpace && this.activeTriggerList.indexOf(this.trigger) !== -1 && this.word.length > 1) {\n      this.showPanel();\n    } else {\n      this.hidePanel(keyCode === LEFT_ARROW_KEYCODE);\n      if (this.activeMentionAt && this.activeMentionAt.parentNode) {\n        this.base.saveSelection();\n        unwrapForTextNode(this.activeMentionAt, this.document);\n        this.base.restoreSelection();\n      }\n    }\n  },\n\n  hidePanel(isArrowTowardsLeft) {\n    this.mentionPanel.classList.remove(`medium-editor-mention-panel-active`);\n    const extraActivePanelClassName = this.extraActivePanelClassName || this.extraActiveClassName;\n\n    if (extraActivePanelClassName) {\n      this.mentionPanel.classList.remove(extraActivePanelClassName);\n    }\n    if (this.activeMentionAt) {\n      this.activeMentionAt.classList.remove(this.activeTriggerClassName);\n      if (this.extraActiveTriggerClassName) {\n        this.activeMentionAt.classList.remove(this.extraActiveTriggerClassName);\n      }\n    }\n    if (this.activeMentionAt) {\n      // http://stackoverflow.com/a/27004526/1458162\n      const { parentNode, previousSibling, nextSibling, firstChild } = this.activeMentionAt;\n      const siblingNode = isArrowTowardsLeft ? previousSibling : nextSibling;\n      let textNode;\n      if (!siblingNode) {\n        textNode = this.document.createTextNode(``);\n        parentNode.appendChild(textNode);\n      } else if (siblingNode.nodeType !== 3) {\n        textNode = this.document.createTextNode(``);\n        parentNode.insertBefore(textNode, siblingNode);\n      } else {\n        textNode = siblingNode;\n      }\n      const lastEmptyWord = last(firstChild.textContent);\n      const hasLastEmptyWord = lastEmptyWord.trim().length === 0;\n      if (hasLastEmptyWord) {\n        const { textContent } = firstChild;\n        firstChild.textContent = textContent.substr(0, textContent.length - 1);\n        textNode.textContent = `${lastEmptyWord}${textNode.textContent}`;\n      } else {\n        if (textNode.textContent.length === 0 && firstChild.textContent.length > 1) {\n          textNode.textContent = `\\u00A0`;\n        }\n      }\n      if (isArrowTowardsLeft) {\n        MediumEditor.selection.select(this.document, textNode, textNode.length);\n      } else {\n        MediumEditor.selection.select(this.document, textNode, Math.min(textNode.length, 1));\n      }\n      if (firstChild.textContent.length <= 1) {\n        // LIKE core#execAction\n        this.base.saveSelection();\n        unwrapForTextNode(this.activeMentionAt, this.document);\n        this.base.restoreSelection();\n      }\n      //\n      this.activeMentionAt = null;\n    }\n  },\n\n  getWordFromSelection(target, initialDiff) {\n    const {\n      startContainer,\n      startOffset,\n      endContainer,\n    } = MediumEditor.selection.getSelectionRange(this.document);\n    if (startContainer !== endContainer) {\n      return;\n    }\n    const { textContent } = startContainer;\n\n    function getWordPosition(position, diff) {\n      const prevText = textContent[position - 1];\n      if (prevText === null || prevText === undefined) {\n        return position;\n      } else if (prevText.trim().length === 0 || position <= 0 || textContent.length < position) {\n        return position;\n      } else {\n        return getWordPosition(position + diff, diff);\n      }\n    }\n\n    this.wordStart = getWordPosition(startOffset + initialDiff, -1);\n    this.wordEnd = getWordPosition(startOffset + initialDiff, 1) - 1;\n    this.word = textContent.slice(this.wordStart, this.wordEnd);\n    this.trigger = this.word.slice(0, 1);\n    this.triggerClassName = this.triggerClassNameMap[this.trigger];\n    this.activeTriggerClassName = this.activeTriggerClassNameMap[this.trigger];\n      //\n    this.extraTriggerClassName = this.extraTriggerClassNameMap[this.trigger];\n    this.extraActiveTriggerClassName = this.extraActiveTriggerClassNameMap[this.trigger];\n  },\n\n  showPanel() {\n    if (!this.mentionPanel.classList.contains(`medium-editor-mention-panel-active`)) {\n      this.activatePanel();\n      this.wrapWordInMentionAt();\n    }\n    this.updatePanelContent();\n    this.positionPanel();\n  },\n\n  activatePanel() {\n    this.mentionPanel.classList.add(`medium-editor-mention-panel-active`);\n    if (this.extraActivePanelClassName || this.extraActiveClassName) {\n      this.mentionPanel.classList.add(this.extraActivePanelClassName || this.extraActiveClassName);\n    }\n  },\n\n  wrapWordInMentionAt() {\n    const selection = this.document.getSelection();\n    if (!selection.rangeCount) {\n      return;\n    }\n    // http://stackoverflow.com/a/6328906/1458162\n    const range = selection.getRangeAt(0).cloneRange();\n    if (range.startContainer.parentNode.classList.contains(this.triggerClassName)) {\n      this.activeMentionAt = range.startContainer.parentNode;\n    } else {\n      const nextWordEnd = Math.min(this.wordEnd, range.startContainer.textContent.length);\n      range.setStart(range.startContainer, this.wordStart);\n      range.setEnd(range.startContainer, nextWordEnd);\n      // Instead, insert our own version of it.\n      // TODO: Not sure why, but using <span> tag doens't work here\n      const element = this.document.createElement(this.tagName);\n      element.classList.add(this.triggerClassName);\n      if (this.extraTriggerClassName) {\n        element.classList.add(this.extraTriggerClassName);\n      }\n      this.activeMentionAt = element;\n      //\n      range.surroundContents(element);\n      selection.removeAllRanges();\n      selection.addRange(range);\n      //\n      MediumEditor.selection.select(\n        this.document,\n        this.activeMentionAt.firstChild,\n        this.word.length\n      );\n    }\n    this.activeMentionAt.classList.add(this.activeTriggerClassName);\n    if (this.extraActiveTriggerClassName) {\n      this.activeMentionAt.classList.add(this.extraActiveTriggerClassName);\n    }\n  },\n\n  positionPanel() {\n    const { top, bottom, left } = this.activeMentionAt.getBoundingClientRect();\n    const { pageXOffset, pageYOffset } = this.window;\n    const winHeight = this.document.documentElement.clientHeight || this.window.innerHeight;\n    const horizontalPosition = pageXOffset + left;\n    const verticalPosition = bottom > (winHeight / 2) ?\n                              (pageYOffset + top - this.mentionPanel.clientHeight) :\n                              (pageYOffset + bottom - this.mentionPanel.clientHeight);\n\n    this.mentionPanel.style.top = `${verticalPosition}px`;\n    this.mentionPanel.style.left = `${horizontalPosition}px`;\n  },\n\n  updatePanelContent() {\n    this.renderPanelContent(this.mentionPanel, this.word, ::this.handleSelectMention);\n  },\n\n  handleSelectMention(selectedText, details) {\n    if (selectedText) {\n      const textNode = this.activeMentionAt.firstChild;\n      if (details[`name`] && details[`name`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-name`, details[`name`]);\n      }\n      if (details[`first-name`] && details[`first-name`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-first-name`, details[`first-name`]);\n      }\n      if (details[`last-name`] && details[`last-name`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-last-name`, details[`last-name`]);\n      }\n      if (details[`slack-username`] && details[`slack-username`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-slack-username`, details[`slack-username`]);\n      } else if (details[`slack-usernames`] && details[`slack-usernames`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-slack-username`, details[`slack-usernames`][0]);\n      }\n      if (details[`user-id`] && details[`user-id`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-user-id`, details[`user-id`]);\n      }\n      if (details[`email`] && details[`email`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-email`, details[`email`]);\n      }\n      if (details[`avatar-url`] && details[`avatar-url`].length > 0) {\n        this.activeMentionAt.setAttribute(`data-avatar-url`, details[`avatar-url`]);\n      }\n      this.activeMentionAt.setAttribute(`data-found`, `true`);\n      textNode.textContent = selectedText;\n      MediumEditor.selection.select(this.document, textNode, selectedText.length);\n      //\n      // If one of our contenteditables currently has focus, we should\n      // attempt to trigger the 'editableInput' event\n      const target = this.base.getFocusedElement();\n      if (target) {\n        this.base.events.updateInput(target, {\n          target,\n          currentTarget: target,\n        });\n      }\n      //\n      this.hidePanel(false);\n    } else {\n      this.hidePanel(false);\n    }\n  },\n\n});\n\nexport default TCMention;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"MediumEditor\"\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}